
APH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c6b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010a0  0801c858  0801c858  0002c858  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d8f8  0801d8f8  000315a0  2**0
                  CONTENTS
  4 .ARM          00000008  0801d8f8  0801d8f8  0002d8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d900  0801d900  000315a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d900  0801d900  0002d900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d904  0801d904  0002d904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000015a0  20000000  0801d908  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b1f8  200015a0  0801eea8  000315a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000c798  0801eea8  0003c798  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000315a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005854d  00000000  00000000  000315d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007ddf  00000000  00000000  00089b1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000038c0  00000000  00000000  00091900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000035e8  00000000  00000000  000951c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f032  00000000  00000000  000987a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032167  00000000  00000000  000b77da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad295  00000000  00000000  000e9941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  00196bd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00010a60  00000000  00000000  00196ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200015a0 	.word	0x200015a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801c840 	.word	0x0801c840

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200015a4 	.word	0x200015a4
 80001dc:	0801c840 	.word	0x0801c840

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <Set_Output>:




void Set_Output(GPIO_DebugPins dp, GPIO_PinState st)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	460a      	mov	r2, r1
 8000f5a:	71fb      	strb	r3, [r7, #7]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(dpArray[dp].PORT, dpArray[dp].PIN, st);
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	4a08      	ldr	r2, [pc, #32]	; (8000f84 <Set_Output+0x34>)
 8000f64:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	4a06      	ldr	r2, [pc, #24]	; (8000f84 <Set_Output+0x34>)
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	4413      	add	r3, r2
 8000f70:	889b      	ldrh	r3, [r3, #4]
 8000f72:	79ba      	ldrb	r2, [r7, #6]
 8000f74:	4619      	mov	r1, r3
 8000f76:	f008 fa75 	bl	8009464 <HAL_GPIO_WritePin>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20001208 	.word	0x20001208

08000f88 <initFastTask>:
/* Private variables ---------------------------------------------------------*/

static osEventFlagsId_t ntFlag = NULL;

void initFastTask(osEventFlagsId_t normTaskEventHandle)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	ntFlag = normTaskEventHandle;
 8000f90:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <initFastTask+0x1c>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20002a74 	.word	0x20002a74

08000fa8 <StartFastTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFastTask */
void StartFastTask(void *argument)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFastTask */
  uint32_t cnt = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
  uint32_t loop = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	613b      	str	r3, [r7, #16]
  uint32_t test = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]

  while (ntFlag == NULL)
 8000fbc:	e002      	b.n	8000fc4 <StartFastTask+0x1c>
  {
	  osDelay(1);
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f00b f988 	bl	800c2d4 <osDelay>
  while (ntFlag == NULL)
 8000fc4:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <StartFastTask+0x98>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0f8      	beq.n	8000fbe <StartFastTask+0x16>
  }
 /* Infinite loop */

  for(;;)
  {
  	Set_Output(OUT_TEST_1, 1);
 8000fcc:	2101      	movs	r1, #1
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f7ff ffbe 	bl	8000f50 <Set_Output>
  	for(loop = 0; loop < 2000; loop++)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	e005      	b.n	8000fe6 <StartFastTask+0x3e>
  	{
  		test = test + 3;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	3303      	adds	r3, #3
 8000fde:	60fb      	str	r3, [r7, #12]
  	for(loop = 0; loop < 2000; loop++)
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000fec:	d3f5      	bcc.n	8000fda <StartFastTask+0x32>
  	}
  	if(test > 3000)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d902      	bls.n	8000ffe <StartFastTask+0x56>
  		test = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	e001      	b.n	8001002 <StartFastTask+0x5a>
  	else
  		test = 7;
 8000ffe:	2307      	movs	r3, #7
 8001000:	60fb      	str	r3, [r7, #12]
  	Set_Output(OUT_TEST_1, 0);
 8001002:	2100      	movs	r1, #0
 8001004:	2000      	movs	r0, #0
 8001006:	f7ff ffa3 	bl	8000f50 <Set_Output>

  	Set_Output(OUT_TEST_2, 1);
 800100a:	2101      	movs	r1, #1
 800100c:	2001      	movs	r0, #1
 800100e:	f7ff ff9f 	bl	8000f50 <Set_Output>
    osDelay(1);
 8001012:	2001      	movs	r0, #1
 8001014:	f00b f95e 	bl	800c2d4 <osDelay>
  	Set_Output(OUT_TEST_2, 0);
 8001018:	2100      	movs	r1, #0
 800101a:	2001      	movs	r0, #1
 800101c:	f7ff ff98 	bl	8000f50 <Set_Output>
    cnt++;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	3301      	adds	r3, #1
 8001024:	617b      	str	r3, [r7, #20]
    if (cnt >= 10)
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	2b09      	cmp	r3, #9
 800102a:	d9cf      	bls.n	8000fcc <StartFastTask+0x24>
    {
    	cnt = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
    	osEventFlagsSet(ntFlag,1);
 8001030:	4b03      	ldr	r3, [pc, #12]	; (8001040 <StartFastTask+0x98>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2101      	movs	r1, #1
 8001036:	4618      	mov	r0, r3
 8001038:	f00b f9cc 	bl	800c3d4 <osEventFlagsSet>
  	Set_Output(OUT_TEST_1, 1);
 800103c:	e7c6      	b.n	8000fcc <StartFastTask+0x24>
 800103e:	bf00      	nop
 8001040:	20002a74 	.word	0x20002a74

08001044 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001048:	f007 fe1e 	bl	8008c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104c:	f000 f86c 	bl	8001128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001050:	f000 f8ea 	bl	8001228 <MX_GPIO_Init>
  MX_CRC_Init();
 8001054:	f000 f8d4 	bl	8001200 <MX_CRC_Init>
  MX_MEMS_Init();
 8001058:	f00a fdce 	bl	800bbf8 <MX_MEMS_Init>
  /* USER CODE BEGIN 2 */
  position_Init();
 800105c:	f00e fdc8 	bl	800fbf0 <position_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001060:	f00b f828 	bl	800c0b4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001064:	4a20      	ldr	r2, [pc, #128]	; (80010e8 <main+0xa4>)
 8001066:	2100      	movs	r1, #0
 8001068:	4820      	ldr	r0, [pc, #128]	; (80010ec <main+0xa8>)
 800106a:	f00b f88d 	bl	800c188 <osThreadNew>
 800106e:	4603      	mov	r3, r0
 8001070:	4a1f      	ldr	r2, [pc, #124]	; (80010f0 <main+0xac>)
 8001072:	6013      	str	r3, [r2, #0]

  /* creation of fastTask */
  fastTaskHandle = osThreadNew(StartFastTask, NULL, &fastTask_attributes);
 8001074:	4a1f      	ldr	r2, [pc, #124]	; (80010f4 <main+0xb0>)
 8001076:	2100      	movs	r1, #0
 8001078:	481f      	ldr	r0, [pc, #124]	; (80010f8 <main+0xb4>)
 800107a:	f00b f885 	bl	800c188 <osThreadNew>
 800107e:	4603      	mov	r3, r0
 8001080:	4a1e      	ldr	r2, [pc, #120]	; (80010fc <main+0xb8>)
 8001082:	6013      	str	r3, [r2, #0]

  /* creation of normalTask */
  normalTaskHandle = osThreadNew(StartNormalTask, NULL, &normalTask_attributes);
 8001084:	4a1e      	ldr	r2, [pc, #120]	; (8001100 <main+0xbc>)
 8001086:	2100      	movs	r1, #0
 8001088:	481e      	ldr	r0, [pc, #120]	; (8001104 <main+0xc0>)
 800108a:	f00b f87d 	bl	800c188 <osThreadNew>
 800108e:	4603      	mov	r3, r0
 8001090:	4a1d      	ldr	r2, [pc, #116]	; (8001108 <main+0xc4>)
 8001092:	6013      	str	r3, [r2, #0]

  /* creation of slowTask */
  slowTaskHandle = osThreadNew(StartSlowTask, NULL, &slowTask_attributes);
 8001094:	4a1d      	ldr	r2, [pc, #116]	; (800110c <main+0xc8>)
 8001096:	2100      	movs	r1, #0
 8001098:	481d      	ldr	r0, [pc, #116]	; (8001110 <main+0xcc>)
 800109a:	f00b f875 	bl	800c188 <osThreadNew>
 800109e:	4603      	mov	r3, r0
 80010a0:	4a1c      	ldr	r2, [pc, #112]	; (8001114 <main+0xd0>)
 80010a2:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of normTaskEvent */
  normTaskEventHandle = osEventFlagsNew(&normTaskEvent_attributes);
 80010a4:	481c      	ldr	r0, [pc, #112]	; (8001118 <main+0xd4>)
 80010a6:	f00b f943 	bl	800c330 <osEventFlagsNew>
 80010aa:	4603      	mov	r3, r0
 80010ac:	4a1b      	ldr	r2, [pc, #108]	; (800111c <main+0xd8>)
 80010ae:	6013      	str	r3, [r2, #0]

  /* creation of slowTaskEvent */
  slowTaskEventHandle = osEventFlagsNew(&slowTaskEvent_attributes);
 80010b0:	481b      	ldr	r0, [pc, #108]	; (8001120 <main+0xdc>)
 80010b2:	f00b f93d 	bl	800c330 <osEventFlagsNew>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4a1a      	ldr	r2, [pc, #104]	; (8001124 <main+0xe0>)
 80010ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  initFastTask(normTaskEventHandle);
 80010bc:	4b17      	ldr	r3, [pc, #92]	; (800111c <main+0xd8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff61 	bl	8000f88 <initFastTask>
  initSlowTask(slowTaskEventHandle);
 80010c6:	4b17      	ldr	r3, [pc, #92]	; (8001124 <main+0xe0>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f97e 	bl	80013cc <initSlowTask>
  initNormalTask(normTaskEventHandle ,slowTaskEventHandle);
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <main+0xd8>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a13      	ldr	r2, [pc, #76]	; (8001124 <main+0xe0>)
 80010d6:	6812      	ldr	r2, [r2, #0]
 80010d8:	4611      	mov	r1, r2
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f924 	bl	8001328 <initNormalTask>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010e0:	f00b f81c 	bl	800c11c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <main+0xa0>
 80010e6:	bf00      	nop
 80010e8:	0801cfb8 	.word	0x0801cfb8
 80010ec:	080012e9 	.word	0x080012e9
 80010f0:	20009454 	.word	0x20009454
 80010f4:	0801cfdc 	.word	0x0801cfdc
 80010f8:	08000fa9 	.word	0x08000fa9
 80010fc:	2000ada0 	.word	0x2000ada0
 8001100:	0801d000 	.word	0x0801d000
 8001104:	08001355 	.word	0x08001355
 8001108:	2000acdc 	.word	0x2000acdc
 800110c:	0801d024 	.word	0x0801d024
 8001110:	080013ed 	.word	0x080013ed
 8001114:	2000ace4 	.word	0x2000ace4
 8001118:	0801d048 	.word	0x0801d048
 800111c:	2000ace0 	.word	0x2000ace0
 8001120:	0801d058 	.word	0x0801d058
 8001124:	2000ada4 	.word	0x2000ada4

08001128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b094      	sub	sp, #80	; 0x50
 800112c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112e:	f107 0320 	add.w	r3, r7, #32
 8001132:	2230      	movs	r2, #48	; 0x30
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f016 f90a 	bl	8017350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800114c:	2300      	movs	r3, #0
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <SystemClock_Config+0xd0>)
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	4a28      	ldr	r2, [pc, #160]	; (80011f8 <SystemClock_Config+0xd0>)
 8001156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115a:	6413      	str	r3, [r2, #64]	; 0x40
 800115c:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <SystemClock_Config+0xd0>)
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001168:	2300      	movs	r3, #0
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	4b23      	ldr	r3, [pc, #140]	; (80011fc <SystemClock_Config+0xd4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001174:	4a21      	ldr	r2, [pc, #132]	; (80011fc <SystemClock_Config+0xd4>)
 8001176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <SystemClock_Config+0xd4>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001188:	2302      	movs	r3, #2
 800118a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800118c:	2301      	movs	r3, #1
 800118e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001190:	2310      	movs	r3, #16
 8001192:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001194:	2302      	movs	r3, #2
 8001196:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001198:	2300      	movs	r3, #0
 800119a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800119c:	2310      	movs	r3, #16
 800119e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011a6:	2304      	movs	r3, #4
 80011a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011aa:	2307      	movs	r3, #7
 80011ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ae:	f107 0320 	add.w	r3, r7, #32
 80011b2:	4618      	mov	r0, r3
 80011b4:	f009 f98e 	bl	800a4d4 <HAL_RCC_OscConfig>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011be:	f000 f8ad 	bl	800131c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c2:	230f      	movs	r3, #15
 80011c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c6:	2302      	movs	r3, #2
 80011c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	2102      	movs	r1, #2
 80011de:	4618      	mov	r0, r3
 80011e0:	f009 fbe8 	bl	800a9b4 <HAL_RCC_ClockConfig>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011ea:	f000 f897 	bl	800131c <Error_Handler>
  }
}
 80011ee:	bf00      	nop
 80011f0:	3750      	adds	r7, #80	; 0x50
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40007000 	.word	0x40007000

08001200 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_CRC_Init+0x20>)
 8001206:	4a07      	ldr	r2, [pc, #28]	; (8001224 <MX_CRC_Init+0x24>)
 8001208:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_CRC_Init+0x20>)
 800120c:	f007 fe60 	bl	8008ed0 <HAL_CRC_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001216:	f000 f881 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20009c78 	.word	0x20009c78
 8001224:	40023000 	.word	0x40023000

08001228 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	; 0x28
 800122c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <MX_GPIO_Init+0xb8>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a26      	ldr	r2, [pc, #152]	; (80012e0 <MX_GPIO_Init+0xb8>)
 8001248:	f043 0304 	orr.w	r3, r3, #4
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <MX_GPIO_Init+0xb8>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	4b20      	ldr	r3, [pc, #128]	; (80012e0 <MX_GPIO_Init+0xb8>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a1f      	ldr	r2, [pc, #124]	; (80012e0 <MX_GPIO_Init+0xb8>)
 8001264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <MX_GPIO_Init+0xb8>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <MX_GPIO_Init+0xb8>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a18      	ldr	r2, [pc, #96]	; (80012e0 <MX_GPIO_Init+0xb8>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <MX_GPIO_Init+0xb8>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <MX_GPIO_Init+0xb8>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a11      	ldr	r2, [pc, #68]	; (80012e0 <MX_GPIO_Init+0xb8>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MX_GPIO_Init+0xb8>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_TEST_1_Pin|OUT_TEST_2_Pin|OUT_TEST_3_Pin|OUT_TEST_4_Pin, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	f44f 7158 	mov.w	r1, #864	; 0x360
 80012b4:	480b      	ldr	r0, [pc, #44]	; (80012e4 <MX_GPIO_Init+0xbc>)
 80012b6:	f008 f8d5 	bl	8009464 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUT_TEST_1_Pin OUT_TEST_2_Pin OUT_TEST_3_Pin OUT_TEST_4_Pin */
  GPIO_InitStruct.Pin = OUT_TEST_1_Pin|OUT_TEST_2_Pin|OUT_TEST_3_Pin|OUT_TEST_4_Pin;
 80012ba:	f44f 7358 	mov.w	r3, #864	; 0x360
 80012be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c0:	2301      	movs	r3, #1
 80012c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2300      	movs	r3, #0
 80012ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	4619      	mov	r1, r3
 80012d2:	4804      	ldr	r0, [pc, #16]	; (80012e4 <MX_GPIO_Init+0xbc>)
 80012d4:	f007 fe46 	bl	8008f64 <HAL_GPIO_Init>

}
 80012d8:	bf00      	nop
 80012da:	3728      	adds	r7, #40	; 0x28
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40020800 	.word	0x40020800

080012e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012f0:	2001      	movs	r0, #1
 80012f2:	f00a ffef 	bl	800c2d4 <osDelay>
 80012f6:	e7fb      	b.n	80012f0 <StartDefaultTask+0x8>

080012f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a04      	ldr	r2, [pc, #16]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d101      	bne.n	800130e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800130a:	f007 fcdf 	bl	8008ccc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40014400 	.word	0x40014400

0800131c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001320:	b672      	cpsid	i
}
 8001322:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001324:	e7fe      	b.n	8001324 <Error_Handler+0x8>
	...

08001328 <initNormalTask>:
static osEventFlagsId_t ntFlag = NULL;
static osEventFlagsId_t stFlag = NULL;


void initNormalTask(osEventFlagsId_t normTaskEventHandle, osEventFlagsId_t slowTaskEventHandle)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
	ntFlag = normTaskEventHandle;
 8001332:	4a06      	ldr	r2, [pc, #24]	; (800134c <initNormalTask+0x24>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6013      	str	r3, [r2, #0]
	stFlag = slowTaskEventHandle;
 8001338:	4a05      	ldr	r2, [pc, #20]	; (8001350 <initNormalTask+0x28>)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	6013      	str	r3, [r2, #0]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20002a78 	.word	0x20002a78
 8001350:	20002a7c 	.word	0x20002a7c

08001354 <StartNormalTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartNormalTask */
void StartNormalTask(void *argument)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	uint32_t cnt;
	uint32_t blink;



    while ((ntFlag == NULL) || (stFlag == NULL))
 800135c:	e002      	b.n	8001364 <StartNormalTask+0x10>
	{
    	osDelay(1);
 800135e:	2001      	movs	r0, #1
 8001360:	f00a ffb8 	bl	800c2d4 <osDelay>
    while ((ntFlag == NULL) || (stFlag == NULL))
 8001364:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <StartNormalTask+0x70>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f8      	beq.n	800135e <StartNormalTask+0xa>
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <StartNormalTask+0x74>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f4      	beq.n	800135e <StartNormalTask+0xa>


  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait (ntFlag,1, 0, 15);
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <StartNormalTask+0x70>)
 8001376:	6818      	ldr	r0, [r3, #0]
 8001378:	230f      	movs	r3, #15
 800137a:	2200      	movs	r2, #0
 800137c:	2101      	movs	r1, #1
 800137e:	f00b f8c5 	bl	800c50c <osEventFlagsWait>
	  osEventFlagsClear(ntFlag,1);
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <StartNormalTask+0x70>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2101      	movs	r1, #1
 8001388:	4618      	mov	r0, r3
 800138a:	f00b f87b 	bl	800c484 <osEventFlagsClear>
	  cnt++;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	3301      	adds	r3, #1
 8001392:	60fb      	str	r3, [r7, #12]
	  blink++;
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	3301      	adds	r3, #1
 8001398:	60bb      	str	r3, [r7, #8]
	  Set_Output(OUT_TEST_3,blink & 1);
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	4619      	mov	r1, r3
 80013a6:	2002      	movs	r0, #2
 80013a8:	f7ff fdd2 	bl	8000f50 <Set_Output>
	  if(cnt >= 10)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2b09      	cmp	r3, #9
 80013b0:	d9e0      	bls.n	8001374 <StartNormalTask+0x20>
	  {
		  cnt = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
		  osEventFlagsSet(stFlag,1);
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <StartNormalTask+0x74>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2101      	movs	r1, #1
 80013bc:	4618      	mov	r0, r3
 80013be:	f00b f809 	bl	800c3d4 <osEventFlagsSet>
	  osEventFlagsWait (ntFlag,1, 0, 15);
 80013c2:	e7d7      	b.n	8001374 <StartNormalTask+0x20>
 80013c4:	20002a78 	.word	0x20002a78
 80013c8:	20002a7c 	.word	0x20002a7c

080013cc <initSlowTask>:
/* Private variables ---------------------------------------------------------*/
static osEventFlagsId_t stFlag = NULL;


void initSlowTask(osEventFlagsId_t slowTaskEventHandle)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	stFlag = slowTaskEventHandle;
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <initSlowTask+0x1c>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20002a80 	.word	0x20002a80

080013ec <StartSlowTask>:

void StartSlowTask(void *argument)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

	uint32_t cnt;
	uint32_t blink;
	//TaskHandle_t stHandle = xTaskGetHandle( "slowTask" );

	while (stFlag == NULL)
 80013f4:	e002      	b.n	80013fc <StartSlowTask+0x10>
    {
	  osDelay(1);
 80013f6:	2001      	movs	r0, #1
 80013f8:	f00a ff6c 	bl	800c2d4 <osDelay>
	while (stFlag == NULL)
 80013fc:	4b19      	ldr	r3, [pc, #100]	; (8001464 <StartSlowTask+0x78>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0f8      	beq.n	80013f6 <StartSlowTask+0xa>


  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait (stFlag,1, 0, 150);
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <StartSlowTask+0x78>)
 8001406:	6818      	ldr	r0, [r3, #0]
 8001408:	2396      	movs	r3, #150	; 0x96
 800140a:	2200      	movs	r2, #0
 800140c:	2101      	movs	r1, #1
 800140e:	f00b f87d 	bl	800c50c <osEventFlagsWait>
	  osEventFlagsClear(stFlag,1);
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <StartSlowTask+0x78>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2101      	movs	r1, #1
 8001418:	4618      	mov	r0, r3
 800141a:	f00b f833 	bl	800c484 <osEventFlagsClear>
	  if(blink & 8)
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <StartSlowTask+0x44>
	  {
		  BSP_LED_On(LED_GREEN);
 8001428:	2000      	movs	r0, #0
 800142a:	f007 fa47 	bl	80088bc <BSP_LED_On>
 800142e:	e002      	b.n	8001436 <StartSlowTask+0x4a>
	  }
	  else
	  {
		  BSP_LED_Off(LED_GREEN);
 8001430:	2000      	movs	r0, #0
 8001432:	f007 fa59 	bl	80088e8 <BSP_LED_Off>
	  }
	  //Set_Output(OUT_TEST_4,blink & 1);
	  cnt++;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	3301      	adds	r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
	  blink++;
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	3301      	adds	r3, #1
 8001440:	60bb      	str	r3, [r7, #8]
	  Set_Output(OUT_TEST_4, 1);
 8001442:	2101      	movs	r1, #1
 8001444:	2003      	movs	r0, #3
 8001446:	f7ff fd83 	bl	8000f50 <Set_Output>
	  PositionProcess();
 800144a:	f00e fbd9 	bl	800fc00 <PositionProcess>
	  Set_Output(OUT_TEST_4, 0);
 800144e:	2100      	movs	r1, #0
 8001450:	2003      	movs	r0, #3
 8001452:	f7ff fd7d 	bl	8000f50 <Set_Output>
	  if(cnt >= 10)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2b09      	cmp	r3, #9
 800145a:	d9d3      	bls.n	8001404 <StartSlowTask+0x18>
	  {
//		  Set_Output(OUT_TEST_4, 1);
////		  printf("\n\n\n\rHallo\n\n\r");
		  cnt= 0;
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
	  osEventFlagsWait (stFlag,1, 0, 150);
 8001460:	e7d0      	b.n	8001404 <StartSlowTask+0x18>
 8001462:	bf00      	nop
 8001464:	20002a80 	.word	0x20002a80

08001468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_MspInit+0x54>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	4a11      	ldr	r2, [pc, #68]	; (80014bc <HAL_MspInit+0x54>)
 8001478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800147c:	6453      	str	r3, [r2, #68]	; 0x44
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <HAL_MspInit+0x54>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	603b      	str	r3, [r7, #0]
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <HAL_MspInit+0x54>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <HAL_MspInit+0x54>)
 8001494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001498:	6413      	str	r3, [r2, #64]	; 0x40
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_MspInit+0x54>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	210f      	movs	r1, #15
 80014aa:	f06f 0001 	mvn.w	r0, #1
 80014ae:	f007 fce5 	bl	8008e7c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800

080014c0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <HAL_CRC_MspInit+0x3c>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d10d      	bne.n	80014ee <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <HAL_CRC_MspInit+0x40>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a09      	ldr	r2, [pc, #36]	; (8001500 <HAL_CRC_MspInit+0x40>)
 80014dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b07      	ldr	r3, [pc, #28]	; (8001500 <HAL_CRC_MspInit+0x40>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80014ee:	bf00      	nop
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40023000 	.word	0x40023000
 8001500:	40023800 	.word	0x40023800

08001504 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08c      	sub	sp, #48	; 0x30
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001514:	2200      	movs	r2, #0
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	2019      	movs	r0, #25
 800151a:	f007 fcaf 	bl	8008e7c <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800151e:	2019      	movs	r0, #25
 8001520:	f007 fcc8 	bl	8008eb4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <HAL_InitTick+0xa0>)
 800152a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152c:	4a1d      	ldr	r2, [pc, #116]	; (80015a4 <HAL_InitTick+0xa0>)
 800152e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001532:	6453      	str	r3, [r2, #68]	; 0x44
 8001534:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <HAL_InitTick+0xa0>)
 8001536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001540:	f107 0210 	add.w	r2, r7, #16
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4611      	mov	r1, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f009 fc2e 	bl	800adac <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001550:	f009 fc18 	bl	800ad84 <HAL_RCC_GetPCLK2Freq>
 8001554:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001558:	4a13      	ldr	r2, [pc, #76]	; (80015a8 <HAL_InitTick+0xa4>)
 800155a:	fba2 2303 	umull	r2, r3, r2, r3
 800155e:	0c9b      	lsrs	r3, r3, #18
 8001560:	3b01      	subs	r3, #1
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <HAL_InitTick+0xa8>)
 8001566:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <HAL_InitTick+0xac>)
 8001568:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <HAL_InitTick+0xa8>)
 800156c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001570:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001572:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <HAL_InitTick+0xa8>)
 8001574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001576:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <HAL_InitTick+0xa8>)
 800157a:	2200      	movs	r2, #0
 800157c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_InitTick+0xa8>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8001584:	4809      	ldr	r0, [pc, #36]	; (80015ac <HAL_InitTick+0xa8>)
 8001586:	f009 fc43 	bl	800ae10 <HAL_TIM_Base_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d104      	bne.n	800159a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8001590:	4806      	ldr	r0, [pc, #24]	; (80015ac <HAL_InitTick+0xa8>)
 8001592:	f009 fc72 	bl	800ae7a <HAL_TIM_Base_Start_IT>
 8001596:	4603      	mov	r3, r0
 8001598:	e000      	b.n	800159c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
}
 800159c:	4618      	mov	r0, r3
 800159e:	3730      	adds	r7, #48	; 0x30
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40023800 	.word	0x40023800
 80015a8:	431bde83 	.word	0x431bde83
 80015ac:	2000bdc8 	.word	0x2000bdc8
 80015b0:	40014400 	.word	0x40014400

080015b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <NMI_Handler+0x4>

080015ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <HardFault_Handler+0x4>

080015c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <MemManage_Handler+0x4>

080015c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <BusFault_Handler+0x4>

080015cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <UsageFault_Handler+0x4>

080015d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80015e4:	4802      	ldr	r0, [pc, #8]	; (80015f0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80015e6:	f009 fc6c 	bl	800aec2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	2000bdc8 	.word	0x2000bdc8

080015f4 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80015fe:	4b13      	ldr	r3, [pc, #76]	; (800164c <BSP_I2C1_Init+0x58>)
 8001600:	4a13      	ldr	r2, [pc, #76]	; (8001650 <BSP_I2C1_Init+0x5c>)
 8001602:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001604:	4b13      	ldr	r3, [pc, #76]	; (8001654 <BSP_I2C1_Init+0x60>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	1c5a      	adds	r2, r3, #1
 800160a:	4912      	ldr	r1, [pc, #72]	; (8001654 <BSP_I2C1_Init+0x60>)
 800160c:	600a      	str	r2, [r1, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d117      	bne.n	8001642 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001612:	480e      	ldr	r0, [pc, #56]	; (800164c <BSP_I2C1_Init+0x58>)
 8001614:	f008 fbe8 	bl	8009de8 <HAL_I2C_GetState>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d111      	bne.n	8001642 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800161e:	480b      	ldr	r0, [pc, #44]	; (800164c <BSP_I2C1_Init+0x58>)
 8001620:	f000 f8e2 	bl	80017e8 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10b      	bne.n	8001642 <BSP_I2C1_Init+0x4e>
	  {
    	/* Init the I2C */
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800162a:	4808      	ldr	r0, [pc, #32]	; (800164c <BSP_I2C1_Init+0x58>)
 800162c:	f000 f8a8 	bl	8001780 <MX_I2C1_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <BSP_I2C1_Init+0x4a>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 8001636:	f06f 0307 	mvn.w	r3, #7
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	e001      	b.n	8001642 <BSP_I2C1_Init+0x4e>
    	}
        else
        {
      	  ret = BSP_ERROR_NONE;
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001642:	687b      	ldr	r3, [r7, #4]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	2000be08 	.word	0x2000be08
 8001650:	40005400 	.word	0x40005400
 8001654:	20002a84 	.word	0x20002a84

08001658 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <BSP_I2C1_DeInit+0x48>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d014      	beq.n	8001694 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <BSP_I2C1_DeInit+0x48>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	3b01      	subs	r3, #1
 8001670:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <BSP_I2C1_DeInit+0x48>)
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <BSP_I2C1_DeInit+0x48>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d10b      	bne.n	8001694 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 800167c:	4809      	ldr	r0, [pc, #36]	; (80016a4 <BSP_I2C1_DeInit+0x4c>)
 800167e:	f000 f8fd 	bl	800187c <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001682:	4808      	ldr	r0, [pc, #32]	; (80016a4 <BSP_I2C1_DeInit+0x4c>)
 8001684:	f008 f84c 	bl	8009720 <HAL_I2C_DeInit>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d002      	beq.n	8001694 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800168e:	f06f 0307 	mvn.w	r3, #7
 8001692:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001694:	687b      	ldr	r3, [r7, #4]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20002a84 	.word	0x20002a84
 80016a4:	2000be08 	.word	0x2000be08

080016a8 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af04      	add	r7, sp, #16
 80016ae:	60ba      	str	r2, [r7, #8]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4603      	mov	r3, r0
 80016b4:	81fb      	strh	r3, [r7, #14]
 80016b6:	460b      	mov	r3, r1
 80016b8:	81bb      	strh	r3, [r7, #12]
 80016ba:	4613      	mov	r3, r2
 80016bc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80016c2:	89ba      	ldrh	r2, [r7, #12]
 80016c4:	89f9      	ldrh	r1, [r7, #14]
 80016c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ca:	9302      	str	r3, [sp, #8]
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	9301      	str	r3, [sp, #4]
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	2301      	movs	r3, #1
 80016d6:	480c      	ldr	r0, [pc, #48]	; (8001708 <BSP_I2C1_WriteReg+0x60>)
 80016d8:	f008 f866 	bl	80097a8 <HAL_I2C_Mem_Write>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00c      	beq.n	80016fc <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80016e2:	4809      	ldr	r0, [pc, #36]	; (8001708 <BSP_I2C1_WriteReg+0x60>)
 80016e4:	f008 fb8e 	bl	8009e04 <HAL_I2C_GetError>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d103      	bne.n	80016f6 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80016ee:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	e002      	b.n	80016fc <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80016f6:	f06f 0303 	mvn.w	r3, #3
 80016fa:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80016fc:	697b      	ldr	r3, [r7, #20]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	2000be08 	.word	0x2000be08

0800170c <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	; 0x28
 8001710:	af04      	add	r7, sp, #16
 8001712:	60ba      	str	r2, [r7, #8]
 8001714:	461a      	mov	r2, r3
 8001716:	4603      	mov	r3, r0
 8001718:	81fb      	strh	r3, [r7, #14]
 800171a:	460b      	mov	r3, r1
 800171c:	81bb      	strh	r3, [r7, #12]
 800171e:	4613      	mov	r3, r2
 8001720:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001726:	89ba      	ldrh	r2, [r7, #12]
 8001728:	89f9      	ldrh	r1, [r7, #14]
 800172a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800172e:	9302      	str	r3, [sp, #8]
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	2301      	movs	r3, #1
 800173a:	480c      	ldr	r0, [pc, #48]	; (800176c <BSP_I2C1_ReadReg+0x60>)
 800173c:	f008 f92e 	bl	800999c <HAL_I2C_Mem_Read>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00c      	beq.n	8001760 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001746:	4809      	ldr	r0, [pc, #36]	; (800176c <BSP_I2C1_ReadReg+0x60>)
 8001748:	f008 fb5c 	bl	8009e04 <HAL_I2C_GetError>
 800174c:	4603      	mov	r3, r0
 800174e:	2b04      	cmp	r3, #4
 8001750:	d103      	bne.n	800175a <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001752:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	e002      	b.n	8001760 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800175a:	f06f 0303 	mvn.w	r3, #3
 800175e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001760:	697b      	ldr	r3, [r7, #20]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	2000be08 	.word	0x2000be08

08001770 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001774:	f007 fabe 	bl	8008cf4 <HAL_GetTick>
 8001778:	4603      	mov	r3, r0
}
 800177a:	4618      	mov	r0, r3
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C1;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a14      	ldr	r2, [pc, #80]	; (80017e0 <MX_I2C1_Init+0x60>)
 8001790:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a13      	ldr	r2, [pc, #76]	; (80017e4 <MX_I2C1_Init+0x64>)
 8001796:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017aa:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f007 fe67 	bl	8009498 <HAL_I2C_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40005400 	.word	0x40005400
 80017e4:	000186a0 	.word	0x000186a0

080017e8 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	; 0x28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f0:	2300      	movs	r3, #0
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	4b1f      	ldr	r3, [pc, #124]	; (8001874 <I2C1_MspInit+0x8c>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	4a1e      	ldr	r2, [pc, #120]	; (8001874 <I2C1_MspInit+0x8c>)
 80017fa:	f043 0302 	orr.w	r3, r3, #2
 80017fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001800:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <I2C1_MspInit+0x8c>)
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 800180c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001812:	2312      	movs	r3, #18
 8001814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001816:	2301      	movs	r3, #1
 8001818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800181e:	2304      	movs	r3, #4
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	4813      	ldr	r0, [pc, #76]	; (8001878 <I2C1_MspInit+0x90>)
 800182a:	f007 fb9b 	bl	8008f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 800182e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001834:	2312      	movs	r3, #18
 8001836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001838:	2301      	movs	r3, #1
 800183a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183c:	2303      	movs	r3, #3
 800183e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001840:	2304      	movs	r3, #4
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	4619      	mov	r1, r3
 800184a:	480b      	ldr	r0, [pc, #44]	; (8001878 <I2C1_MspInit+0x90>)
 800184c:	f007 fb8a 	bl	8008f64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	4b07      	ldr	r3, [pc, #28]	; (8001874 <I2C1_MspInit+0x8c>)
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	4a06      	ldr	r2, [pc, #24]	; (8001874 <I2C1_MspInit+0x8c>)
 800185a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800185e:	6413      	str	r3, [r2, #64]	; 0x40
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <I2C1_MspInit+0x8c>)
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 800186c:	bf00      	nop
 800186e:	3728      	adds	r7, #40	; 0x28
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40023800 	.word	0x40023800
 8001878:	40020400 	.word	0x40020400

0800187c <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <I2C1_MspDeInit+0x30>)
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	4a08      	ldr	r2, [pc, #32]	; (80018ac <I2C1_MspDeInit+0x30>)
 800188a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800188e:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001890:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001894:	4806      	ldr	r0, [pc, #24]	; (80018b0 <I2C1_MspDeInit+0x34>)
 8001896:	f007 fce9 	bl	800926c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800189a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800189e:	4804      	ldr	r0, [pc, #16]	; (80018b0 <I2C1_MspDeInit+0x34>)
 80018a0:	f007 fce4 	bl	800926c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020400 	.word	0x40020400

080018b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
	return 1;
 80018b8:	2301      	movs	r3, #1
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <_kill>:

int _kill(int pid, int sig)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018ce:	f015 fd07 	bl	80172e0 <__errno>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2216      	movs	r2, #22
 80018d6:	601a      	str	r2, [r3, #0]
	return -1;
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_exit>:

void _exit (int status)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018ec:	f04f 31ff 	mov.w	r1, #4294967295
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ffe7 	bl	80018c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018f6:	e7fe      	b.n	80018f6 <_exit+0x12>

080018f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	e00a      	b.n	8001920 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800190a:	f3af 8000 	nop.w
 800190e:	4601      	mov	r1, r0
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	60ba      	str	r2, [r7, #8]
 8001916:	b2ca      	uxtb	r2, r1
 8001918:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	3301      	adds	r3, #1
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	429a      	cmp	r2, r3
 8001926:	dbf0      	blt.n	800190a <_read+0x12>
	}

return len;
 8001928:	687b      	ldr	r3, [r7, #4]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b086      	sub	sp, #24
 8001936:	af00      	add	r7, sp, #0
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	e009      	b.n	8001958 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	60ba      	str	r2, [r7, #8]
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f007 f93b 	bl	8008bc8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	3301      	adds	r3, #1
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	429a      	cmp	r2, r3
 800195e:	dbf1      	blt.n	8001944 <_write+0x12>
	}
	return len;
 8001960:	687b      	ldr	r3, [r7, #4]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <_close>:

int _close(int file)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
	return -1;
 8001972:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
 800198a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001992:	605a      	str	r2, [r3, #4]
	return 0;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <_isatty>:

int _isatty(int file)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
	return 1;
 80019aa:	2301      	movs	r3, #1
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
	return 0;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019dc:	4a14      	ldr	r2, [pc, #80]	; (8001a30 <_sbrk+0x5c>)
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <_sbrk+0x60>)
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e8:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <_sbrk+0x64>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d102      	bne.n	80019f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f0:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <_sbrk+0x64>)
 80019f2:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <_sbrk+0x68>)
 80019f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <_sbrk+0x64>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d207      	bcs.n	8001a14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a04:	f015 fc6c 	bl	80172e0 <__errno>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a12:	e009      	b.n	8001a28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <_sbrk+0x64>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a1a:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <_sbrk+0x64>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <_sbrk+0x64>)
 8001a24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a26:	68fb      	ldr	r3, [r7, #12]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20018000 	.word	0x20018000
 8001a34:	00000400 	.word	0x00000400
 8001a38:	20002a88 	.word	0x20002a88
 8001a3c:	2000c798 	.word	0x2000c798

08001a40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <SystemInit+0x28>)
 8001a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a4a:	4a07      	ldr	r2, [pc, #28]	; (8001a68 <SystemInit+0x28>)
 8001a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <SystemInit+0x28>)
 8001a56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a5a:	609a      	str	r2, [r3, #8]
#endif
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aa4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a72:	e003      	b.n	8001a7c <LoopCopyDataInit>

08001a74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a7a:	3104      	adds	r1, #4

08001a7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a7c:	480b      	ldr	r0, [pc, #44]	; (8001aac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a84:	d3f6      	bcc.n	8001a74 <CopyDataInit>
  ldr  r2, =_sbss
 8001a86:	4a0b      	ldr	r2, [pc, #44]	; (8001ab4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a88:	e002      	b.n	8001a90 <LoopFillZerobss>

08001a8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a8c:	f842 3b04 	str.w	r3, [r2], #4

08001a90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a94:	d3f9      	bcc.n	8001a8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a96:	f7ff ffd3 	bl	8001a40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a9a:	f015 fc27 	bl	80172ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a9e:	f7ff fad1 	bl	8001044 <main>
  bx  lr    
 8001aa2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001aa4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001aa8:	0801d908 	.word	0x0801d908
  ldr  r0, =_sdata
 8001aac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ab0:	200015a0 	.word	0x200015a0
  ldr  r2, =_sbss
 8001ab4:	200015a0 	.word	0x200015a0
  ldr  r3, = _ebss
 8001ab8:	2000c798 	.word	0x2000c798

08001abc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001abc:	e7fe      	b.n	8001abc <ADC_IRQHandler>
	...

08001ac0 <HTS221_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d103      	bne.n	8001ad8 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8001ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	e030      	b.n	8001b3a <HTS221_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	7b1a      	ldrb	r2, [r3, #12]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	691a      	ldr	r2, [r3, #16]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	695a      	ldr	r2, [r3, #20]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	699a      	ldr	r2, [r3, #24]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a0c      	ldr	r2, [pc, #48]	; (8001b44 <HTS221_RegisterBusIO+0x84>)
 8001b14:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <HTS221_RegisterBusIO+0x88>)
 8001b1a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d004      	beq.n	8001b34 <HTS221_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4798      	blx	r3
 8001b30:	60f8      	str	r0, [r7, #12]
 8001b32:	e002      	b.n	8001b3a <HTS221_RegisterBusIO+0x7a>
    }
    else
    {
      ret = HTS221_ERROR;
 8001b34:	f04f 33ff 	mov.w	r3, #4294967295
 8001b38:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	08002177 	.word	0x08002177
 8001b48:	080021d9 	.word	0x080021d9

08001b4c <HTS221_Init>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d108      	bne.n	8001b70 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 faa4 	bl	80020ac <HTS221_Initialize>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d002      	beq.n	8001b70 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6e:	e004      	b.n	8001b7a <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HTS221_DeInit>:
 * @brief  Deinitialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d111      	bne.n	8001bb8 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f878 	bl	8001c8a <HTS221_HUM_Disable>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d002      	beq.n	8001ba6 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8001ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba4:	e00d      	b.n	8001bc2 <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f95f 	bl	8001e6a <HTS221_TEMP_Disable>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb6:	e004      	b.n	8001bc2 <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HTS221_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	331c      	adds	r3, #28
 8001bd8:	6839      	ldr	r1, [r7, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 fc28 	bl	8002430 <hts221_device_id_get>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d002      	beq.n	8001bec <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8001be6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bea:	e000      	b.n	8001bee <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <HTS221_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to HTS221 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2201      	movs	r2, #1
 8001c06:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	2201      	movs	r2, #1
 8001c12:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	2200      	movs	r2, #0
 8001c18:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	4a07      	ldr	r2, [pc, #28]	; (8001c3c <HTS221_GetCapabilities+0x44>)
 8001c1e:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	4a06      	ldr	r2, [pc, #24]	; (8001c3c <HTS221_GetCapabilities+0x44>)
 8001c24:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	41480000 	.word	0x41480000

08001c40 <HTS221_HUM_Enable>:
 * @brief  Enable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d101      	bne.n	8001c56 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e015      	b.n	8001c82 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10b      	bne.n	8001c78 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	331c      	adds	r3, #28
 8001c64:	2101      	movs	r1, #1
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 fbf3 	bl	8002452 <hts221_power_on_set>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d002      	beq.n	8001c78 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
 8001c76:	e004      	b.n	8001c82 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HTS221_HUM_Disable>:
 * @brief  Disable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	e015      	b.n	8001ccc <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10b      	bne.n	8001cc2 <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	331c      	adds	r3, #28
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 fbce 	bl	8002452 <hts221_power_on_set>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d002      	beq.n	8001cc2 <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8001cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc0:	e004      	b.n	8001ccc <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HTS221_HUM_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001cde:	6839      	ldr	r1, [r7, #0]
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f96f 	bl	8001fc4 <HTS221_GetOutputDataRate>
 8001ce6:	4603      	mov	r3, r0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HTS221_HUM_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001cfc:	ed97 0a00 	vldr	s0, [r7]
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f9a3 	bl	800204c <HTS221_SetOutputDataRate>
 8001d06:	4603      	mov	r3, r0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HTS221_HUM_GetHumidity>:
 * @param  pObj the device pObj
 * @param  Value pointer where the humidity value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	331c      	adds	r3, #28
 8001d1e:	f107 020c 	add.w	r2, r7, #12
 8001d22:	4611      	mov	r1, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f000 fc58 	bl	80025da <hts221_hum_adc_point_0_get>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d002      	beq.n	8001d36 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8001d30:	f04f 33ff 	mov.w	r3, #4294967295
 8001d34:	e06b      	b.n	8001e0e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f103 021c 	add.w	r2, r3, #28
 8001d3c:	f107 030c 	add.w	r3, r7, #12
 8001d40:	3304      	adds	r3, #4
 8001d42:	4619      	mov	r1, r3
 8001d44:	4610      	mov	r0, r2
 8001d46:	f000 fbaa 	bl	800249e <hts221_hum_rh_point_0_get>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d002      	beq.n	8001d56 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8001d50:	f04f 33ff 	mov.w	r3, #4294967295
 8001d54:	e05b      	b.n	8001e0e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f103 021c 	add.w	r2, r3, #28
 8001d5c:	f107 030c 	add.w	r3, r7, #12
 8001d60:	3308      	adds	r3, #8
 8001d62:	4619      	mov	r1, r3
 8001d64:	4610      	mov	r0, r2
 8001d66:	f000 fc5c 	bl	8002622 <hts221_hum_adc_point_1_get>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8001d70:	f04f 33ff 	mov.w	r3, #4294967295
 8001d74:	e04b      	b.n	8001e0e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f103 021c 	add.w	r2, r3, #28
 8001d7c:	f107 030c 	add.w	r3, r7, #12
 8001d80:	330c      	adds	r3, #12
 8001d82:	4619      	mov	r1, r3
 8001d84:	4610      	mov	r0, r2
 8001d86:	f000 fba8 	bl	80024da <hts221_hum_rh_point_1_get>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d002      	beq.n	8001d96 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8001d90:	f04f 33ff 	mov.w	r3, #4294967295
 8001d94:	e03b      	b.n	8001e0e <HTS221_HUM_GetHumidity+0xfe>
 8001d96:	2300      	movs	r3, #0
 8001d98:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	331c      	adds	r3, #28
 8001d9e:	f107 021c 	add.w	r2, r7, #28
 8001da2:	4611      	mov	r1, r2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f000 fafd 	bl	80023a4 <hts221_humidity_raw_get>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d002      	beq.n	8001db6 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8001db0:	f04f 33ff 	mov.w	r3, #4294967295
 8001db4:	e02b      	b.n	8001e0e <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8001db6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001dba:	ee07 3a90 	vmov	s15, r3
 8001dbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc2:	f107 030c 	add.w	r3, r7, #12
 8001dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f99a 	bl	8002104 <Linear_Interpolation>
 8001dd0:	eef0 7a40 	vmov.f32	s15, s0
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	edd3 7a00 	vldr	s15, [r3]
 8001de0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de8:	d503      	bpl.n	8001df2 <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	edd3 7a00 	vldr	s15, [r3]
 8001df8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001e18 <HTS221_HUM_GetHumidity+0x108>
 8001dfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e04:	dd02      	ble.n	8001e0c <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	4a04      	ldr	r2, [pc, #16]	; (8001e1c <HTS221_HUM_GetHumidity+0x10c>)
 8001e0a:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3720      	adds	r7, #32
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	42c80000 	.word	0x42c80000
 8001e1c:	42c80000 	.word	0x42c80000

08001e20 <HTS221_TEMP_Enable>:
 * @brief  Enable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d101      	bne.n	8001e36 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	e015      	b.n	8001e62 <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10b      	bne.n	8001e58 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	331c      	adds	r3, #28
 8001e44:	2101      	movs	r1, #1
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 fb03 	bl	8002452 <hts221_power_on_set>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d002      	beq.n	8001e58 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8001e52:	f04f 33ff 	mov.w	r3, #4294967295
 8001e56:	e004      	b.n	8001e62 <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HTS221_TEMP_Disable>:
 * @brief  Disable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e015      	b.n	8001eac <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10b      	bne.n	8001ea2 <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	331c      	adds	r3, #28
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4618      	mov	r0, r3
 8001e92:	f000 fade 	bl	8002452 <hts221_power_on_set>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d002      	beq.n	8001ea2 <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8001e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea0:	e004      	b.n	8001eac <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HTS221_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001ebe:	6839      	ldr	r1, [r7, #0]
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f87f 	bl	8001fc4 <HTS221_GetOutputDataRate>
 8001ec6:	4603      	mov	r3, r0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HTS221_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001edc:	ed97 0a00 	vldr	s0, [r7]
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f8b3 	bl	800204c <HTS221_SetOutputDataRate>
 8001ee6:	4603      	mov	r3, r0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HTS221_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	331c      	adds	r3, #28
 8001efe:	f107 020c 	add.w	r2, r7, #12
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f000 fbb0 	bl	800266a <hts221_temp_adc_point_0_get>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8001f10:	f04f 33ff 	mov.w	r3, #4294967295
 8001f14:	e052      	b.n	8001fbc <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f103 021c 	add.w	r2, r3, #28
 8001f1c:	f107 030c 	add.w	r3, r7, #12
 8001f20:	3304      	adds	r3, #4
 8001f22:	4619      	mov	r1, r3
 8001f24:	4610      	mov	r0, r2
 8001f26:	f000 faf6 	bl	8002516 <hts221_temp_deg_point_0_get>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d002      	beq.n	8001f36 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8001f30:	f04f 33ff 	mov.w	r3, #4294967295
 8001f34:	e042      	b.n	8001fbc <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f103 021c 	add.w	r2, r3, #28
 8001f3c:	f107 030c 	add.w	r3, r7, #12
 8001f40:	3308      	adds	r3, #8
 8001f42:	4619      	mov	r1, r3
 8001f44:	4610      	mov	r0, r2
 8001f46:	f000 fbb4 	bl	80026b2 <hts221_temp_adc_point_1_get>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d002      	beq.n	8001f56 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8001f50:	f04f 33ff 	mov.w	r3, #4294967295
 8001f54:	e032      	b.n	8001fbc <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f103 021c 	add.w	r2, r3, #28
 8001f5c:	f107 030c 	add.w	r3, r7, #12
 8001f60:	330c      	adds	r3, #12
 8001f62:	4619      	mov	r1, r3
 8001f64:	4610      	mov	r0, r2
 8001f66:	f000 fb07 	bl	8002578 <hts221_temp_deg_point_1_get>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d002      	beq.n	8001f76 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8001f70:	f04f 33ff 	mov.w	r3, #4294967295
 8001f74:	e022      	b.n	8001fbc <HTS221_TEMP_GetTemperature+0xcc>
 8001f76:	2300      	movs	r3, #0
 8001f78:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	331c      	adds	r3, #28
 8001f7e:	f107 021c 	add.w	r2, r7, #28
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f000 fa30 	bl	80023ea <hts221_temperature_raw_get>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8001f90:	f04f 33ff 	mov.w	r3, #4294967295
 8001f94:	e012      	b.n	8001fbc <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8001f96:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f9a:	ee07 3a90 	vmov	s15, r3
 8001f9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fa2:	f107 030c 	add.w	r3, r7, #12
 8001fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 f8aa 	bl	8002104 <Linear_Interpolation>
 8001fb0:	eef0 7a40 	vmov.f32	s15, s0
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3720      	adds	r7, #32
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HTS221_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	331c      	adds	r3, #28
 8001fd6:	f107 020b 	add.w	r2, r7, #11
 8001fda:	4611      	mov	r1, r2
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f000 f983 	bl	80022e8 <hts221_data_rate_get>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d002      	beq.n	8001fee <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8001fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fec:	e025      	b.n	800203a <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 8001fee:	7afb      	ldrb	r3, [r7, #11]
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d81d      	bhi.n	8002030 <HTS221_GetOutputDataRate+0x6c>
 8001ff4:	a201      	add	r2, pc, #4	; (adr r2, 8001ffc <HTS221_GetOutputDataRate+0x38>)
 8001ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffa:	bf00      	nop
 8001ffc:	0800200d 	.word	0x0800200d
 8002000:	08002017 	.word	0x08002017
 8002004:	08002021 	.word	0x08002021
 8002008:	08002029 	.word	0x08002029
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
      break;
 8002014:	e010      	b.n	8002038 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800201c:	601a      	str	r2, [r3, #0]
      break;
 800201e:	e00b      	b.n	8002038 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	4a08      	ldr	r2, [pc, #32]	; (8002044 <HTS221_GetOutputDataRate+0x80>)
 8002024:	601a      	str	r2, [r3, #0]
      break;
 8002026:	e007      	b.n	8002038 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	4a07      	ldr	r2, [pc, #28]	; (8002048 <HTS221_GetOutputDataRate+0x84>)
 800202c:	601a      	str	r2, [r3, #0]
      break;
 800202e:	e003      	b.n	8002038 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8002030:	f04f 33ff 	mov.w	r3, #4294967295
 8002034:	60fb      	str	r3, [r7, #12]
      break;
 8002036:	bf00      	nop
  }

  return ret;
 8002038:	68fb      	ldr	r3, [r7, #12]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40e00000 	.word	0x40e00000
 8002048:	41480000 	.word	0x41480000

0800204c <HTS221_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8002058:	edd7 7a00 	vldr	s15, [r7]
 800205c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002060:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002068:	d801      	bhi.n	800206e <HTS221_SetOutputDataRate+0x22>
 800206a:	2301      	movs	r3, #1
 800206c:	e00b      	b.n	8002086 <HTS221_SetOutputDataRate+0x3a>
 800206e:	edd7 7a00 	vldr	s15, [r7]
 8002072:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8002076:	eef4 7ac7 	vcmpe.f32	s15, s14
 800207a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207e:	d801      	bhi.n	8002084 <HTS221_SetOutputDataRate+0x38>
 8002080:	2302      	movs	r3, #2
 8002082:	e000      	b.n	8002086 <HTS221_SetOutputDataRate+0x3a>
 8002084:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8002086:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	331c      	adds	r3, #28
 800208c:	7bfa      	ldrb	r2, [r7, #15]
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f000 f902 	bl	800229a <hts221_data_rate_set>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d002      	beq.n	80020a2 <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 800209c:	f04f 33ff 	mov.w	r3, #4294967295
 80020a0:	e000      	b.n	80020a4 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HTS221_Initialize>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	331c      	adds	r3, #28
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 f9c9 	bl	8002452 <hts221_power_on_set>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 80020c6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ca:	e017      	b.n	80020fc <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	331c      	adds	r3, #28
 80020d0:	2101      	movs	r1, #1
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 f940 	bl	8002358 <hts221_block_data_update_set>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 80020de:	f04f 33ff 	mov.w	r3, #4294967295
 80020e2:	e00b      	b.n	80020fc <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 80020e4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff ffaf 	bl	800204c <HTS221_SetOutputDataRate>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d002      	beq.n	80020fa <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 80020f4:	f04f 33ff 	mov.w	r3, #4294967295
 80020f8:	e000      	b.n	80020fc <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <Linear_Interpolation>:
 * @param  Lin the line
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	ed93 7a03 	vldr	s14, [r3, #12]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	edd3 7a01 	vldr	s15, [r3, #4]
 800211c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002120:	edd7 7a00 	vldr	s15, [r7]
 8002124:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	edd3 6a02 	vldr	s13, [r3, #8]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	edd3 7a01 	vldr	s15, [r3, #4]
 8002134:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	ed93 6a00 	vldr	s12, [r3]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	edd3 7a03 	vldr	s15, [r3, #12]
 8002144:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002148:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800214c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	edd3 6a02 	vldr	s13, [r3, #8]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	edd3 7a00 	vldr	s15, [r3]
 800215c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002160:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002164:	eef0 7a66 	vmov.f32	s15, s13
}
 8002168:	eeb0 0a67 	vmov.f32	s0, s15
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002176:	b590      	push	{r4, r7, lr}
 8002178:	b087      	sub	sp, #28
 800217a:	af00      	add	r7, sp, #0
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	607a      	str	r2, [r7, #4]
 8002180:	461a      	mov	r2, r3
 8002182:	460b      	mov	r3, r1
 8002184:	72fb      	strb	r3, [r7, #11]
 8002186:	4613      	mov	r3, r2
 8002188:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10e      	bne.n	80021b4 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	695c      	ldr	r4, [r3, #20]
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	7b1b      	ldrb	r3, [r3, #12]
 800219e:	b298      	uxth	r0, r3
 80021a0:	7afb      	ldrb	r3, [r7, #11]
 80021a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	b299      	uxth	r1, r3
 80021aa:	893b      	ldrh	r3, [r7, #8]
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	47a0      	blx	r4
 80021b0:	4603      	mov	r3, r0
 80021b2:	e00d      	b.n	80021d0 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	695c      	ldr	r4, [r3, #20]
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	7b1b      	ldrb	r3, [r3, #12]
 80021bc:	b298      	uxth	r0, r3
 80021be:	7afb      	ldrb	r3, [r7, #11]
 80021c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	b299      	uxth	r1, r3
 80021c8:	893b      	ldrh	r3, [r7, #8]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	47a0      	blx	r4
 80021ce:	4603      	mov	r3, r0
  }
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	371c      	adds	r7, #28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd90      	pop	{r4, r7, pc}

080021d8 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80021d8:	b590      	push	{r4, r7, lr}
 80021da:	b087      	sub	sp, #28
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	607a      	str	r2, [r7, #4]
 80021e2:	461a      	mov	r2, r3
 80021e4:	460b      	mov	r3, r1
 80021e6:	72fb      	strb	r3, [r7, #11]
 80021e8:	4613      	mov	r3, r2
 80021ea:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10e      	bne.n	8002216 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	691c      	ldr	r4, [r3, #16]
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	7b1b      	ldrb	r3, [r3, #12]
 8002200:	b298      	uxth	r0, r3
 8002202:	7afb      	ldrb	r3, [r7, #11]
 8002204:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002208:	b2db      	uxtb	r3, r3
 800220a:	b299      	uxth	r1, r3
 800220c:	893b      	ldrh	r3, [r7, #8]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	47a0      	blx	r4
 8002212:	4603      	mov	r3, r0
 8002214:	e00d      	b.n	8002232 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	691c      	ldr	r4, [r3, #16]
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	7b1b      	ldrb	r3, [r3, #12]
 800221e:	b298      	uxth	r0, r3
 8002220:	7afb      	ldrb	r3, [r7, #11]
 8002222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002226:	b2db      	uxtb	r3, r3
 8002228:	b299      	uxth	r1, r3
 800222a:	893b      	ldrh	r3, [r7, #8]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	47a0      	blx	r4
 8002230:	4603      	mov	r3, r0
  }
}
 8002232:	4618      	mov	r0, r3
 8002234:	371c      	adds	r7, #28
 8002236:	46bd      	mov	sp, r7
 8002238:	bd90      	pop	{r4, r7, pc}

0800223a <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                        uint16_t len)
{
 800223a:	b590      	push	{r4, r7, lr}
 800223c:	b087      	sub	sp, #28
 800223e:	af00      	add	r7, sp, #0
 8002240:	60f8      	str	r0, [r7, #12]
 8002242:	607a      	str	r2, [r7, #4]
 8002244:	461a      	mov	r2, r3
 8002246:	460b      	mov	r3, r1
 8002248:	72fb      	strb	r3, [r7, #11]
 800224a:	4613      	mov	r3, r2
 800224c:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	685c      	ldr	r4, [r3, #4]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6898      	ldr	r0, [r3, #8]
 8002256:	893b      	ldrh	r3, [r7, #8]
 8002258:	7af9      	ldrb	r1, [r7, #11]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	47a0      	blx	r4
 800225e:	6178      	str	r0, [r7, #20]
  return ret;
 8002260:	697b      	ldr	r3, [r7, #20]
}
 8002262:	4618      	mov	r0, r3
 8002264:	371c      	adds	r7, #28
 8002266:	46bd      	mov	sp, r7
 8002268:	bd90      	pop	{r4, r7, pc}

0800226a <hts221_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 800226a:	b590      	push	{r4, r7, lr}
 800226c:	b087      	sub	sp, #28
 800226e:	af00      	add	r7, sp, #0
 8002270:	60f8      	str	r0, [r7, #12]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	461a      	mov	r2, r3
 8002276:	460b      	mov	r3, r1
 8002278:	72fb      	strb	r3, [r7, #11]
 800227a:	4613      	mov	r3, r2
 800227c:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681c      	ldr	r4, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6898      	ldr	r0, [r3, #8]
 8002286:	893b      	ldrh	r3, [r7, #8]
 8002288:	7af9      	ldrb	r1, [r7, #11]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	47a0      	blx	r4
 800228e:	6178      	str	r0, [r7, #20]
  return ret;
 8002290:	697b      	ldr	r3, [r7, #20]
}
 8002292:	4618      	mov	r0, r3
 8002294:	371c      	adds	r7, #28
 8002296:	46bd      	mov	sp, r7
 8002298:	bd90      	pop	{r4, r7, pc}

0800229a <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b084      	sub	sp, #16
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	460b      	mov	r3, r1
 80022a4:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80022a6:	f107 0208 	add.w	r2, r7, #8
 80022aa:	2301      	movs	r3, #1
 80022ac:	2120      	movs	r1, #32
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff ffc3 	bl	800223a <hts221_read_reg>
 80022b4:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10f      	bne.n	80022dc <hts221_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 80022bc:	78fb      	ldrb	r3, [r7, #3]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	7a3b      	ldrb	r3, [r7, #8]
 80022c6:	f362 0301 	bfi	r3, r2, #0, #2
 80022ca:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80022cc:	f107 0208 	add.w	r2, r7, #8
 80022d0:	2301      	movs	r3, #1
 80022d2:	2120      	movs	r1, #32
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff ffc8 	bl	800226a <hts221_write_reg>
 80022da:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80022dc:	68fb      	ldr	r3, [r7, #12]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80022f2:	f107 0208 	add.w	r2, r7, #8
 80022f6:	2301      	movs	r3, #1
 80022f8:	2120      	movs	r1, #32
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff ff9d 	bl	800223a <hts221_read_reg>
 8002300:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 8002302:	7a3b      	ldrb	r3, [r7, #8]
 8002304:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b03      	cmp	r3, #3
 800230c:	d81a      	bhi.n	8002344 <hts221_data_rate_get+0x5c>
 800230e:	a201      	add	r2, pc, #4	; (adr r2, 8002314 <hts221_data_rate_get+0x2c>)
 8002310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002314:	08002325 	.word	0x08002325
 8002318:	0800232d 	.word	0x0800232d
 800231c:	08002335 	.word	0x08002335
 8002320:	0800233d 	.word	0x0800233d
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	2200      	movs	r2, #0
 8002328:	701a      	strb	r2, [r3, #0]
      break;
 800232a:	e00f      	b.n	800234c <hts221_data_rate_get+0x64>
    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	2201      	movs	r2, #1
 8002330:	701a      	strb	r2, [r3, #0]
      break;
 8002332:	e00b      	b.n	800234c <hts221_data_rate_get+0x64>
    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	2202      	movs	r2, #2
 8002338:	701a      	strb	r2, [r3, #0]
      break;
 800233a:	e007      	b.n	800234c <hts221_data_rate_get+0x64>
    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	2203      	movs	r2, #3
 8002340:	701a      	strb	r2, [r3, #0]
      break;
 8002342:	e003      	b.n	800234c <hts221_data_rate_get+0x64>
    default:
      *val = HTS221_ODR_ND;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	2204      	movs	r2, #4
 8002348:	701a      	strb	r2, [r3, #0]
      break;
 800234a:	bf00      	nop
  }

  return ret;
 800234c:	68fb      	ldr	r3, [r7, #12]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop

08002358 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8002364:	f107 0208 	add.w	r2, r7, #8
 8002368:	2301      	movs	r3, #1
 800236a:	2120      	movs	r1, #32
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff ff64 	bl	800223a <hts221_read_reg>
 8002372:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10f      	bne.n	800239a <hts221_block_data_update_set+0x42>
    reg.bdu = val;
 800237a:	78fb      	ldrb	r3, [r7, #3]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	b2da      	uxtb	r2, r3
 8002382:	7a3b      	ldrb	r3, [r7, #8]
 8002384:	f362 0382 	bfi	r3, r2, #2, #1
 8002388:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 800238a:	f107 0208 	add.w	r2, r7, #8
 800238e:	2301      	movs	r3, #1
 8002390:	2120      	movs	r1, #32
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff ff69 	bl	800226a <hts221_write_reg>
 8002398:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800239a:	68fb      	ldr	r3, [r7, #12]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 80023ae:	f107 0208 	add.w	r2, r7, #8
 80023b2:	2302      	movs	r3, #2
 80023b4:	2128      	movs	r1, #40	; 0x28
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7ff ff3f 	bl	800223a <hts221_read_reg>
 80023bc:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80023be:	7a7b      	ldrb	r3, [r7, #9]
 80023c0:	b21a      	sxth	r2, r3
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	7a3b      	ldrb	r3, [r7, #8]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	4413      	add	r3, r2
 80023d8:	b29b      	uxth	r3, r3
 80023da:	b21a      	sxth	r2, r3
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	801a      	strh	r2, [r3, #0]

  return ret;
 80023e0:	68fb      	ldr	r3, [r7, #12]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b084      	sub	sp, #16
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 80023f4:	f107 0208 	add.w	r2, r7, #8
 80023f8:	2302      	movs	r3, #2
 80023fa:	212a      	movs	r1, #42	; 0x2a
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7ff ff1c 	bl	800223a <hts221_read_reg>
 8002402:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8002404:	7a7b      	ldrb	r3, [r7, #9]
 8002406:	b21a      	sxth	r2, r3
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002412:	b29b      	uxth	r3, r3
 8002414:	021b      	lsls	r3, r3, #8
 8002416:	b29a      	uxth	r2, r3
 8002418:	7a3b      	ldrb	r3, [r7, #8]
 800241a:	b29b      	uxth	r3, r3
 800241c:	4413      	add	r3, r2
 800241e:	b29b      	uxth	r3, r3
 8002420:	b21a      	sxth	r2, r3
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	801a      	strh	r2, [r3, #0]

  return ret;
 8002426:	68fb      	ldr	r3, [r7, #12]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 800243a:	2301      	movs	r3, #1
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	210f      	movs	r1, #15
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7ff fefa 	bl	800223a <hts221_read_reg>
 8002446:	60f8      	str	r0, [r7, #12]
  return ret;
 8002448:	68fb      	ldr	r3, [r7, #12]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	460b      	mov	r3, r1
 800245c:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 800245e:	f107 0208 	add.w	r2, r7, #8
 8002462:	2301      	movs	r3, #1
 8002464:	2120      	movs	r1, #32
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff fee7 	bl	800223a <hts221_read_reg>
 800246c:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10f      	bne.n	8002494 <hts221_power_on_set+0x42>
    reg.pd = val;
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	b2da      	uxtb	r2, r3
 800247c:	7a3b      	ldrb	r3, [r7, #8]
 800247e:	f362 13c7 	bfi	r3, r2, #7, #1
 8002482:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8002484:	f107 0208 	add.w	r2, r7, #8
 8002488:	2301      	movs	r3, #1
 800248a:	2120      	movs	r1, #32
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff feec 	bl	800226a <hts221_write_reg>
 8002492:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8002494:	68fb      	ldr	r3, [r7, #12]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b084      	sub	sp, #16
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 80024a8:	f107 020b 	add.w	r2, r7, #11
 80024ac:	2301      	movs	r3, #1
 80024ae:	2130      	movs	r1, #48	; 0x30
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff fec2 	bl	800223a <hts221_read_reg>
 80024b6:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80024b8:	7afb      	ldrb	r3, [r7, #11]
 80024ba:	ee07 3a90 	vmov	s15, r3
 80024be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024c2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80024c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80024d0:	68fb      	ldr	r3, [r7, #12]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b084      	sub	sp, #16
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 80024e4:	f107 020b 	add.w	r2, r7, #11
 80024e8:	2301      	movs	r3, #1
 80024ea:	2131      	movs	r1, #49	; 0x31
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff fea4 	bl	800223a <hts221_read_reg>
 80024f2:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80024f4:	7afb      	ldrb	r3, [r7, #11]
 80024f6:	ee07 3a90 	vmov	s15, r3
 80024fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024fe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002502:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800250c:	68fb      	ldr	r3, [r7, #12]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b086      	sub	sp, #24
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8002520:	f107 020f 	add.w	r2, r7, #15
 8002524:	2301      	movs	r3, #1
 8002526:	2132      	movs	r1, #50	; 0x32
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff fe86 	bl	800223a <hts221_read_reg>
 800252e:	6178      	str	r0, [r7, #20]

  if(ret == 0){
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d11b      	bne.n	800256e <hts221_temp_deg_point_0_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 8002536:	f107 0210 	add.w	r2, r7, #16
 800253a:	2301      	movs	r3, #1
 800253c:	2135      	movs	r1, #53	; 0x35
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff fe7b 	bl	800223a <hts221_read_reg>
 8002544:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8002546:	7c3b      	ldrb	r3, [r7, #16]
 8002548:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800254c:	b2db      	uxtb	r3, r3
 800254e:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8002550:	7cfb      	ldrb	r3, [r7, #19]
 8002552:	021b      	lsls	r3, r3, #8
 8002554:	7bfa      	ldrb	r2, [r7, #15]
 8002556:	4413      	add	r3, r2
 8002558:	ee07 3a90 	vmov	s15, r3
 800255c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002560:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002564:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 800256e:	697b      	ldr	r3, [r7, #20]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8002582:	f107 020f 	add.w	r2, r7, #15
 8002586:	2301      	movs	r3, #1
 8002588:	2133      	movs	r1, #51	; 0x33
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7ff fe55 	bl	800223a <hts221_read_reg>
 8002590:	6178      	str	r0, [r7, #20]

  if(ret == 0){
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d11b      	bne.n	80025d0 <hts221_temp_deg_point_1_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 8002598:	f107 0210 	add.w	r2, r7, #16
 800259c:	2301      	movs	r3, #1
 800259e:	2135      	movs	r1, #53	; 0x35
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff fe4a 	bl	800223a <hts221_read_reg>
 80025a6:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 80025a8:	7c3b      	ldrb	r3, [r7, #16]
 80025aa:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80025b2:	7cfb      	ldrb	r3, [r7, #19]
 80025b4:	021b      	lsls	r3, r3, #8
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	4413      	add	r3, r2
 80025ba:	ee07 3a90 	vmov	s15, r3
 80025be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025c2:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80025c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 80025d0:	697b      	ldr	r3, [r7, #20]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b084      	sub	sp, #16
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 80025e4:	f107 0208 	add.w	r2, r7, #8
 80025e8:	2302      	movs	r3, #2
 80025ea:	2136      	movs	r1, #54	; 0x36
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7ff fe24 	bl	800223a <hts221_read_reg>
 80025f2:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80025f4:	7a7b      	ldrb	r3, [r7, #9]
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	021b      	lsls	r3, r3, #8
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	7a3b      	ldrb	r3, [r7, #8]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	4413      	add	r3, r2
 8002602:	b29b      	uxth	r3, r3
 8002604:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8002606:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800260a:	ee07 3a90 	vmov	s15, r3
 800260e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8002618:	68fb      	ldr	r3, [r7, #12]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b084      	sub	sp, #16
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 800262c:	f107 0208 	add.w	r2, r7, #8
 8002630:	2302      	movs	r3, #2
 8002632:	213a      	movs	r1, #58	; 0x3a
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff fe00 	bl	800223a <hts221_read_reg>
 800263a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800263c:	7a7b      	ldrb	r3, [r7, #9]
 800263e:	b29b      	uxth	r3, r3
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	b29a      	uxth	r2, r3
 8002644:	7a3b      	ldrb	r3, [r7, #8]
 8002646:	b29b      	uxth	r3, r3
 8002648:	4413      	add	r3, r2
 800264a:	b29b      	uxth	r3, r3
 800264c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800264e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002652:	ee07 3a90 	vmov	s15, r3
 8002656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8002660:	68fb      	ldr	r3, [r7, #12]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8002674:	f107 0208 	add.w	r2, r7, #8
 8002678:	2302      	movs	r3, #2
 800267a:	213c      	movs	r1, #60	; 0x3c
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff fddc 	bl	800223a <hts221_read_reg>
 8002682:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002684:	7a7b      	ldrb	r3, [r7, #9]
 8002686:	b29b      	uxth	r3, r3
 8002688:	021b      	lsls	r3, r3, #8
 800268a:	b29a      	uxth	r2, r3
 800268c:	7a3b      	ldrb	r3, [r7, #8]
 800268e:	b29b      	uxth	r3, r3
 8002690:	4413      	add	r3, r2
 8002692:	b29b      	uxth	r3, r3
 8002694:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8002696:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800269a:	ee07 3a90 	vmov	s15, r3
 800269e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 80026a8:	68fb      	ldr	r3, [r7, #12]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b084      	sub	sp, #16
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 80026bc:	f107 0208 	add.w	r2, r7, #8
 80026c0:	2302      	movs	r3, #2
 80026c2:	213e      	movs	r1, #62	; 0x3e
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f7ff fdb8 	bl	800223a <hts221_read_reg>
 80026ca:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80026cc:	7a7b      	ldrb	r3, [r7, #9]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	021b      	lsls	r3, r3, #8
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	7a3b      	ldrb	r3, [r7, #8]
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	4413      	add	r3, r2
 80026da:	b29b      	uxth	r3, r3
 80026dc:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80026de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80026e2:	ee07 3a90 	vmov	s15, r3
 80026e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 80026f0:	68fb      	ldr	r3, [r7, #12]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
	...

080026fc <LIS2DW12_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d103      	bne.n	8002718 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8002710:	f04f 33ff 	mov.w	r3, #4294967295
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	e04d      	b.n	80027b4 <LIS2DW12_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	7b1a      	ldrb	r2, [r3, #12]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	695a      	ldr	r2, [r3, #20]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	699a      	ldr	r2, [r3, #24]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a1b      	ldr	r2, [pc, #108]	; (80027c0 <LIS2DW12_RegisterBusIO+0xc4>)
 8002754:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a1a      	ldr	r2, [pc, #104]	; (80027c4 <LIS2DW12_RegisterBusIO+0xc8>)
 800275a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d103      	bne.n	8002772 <LIS2DW12_RegisterBusIO+0x76>
    {
      ret = LIS2DW12_ERROR;
 800276a:	f04f 33ff 	mov.w	r3, #4294967295
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	e020      	b.n	80027b4 <LIS2DW12_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4798      	blx	r3
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <LIS2DW12_RegisterBusIO+0x8a>
    {
      ret = LIS2DW12_ERROR;
 800277e:	f04f 33ff 	mov.w	r3, #4294967295
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	e016      	b.n	80027b4 <LIS2DW12_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d112      	bne.n	80027b4 <LIS2DW12_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10d      	bne.n	80027b4 <LIS2DW12_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8002798:	2305      	movs	r3, #5
 800279a:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 800279c:	7afb      	ldrb	r3, [r7, #11]
 800279e:	461a      	mov	r2, r3
 80027a0:	2121      	movs	r1, #33	; 0x21
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fd87 	bl	80032b6 <LIS2DW12_Write_Reg>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <LIS2DW12_RegisterBusIO+0xb8>
          {
            ret = LIS2DW12_ERROR;
 80027ae:	f04f 33ff 	mov.w	r3, #4294967295
 80027b2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80027b4:	68fb      	ldr	r3, [r7, #12]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	08003649 	.word	0x08003649
 80027c4:	0800367f 	.word	0x0800367f

080027c8 <LIS2DW12_Init>:
 * @brief  Initialize the LIS2DW12 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	331c      	adds	r3, #28
 80027d4:	2101      	movs	r1, #1
 80027d6:	4618      	mov	r0, r3
 80027d8:	f001 fa94 	bl	8003d04 <lis2dw12_auto_increment_set>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 80027e2:	f04f 33ff 	mov.w	r3, #4294967295
 80027e6:	e04b      	b.n	8002880 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	331c      	adds	r3, #28
 80027ec:	2101      	movs	r1, #1
 80027ee:	4618      	mov	r0, r3
 80027f0:	f001 f9a8 	bl	8003b44 <lis2dw12_block_data_update_set>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d002      	beq.n	8002800 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 80027fa:	f04f 33ff 	mov.w	r3, #4294967295
 80027fe:	e03f      	b.n	8002880 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	331c      	adds	r3, #28
 8002804:	2100      	movs	r1, #0
 8002806:	4618      	mov	r0, r3
 8002808:	f001 faa2 	bl	8003d50 <lis2dw12_fifo_mode_set>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8002812:	f04f 33ff 	mov.w	r3, #4294967295
 8002816:	e033      	b.n	8002880 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	331c      	adds	r3, #28
 800281c:	2104      	movs	r1, #4
 800281e:	4618      	mov	r0, r3
 8002820:	f000 ff78 	bl	8003714 <lis2dw12_power_mode_set>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d002      	beq.n	8002830 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 800282a:	f04f 33ff 	mov.w	r3, #4294967295
 800282e:	e027      	b.n	8002880 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a15      	ldr	r2, [pc, #84]	; (8002888 <LIS2DW12_Init+0xc0>)
 8002834:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	331c      	adds	r3, #28
 800284a:	2100      	movs	r1, #0
 800284c:	4618      	mov	r0, r3
 800284e:	f001 f869 	bl	8003924 <lis2dw12_data_rate_set>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8002858:	f04f 33ff 	mov.w	r3, #4294967295
 800285c:	e010      	b.n	8002880 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	331c      	adds	r3, #28
 8002862:	2100      	movs	r1, #0
 8002864:	4618      	mov	r0, r3
 8002866:	f001 f993 	bl	8003b90 <lis2dw12_full_scale_set>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d002      	beq.n	8002876 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8002870:	f04f 33ff 	mov.w	r3, #4294967295
 8002874:	e004      	b.n	8002880 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2DW12_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	42c80000 	.word	0x42c80000

0800288c <LIS2DW12_DeInit>:
 * @brief  Deinitialize the LIS2DW12 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f888 	bl	80029aa <LIS2DW12_ACC_Disable>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d002      	beq.n	80028a6 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 80028a0:	f04f 33ff 	mov.w	r3, #4294967295
 80028a4:	e010      	b.n	80028c8 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->is_initialized = 0;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2DW12_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <LIS2DW12_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	331c      	adds	r3, #28
 80028de:	6839      	ldr	r1, [r7, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f001 f9fe 	bl	8003ce2 <lis2dw12_device_id_get>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d002      	beq.n	80028f2 <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 80028ec:	f04f 33ff 	mov.w	r3, #4294967295
 80028f0:	e000      	b.n	80028f4 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <LIS2DW12_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LIS2DW12 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	2201      	movs	r2, #1
 800290a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	2200      	movs	r2, #0
 8002910:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	2200      	movs	r2, #0
 8002916:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	2200      	movs	r2, #0
 800291c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2200      	movs	r2, #0
 8002922:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2210      	movs	r2, #16
 8002928:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2200      	movs	r2, #0
 800292e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	4a06      	ldr	r2, [pc, #24]	; (8002954 <LIS2DW12_GetCapabilities+0x58>)
 800293c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	44c80000 	.word	0x44c80000

08002958 <LIS2DW12_ACC_Enable>:
 * @brief  Enable the LIS2DW12 accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002966:	2b01      	cmp	r3, #1
 8002968:	d101      	bne.n	800296e <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	e019      	b.n	80029a2 <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode, pObj->acc_low_noise) != LIS2DW12_OK)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002980:	461a      	mov	r2, r3
 8002982:	eeb0 0a67 	vmov.f32	s0, s15
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fcb0 	bl	80032ec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d002      	beq.n	8002998 <LIS2DW12_ACC_Enable+0x40>
  {
    return LIS2DW12_ERROR;
 8002992:	f04f 33ff 	mov.w	r3, #4294967295
 8002996:	e004      	b.n	80029a2 <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2DW12_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <LIS2DW12_ACC_Disable>:
 * @brief  Disable the LIS2DW12 accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b082      	sub	sp, #8
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	e010      	b.n	80029e2 <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	331c      	adds	r3, #28
 80029c4:	2100      	movs	r1, #0
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 ffac 	bl	8003924 <lis2dw12_data_rate_set>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 80029d2:	f04f 33ff 	mov.w	r3, #4294967295
 80029d6:	e004      	b.n	80029e2 <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2DW12_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <LIS2DW12_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	331c      	adds	r3, #28
 80029fe:	f107 020b 	add.w	r2, r7, #11
 8002a02:	4611      	mov	r1, r2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f001 f8e9 	bl	8003bdc <lis2dw12_full_scale_get>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d002      	beq.n	8002a16 <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8002a10:	f04f 33ff 	mov.w	r3, #4294967295
 8002a14:	e0a0      	b.n	8002b58 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	331c      	adds	r3, #28
 8002a1a:	f107 020a 	add.w	r2, r7, #10
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 fec5 	bl	80037b0 <lis2dw12_power_mode_get>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d002      	beq.n	8002a32 <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8002a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a30:	e092      	b.n	8002b58 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  switch(mode)
 8002a32:	7abb      	ldrb	r3, [r7, #10]
 8002a34:	2b1b      	cmp	r3, #27
 8002a36:	f200 8087 	bhi.w	8002b48 <LIS2DW12_ACC_GetSensitivity+0x15c>
 8002a3a:	a201      	add	r2, pc, #4	; (adr r2, 8002a40 <LIS2DW12_ACC_GetSensitivity+0x54>)
 8002a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a40:	08002ab1 	.word	0x08002ab1
 8002a44:	08002afd 	.word	0x08002afd
 8002a48:	08002afd 	.word	0x08002afd
 8002a4c:	08002afd 	.word	0x08002afd
 8002a50:	08002afd 	.word	0x08002afd
 8002a54:	08002b49 	.word	0x08002b49
 8002a58:	08002b49 	.word	0x08002b49
 8002a5c:	08002b49 	.word	0x08002b49
 8002a60:	08002ab1 	.word	0x08002ab1
 8002a64:	08002afd 	.word	0x08002afd
 8002a68:	08002afd 	.word	0x08002afd
 8002a6c:	08002afd 	.word	0x08002afd
 8002a70:	08002b49 	.word	0x08002b49
 8002a74:	08002b49 	.word	0x08002b49
 8002a78:	08002b49 	.word	0x08002b49
 8002a7c:	08002b49 	.word	0x08002b49
 8002a80:	08002ab1 	.word	0x08002ab1
 8002a84:	08002afd 	.word	0x08002afd
 8002a88:	08002afd 	.word	0x08002afd
 8002a8c:	08002afd 	.word	0x08002afd
 8002a90:	08002afd 	.word	0x08002afd
 8002a94:	08002b49 	.word	0x08002b49
 8002a98:	08002b49 	.word	0x08002b49
 8002a9c:	08002b49 	.word	0x08002b49
 8002aa0:	08002ab1 	.word	0x08002ab1
 8002aa4:	08002afd 	.word	0x08002afd
 8002aa8:	08002afd 	.word	0x08002afd
 8002aac:	08002afd 	.word	0x08002afd
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8002ab0:	7afb      	ldrb	r3, [r7, #11]
 8002ab2:	2b03      	cmp	r3, #3
 8002ab4:	d81a      	bhi.n	8002aec <LIS2DW12_ACC_GetSensitivity+0x100>
 8002ab6:	a201      	add	r2, pc, #4	; (adr r2, 8002abc <LIS2DW12_ACC_GetSensitivity+0xd0>)
 8002ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abc:	08002acd 	.word	0x08002acd
 8002ac0:	08002ad5 	.word	0x08002ad5
 8002ac4:	08002add 	.word	0x08002add
 8002ac8:	08002ae5 	.word	0x08002ae5
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	4a24      	ldr	r2, [pc, #144]	; (8002b60 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8002ad0:	601a      	str	r2, [r3, #0]
           break;
 8002ad2:	e012      	b.n	8002afa <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	4a23      	ldr	r2, [pc, #140]	; (8002b64 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8002ad8:	601a      	str	r2, [r3, #0]
          break;
 8002ada:	e00e      	b.n	8002afa <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	4a22      	ldr	r2, [pc, #136]	; (8002b68 <LIS2DW12_ACC_GetSensitivity+0x17c>)
 8002ae0:	601a      	str	r2, [r3, #0]
           break;
 8002ae2:	e00a      	b.n	8002afa <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	4a21      	ldr	r2, [pc, #132]	; (8002b6c <LIS2DW12_ACC_GetSensitivity+0x180>)
 8002ae8:	601a      	str	r2, [r3, #0]
          break;
 8002aea:	e006      	b.n	8002afa <LIS2DW12_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	4a20      	ldr	r2, [pc, #128]	; (8002b70 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8002af0:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002af2:	f04f 33ff 	mov.w	r3, #4294967295
 8002af6:	60fb      	str	r3, [r7, #12]
          break;
 8002af8:	bf00      	nop
      }
      break;
 8002afa:	e02c      	b.n	8002b56 <LIS2DW12_ACC_GetSensitivity+0x16a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8002afc:	7afb      	ldrb	r3, [r7, #11]
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d81a      	bhi.n	8002b38 <LIS2DW12_ACC_GetSensitivity+0x14c>
 8002b02:	a201      	add	r2, pc, #4	; (adr r2, 8002b08 <LIS2DW12_ACC_GetSensitivity+0x11c>)
 8002b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b08:	08002b19 	.word	0x08002b19
 8002b0c:	08002b21 	.word	0x08002b21
 8002b10:	08002b29 	.word	0x08002b29
 8002b14:	08002b31 	.word	0x08002b31
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	4a16      	ldr	r2, [pc, #88]	; (8002b74 <LIS2DW12_ACC_GetSensitivity+0x188>)
 8002b1c:	601a      	str	r2, [r3, #0]
           break;
 8002b1e:	e012      	b.n	8002b46 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	4a15      	ldr	r2, [pc, #84]	; (8002b78 <LIS2DW12_ACC_GetSensitivity+0x18c>)
 8002b24:	601a      	str	r2, [r3, #0]
          break;
 8002b26:	e00e      	b.n	8002b46 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	4a0d      	ldr	r2, [pc, #52]	; (8002b60 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8002b2c:	601a      	str	r2, [r3, #0]
           break;
 8002b2e:	e00a      	b.n	8002b46 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	4a0c      	ldr	r2, [pc, #48]	; (8002b64 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8002b34:	601a      	str	r2, [r3, #0]
          break;
 8002b36:	e006      	b.n	8002b46 <LIS2DW12_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	4a0d      	ldr	r2, [pc, #52]	; (8002b70 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8002b3c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b42:	60fb      	str	r3, [r7, #12]
          break;
 8002b44:	bf00      	nop
      }
      break;
 8002b46:	e006      	b.n	8002b56 <LIS2DW12_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	4a09      	ldr	r2, [pc, #36]	; (8002b70 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8002b4c:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b52:	60fb      	str	r3, [r7, #12]
      break;
 8002b54:	bf00      	nop
  }

  return ret;
 8002b56:	68fb      	ldr	r3, [r7, #12]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	3f79db23 	.word	0x3f79db23
 8002b64:	3ff9db23 	.word	0x3ff9db23
 8002b68:	4079db23 	.word	0x4079db23
 8002b6c:	40f9db23 	.word	0x40f9db23
 8002b70:	bf800000 	.word	0xbf800000
 8002b74:	3e79db23 	.word	0x3e79db23
 8002b78:	3ef9db23 	.word	0x3ef9db23

08002b7c <LIS2DW12_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	331c      	adds	r3, #28
 8002b8e:	f107 020b 	add.w	r2, r7, #11
 8002b92:	4611      	mov	r1, r2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 ff0b 	bl	80039b0 <lis2dw12_data_rate_get>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d002      	beq.n	8002ba6 <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8002ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba4:	e1d4      	b.n	8002f50 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	331c      	adds	r3, #28
 8002baa:	f107 020a 	add.w	r2, r7, #10
 8002bae:	4611      	mov	r1, r2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 fdfd 	bl	80037b0 <lis2dw12_power_mode_get>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d002      	beq.n	8002bc2 <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8002bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc0:	e1c6      	b.n	8002f50 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  switch (odr_low_level)
 8002bc2:	7afb      	ldrb	r3, [r7, #11]
 8002bc4:	2b32      	cmp	r3, #50	; 0x32
 8002bc6:	f200 81bb 	bhi.w	8002f40 <LIS2DW12_ACC_GetOutputDataRate+0x3c4>
 8002bca:	a201      	add	r2, pc, #4	; (adr r2, 8002bd0 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8002bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd0:	08002c9d 	.word	0x08002c9d
 8002bd4:	08002ca7 	.word	0x08002ca7
 8002bd8:	08002d45 	.word	0x08002d45
 8002bdc:	08002d4d 	.word	0x08002d4d
 8002be0:	08002d55 	.word	0x08002d55
 8002be4:	08002d5d 	.word	0x08002d5d
 8002be8:	08002d65 	.word	0x08002d65
 8002bec:	08002d6d 	.word	0x08002d6d
 8002bf0:	08002e09 	.word	0x08002e09
 8002bf4:	08002ea5 	.word	0x08002ea5
 8002bf8:	08002f41 	.word	0x08002f41
 8002bfc:	08002f41 	.word	0x08002f41
 8002c00:	08002f41 	.word	0x08002f41
 8002c04:	08002f41 	.word	0x08002f41
 8002c08:	08002f41 	.word	0x08002f41
 8002c0c:	08002f41 	.word	0x08002f41
 8002c10:	08002f41 	.word	0x08002f41
 8002c14:	08002f41 	.word	0x08002f41
 8002c18:	08002c9d 	.word	0x08002c9d
 8002c1c:	08002f41 	.word	0x08002f41
 8002c20:	08002f41 	.word	0x08002f41
 8002c24:	08002f41 	.word	0x08002f41
 8002c28:	08002f41 	.word	0x08002f41
 8002c2c:	08002f41 	.word	0x08002f41
 8002c30:	08002f41 	.word	0x08002f41
 8002c34:	08002f41 	.word	0x08002f41
 8002c38:	08002f41 	.word	0x08002f41
 8002c3c:	08002f41 	.word	0x08002f41
 8002c40:	08002f41 	.word	0x08002f41
 8002c44:	08002f41 	.word	0x08002f41
 8002c48:	08002f41 	.word	0x08002f41
 8002c4c:	08002f41 	.word	0x08002f41
 8002c50:	08002f41 	.word	0x08002f41
 8002c54:	08002f41 	.word	0x08002f41
 8002c58:	08002f41 	.word	0x08002f41
 8002c5c:	08002f41 	.word	0x08002f41
 8002c60:	08002f41 	.word	0x08002f41
 8002c64:	08002f41 	.word	0x08002f41
 8002c68:	08002f41 	.word	0x08002f41
 8002c6c:	08002f41 	.word	0x08002f41
 8002c70:	08002f41 	.word	0x08002f41
 8002c74:	08002f41 	.word	0x08002f41
 8002c78:	08002f41 	.word	0x08002f41
 8002c7c:	08002f41 	.word	0x08002f41
 8002c80:	08002f41 	.word	0x08002f41
 8002c84:	08002f41 	.word	0x08002f41
 8002c88:	08002f41 	.word	0x08002f41
 8002c8c:	08002f41 	.word	0x08002f41
 8002c90:	08002f41 	.word	0x08002f41
 8002c94:	08002f41 	.word	0x08002f41
 8002c98:	08002c9d 	.word	0x08002c9d
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
      break;
 8002ca4:	e153      	b.n	8002f4e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8002ca6:	7abb      	ldrb	r3, [r7, #10]
 8002ca8:	2b1b      	cmp	r3, #27
 8002caa:	d843      	bhi.n	8002d34 <LIS2DW12_ACC_GetOutputDataRate+0x1b8>
 8002cac:	a201      	add	r2, pc, #4	; (adr r2, 8002cb4 <LIS2DW12_ACC_GetOutputDataRate+0x138>)
 8002cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb2:	bf00      	nop
 8002cb4:	08002d2d 	.word	0x08002d2d
 8002cb8:	08002d2d 	.word	0x08002d2d
 8002cbc:	08002d2d 	.word	0x08002d2d
 8002cc0:	08002d2d 	.word	0x08002d2d
 8002cc4:	08002d25 	.word	0x08002d25
 8002cc8:	08002d35 	.word	0x08002d35
 8002ccc:	08002d35 	.word	0x08002d35
 8002cd0:	08002d35 	.word	0x08002d35
 8002cd4:	08002d2d 	.word	0x08002d2d
 8002cd8:	08002d2d 	.word	0x08002d2d
 8002cdc:	08002d2d 	.word	0x08002d2d
 8002ce0:	08002d2d 	.word	0x08002d2d
 8002ce4:	08002d35 	.word	0x08002d35
 8002ce8:	08002d35 	.word	0x08002d35
 8002cec:	08002d35 	.word	0x08002d35
 8002cf0:	08002d35 	.word	0x08002d35
 8002cf4:	08002d2d 	.word	0x08002d2d
 8002cf8:	08002d2d 	.word	0x08002d2d
 8002cfc:	08002d2d 	.word	0x08002d2d
 8002d00:	08002d2d 	.word	0x08002d2d
 8002d04:	08002d25 	.word	0x08002d25
 8002d08:	08002d35 	.word	0x08002d35
 8002d0c:	08002d35 	.word	0x08002d35
 8002d10:	08002d35 	.word	0x08002d35
 8002d14:	08002d2d 	.word	0x08002d2d
 8002d18:	08002d2d 	.word	0x08002d2d
 8002d1c:	08002d2d 	.word	0x08002d2d
 8002d20:	08002d2d 	.word	0x08002d2d
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	4a8c      	ldr	r2, [pc, #560]	; (8002f58 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8002d28:	601a      	str	r2, [r3, #0]
           break;
 8002d2a:	e00a      	b.n	8002d42 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	4a8b      	ldr	r2, [pc, #556]	; (8002f5c <LIS2DW12_ACC_GetOutputDataRate+0x3e0>)
 8002d30:	601a      	str	r2, [r3, #0]
          break;
 8002d32:	e006      	b.n	8002d42 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>

        default:
          *Odr = -1.0f;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	4a8a      	ldr	r2, [pc, #552]	; (8002f60 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002d38:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d3e:	60fb      	str	r3, [r7, #12]
          break;
 8002d40:	bf00      	nop
      }
      break;
 8002d42:	e104      	b.n	8002f4e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	4a84      	ldr	r2, [pc, #528]	; (8002f58 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8002d48:	601a      	str	r2, [r3, #0]
      break;
 8002d4a:	e100      	b.n	8002f4e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	4a85      	ldr	r2, [pc, #532]	; (8002f64 <LIS2DW12_ACC_GetOutputDataRate+0x3e8>)
 8002d50:	601a      	str	r2, [r3, #0]
      break;
 8002d52:	e0fc      	b.n	8002f4e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	4a84      	ldr	r2, [pc, #528]	; (8002f68 <LIS2DW12_ACC_GetOutputDataRate+0x3ec>)
 8002d58:	601a      	str	r2, [r3, #0]
      break;
 8002d5a:	e0f8      	b.n	8002f4e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	4a83      	ldr	r2, [pc, #524]	; (8002f6c <LIS2DW12_ACC_GetOutputDataRate+0x3f0>)
 8002d60:	601a      	str	r2, [r3, #0]
      break;
 8002d62:	e0f4      	b.n	8002f4e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	4a82      	ldr	r2, [pc, #520]	; (8002f70 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002d68:	601a      	str	r2, [r3, #0]
      break;
 8002d6a:	e0f0      	b.n	8002f4e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8002d6c:	7abb      	ldrb	r3, [r7, #10]
 8002d6e:	2b1b      	cmp	r3, #27
 8002d70:	d842      	bhi.n	8002df8 <LIS2DW12_ACC_GetOutputDataRate+0x27c>
 8002d72:	a201      	add	r2, pc, #4	; (adr r2, 8002d78 <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 8002d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d78:	08002df1 	.word	0x08002df1
 8002d7c:	08002df1 	.word	0x08002df1
 8002d80:	08002df1 	.word	0x08002df1
 8002d84:	08002df1 	.word	0x08002df1
 8002d88:	08002de9 	.word	0x08002de9
 8002d8c:	08002df9 	.word	0x08002df9
 8002d90:	08002df9 	.word	0x08002df9
 8002d94:	08002df9 	.word	0x08002df9
 8002d98:	08002df1 	.word	0x08002df1
 8002d9c:	08002df1 	.word	0x08002df1
 8002da0:	08002df1 	.word	0x08002df1
 8002da4:	08002df1 	.word	0x08002df1
 8002da8:	08002df9 	.word	0x08002df9
 8002dac:	08002df9 	.word	0x08002df9
 8002db0:	08002df9 	.word	0x08002df9
 8002db4:	08002df9 	.word	0x08002df9
 8002db8:	08002df1 	.word	0x08002df1
 8002dbc:	08002df1 	.word	0x08002df1
 8002dc0:	08002df1 	.word	0x08002df1
 8002dc4:	08002df1 	.word	0x08002df1
 8002dc8:	08002de9 	.word	0x08002de9
 8002dcc:	08002df9 	.word	0x08002df9
 8002dd0:	08002df9 	.word	0x08002df9
 8002dd4:	08002df9 	.word	0x08002df9
 8002dd8:	08002df1 	.word	0x08002df1
 8002ddc:	08002df1 	.word	0x08002df1
 8002de0:	08002df1 	.word	0x08002df1
 8002de4:	08002df1 	.word	0x08002df1
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	4a62      	ldr	r2, [pc, #392]	; (8002f74 <LIS2DW12_ACC_GetOutputDataRate+0x3f8>)
 8002dec:	601a      	str	r2, [r3, #0]
           break;
 8002dee:	e00a      	b.n	8002e06 <LIS2DW12_ACC_GetOutputDataRate+0x28a>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	4a5f      	ldr	r2, [pc, #380]	; (8002f70 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002df4:	601a      	str	r2, [r3, #0]
          break;
 8002df6:	e006      	b.n	8002e06 <LIS2DW12_ACC_GetOutputDataRate+0x28a>

        default:
          *Odr = -1.0f;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	4a59      	ldr	r2, [pc, #356]	; (8002f60 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002dfc:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002e02:	60fb      	str	r3, [r7, #12]
          break;
 8002e04:	bf00      	nop
      }
      break;
 8002e06:	e0a2      	b.n	8002f4e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 8002e08:	7abb      	ldrb	r3, [r7, #10]
 8002e0a:	2b1b      	cmp	r3, #27
 8002e0c:	d842      	bhi.n	8002e94 <LIS2DW12_ACC_GetOutputDataRate+0x318>
 8002e0e:	a201      	add	r2, pc, #4	; (adr r2, 8002e14 <LIS2DW12_ACC_GetOutputDataRate+0x298>)
 8002e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e14:	08002e8d 	.word	0x08002e8d
 8002e18:	08002e8d 	.word	0x08002e8d
 8002e1c:	08002e8d 	.word	0x08002e8d
 8002e20:	08002e8d 	.word	0x08002e8d
 8002e24:	08002e85 	.word	0x08002e85
 8002e28:	08002e95 	.word	0x08002e95
 8002e2c:	08002e95 	.word	0x08002e95
 8002e30:	08002e95 	.word	0x08002e95
 8002e34:	08002e8d 	.word	0x08002e8d
 8002e38:	08002e8d 	.word	0x08002e8d
 8002e3c:	08002e8d 	.word	0x08002e8d
 8002e40:	08002e8d 	.word	0x08002e8d
 8002e44:	08002e95 	.word	0x08002e95
 8002e48:	08002e95 	.word	0x08002e95
 8002e4c:	08002e95 	.word	0x08002e95
 8002e50:	08002e95 	.word	0x08002e95
 8002e54:	08002e8d 	.word	0x08002e8d
 8002e58:	08002e8d 	.word	0x08002e8d
 8002e5c:	08002e8d 	.word	0x08002e8d
 8002e60:	08002e8d 	.word	0x08002e8d
 8002e64:	08002e85 	.word	0x08002e85
 8002e68:	08002e95 	.word	0x08002e95
 8002e6c:	08002e95 	.word	0x08002e95
 8002e70:	08002e95 	.word	0x08002e95
 8002e74:	08002e8d 	.word	0x08002e8d
 8002e78:	08002e8d 	.word	0x08002e8d
 8002e7c:	08002e8d 	.word	0x08002e8d
 8002e80:	08002e8d 	.word	0x08002e8d
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	4a3c      	ldr	r2, [pc, #240]	; (8002f78 <LIS2DW12_ACC_GetOutputDataRate+0x3fc>)
 8002e88:	601a      	str	r2, [r3, #0]
           break;
 8002e8a:	e00a      	b.n	8002ea2 <LIS2DW12_ACC_GetOutputDataRate+0x326>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	4a38      	ldr	r2, [pc, #224]	; (8002f70 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002e90:	601a      	str	r2, [r3, #0]
          break;
 8002e92:	e006      	b.n	8002ea2 <LIS2DW12_ACC_GetOutputDataRate+0x326>

        default:
          *Odr = -1.0f;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	4a32      	ldr	r2, [pc, #200]	; (8002f60 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002e98:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e9e:	60fb      	str	r3, [r7, #12]
          break;
 8002ea0:	bf00      	nop
      }
      break;
 8002ea2:	e054      	b.n	8002f4e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8002ea4:	7abb      	ldrb	r3, [r7, #10]
 8002ea6:	2b1b      	cmp	r3, #27
 8002ea8:	d842      	bhi.n	8002f30 <LIS2DW12_ACC_GetOutputDataRate+0x3b4>
 8002eaa:	a201      	add	r2, pc, #4	; (adr r2, 8002eb0 <LIS2DW12_ACC_GetOutputDataRate+0x334>)
 8002eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb0:	08002f29 	.word	0x08002f29
 8002eb4:	08002f29 	.word	0x08002f29
 8002eb8:	08002f29 	.word	0x08002f29
 8002ebc:	08002f29 	.word	0x08002f29
 8002ec0:	08002f21 	.word	0x08002f21
 8002ec4:	08002f31 	.word	0x08002f31
 8002ec8:	08002f31 	.word	0x08002f31
 8002ecc:	08002f31 	.word	0x08002f31
 8002ed0:	08002f29 	.word	0x08002f29
 8002ed4:	08002f29 	.word	0x08002f29
 8002ed8:	08002f29 	.word	0x08002f29
 8002edc:	08002f29 	.word	0x08002f29
 8002ee0:	08002f31 	.word	0x08002f31
 8002ee4:	08002f31 	.word	0x08002f31
 8002ee8:	08002f31 	.word	0x08002f31
 8002eec:	08002f31 	.word	0x08002f31
 8002ef0:	08002f29 	.word	0x08002f29
 8002ef4:	08002f29 	.word	0x08002f29
 8002ef8:	08002f29 	.word	0x08002f29
 8002efc:	08002f29 	.word	0x08002f29
 8002f00:	08002f21 	.word	0x08002f21
 8002f04:	08002f31 	.word	0x08002f31
 8002f08:	08002f31 	.word	0x08002f31
 8002f0c:	08002f31 	.word	0x08002f31
 8002f10:	08002f29 	.word	0x08002f29
 8002f14:	08002f29 	.word	0x08002f29
 8002f18:	08002f29 	.word	0x08002f29
 8002f1c:	08002f29 	.word	0x08002f29
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	4a16      	ldr	r2, [pc, #88]	; (8002f7c <LIS2DW12_ACC_GetOutputDataRate+0x400>)
 8002f24:	601a      	str	r2, [r3, #0]
           break;
 8002f26:	e00a      	b.n	8002f3e <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	4a11      	ldr	r2, [pc, #68]	; (8002f70 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002f2c:	601a      	str	r2, [r3, #0]
          break;
 8002f2e:	e006      	b.n	8002f3e <LIS2DW12_ACC_GetOutputDataRate+0x3c2>

        default:
          *Odr = -1.0f;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	4a0b      	ldr	r2, [pc, #44]	; (8002f60 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002f34:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002f36:	f04f 33ff 	mov.w	r3, #4294967295
 8002f3a:	60fb      	str	r3, [r7, #12]
          break;
 8002f3c:	bf00      	nop
      }
      break;
 8002f3e:	e006      	b.n	8002f4e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    default:
      *Odr = -1.0f;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	4a07      	ldr	r2, [pc, #28]	; (8002f60 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002f44:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002f46:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4a:	60fb      	str	r3, [r7, #12]
      break;
 8002f4c:	bf00      	nop
  }

  return ret;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	41480000 	.word	0x41480000
 8002f5c:	3fcccccd 	.word	0x3fcccccd
 8002f60:	bf800000 	.word	0xbf800000
 8002f64:	41c80000 	.word	0x41c80000
 8002f68:	42480000 	.word	0x42480000
 8002f6c:	42c80000 	.word	0x42c80000
 8002f70:	43480000 	.word	0x43480000
 8002f74:	43c80000 	.word	0x43c80000
 8002f78:	44480000 	.word	0x44480000
 8002f7c:	44c80000 	.word	0x44c80000

08002f80 <LIS2DW12_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2100      	movs	r1, #0
 8002f90:	ed97 0a00 	vldr	s0, [r7]
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f805 	bl	8002fa4 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 8002f9a:	4603      	mov	r3, r0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	ed87 0a02 	vstr	s0, [r7, #8]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	71fb      	strb	r3, [r7, #7]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d109      	bne.n	8002fd6 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8002fc2:	79ba      	ldrb	r2, [r7, #6]
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	ed97 0a02 	vldr	s0, [r7, #8]
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 f98d 	bl	80032ec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	e008      	b.n	8002fe8 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8002fd6:	79ba      	ldrb	r2, [r7, #6]
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
 8002fda:	4619      	mov	r1, r3
 8002fdc:	ed97 0a02 	vldr	s0, [r7, #8]
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 fa9f 	bl	8003524 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 8002fe6:	4603      	mov	r3, r0
  }
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <LIS2DW12_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	331c      	adds	r3, #28
 8003002:	f107 020b 	add.w	r2, r7, #11
 8003006:	4611      	mov	r1, r2
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fde7 	bl	8003bdc <lis2dw12_full_scale_get>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8003014:	f04f 33ff 	mov.w	r3, #4294967295
 8003018:	e027      	b.n	800306a <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 800301a:	7afb      	ldrb	r3, [r7, #11]
 800301c:	2b03      	cmp	r3, #3
 800301e:	d81b      	bhi.n	8003058 <LIS2DW12_ACC_GetFullScale+0x68>
 8003020:	a201      	add	r2, pc, #4	; (adr r2, 8003028 <LIS2DW12_ACC_GetFullScale+0x38>)
 8003022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003026:	bf00      	nop
 8003028:	08003039 	.word	0x08003039
 800302c:	08003041 	.word	0x08003041
 8003030:	08003049 	.word	0x08003049
 8003034:	08003051 	.word	0x08003051
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2202      	movs	r2, #2
 800303c:	601a      	str	r2, [r3, #0]
      break;
 800303e:	e013      	b.n	8003068 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	2204      	movs	r2, #4
 8003044:	601a      	str	r2, [r3, #0]
      break;
 8003046:	e00f      	b.n	8003068 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	2208      	movs	r2, #8
 800304c:	601a      	str	r2, [r3, #0]
      break;
 800304e:	e00b      	b.n	8003068 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	2210      	movs	r2, #16
 8003054:	601a      	str	r2, [r3, #0]
      break;
 8003056:	e007      	b.n	8003068 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	f04f 32ff 	mov.w	r2, #4294967295
 800305e:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003060:	f04f 33ff 	mov.w	r3, #4294967295
 8003064:	60fb      	str	r3, [r7, #12]
      break;
 8003066:	bf00      	nop
  }

  return ret;
 8003068:	68fb      	ldr	r3, [r7, #12]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop

08003074 <LIS2DW12_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
         : (FullScale <= 4) ? LIS2DW12_4g
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b02      	cmp	r3, #2
 8003082:	dd0b      	ble.n	800309c <LIS2DW12_ACC_SetFullScale+0x28>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	2b04      	cmp	r3, #4
 8003088:	dd06      	ble.n	8003098 <LIS2DW12_ACC_SetFullScale+0x24>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b08      	cmp	r3, #8
 800308e:	dc01      	bgt.n	8003094 <LIS2DW12_ACC_SetFullScale+0x20>
 8003090:	2302      	movs	r3, #2
 8003092:	e004      	b.n	800309e <LIS2DW12_ACC_SetFullScale+0x2a>
 8003094:	2303      	movs	r3, #3
 8003096:	e002      	b.n	800309e <LIS2DW12_ACC_SetFullScale+0x2a>
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <LIS2DW12_ACC_SetFullScale+0x2a>
 800309c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 800309e:	73fb      	strb	r3, [r7, #15]
         : (FullScale <= 8) ? LIS2DW12_8g
         :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	331c      	adds	r3, #28
 80030a4:	7bfa      	ldrb	r2, [r7, #15]
 80030a6:	4611      	mov	r1, r2
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fd71 	bl	8003b90 <lis2dw12_full_scale_set>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 80030b4:	f04f 33ff 	mov.w	r3, #4294967295
 80030b8:	e000      	b.n	80030bc <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <LIS2DW12_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	331c      	adds	r3, #28
 80030d6:	f107 020b 	add.w	r2, r7, #11
 80030da:	4611      	mov	r1, r2
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 fb67 	bl	80037b0 <lis2dw12_power_mode_get>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d002      	beq.n	80030ee <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 80030e8:	f04f 33ff 	mov.w	r3, #4294967295
 80030ec:	e089      	b.n	8003202 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	331c      	adds	r3, #28
 80030f2:	f107 020c 	add.w	r2, r7, #12
 80030f6:	4611      	mov	r1, r2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 fda7 	bl	8003c4c <lis2dw12_acceleration_raw_get>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8003104:	f04f 33ff 	mov.w	r3, #4294967295
 8003108:	e07b      	b.n	8003202 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  switch(mode)
 800310a:	7afb      	ldrb	r3, [r7, #11]
 800310c:	2b1b      	cmp	r3, #27
 800310e:	d873      	bhi.n	80031f8 <LIS2DW12_ACC_GetAxesRaw+0x134>
 8003110:	a201      	add	r2, pc, #4	; (adr r2, 8003118 <LIS2DW12_ACC_GetAxesRaw+0x54>)
 8003112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003116:	bf00      	nop
 8003118:	08003189 	.word	0x08003189
 800311c:	080031c1 	.word	0x080031c1
 8003120:	080031c1 	.word	0x080031c1
 8003124:	080031c1 	.word	0x080031c1
 8003128:	080031c1 	.word	0x080031c1
 800312c:	080031f9 	.word	0x080031f9
 8003130:	080031f9 	.word	0x080031f9
 8003134:	080031f9 	.word	0x080031f9
 8003138:	08003189 	.word	0x08003189
 800313c:	080031c1 	.word	0x080031c1
 8003140:	080031c1 	.word	0x080031c1
 8003144:	080031c1 	.word	0x080031c1
 8003148:	080031f9 	.word	0x080031f9
 800314c:	080031f9 	.word	0x080031f9
 8003150:	080031f9 	.word	0x080031f9
 8003154:	080031f9 	.word	0x080031f9
 8003158:	08003189 	.word	0x08003189
 800315c:	080031c1 	.word	0x080031c1
 8003160:	080031c1 	.word	0x080031c1
 8003164:	080031c1 	.word	0x080031c1
 8003168:	080031c1 	.word	0x080031c1
 800316c:	080031f9 	.word	0x080031f9
 8003170:	080031f9 	.word	0x080031f9
 8003174:	080031f9 	.word	0x080031f9
 8003178:	08003189 	.word	0x08003189
 800317c:	080031c1 	.word	0x080031c1
 8003180:	080031c1 	.word	0x080031c1
 8003184:	080031c1 	.word	0x080031c1
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8003188:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	da00      	bge.n	8003192 <LIS2DW12_ACC_GetAxesRaw+0xce>
 8003190:	330f      	adds	r3, #15
 8003192:	111b      	asrs	r3, r3, #4
 8003194:	b21a      	sxth	r2, r3
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 800319a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	da00      	bge.n	80031a4 <LIS2DW12_ACC_GetAxesRaw+0xe0>
 80031a2:	330f      	adds	r3, #15
 80031a4:	111b      	asrs	r3, r3, #4
 80031a6:	b21a      	sxth	r2, r3
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 80031ac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	da00      	bge.n	80031b6 <LIS2DW12_ACC_GetAxesRaw+0xf2>
 80031b4:	330f      	adds	r3, #15
 80031b6:	111b      	asrs	r3, r3, #4
 80031b8:	b21a      	sxth	r2, r3
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	809a      	strh	r2, [r3, #4]
      break;
 80031be:	e01f      	b.n	8003200 <LIS2DW12_ACC_GetAxesRaw+0x13c>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 80031c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	da00      	bge.n	80031ca <LIS2DW12_ACC_GetAxesRaw+0x106>
 80031c8:	3303      	adds	r3, #3
 80031ca:	109b      	asrs	r3, r3, #2
 80031cc:	b21a      	sxth	r2, r3
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 80031d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	da00      	bge.n	80031dc <LIS2DW12_ACC_GetAxesRaw+0x118>
 80031da:	3303      	adds	r3, #3
 80031dc:	109b      	asrs	r3, r3, #2
 80031de:	b21a      	sxth	r2, r3
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 80031e4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	da00      	bge.n	80031ee <LIS2DW12_ACC_GetAxesRaw+0x12a>
 80031ec:	3303      	adds	r3, #3
 80031ee:	109b      	asrs	r3, r3, #2
 80031f0:	b21a      	sxth	r2, r3
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	809a      	strh	r2, [r3, #4]
      break;
 80031f6:	e003      	b.n	8003200 <LIS2DW12_ACC_GetAxesRaw+0x13c>

    default:
      ret = LIS2DW12_ERROR;
 80031f8:	f04f 33ff 	mov.w	r3, #4294967295
 80031fc:	617b      	str	r3, [r7, #20]
      break;
 80031fe:	bf00      	nop
  }

  return ret;
 8003200:	697b      	ldr	r3, [r7, #20]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop

0800320c <LIS2DW12_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 800321c:	f107 0310 	add.w	r3, r7, #16
 8003220:	4619      	mov	r1, r3
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff ff4e 	bl	80030c4 <LIS2DW12_ACC_GetAxesRaw>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d002      	beq.n	8003234 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 800322e:	f04f 33ff 	mov.w	r3, #4294967295
 8003232:	e03c      	b.n	80032ae <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8003234:	f107 030c 	add.w	r3, r7, #12
 8003238:	4619      	mov	r1, r3
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7ff fbd6 	bl	80029ec <LIS2DW12_ACC_GetSensitivity>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 8003246:	f04f 33ff 	mov.w	r3, #4294967295
 800324a:	e030      	b.n	80032ae <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 800324c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003250:	ee07 3a90 	vmov	s15, r3
 8003254:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003258:	edd7 7a03 	vldr	s15, [r7, #12]
 800325c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003260:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003264:	ee17 2a90 	vmov	r2, s15
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 800326c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003270:	ee07 3a90 	vmov	s15, r3
 8003274:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003278:	edd7 7a03 	vldr	s15, [r7, #12]
 800327c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003280:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003284:	ee17 2a90 	vmov	r2, s15
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800328c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003290:	ee07 3a90 	vmov	s15, r3
 8003294:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003298:	edd7 7a03 	vldr	s15, [r7, #12]
 800329c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032a4:	ee17 2a90 	vmov	r2, s15
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <LIS2DW12_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b082      	sub	sp, #8
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	460b      	mov	r3, r1
 80032c0:	70fb      	strb	r3, [r7, #3]
 80032c2:	4613      	mov	r3, r2
 80032c4:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f103 001c 	add.w	r0, r3, #28
 80032cc:	1cba      	adds	r2, r7, #2
 80032ce:	78f9      	ldrb	r1, [r7, #3]
 80032d0:	2301      	movs	r3, #1
 80032d2:	f000 fa07 	bl	80036e4 <lis2dw12_write_reg>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d002      	beq.n	80032e2 <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 80032dc:	f04f 33ff 	mov.w	r3, #4294967295
 80032e0:	e000      	b.n	80032e4 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	ed87 0a02 	vstr	s0, [r7, #8]
 80032f8:	460b      	mov	r3, r1
 80032fa:	71fb      	strb	r3, [r7, #7]
 80032fc:	4613      	mov	r3, r2
 80032fe:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8003300:	79fb      	ldrb	r3, [r7, #7]
 8003302:	3b01      	subs	r3, #1
 8003304:	2b03      	cmp	r3, #3
 8003306:	d80b      	bhi.n	8003320 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8003308:	a201      	add	r2, pc, #4	; (adr r2, 8003310 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 800330a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330e:	bf00      	nop
 8003310:	0800334d 	.word	0x0800334d
 8003314:	08003379 	.word	0x08003379
 8003318:	080033a5 	.word	0x080033a5
 800331c:	080033d1 	.word	0x080033d1
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8003320:	79bb      	ldrb	r3, [r7, #6]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d002      	beq.n	800332c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8003326:	2304      	movs	r3, #4
 8003328:	75fb      	strb	r3, [r7, #23]
          break;
 800332a:	e002      	b.n	8003332 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 800332c:	2314      	movs	r3, #20
 800332e:	75fb      	strb	r3, [r7, #23]
          break;
 8003330:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if(Odr < 12.5f)
 8003332:	edd7 7a02 	vldr	s15, [r7, #8]
 8003336:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800333a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800333e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003342:	d400      	bmi.n	8003346 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8003344:	e05a      	b.n	80033fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8003346:	4b6f      	ldr	r3, [pc, #444]	; (8003504 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8003348:	60bb      	str	r3, [r7, #8]
      break;
 800334a:	e057      	b.n	80033fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 800334c:	79bb      	ldrb	r3, [r7, #6]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d002      	beq.n	8003358 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8003352:	2303      	movs	r3, #3
 8003354:	75fb      	strb	r3, [r7, #23]
          break;
 8003356:	e002      	b.n	800335e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8003358:	2313      	movs	r3, #19
 800335a:	75fb      	strb	r3, [r7, #23]
          break;
 800335c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 800335e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003362:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8003508 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8003366:	eef4 7ac7 	vcmpe.f32	s15, s14
 800336a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336e:	dc00      	bgt.n	8003372 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8003370:	e044      	b.n	80033fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8003372:	4b66      	ldr	r3, [pc, #408]	; (800350c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8003374:	60bb      	str	r3, [r7, #8]
      break;
 8003376:	e041      	b.n	80033fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8003378:	79bb      	ldrb	r3, [r7, #6]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d002      	beq.n	8003384 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 800337e:	2302      	movs	r3, #2
 8003380:	75fb      	strb	r3, [r7, #23]
          break;
 8003382:	e002      	b.n	800338a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8003384:	2312      	movs	r3, #18
 8003386:	75fb      	strb	r3, [r7, #23]
          break;
 8003388:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 800338a:	edd7 7a02 	vldr	s15, [r7, #8]
 800338e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8003508 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8003392:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800339a:	dc00      	bgt.n	800339e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 800339c:	e02e      	b.n	80033fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800339e:	4b5b      	ldr	r3, [pc, #364]	; (800350c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80033a0:	60bb      	str	r3, [r7, #8]
      break;
 80033a2:	e02b      	b.n	80033fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 80033a4:	79bb      	ldrb	r3, [r7, #6]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d002      	beq.n	80033b0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 80033aa:	2301      	movs	r3, #1
 80033ac:	75fb      	strb	r3, [r7, #23]
          break;
 80033ae:	e002      	b.n	80033b6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 80033b0:	2311      	movs	r3, #17
 80033b2:	75fb      	strb	r3, [r7, #23]
          break;
 80033b4:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 80033b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80033ba:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8003508 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80033be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c6:	dc00      	bgt.n	80033ca <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 80033c8:	e018      	b.n	80033fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 80033ca:	4b50      	ldr	r3, [pc, #320]	; (800350c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80033cc:	60bb      	str	r3, [r7, #8]
      break;
 80033ce:	e015      	b.n	80033fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 80033d0:	79bb      	ldrb	r3, [r7, #6]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d002      	beq.n	80033dc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 80033d6:	2300      	movs	r3, #0
 80033d8:	75fb      	strb	r3, [r7, #23]
          break;
 80033da:	e002      	b.n	80033e2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 80033dc:	2310      	movs	r3, #16
 80033de:	75fb      	strb	r3, [r7, #23]
          break;
 80033e0:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 80033e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80033e6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003508 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80033ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033f2:	dc00      	bgt.n	80033f6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 80033f4:	e001      	b.n	80033fa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 80033f6:	4b45      	ldr	r3, [pc, #276]	; (800350c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80033f8:	60bb      	str	r3, [r7, #8]
      break;
 80033fa:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
          : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 80033fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003400:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003510 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8003404:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340c:	d801      	bhi.n	8003412 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 800340e:	2301      	movs	r3, #1
 8003410:	e04d      	b.n	80034ae <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003412:	edd7 7a02 	vldr	s15, [r7, #8]
 8003416:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800341a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800341e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003422:	d801      	bhi.n	8003428 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8003424:	2302      	movs	r3, #2
 8003426:	e042      	b.n	80034ae <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003428:	edd7 7a02 	vldr	s15, [r7, #8]
 800342c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003430:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003438:	d801      	bhi.n	800343e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 800343a:	2303      	movs	r3, #3
 800343c:	e037      	b.n	80034ae <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800343e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003442:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8003514 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 8003446:	eef4 7ac7 	vcmpe.f32	s15, s14
 800344a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800344e:	d801      	bhi.n	8003454 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8003450:	2304      	movs	r3, #4
 8003452:	e02c      	b.n	80034ae <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003454:	edd7 7a02 	vldr	s15, [r7, #8]
 8003458:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003518 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 800345c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003464:	d801      	bhi.n	800346a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8003466:	2305      	movs	r3, #5
 8003468:	e021      	b.n	80034ae <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800346a:	edd7 7a02 	vldr	s15, [r7, #8]
 800346e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003508 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8003472:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347a:	d801      	bhi.n	8003480 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 800347c:	2306      	movs	r3, #6
 800347e:	e016      	b.n	80034ae <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003480:	edd7 7a02 	vldr	s15, [r7, #8]
 8003484:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800351c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8003488:	eef4 7ac7 	vcmpe.f32	s15, s14
 800348c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003490:	d801      	bhi.n	8003496 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8003492:	2307      	movs	r3, #7
 8003494:	e00b      	b.n	80034ae <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003496:	edd7 7a02 	vldr	s15, [r7, #8]
 800349a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003520 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 800349e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a6:	d801      	bhi.n	80034ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 80034a8:	2308      	movs	r3, #8
 80034aa:	e000      	b.n	80034ae <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80034ac:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 80034ae:	75bb      	strb	r3, [r7, #22]
          : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
          : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
          :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	331c      	adds	r3, #28
 80034b4:	7dba      	ldrb	r2, [r7, #22]
 80034b6:	4611      	mov	r1, r2
 80034b8:	4618      	mov	r0, r3
 80034ba:	f000 fa33 	bl	8003924 <lis2dw12_data_rate_set>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d002      	beq.n	80034ca <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 80034c4:	f04f 33ff 	mov.w	r3, #4294967295
 80034c8:	e018      	b.n	80034fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	331c      	adds	r3, #28
 80034ce:	7dfa      	ldrb	r2, [r7, #23]
 80034d0:	4611      	mov	r1, r2
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 f91e 	bl	8003714 <lis2dw12_power_mode_set>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 80034de:	f04f 33ff 	mov.w	r3, #4294967295
 80034e2:	e00b      	b.n	80034fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	62da      	str	r2, [r3, #44]	; 0x2c
  pObj->acc_operating_mode = Mode;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	79fa      	ldrb	r2, [r7, #7]
 80034ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	79ba      	ldrb	r2, [r7, #6]
 80034f6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	41480000 	.word	0x41480000
 8003508:	43480000 	.word	0x43480000
 800350c:	43480000 	.word	0x43480000
 8003510:	3fcccccd 	.word	0x3fcccccd
 8003514:	42480000 	.word	0x42480000
 8003518:	42c80000 	.word	0x42c80000
 800351c:	43c80000 	.word	0x43c80000
 8003520:	44480000 	.word	0x44480000

08003524 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003530:	460b      	mov	r3, r1
 8003532:	71fb      	strb	r3, [r7, #7]
 8003534:	4613      	mov	r3, r2
 8003536:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	79fa      	ldrb	r2, [r7, #7]
 800353c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	79ba      	ldrb	r2, [r7, #6]
 8003544:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                : (Odr <=   12.5f) ?   12.5f
 8003548:	edd7 7a02 	vldr	s15, [r7, #8]
 800354c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800360c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8003550:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003558:	d801      	bhi.n	800355e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 800355a:	4b2d      	ldr	r3, [pc, #180]	; (8003610 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 800355c:	e04d      	b.n	80035fa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=   25.0f) ?   25.0f
 800355e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003562:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003566:	eef4 7ac7 	vcmpe.f32	s15, s14
 800356a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800356e:	d801      	bhi.n	8003574 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8003570:	4b28      	ldr	r3, [pc, #160]	; (8003614 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8003572:	e042      	b.n	80035fa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=   50.0f) ?   50.0f
 8003574:	edd7 7a02 	vldr	s15, [r7, #8]
 8003578:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800357c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003584:	d801      	bhi.n	800358a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8003586:	4b24      	ldr	r3, [pc, #144]	; (8003618 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8003588:	e037      	b.n	80035fa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  100.0f) ?  100.0f
 800358a:	edd7 7a02 	vldr	s15, [r7, #8]
 800358e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800361c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8003592:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800359a:	d801      	bhi.n	80035a0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 800359c:	4b20      	ldr	r3, [pc, #128]	; (8003620 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 800359e:	e02c      	b.n	80035fa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  200.0f) ?  200.0f
 80035a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80035a4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003624 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 80035a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b0:	d801      	bhi.n	80035b6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 80035b2:	4b1d      	ldr	r3, [pc, #116]	; (8003628 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 80035b4:	e021      	b.n	80035fa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  400.0f) ?  400.0f
 80035b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80035ba:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800362c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 80035be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c6:	d801      	bhi.n	80035cc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 80035c8:	4b19      	ldr	r3, [pc, #100]	; (8003630 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 80035ca:	e016      	b.n	80035fa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  800.0f) ?  800.0f
 80035cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80035d0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003634 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 80035d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035dc:	d801      	bhi.n	80035e2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 80035de:	4b16      	ldr	r3, [pc, #88]	; (8003638 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 80035e0:	e00b      	b.n	80035fa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                :                    1600.0f;
 80035e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80035e6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800363c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 80035ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f2:	d801      	bhi.n	80035f8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80035f4:	4b12      	ldr	r3, [pc, #72]	; (8003640 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 80035f6:	e000      	b.n	80035fa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 80035f8:	4b12      	ldr	r3, [pc, #72]	; (8003644 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	62d3      	str	r3, [r2, #44]	; 0x2c

  return LIS2DW12_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	3fcccccd 	.word	0x3fcccccd
 8003610:	3fcccccd 	.word	0x3fcccccd
 8003614:	41480000 	.word	0x41480000
 8003618:	41c80000 	.word	0x41c80000
 800361c:	42480000 	.word	0x42480000
 8003620:	42480000 	.word	0x42480000
 8003624:	42c80000 	.word	0x42c80000
 8003628:	42c80000 	.word	0x42c80000
 800362c:	43480000 	.word	0x43480000
 8003630:	43480000 	.word	0x43480000
 8003634:	43c80000 	.word	0x43c80000
 8003638:	43c80000 	.word	0x43c80000
 800363c:	44480000 	.word	0x44480000
 8003640:	44480000 	.word	0x44480000
 8003644:	44c80000 	.word	0x44c80000

08003648 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003648:	b590      	push	{r4, r7, lr}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	607a      	str	r2, [r7, #4]
 8003652:	461a      	mov	r2, r3
 8003654:	460b      	mov	r3, r1
 8003656:	72fb      	strb	r3, [r7, #11]
 8003658:	4613      	mov	r3, r2
 800365a:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	695c      	ldr	r4, [r3, #20]
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	7b1b      	ldrb	r3, [r3, #12]
 8003668:	b298      	uxth	r0, r3
 800366a:	7afb      	ldrb	r3, [r7, #11]
 800366c:	b299      	uxth	r1, r3
 800366e:	893b      	ldrh	r3, [r7, #8]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	47a0      	blx	r4
 8003674:	4603      	mov	r3, r0
}
 8003676:	4618      	mov	r0, r3
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	bd90      	pop	{r4, r7, pc}

0800367e <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800367e:	b590      	push	{r4, r7, lr}
 8003680:	b087      	sub	sp, #28
 8003682:	af00      	add	r7, sp, #0
 8003684:	60f8      	str	r0, [r7, #12]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	461a      	mov	r2, r3
 800368a:	460b      	mov	r3, r1
 800368c:	72fb      	strb	r3, [r7, #11]
 800368e:	4613      	mov	r3, r2
 8003690:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	691c      	ldr	r4, [r3, #16]
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	7b1b      	ldrb	r3, [r3, #12]
 800369e:	b298      	uxth	r0, r3
 80036a0:	7afb      	ldrb	r3, [r7, #11]
 80036a2:	b299      	uxth	r1, r3
 80036a4:	893b      	ldrh	r3, [r7, #8]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	47a0      	blx	r4
 80036aa:	4603      	mov	r3, r0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	371c      	adds	r7, #28
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd90      	pop	{r4, r7, pc}

080036b4 <lis2dw12_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80036b4:	b590      	push	{r4, r7, lr}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	607a      	str	r2, [r7, #4]
 80036be:	461a      	mov	r2, r3
 80036c0:	460b      	mov	r3, r1
 80036c2:	72fb      	strb	r3, [r7, #11]
 80036c4:	4613      	mov	r3, r2
 80036c6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	685c      	ldr	r4, [r3, #4]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6898      	ldr	r0, [r3, #8]
 80036d0:	893b      	ldrh	r3, [r7, #8]
 80036d2:	7af9      	ldrb	r1, [r7, #11]
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	47a0      	blx	r4
 80036d8:	6178      	str	r0, [r7, #20]
  return ret;
 80036da:	697b      	ldr	r3, [r7, #20]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	371c      	adds	r7, #28
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd90      	pop	{r4, r7, pc}

080036e4 <lis2dw12_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 80036e4:	b590      	push	{r4, r7, lr}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	607a      	str	r2, [r7, #4]
 80036ee:	461a      	mov	r2, r3
 80036f0:	460b      	mov	r3, r1
 80036f2:	72fb      	strb	r3, [r7, #11]
 80036f4:	4613      	mov	r3, r2
 80036f6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681c      	ldr	r4, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6898      	ldr	r0, [r3, #8]
 8003700:	893b      	ldrh	r3, [r7, #8]
 8003702:	7af9      	ldrb	r1, [r7, #11]
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	47a0      	blx	r4
 8003708:	6178      	str	r0, [r7, #20]
  return ret;
 800370a:	697b      	ldr	r3, [r7, #20]
}
 800370c:	4618      	mov	r0, r3
 800370e:	371c      	adds	r7, #28
 8003710:	46bd      	mov	sp, r7
 8003712:	bd90      	pop	{r4, r7, pc}

08003714 <lis2dw12_power_mode_set>:
  *                  and low_noise in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx, lis2dw12_mode_t val)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8003720:	f107 0210 	add.w	r2, r7, #16
 8003724:	2301      	movs	r3, #1
 8003726:	2120      	movs	r1, #32
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7ff ffc3 	bl	80036b4 <lis2dw12_read_reg>
 800372e:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d118      	bne.n	8003768 <lis2dw12_power_mode_set+0x54>
    ctrl1.mode = ( (uint8_t) val & 0x0CU ) >> 2;
 8003736:	78fb      	ldrb	r3, [r7, #3]
 8003738:	089b      	lsrs	r3, r3, #2
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	b2da      	uxtb	r2, r3
 8003740:	7c3b      	ldrb	r3, [r7, #16]
 8003742:	f362 0383 	bfi	r3, r2, #2, #2
 8003746:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8003748:	78fb      	ldrb	r3, [r7, #3]
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	b2da      	uxtb	r2, r3
 8003750:	7c3b      	ldrb	r3, [r7, #16]
 8003752:	f362 0301 	bfi	r3, r2, #0, #2
 8003756:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8003758:	f107 0210 	add.w	r2, r7, #16
 800375c:	2301      	movs	r3, #1
 800375e:	2120      	movs	r1, #32
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff ffbf 	bl	80036e4 <lis2dw12_write_reg>
 8003766:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d107      	bne.n	800377e <lis2dw12_power_mode_set+0x6a>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &ctrl6, 1);
 800376e:	f107 020c 	add.w	r2, r7, #12
 8003772:	2301      	movs	r3, #1
 8003774:	2125      	movs	r1, #37	; 0x25
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff ff9c 	bl	80036b4 <lis2dw12_read_reg>
 800377c:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d110      	bne.n	80037a6 <lis2dw12_power_mode_set+0x92>
    ctrl6.low_noise = ( (uint8_t) val & 0x10U ) >> 4;
 8003784:	78fb      	ldrb	r3, [r7, #3]
 8003786:	091b      	lsrs	r3, r3, #4
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	b2da      	uxtb	r2, r3
 800378e:	7b3b      	ldrb	r3, [r7, #12]
 8003790:	f362 0382 	bfi	r3, r2, #2, #1
 8003794:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &ctrl6, 1);
 8003796:	f107 020c 	add.w	r2, r7, #12
 800379a:	2301      	movs	r3, #1
 800379c:	2125      	movs	r1, #37	; 0x25
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7ff ffa0 	bl	80036e4 <lis2dw12_write_reg>
 80037a4:	6178      	str	r0, [r7, #20]
  }
  return ret;
 80037a6:	697b      	ldr	r3, [r7, #20]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <lis2dw12_power_mode_get>:
  *                  and low_noise in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx, lis2dw12_mode_t *val)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 80037ba:	f107 0210 	add.w	r2, r7, #16
 80037be:	2301      	movs	r3, #1
 80037c0:	2120      	movs	r1, #32
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7ff ff76 	bl	80036b4 <lis2dw12_read_reg>
 80037c8:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f040 80a3 	bne.w	8003918 <lis2dw12_power_mode_get+0x168>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &ctrl6, 1);
 80037d2:	f107 020c 	add.w	r2, r7, #12
 80037d6:	2301      	movs	r3, #1
 80037d8:	2125      	movs	r1, #37	; 0x25
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff ff6a 	bl	80036b4 <lis2dw12_read_reg>
 80037e0:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80037e2:	7b3b      	ldrb	r3, [r7, #12]
 80037e4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	011a      	lsls	r2, r3, #4
 80037ec:	7c3b      	ldrb	r3, [r7, #16]
 80037ee:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
            ctrl1.lp_mode)) {
 80037f8:	7c3a      	ldrb	r2, [r7, #16]
 80037fa:	f3c2 0201 	ubfx	r2, r2, #0, #2
 80037fe:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8003800:	4413      	add	r3, r2
 8003802:	2b1b      	cmp	r3, #27
 8003804:	f200 8084 	bhi.w	8003910 <lis2dw12_power_mode_get+0x160>
 8003808:	a201      	add	r2, pc, #4	; (adr r2, 8003810 <lis2dw12_power_mode_get+0x60>)
 800380a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380e:	bf00      	nop
 8003810:	080038a1 	.word	0x080038a1
 8003814:	08003899 	.word	0x08003899
 8003818:	08003891 	.word	0x08003891
 800381c:	08003889 	.word	0x08003889
 8003820:	08003881 	.word	0x08003881
 8003824:	08003911 	.word	0x08003911
 8003828:	08003911 	.word	0x08003911
 800382c:	08003911 	.word	0x08003911
 8003830:	080038c1 	.word	0x080038c1
 8003834:	080038b9 	.word	0x080038b9
 8003838:	080038b1 	.word	0x080038b1
 800383c:	080038a9 	.word	0x080038a9
 8003840:	08003911 	.word	0x08003911
 8003844:	08003911 	.word	0x08003911
 8003848:	08003911 	.word	0x08003911
 800384c:	08003911 	.word	0x08003911
 8003850:	080038e9 	.word	0x080038e9
 8003854:	080038e1 	.word	0x080038e1
 8003858:	080038d9 	.word	0x080038d9
 800385c:	080038d1 	.word	0x080038d1
 8003860:	080038c9 	.word	0x080038c9
 8003864:	08003911 	.word	0x08003911
 8003868:	08003911 	.word	0x08003911
 800386c:	08003911 	.word	0x08003911
 8003870:	08003909 	.word	0x08003909
 8003874:	08003901 	.word	0x08003901
 8003878:	080038f9 	.word	0x080038f9
 800387c:	080038f1 	.word	0x080038f1
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2204      	movs	r2, #4
 8003884:	701a      	strb	r2, [r3, #0]
        break;
 8003886:	e048      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	2203      	movs	r2, #3
 800388c:	701a      	strb	r2, [r3, #0]
        break;
 800388e:	e044      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2202      	movs	r2, #2
 8003894:	701a      	strb	r2, [r3, #0]
        break;
 8003896:	e040      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	2201      	movs	r2, #1
 800389c:	701a      	strb	r2, [r3, #0]
        break;
 800389e:	e03c      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	2200      	movs	r2, #0
 80038a4:	701a      	strb	r2, [r3, #0]
        break;
 80038a6:	e038      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	220b      	movs	r2, #11
 80038ac:	701a      	strb	r2, [r3, #0]
        break;
 80038ae:	e034      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	220a      	movs	r2, #10
 80038b4:	701a      	strb	r2, [r3, #0]
        break;
 80038b6:	e030      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	2209      	movs	r2, #9
 80038bc:	701a      	strb	r2, [r3, #0]
        break;
 80038be:	e02c      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	2208      	movs	r2, #8
 80038c4:	701a      	strb	r2, [r3, #0]
        break;
 80038c6:	e028      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	2214      	movs	r2, #20
 80038cc:	701a      	strb	r2, [r3, #0]
        break;
 80038ce:	e024      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2213      	movs	r2, #19
 80038d4:	701a      	strb	r2, [r3, #0]
        break;
 80038d6:	e020      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	2212      	movs	r2, #18
 80038dc:	701a      	strb	r2, [r3, #0]
        break;
 80038de:	e01c      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	2211      	movs	r2, #17
 80038e4:	701a      	strb	r2, [r3, #0]
        break;
 80038e6:	e018      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	2210      	movs	r2, #16
 80038ec:	701a      	strb	r2, [r3, #0]
        break;
 80038ee:	e014      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	221b      	movs	r2, #27
 80038f4:	701a      	strb	r2, [r3, #0]
        break;
 80038f6:	e010      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	221a      	movs	r2, #26
 80038fc:	701a      	strb	r2, [r3, #0]
        break;
 80038fe:	e00c      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	2219      	movs	r2, #25
 8003904:	701a      	strb	r2, [r3, #0]
        break;
 8003906:	e008      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	2218      	movs	r2, #24
 800390c:	701a      	strb	r2, [r3, #0]
        break;
 800390e:	e004      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	2204      	movs	r2, #4
 8003914:	701a      	strb	r2, [r3, #0]
        break;
 8003916:	e000      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
    }
  }
 8003918:	bf00      	nop
  return ret;
 800391a:	697b      	ldr	r3, [r7, #20]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	460b      	mov	r3, r1
 800392e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8003930:	f107 0210 	add.w	r2, r7, #16
 8003934:	2301      	movs	r3, #1
 8003936:	2120      	movs	r1, #32
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff febb 	bl	80036b4 <lis2dw12_read_reg>
 800393e:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10f      	bne.n	8003966 <lis2dw12_data_rate_set+0x42>
    ctrl1.odr = (uint8_t) val;
 8003946:	78fb      	ldrb	r3, [r7, #3]
 8003948:	f003 030f 	and.w	r3, r3, #15
 800394c:	b2da      	uxtb	r2, r3
 800394e:	7c3b      	ldrb	r3, [r7, #16]
 8003950:	f362 1307 	bfi	r3, r2, #4, #4
 8003954:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8003956:	f107 0210 	add.w	r2, r7, #16
 800395a:	2301      	movs	r3, #1
 800395c:	2120      	movs	r1, #32
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff fec0 	bl	80036e4 <lis2dw12_write_reg>
 8003964:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d107      	bne.n	800397c <lis2dw12_data_rate_set+0x58>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3,(uint8_t*) &ctrl3, 1);
 800396c:	f107 020c 	add.w	r2, r7, #12
 8003970:	2301      	movs	r3, #1
 8003972:	2122      	movs	r1, #34	; 0x22
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff fe9d 	bl	80036b4 <lis2dw12_read_reg>
 800397a:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d110      	bne.n	80039a4 <lis2dw12_data_rate_set+0x80>
    ctrl3.slp_mode = ( (uint8_t) val & 0x30U ) >> 4;
 8003982:	78fb      	ldrb	r3, [r7, #3]
 8003984:	091b      	lsrs	r3, r3, #4
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	b2da      	uxtb	r2, r3
 800398c:	7b3b      	ldrb	r3, [r7, #12]
 800398e:	f362 0301 	bfi	r3, r2, #0, #2
 8003992:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3,(uint8_t*) &ctrl3, 1);
 8003994:	f107 020c 	add.w	r2, r7, #12
 8003998:	2301      	movs	r3, #1
 800399a:	2122      	movs	r1, #34	; 0x22
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7ff fea1 	bl	80036e4 <lis2dw12_write_reg>
 80039a2:	6178      	str	r0, [r7, #20]
  }
  return ret;
 80039a4:	697b      	ldr	r3, [r7, #20]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 80039ba:	f107 0210 	add.w	r2, r7, #16
 80039be:	2301      	movs	r3, #1
 80039c0:	2120      	movs	r1, #32
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff fe76 	bl	80036b4 <lis2dw12_read_reg>
 80039c8:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f040 80b3 	bne.w	8003b38 <lis2dw12_data_rate_get+0x188>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3,(uint8_t*) &ctrl3, 1);
 80039d2:	f107 020c 	add.w	r2, r7, #12
 80039d6:	2301      	movs	r3, #1
 80039d8:	2122      	movs	r1, #34	; 0x22
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7ff fe6a 	bl	80036b4 <lis2dw12_read_reg>
 80039e0:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr) {
 80039e2:	7b3b      	ldrb	r3, [r7, #12]
 80039e4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	7c3a      	ldrb	r2, [r7, #16]
 80039ee:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	4413      	add	r3, r2
 80039f6:	2b32      	cmp	r3, #50	; 0x32
 80039f8:	f200 809a 	bhi.w	8003b30 <lis2dw12_data_rate_get+0x180>
 80039fc:	a201      	add	r2, pc, #4	; (adr r2, 8003a04 <lis2dw12_data_rate_get+0x54>)
 80039fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a02:	bf00      	nop
 8003a04:	08003ad1 	.word	0x08003ad1
 8003a08:	08003ad9 	.word	0x08003ad9
 8003a0c:	08003ae1 	.word	0x08003ae1
 8003a10:	08003ae9 	.word	0x08003ae9
 8003a14:	08003af1 	.word	0x08003af1
 8003a18:	08003af9 	.word	0x08003af9
 8003a1c:	08003b01 	.word	0x08003b01
 8003a20:	08003b09 	.word	0x08003b09
 8003a24:	08003b11 	.word	0x08003b11
 8003a28:	08003b19 	.word	0x08003b19
 8003a2c:	08003b31 	.word	0x08003b31
 8003a30:	08003b31 	.word	0x08003b31
 8003a34:	08003b31 	.word	0x08003b31
 8003a38:	08003b31 	.word	0x08003b31
 8003a3c:	08003b31 	.word	0x08003b31
 8003a40:	08003b31 	.word	0x08003b31
 8003a44:	08003b31 	.word	0x08003b31
 8003a48:	08003b31 	.word	0x08003b31
 8003a4c:	08003b29 	.word	0x08003b29
 8003a50:	08003b31 	.word	0x08003b31
 8003a54:	08003b31 	.word	0x08003b31
 8003a58:	08003b31 	.word	0x08003b31
 8003a5c:	08003b31 	.word	0x08003b31
 8003a60:	08003b31 	.word	0x08003b31
 8003a64:	08003b31 	.word	0x08003b31
 8003a68:	08003b31 	.word	0x08003b31
 8003a6c:	08003b31 	.word	0x08003b31
 8003a70:	08003b31 	.word	0x08003b31
 8003a74:	08003b31 	.word	0x08003b31
 8003a78:	08003b31 	.word	0x08003b31
 8003a7c:	08003b31 	.word	0x08003b31
 8003a80:	08003b31 	.word	0x08003b31
 8003a84:	08003b31 	.word	0x08003b31
 8003a88:	08003b31 	.word	0x08003b31
 8003a8c:	08003b31 	.word	0x08003b31
 8003a90:	08003b31 	.word	0x08003b31
 8003a94:	08003b31 	.word	0x08003b31
 8003a98:	08003b31 	.word	0x08003b31
 8003a9c:	08003b31 	.word	0x08003b31
 8003aa0:	08003b31 	.word	0x08003b31
 8003aa4:	08003b31 	.word	0x08003b31
 8003aa8:	08003b31 	.word	0x08003b31
 8003aac:	08003b31 	.word	0x08003b31
 8003ab0:	08003b31 	.word	0x08003b31
 8003ab4:	08003b31 	.word	0x08003b31
 8003ab8:	08003b31 	.word	0x08003b31
 8003abc:	08003b31 	.word	0x08003b31
 8003ac0:	08003b31 	.word	0x08003b31
 8003ac4:	08003b31 	.word	0x08003b31
 8003ac8:	08003b31 	.word	0x08003b31
 8003acc:	08003b21 	.word	0x08003b21
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	701a      	strb	r2, [r3, #0]
        break;
 8003ad6:	e030      	b.n	8003b3a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	2201      	movs	r2, #1
 8003adc:	701a      	strb	r2, [r3, #0]
        break;
 8003ade:	e02c      	b.n	8003b3a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	701a      	strb	r2, [r3, #0]
        break;
 8003ae6:	e028      	b.n	8003b3a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	2203      	movs	r2, #3
 8003aec:	701a      	strb	r2, [r3, #0]
        break;
 8003aee:	e024      	b.n	8003b3a <lis2dw12_data_rate_get+0x18a>
       case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2204      	movs	r2, #4
 8003af4:	701a      	strb	r2, [r3, #0]
        break;
 8003af6:	e020      	b.n	8003b3a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2205      	movs	r2, #5
 8003afc:	701a      	strb	r2, [r3, #0]
        break;
 8003afe:	e01c      	b.n	8003b3a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2206      	movs	r2, #6
 8003b04:	701a      	strb	r2, [r3, #0]
        break;
 8003b06:	e018      	b.n	8003b3a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	2207      	movs	r2, #7
 8003b0c:	701a      	strb	r2, [r3, #0]
        break;
 8003b0e:	e014      	b.n	8003b3a <lis2dw12_data_rate_get+0x18a>
       case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	2208      	movs	r2, #8
 8003b14:	701a      	strb	r2, [r3, #0]
        break;
 8003b16:	e010      	b.n	8003b3a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2209      	movs	r2, #9
 8003b1c:	701a      	strb	r2, [r3, #0]
        break;
 8003b1e:	e00c      	b.n	8003b3a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2232      	movs	r2, #50	; 0x32
 8003b24:	701a      	strb	r2, [r3, #0]
        break;
 8003b26:	e008      	b.n	8003b3a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	2212      	movs	r2, #18
 8003b2c:	701a      	strb	r2, [r3, #0]
        break;
 8003b2e:	e004      	b.n	8003b3a <lis2dw12_data_rate_get+0x18a>
      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2200      	movs	r2, #0
 8003b34:	701a      	strb	r2, [r3, #0]
        break;
 8003b36:	e000      	b.n	8003b3a <lis2dw12_data_rate_get+0x18a>
    }
  }
 8003b38:	bf00      	nop
  return ret;
 8003b3a:	697b      	ldr	r3, [r7, #20]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 8003b50:	f107 0208 	add.w	r2, r7, #8
 8003b54:	2301      	movs	r3, #1
 8003b56:	2121      	movs	r1, #33	; 0x21
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7ff fdab 	bl	80036b4 <lis2dw12_read_reg>
 8003b5e:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10f      	bne.n	8003b86 <lis2dw12_block_data_update_set+0x42>
    reg.bdu = val;
 8003b66:	78fb      	ldrb	r3, [r7, #3]
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	7a3b      	ldrb	r3, [r7, #8]
 8003b70:	f362 03c3 	bfi	r3, r2, #3, #1
 8003b74:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 8003b76:	f107 0208 	add.w	r2, r7, #8
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	2121      	movs	r1, #33	; 0x21
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7ff fdb0 	bl	80036e4 <lis2dw12_write_reg>
 8003b84:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8003b86:	68fb      	ldr	r3, [r7, #12]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &reg, 1);
 8003b9c:	f107 0208 	add.w	r2, r7, #8
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	2125      	movs	r1, #37	; 0x25
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7ff fd85 	bl	80036b4 <lis2dw12_read_reg>
 8003baa:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10f      	bne.n	8003bd2 <lis2dw12_full_scale_set+0x42>
    reg.fs = (uint8_t) val;
 8003bb2:	78fb      	ldrb	r3, [r7, #3]
 8003bb4:	f003 0303 	and.w	r3, r3, #3
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	7a3b      	ldrb	r3, [r7, #8]
 8003bbc:	f362 1305 	bfi	r3, r2, #4, #2
 8003bc0:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &reg, 1);
 8003bc2:	f107 0208 	add.w	r2, r7, #8
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	2125      	movs	r1, #37	; 0x25
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7ff fd8a 	bl	80036e4 <lis2dw12_write_reg>
 8003bd0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &reg, 1);
 8003be6:	f107 0208 	add.w	r2, r7, #8
 8003bea:	2301      	movs	r3, #1
 8003bec:	2125      	movs	r1, #37	; 0x25
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7ff fd60 	bl	80036b4 <lis2dw12_read_reg>
 8003bf4:	60f8      	str	r0, [r7, #12]

  switch (reg.fs) {
 8003bf6:	7a3b      	ldrb	r3, [r7, #8]
 8003bf8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	d81a      	bhi.n	8003c38 <lis2dw12_full_scale_get+0x5c>
 8003c02:	a201      	add	r2, pc, #4	; (adr r2, 8003c08 <lis2dw12_full_scale_get+0x2c>)
 8003c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c08:	08003c19 	.word	0x08003c19
 8003c0c:	08003c21 	.word	0x08003c21
 8003c10:	08003c29 	.word	0x08003c29
 8003c14:	08003c31 	.word	0x08003c31
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	701a      	strb	r2, [r3, #0]
      break;
 8003c1e:	e00f      	b.n	8003c40 <lis2dw12_full_scale_get+0x64>
    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	2201      	movs	r2, #1
 8003c24:	701a      	strb	r2, [r3, #0]
      break;
 8003c26:	e00b      	b.n	8003c40 <lis2dw12_full_scale_get+0x64>
    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	701a      	strb	r2, [r3, #0]
      break;
 8003c2e:	e007      	b.n	8003c40 <lis2dw12_full_scale_get+0x64>
    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	2203      	movs	r2, #3
 8003c34:	701a      	strb	r2, [r3, #0]
      break;
 8003c36:	e003      	b.n	8003c40 <lis2dw12_full_scale_get+0x64>
    default:
      *val = LIS2DW12_2g;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	701a      	strb	r2, [r3, #0]
      break;
 8003c3e:	bf00      	nop
  }
  return ret;
 8003c40:	68fb      	ldr	r3, [r7, #12]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop

08003c4c <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8003c56:	f107 020c 	add.w	r2, r7, #12
 8003c5a:	2306      	movs	r3, #6
 8003c5c:	2128      	movs	r1, #40	; 0x28
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7ff fd28 	bl	80036b4 <lis2dw12_read_reg>
 8003c64:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003c66:	7b7b      	ldrb	r3, [r7, #13]
 8003c68:	b21a      	sxth	r2, r3
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	021b      	lsls	r3, r3, #8
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	7b3b      	ldrb	r3, [r7, #12]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	4413      	add	r3, r2
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	b21a      	sxth	r2, r3
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003c88:	7bfa      	ldrb	r2, [r7, #15]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	3302      	adds	r3, #2
 8003c8e:	b212      	sxth	r2, r2
 8003c90:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	3302      	adds	r3, #2
 8003c96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	021b      	lsls	r3, r3, #8
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	7bbb      	ldrb	r3, [r7, #14]
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	4413      	add	r3, r2
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	3302      	adds	r3, #2
 8003cac:	b212      	sxth	r2, r2
 8003cae:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003cb0:	7c7a      	ldrb	r2, [r7, #17]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	b212      	sxth	r2, r2
 8003cb8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	021b      	lsls	r3, r3, #8
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	7c3b      	ldrb	r3, [r7, #16]
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	4413      	add	r3, r2
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	b212      	sxth	r2, r2
 8003cd6:	801a      	strh	r2, [r3, #0]

  return ret;
 8003cd8:	697b      	ldr	r3, [r7, #20]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b084      	sub	sp, #16
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8003cec:	2301      	movs	r3, #1
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	210f      	movs	r1, #15
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7ff fcde 	bl	80036b4 <lis2dw12_read_reg>
 8003cf8:	60f8      	str	r0, [r7, #12]
  return ret;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 8003d10:	f107 0208 	add.w	r2, r7, #8
 8003d14:	2301      	movs	r3, #1
 8003d16:	2121      	movs	r1, #33	; 0x21
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7ff fccb 	bl	80036b4 <lis2dw12_read_reg>
 8003d1e:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10f      	bne.n	8003d46 <lis2dw12_auto_increment_set+0x42>
    reg.if_add_inc = val;
 8003d26:	78fb      	ldrb	r3, [r7, #3]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	7a3b      	ldrb	r3, [r7, #8]
 8003d30:	f362 0382 	bfi	r3, r2, #2, #1
 8003d34:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 8003d36:	f107 0208 	add.w	r2, r7, #8
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	2121      	movs	r1, #33	; 0x21
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7ff fcd0 	bl	80036e4 <lis2dw12_write_reg>
 8003d44:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8003d46:	68fb      	ldr	r3, [r7, #12]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <lis2dw12_fifo_mode_set>:
  * @param  val      change the values of fmode in reg FIFO_CTRL
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx, lis2dw12_fmode_t val)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL,(uint8_t*) &reg, 1);
 8003d5c:	f107 0208 	add.w	r2, r7, #8
 8003d60:	2301      	movs	r3, #1
 8003d62:	212e      	movs	r1, #46	; 0x2e
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff fca5 	bl	80036b4 <lis2dw12_read_reg>
 8003d6a:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10f      	bne.n	8003d92 <lis2dw12_fifo_mode_set+0x42>
    reg.fmode = (uint8_t) val;
 8003d72:	78fb      	ldrb	r3, [r7, #3]
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	7a3b      	ldrb	r3, [r7, #8]
 8003d7c:	f362 1347 	bfi	r3, r2, #5, #3
 8003d80:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL,(uint8_t*) &reg, 1);
 8003d82:	f107 0208 	add.w	r2, r7, #8
 8003d86:	2301      	movs	r3, #1
 8003d88:	212e      	movs	r1, #46	; 0x2e
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7ff fcaa 	bl	80036e4 <lis2dw12_write_reg>
 8003d90:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8003d92:	68fb      	ldr	r3, [r7, #12]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <LIS2MDL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8003da6:	2300      	movs	r3, #0
 8003da8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d103      	bne.n	8003db8 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8003db0:	f04f 33ff 	mov.w	r3, #4294967295
 8003db4:	60fb      	str	r3, [r7, #12]
 8003db6:	e05d      	b.n	8003e74 <LIS2MDL_RegisterBusIO+0xd8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	7b1a      	ldrb	r2, [r3, #12]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	691a      	ldr	r2, [r3, #16]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	695a      	ldr	r2, [r3, #20]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	699a      	ldr	r2, [r3, #24]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a23      	ldr	r2, [pc, #140]	; (8003e80 <LIS2MDL_RegisterBusIO+0xe4>)
 8003df4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a22      	ldr	r2, [pc, #136]	; (8003e84 <LIS2MDL_RegisterBusIO+0xe8>)
 8003dfa:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d103      	bne.n	8003e12 <LIS2MDL_RegisterBusIO+0x76>
    {
      ret = LIS2MDL_ERROR;
 8003e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	e030      	b.n	8003e74 <LIS2MDL_RegisterBusIO+0xd8>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4798      	blx	r3
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <LIS2MDL_RegisterBusIO+0x8a>
    {
      ret = LIS2MDL_ERROR;
 8003e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	e026      	b.n	8003e74 <LIS2MDL_RegisterBusIO+0xd8>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d022      	beq.n	8003e74 <LIS2MDL_RegisterBusIO+0xd8>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d11d      	bne.n	8003e74 <LIS2MDL_RegisterBusIO+0xd8>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d10d      	bne.n	8003e5c <LIS2MDL_RegisterBusIO+0xc0>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8003e40:	2334      	movs	r3, #52	; 0x34
 8003e42:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8003e44:	7afb      	ldrb	r3, [r7, #11]
 8003e46:	461a      	mov	r2, r3
 8003e48:	2162      	movs	r1, #98	; 0x62
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 fa15 	bl	800427a <LIS2MDL_Write_Reg>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00e      	beq.n	8003e74 <LIS2MDL_RegisterBusIO+0xd8>
            {
              return LIS2MDL_ERROR;
 8003e56:	f04f 33ff 	mov.w	r3, #4294967295
 8003e5a:	e00c      	b.n	8003e76 <LIS2MDL_RegisterBusIO+0xda>
            }
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	331c      	adds	r3, #28
 8003e60:	2101      	movs	r1, #1
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 fbe2 	bl	800462c <lis2mdl_i2c_interface_set>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <LIS2MDL_RegisterBusIO+0xd8>
            {
              return LIS2MDL_ERROR;
 8003e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e72:	e000      	b.n	8003e76 <LIS2MDL_RegisterBusIO+0xda>
        }
      }
    }
  }

  return ret;
 8003e74:	68fb      	ldr	r3, [r7, #12]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	080042b1 	.word	0x080042b1
 8003e84:	08004313 	.word	0x08004313

08003e88 <LIS2MDL_Init>:
 * @brief  Initialize the LIS2MDL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	331c      	adds	r3, #28
 8003e94:	2101      	movs	r1, #1
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 fb20 	bl	80044dc <lis2mdl_block_data_update_set>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <LIS2MDL_Init+0x20>
  {
    return LIS2MDL_ERROR;
 8003ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea6:	e028      	b.n	8003efa <LIS2MDL_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	331c      	adds	r3, #28
 8003eac:	2102      	movs	r1, #2
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 fa90 	bl	80043d4 <lis2mdl_operating_mode_set>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d002      	beq.n	8003ec0 <LIS2MDL_Init+0x38>
  {
    return LIS2MDL_ERROR;
 8003eba:	f04f 33ff 	mov.w	r3, #4294967295
 8003ebe:	e01c      	b.n	8003efa <LIS2MDL_Init+0x72>
  }

  /* Output data rate selection */
  if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	331c      	adds	r3, #28
 8003ec4:	2103      	movs	r1, #3
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 faaa 	bl	8004420 <lis2mdl_data_rate_set>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d002      	beq.n	8003ed8 <LIS2MDL_Init+0x50>
  {
    return LIS2MDL_ERROR;
 8003ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed6:	e010      	b.n	8003efa <LIS2MDL_Init+0x72>
  }

  /* Self Test disabled. */
  if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	331c      	adds	r3, #28
 8003edc:	2100      	movs	r1, #0
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 fb7e 	bl	80045e0 <lis2mdl_self_test_set>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <LIS2MDL_Init+0x68>
  {
    return LIS2MDL_ERROR;
 8003eea:	f04f 33ff 	mov.w	r3, #4294967295
 8003eee:	e004      	b.n	8003efa <LIS2MDL_Init+0x72>
  }

  pObj->is_initialized = 1;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <LIS2MDL_DeInit>:
 * @brief  Deinitialize the LIS2MDL magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b082      	sub	sp, #8
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f874 	bl	8003ff8 <LIS2MDL_MAG_Disable>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8003f16:	f04f 33ff 	mov.w	r3, #4294967295
 8003f1a:	e004      	b.n	8003f26 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <LIS2MDL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b082      	sub	sp, #8
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
 8003f36:	6039      	str	r1, [r7, #0]
  if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	331c      	adds	r3, #28
 8003f3c:	6839      	ldr	r1, [r7, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 fb3d 	bl	80045be <lis2mdl_device_id_get>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <LIS2MDL_ReadID+0x22>
  {
    return LIS2MDL_ERROR;
 8003f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f4e:	e000      	b.n	8003f52 <LIS2MDL_ReadID+0x24>
  }

  return LIS2MDL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <LIS2MDL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2201      	movs	r2, #1
 8003f76:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2200      	movs	r2, #0
 8003f82:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	2200      	movs	r2, #0
 8003f88:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2232      	movs	r2, #50	; 0x32
 8003f8e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	f04f 0200 	mov.w	r2, #0
 8003f9e:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	4a04      	ldr	r2, [pc, #16]	; (8003fb4 <LIS2MDL_GetCapabilities+0x58>)
 8003fa4:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	42c80000 	.word	0x42c80000

08003fb8 <LIS2MDL_MAG_Enable>:
 * @brief Enable the LIS2MDL magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d101      	bne.n	8003fce <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	e010      	b.n	8003ff0 <LIS2MDL_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	331c      	adds	r3, #28
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 f9fd 	bl	80043d4 <lis2mdl_operating_mode_set>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <LIS2MDL_MAG_Enable+0x2e>
  {
    return LIS2MDL_ERROR;
 8003fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe4:	e004      	b.n	8003ff0 <LIS2MDL_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <LIS2MDL_MAG_Disable>:
 * @brief Disable the LIS2MDL magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 800400a:	2300      	movs	r3, #0
 800400c:	e010      	b.n	8004030 <LIS2MDL_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	331c      	adds	r3, #28
 8004012:	2102      	movs	r1, #2
 8004014:	4618      	mov	r0, r3
 8004016:	f000 f9dd 	bl	80043d4 <lis2mdl_operating_mode_set>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <LIS2MDL_MAG_Disable+0x2e>
  {
    return LIS2MDL_ERROR;
 8004020:	f04f 33ff 	mov.w	r3, #4294967295
 8004024:	e004      	b.n	8004030 <LIS2MDL_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <LIS2MDL_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8004048:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <LIS2MDL_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	331c      	adds	r3, #28
 800406a:	f107 020b 	add.w	r2, r7, #11
 800406e:	4611      	mov	r1, r2
 8004070:	4618      	mov	r0, r3
 8004072:	f000 f9fb 	bl	800446c <lis2mdl_data_rate_get>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 800407c:	f04f 33ff 	mov.w	r3, #4294967295
 8004080:	e023      	b.n	80040ca <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8004082:	7afb      	ldrb	r3, [r7, #11]
 8004084:	2b03      	cmp	r3, #3
 8004086:	d81b      	bhi.n	80040c0 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8004088:	a201      	add	r2, pc, #4	; (adr r2, 8004090 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 800408a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408e:	bf00      	nop
 8004090:	080040a1 	.word	0x080040a1
 8004094:	080040a9 	.word	0x080040a9
 8004098:	080040b1 	.word	0x080040b1
 800409c:	080040b9 	.word	0x080040b9
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	4a0c      	ldr	r2, [pc, #48]	; (80040d4 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 80040a4:	601a      	str	r2, [r3, #0]
      break;
 80040a6:	e00f      	b.n	80040c8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	4a0b      	ldr	r2, [pc, #44]	; (80040d8 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 80040ac:	601a      	str	r2, [r3, #0]
      break;
 80040ae:	e00b      	b.n	80040c8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	4a0a      	ldr	r2, [pc, #40]	; (80040dc <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 80040b4:	601a      	str	r2, [r3, #0]
      break;
 80040b6:	e007      	b.n	80040c8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	4a09      	ldr	r2, [pc, #36]	; (80040e0 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 80040bc:	601a      	str	r2, [r3, #0]
      break;
 80040be:	e003      	b.n	80040c8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 80040c0:	f04f 33ff 	mov.w	r3, #4294967295
 80040c4:	60fb      	str	r3, [r7, #12]
      break;
 80040c6:	bf00      	nop
  }

  return ret;
 80040c8:	68fb      	ldr	r3, [r7, #12]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	41200000 	.word	0x41200000
 80040d8:	41a00000 	.word	0x41a00000
 80040dc:	42480000 	.word	0x42480000
 80040e0:	42c80000 	.word	0x42c80000

080040e4 <LIS2MDL_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 80040f0:	edd7 7a00 	vldr	s15, [r7]
 80040f4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80040f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004100:	d801      	bhi.n	8004106 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8004102:	2300      	movs	r3, #0
 8004104:	e016      	b.n	8004134 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8004106:	edd7 7a00 	vldr	s15, [r7]
 800410a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800410e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004116:	d801      	bhi.n	800411c <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8004118:	2301      	movs	r3, #1
 800411a:	e00b      	b.n	8004134 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800411c:	edd7 7a00 	vldr	s15, [r7]
 8004120:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800415c <LIS2MDL_MAG_SetOutputDataRate+0x78>
 8004124:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800412c:	d801      	bhi.n	8004132 <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 800412e:	2302      	movs	r3, #2
 8004130:	e000      	b.n	8004134 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8004132:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8004134:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	331c      	adds	r3, #28
 800413a:	7bfa      	ldrb	r2, [r7, #15]
 800413c:	4611      	mov	r1, r2
 800413e:	4618      	mov	r0, r3
 8004140:	f000 f96e 	bl	8004420 <lis2mdl_data_rate_set>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <LIS2MDL_MAG_SetOutputDataRate+0x6c>
  {
    return LIS2MDL_ERROR;
 800414a:	f04f 33ff 	mov.w	r3, #4294967295
 800414e:	e000      	b.n	8004152 <LIS2MDL_MAG_SetOutputDataRate+0x6e>
  }

  return LIS2MDL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	42480000 	.word	0x42480000

08004160 <LIS2MDL_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2232      	movs	r2, #50	; 0x32
 800416e:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <LIS2MDL_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <LIS2MDL_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	331c      	adds	r3, #28
 80041a4:	f107 0208 	add.w	r2, r7, #8
 80041a8:	4611      	mov	r1, r2
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 f9bc 	bl	8004528 <lis2mdl_magnetic_raw_get>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d002      	beq.n	80041bc <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 80041b6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ba:	e00c      	b.n	80041d6 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80041bc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80041c4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80041cc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <LIS2MDL_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b086      	sub	sp, #24
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	331c      	adds	r3, #28
 80041ec:	f107 0210 	add.w	r2, r7, #16
 80041f0:	4611      	mov	r1, r2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 f998 	bl	8004528 <lis2mdl_magnetic_raw_get>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <LIS2MDL_MAG_GetAxes+0x26>
  {
    return LIS2MDL_ERROR;
 80041fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004202:	e036      	b.n	8004272 <LIS2MDL_MAG_GetAxes+0x94>
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8004204:	f107 030c 	add.w	r3, r7, #12
 8004208:	4619      	mov	r1, r3
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7ff ff14 	bl	8004038 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004210:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004214:	ee07 3a90 	vmov	s15, r3
 8004218:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800421c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004224:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004228:	ee17 2a90 	vmov	r2, s15
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004230:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004234:	ee07 3a90 	vmov	s15, r3
 8004238:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800423c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004244:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004248:	ee17 2a90 	vmov	r2, s15
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004250:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004254:	ee07 3a90 	vmov	s15, r3
 8004258:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800425c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004264:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004268:	ee17 2a90 	vmov	r2, s15
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <LIS2MDL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b082      	sub	sp, #8
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
 8004282:	460b      	mov	r3, r1
 8004284:	70fb      	strb	r3, [r7, #3]
 8004286:	4613      	mov	r3, r2
 8004288:	70bb      	strb	r3, [r7, #2]
  if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f103 001c 	add.w	r0, r3, #28
 8004290:	1cba      	adds	r2, r7, #2
 8004292:	78f9      	ldrb	r1, [r7, #3]
 8004294:	2301      	movs	r3, #1
 8004296:	f000 f885 	bl	80043a4 <lis2mdl_write_reg>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <LIS2MDL_Write_Reg+0x2c>
  {
    return LIS2MDL_ERROR;
 80042a0:	f04f 33ff 	mov.w	r3, #4294967295
 80042a4:	e000      	b.n	80042a8 <LIS2MDL_Write_Reg+0x2e>
  }

  return LIS2MDL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80042b0:	b590      	push	{r4, r7, lr}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	607a      	str	r2, [r7, #4]
 80042ba:	461a      	mov	r2, r3
 80042bc:	460b      	mov	r3, r1
 80042be:	72fb      	strb	r3, [r7, #11]
 80042c0:	4613      	mov	r3, r2
 80042c2:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10e      	bne.n	80042ee <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	695c      	ldr	r4, [r3, #20]
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	7b1b      	ldrb	r3, [r3, #12]
 80042d8:	b298      	uxth	r0, r3
 80042da:	7afb      	ldrb	r3, [r7, #11]
 80042dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	b299      	uxth	r1, r3
 80042e4:	893b      	ldrh	r3, [r7, #8]
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	47a0      	blx	r4
 80042ea:	4603      	mov	r3, r0
 80042ec:	e00d      	b.n	800430a <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	695c      	ldr	r4, [r3, #20]
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	7b1b      	ldrb	r3, [r3, #12]
 80042f6:	b298      	uxth	r0, r3
 80042f8:	7afb      	ldrb	r3, [r7, #11]
 80042fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	b299      	uxth	r1, r3
 8004302:	893b      	ldrh	r3, [r7, #8]
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	47a0      	blx	r4
 8004308:	4603      	mov	r3, r0
  }
}
 800430a:	4618      	mov	r0, r3
 800430c:	371c      	adds	r7, #28
 800430e:	46bd      	mov	sp, r7
 8004310:	bd90      	pop	{r4, r7, pc}

08004312 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004312:	b590      	push	{r4, r7, lr}
 8004314:	b087      	sub	sp, #28
 8004316:	af00      	add	r7, sp, #0
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	461a      	mov	r2, r3
 800431e:	460b      	mov	r3, r1
 8004320:	72fb      	strb	r3, [r7, #11]
 8004322:	4613      	mov	r3, r2
 8004324:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10e      	bne.n	8004350 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	691c      	ldr	r4, [r3, #16]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	7b1b      	ldrb	r3, [r3, #12]
 800433a:	b298      	uxth	r0, r3
 800433c:	7afb      	ldrb	r3, [r7, #11]
 800433e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004342:	b2db      	uxtb	r3, r3
 8004344:	b299      	uxth	r1, r3
 8004346:	893b      	ldrh	r3, [r7, #8]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	47a0      	blx	r4
 800434c:	4603      	mov	r3, r0
 800434e:	e00d      	b.n	800436c <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	691c      	ldr	r4, [r3, #16]
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	7b1b      	ldrb	r3, [r3, #12]
 8004358:	b298      	uxth	r0, r3
 800435a:	7afb      	ldrb	r3, [r7, #11]
 800435c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004360:	b2db      	uxtb	r3, r3
 8004362:	b299      	uxth	r1, r3
 8004364:	893b      	ldrh	r3, [r7, #8]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	47a0      	blx	r4
 800436a:	4603      	mov	r3, r0
  }
}
 800436c:	4618      	mov	r0, r3
 800436e:	371c      	adds	r7, #28
 8004370:	46bd      	mov	sp, r7
 8004372:	bd90      	pop	{r4, r7, pc}

08004374 <lis2mdl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8004374:	b590      	push	{r4, r7, lr}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	607a      	str	r2, [r7, #4]
 800437e:	461a      	mov	r2, r3
 8004380:	460b      	mov	r3, r1
 8004382:	72fb      	strb	r3, [r7, #11]
 8004384:	4613      	mov	r3, r2
 8004386:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	685c      	ldr	r4, [r3, #4]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6898      	ldr	r0, [r3, #8]
 8004390:	893b      	ldrh	r3, [r7, #8]
 8004392:	7af9      	ldrb	r1, [r7, #11]
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	47a0      	blx	r4
 8004398:	6178      	str	r0, [r7, #20]
  return ret;
 800439a:	697b      	ldr	r3, [r7, #20]
}
 800439c:	4618      	mov	r0, r3
 800439e:	371c      	adds	r7, #28
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd90      	pop	{r4, r7, pc}

080043a4 <lis2mdl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80043a4:	b590      	push	{r4, r7, lr}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	607a      	str	r2, [r7, #4]
 80043ae:	461a      	mov	r2, r3
 80043b0:	460b      	mov	r3, r1
 80043b2:	72fb      	strb	r3, [r7, #11]
 80043b4:	4613      	mov	r3, r2
 80043b6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681c      	ldr	r4, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6898      	ldr	r0, [r3, #8]
 80043c0:	893b      	ldrh	r3, [r7, #8]
 80043c2:	7af9      	ldrb	r1, [r7, #11]
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	47a0      	blx	r4
 80043c8:	6178      	str	r0, [r7, #20]
  return ret;
 80043ca:	697b      	ldr	r3, [r7, #20]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	371c      	adds	r7, #28
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd90      	pop	{r4, r7, pc}

080043d4 <lis2mdl_operating_mode_set>:
  * @param  val    change the values of md in reg CFG_REG_A
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx, lis2mdl_md_t val)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	460b      	mov	r3, r1
 80043de:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 80043e0:	f107 0208 	add.w	r2, r7, #8
 80043e4:	2301      	movs	r3, #1
 80043e6:	2160      	movs	r1, #96	; 0x60
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7ff ffc3 	bl	8004374 <lis2mdl_read_reg>
 80043ee:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10f      	bne.n	8004416 <lis2mdl_operating_mode_set+0x42>
    reg.md = (uint8_t)val;
 80043f6:	78fb      	ldrb	r3, [r7, #3]
 80043f8:	f003 0303 	and.w	r3, r3, #3
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	7a3b      	ldrb	r3, [r7, #8]
 8004400:	f362 0301 	bfi	r3, r2, #0, #2
 8004404:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8004406:	f107 0208 	add.w	r2, r7, #8
 800440a:	2301      	movs	r3, #1
 800440c:	2160      	movs	r1, #96	; 0x60
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff ffc8 	bl	80043a4 <lis2mdl_write_reg>
 8004414:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004416:	68fb      	ldr	r3, [r7, #12]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 800442c:	f107 0208 	add.w	r2, r7, #8
 8004430:	2301      	movs	r3, #1
 8004432:	2160      	movs	r1, #96	; 0x60
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7ff ff9d 	bl	8004374 <lis2mdl_read_reg>
 800443a:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10f      	bne.n	8004462 <lis2mdl_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8004442:	78fb      	ldrb	r3, [r7, #3]
 8004444:	f003 0303 	and.w	r3, r3, #3
 8004448:	b2da      	uxtb	r2, r3
 800444a:	7a3b      	ldrb	r3, [r7, #8]
 800444c:	f362 0383 	bfi	r3, r2, #2, #2
 8004450:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8004452:	f107 0208 	add.w	r2, r7, #8
 8004456:	2301      	movs	r3, #1
 8004458:	2160      	movs	r1, #96	; 0x60
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7ff ffa2 	bl	80043a4 <lis2mdl_write_reg>
 8004460:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004462:	68fb      	ldr	r3, [r7, #12]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8004476:	f107 0208 	add.w	r2, r7, #8
 800447a:	2301      	movs	r3, #1
 800447c:	2160      	movs	r1, #96	; 0x60
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7ff ff78 	bl	8004374 <lis2mdl_read_reg>
 8004484:	60f8      	str	r0, [r7, #12]
  switch (reg.odr){
 8004486:	7a3b      	ldrb	r3, [r7, #8]
 8004488:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b03      	cmp	r3, #3
 8004490:	d81a      	bhi.n	80044c8 <lis2mdl_data_rate_get+0x5c>
 8004492:	a201      	add	r2, pc, #4	; (adr r2, 8004498 <lis2mdl_data_rate_get+0x2c>)
 8004494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004498:	080044a9 	.word	0x080044a9
 800449c:	080044b1 	.word	0x080044b1
 80044a0:	080044b9 	.word	0x080044b9
 80044a4:	080044c1 	.word	0x080044c1
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	2200      	movs	r2, #0
 80044ac:	701a      	strb	r2, [r3, #0]
      break;
 80044ae:	e00f      	b.n	80044d0 <lis2mdl_data_rate_get+0x64>
    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	2201      	movs	r2, #1
 80044b4:	701a      	strb	r2, [r3, #0]
      break;
 80044b6:	e00b      	b.n	80044d0 <lis2mdl_data_rate_get+0x64>
    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	2202      	movs	r2, #2
 80044bc:	701a      	strb	r2, [r3, #0]
      break;
 80044be:	e007      	b.n	80044d0 <lis2mdl_data_rate_get+0x64>
    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	2203      	movs	r2, #3
 80044c4:	701a      	strb	r2, [r3, #0]
      break;
 80044c6:	e003      	b.n	80044d0 <lis2mdl_data_rate_get+0x64>
    default:
      *val = LIS2MDL_ODR_10Hz;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	2200      	movs	r2, #0
 80044cc:	701a      	strb	r2, [r3, #0]
      break;
 80044ce:	bf00      	nop
  }
  return ret;
 80044d0:	68fb      	ldr	r3, [r7, #12]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop

080044dc <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	460b      	mov	r3, r1
 80044e6:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 80044e8:	f107 0208 	add.w	r2, r7, #8
 80044ec:	2301      	movs	r3, #1
 80044ee:	2162      	movs	r1, #98	; 0x62
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f7ff ff3f 	bl	8004374 <lis2mdl_read_reg>
 80044f6:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10f      	bne.n	800451e <lis2mdl_block_data_update_set+0x42>
    reg.bdu = val;
 80044fe:	78fb      	ldrb	r3, [r7, #3]
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	b2da      	uxtb	r2, r3
 8004506:	7a3b      	ldrb	r3, [r7, #8]
 8004508:	f362 1304 	bfi	r3, r2, #4, #1
 800450c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 800450e:	f107 0208 	add.w	r2, r7, #8
 8004512:	2301      	movs	r3, #1
 8004514:	2162      	movs	r1, #98	; 0x62
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7ff ff44 	bl	80043a4 <lis2mdl_write_reg>
 800451c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800451e:	68fb      	ldr	r3, [r7, #12]
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8004532:	f107 020c 	add.w	r2, r7, #12
 8004536:	2306      	movs	r3, #6
 8004538:	2168      	movs	r1, #104	; 0x68
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7ff ff1a 	bl	8004374 <lis2mdl_read_reg>
 8004540:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004542:	7b7b      	ldrb	r3, [r7, #13]
 8004544:	b21a      	sxth	r2, r3
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004550:	b29b      	uxth	r3, r3
 8004552:	021b      	lsls	r3, r3, #8
 8004554:	b29a      	uxth	r2, r3
 8004556:	7b3b      	ldrb	r3, [r7, #12]
 8004558:	b29b      	uxth	r3, r3
 800455a:	4413      	add	r3, r2
 800455c:	b29b      	uxth	r3, r3
 800455e:	b21a      	sxth	r2, r3
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004564:	7bfa      	ldrb	r2, [r7, #15]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	3302      	adds	r3, #2
 800456a:	b212      	sxth	r2, r2
 800456c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	3302      	adds	r3, #2
 8004572:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004576:	b29b      	uxth	r3, r3
 8004578:	021b      	lsls	r3, r3, #8
 800457a:	b29a      	uxth	r2, r3
 800457c:	7bbb      	ldrb	r3, [r7, #14]
 800457e:	b29b      	uxth	r3, r3
 8004580:	4413      	add	r3, r2
 8004582:	b29a      	uxth	r2, r3
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	3302      	adds	r3, #2
 8004588:	b212      	sxth	r2, r2
 800458a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800458c:	7c7a      	ldrb	r2, [r7, #17]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	3304      	adds	r3, #4
 8004592:	b212      	sxth	r2, r2
 8004594:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	3304      	adds	r3, #4
 800459a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	021b      	lsls	r3, r3, #8
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	7c3b      	ldrb	r3, [r7, #16]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	4413      	add	r3, r2
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	3304      	adds	r3, #4
 80045b0:	b212      	sxth	r2, r2
 80045b2:	801a      	strh	r2, [r3, #0]

  return ret;
 80045b4:	697b      	ldr	r3, [r7, #20]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 80045c8:	2301      	movs	r3, #1
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	214f      	movs	r1, #79	; 0x4f
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7ff fed0 	bl	8004374 <lis2mdl_read_reg>
 80045d4:	60f8      	str	r0, [r7, #12]
  return ret;
 80045d6:	68fb      	ldr	r3, [r7, #12]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	460b      	mov	r3, r1
 80045ea:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 80045ec:	f107 0208 	add.w	r2, r7, #8
 80045f0:	2301      	movs	r3, #1
 80045f2:	2162      	movs	r1, #98	; 0x62
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f7ff febd 	bl	8004374 <lis2mdl_read_reg>
 80045fa:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10f      	bne.n	8004622 <lis2mdl_self_test_set+0x42>
    reg.self_test = val;
 8004602:	78fb      	ldrb	r3, [r7, #3]
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	b2da      	uxtb	r2, r3
 800460a:	7a3b      	ldrb	r3, [r7, #8]
 800460c:	f362 0341 	bfi	r3, r2, #1, #1
 8004610:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8004612:	f107 0208 	add.w	r2, r7, #8
 8004616:	2301      	movs	r3, #1
 8004618:	2162      	movs	r1, #98	; 0x62
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7ff fec2 	bl	80043a4 <lis2mdl_write_reg>
 8004620:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004622:	68fb      	ldr	r3, [r7, #12]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <lis2mdl_i2c_interface_set>:
  * @param  val   change the values of i2c_dis in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx, lis2mdl_i2c_dis_t val)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	460b      	mov	r3, r1
 8004636:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8004638:	f107 0208 	add.w	r2, r7, #8
 800463c:	2301      	movs	r3, #1
 800463e:	2162      	movs	r1, #98	; 0x62
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7ff fe97 	bl	8004374 <lis2mdl_read_reg>
 8004646:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10f      	bne.n	800466e <lis2mdl_i2c_interface_set+0x42>
    reg.i2c_dis = (uint8_t)val;
 800464e:	78fb      	ldrb	r3, [r7, #3]
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	b2da      	uxtb	r2, r3
 8004656:	7a3b      	ldrb	r3, [r7, #8]
 8004658:	f362 1345 	bfi	r3, r2, #5, #1
 800465c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 800465e:	f107 0208 	add.w	r2, r7, #8
 8004662:	2301      	movs	r3, #1
 8004664:	2162      	movs	r1, #98	; 0x62
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7ff fe9c 	bl	80043a4 <lis2mdl_write_reg>
 800466c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800466e:	68fb      	ldr	r3, [r7, #12]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <LPS22HH_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d103      	bne.n	8004694 <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 800468c:	f04f 33ff 	mov.w	r3, #4294967295
 8004690:	60fb      	str	r3, [r7, #12]
 8004692:	e04d      	b.n	8004730 <LPS22HH_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	7b1a      	ldrb	r2, [r3, #12]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	691a      	ldr	r2, [r3, #16]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	695a      	ldr	r2, [r3, #20]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	699a      	ldr	r2, [r3, #24]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a1b      	ldr	r2, [pc, #108]	; (800473c <LPS22HH_RegisterBusIO+0xc4>)
 80046d0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a1a      	ldr	r2, [pc, #104]	; (8004740 <LPS22HH_RegisterBusIO+0xc8>)
 80046d6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d103      	bne.n	80046ee <LPS22HH_RegisterBusIO+0x76>
    {
      ret = LPS22HH_ERROR;
 80046e6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	e020      	b.n	8004730 <LPS22HH_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4798      	blx	r3
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <LPS22HH_RegisterBusIO+0x8a>
    {
      ret = LPS22HH_ERROR;
 80046fa:	f04f 33ff 	mov.w	r3, #4294967295
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	e016      	b.n	8004730 <LPS22HH_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	2b02      	cmp	r3, #2
 8004708:	d112      	bne.n	8004730 <LPS22HH_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10d      	bne.n	8004730 <LPS22HH_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8004714:	2301      	movs	r3, #1
 8004716:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 8004718:	7afb      	ldrb	r3, [r7, #11]
 800471a:	461a      	mov	r2, r3
 800471c:	2110      	movs	r1, #16
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f9df 	bl	8004ae2 <LPS22HH_Write_Reg>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <LPS22HH_RegisterBusIO+0xb8>
          {
            ret = LPS22HH_ERROR;
 800472a:	f04f 33ff 	mov.w	r3, #4294967295
 800472e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004730:	68fb      	ldr	r3, [r7, #12]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	08004e0b 	.word	0x08004e0b
 8004740:	08004e41 	.word	0x08004e41

08004744 <LPS22HH_Init>:
 * @brief  Initialize the LPS22HH sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004752:	2b00      	cmp	r3, #0
 8004754:	d108      	bne.n	8004768 <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 fb0e 	bl	8004d78 <LPS22HH_Initialize>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 8004762:	f04f 33ff 	mov.w	r3, #4294967295
 8004766:	e004      	b.n	8004772 <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HH_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <LPS22HH_DeInit>:
 * @brief  Deinitialize the LPS22HH sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b082      	sub	sp, #8
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004788:	2b01      	cmp	r3, #1
 800478a:	d111      	bne.n	80047b0 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 f877 	bl	8004880 <LPS22HH_PRESS_Disable>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d002      	beq.n	800479e <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 8004798:	f04f 33ff 	mov.w	r3, #4294967295
 800479c:	e00d      	b.n	80047ba <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f918 	bl	80049d4 <LPS22HH_TEMP_Disable>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 80047aa:	f04f 33ff 	mov.w	r3, #4294967295
 80047ae:	e004      	b.n	80047ba <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HH_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <LPS22HH_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b082      	sub	sp, #8
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	331c      	adds	r3, #28
 80047d0:	6839      	ldr	r1, [r7, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fd1a 	bl	800520c <lps22hh_device_id_get>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 80047de:	f04f 33ff 	mov.w	r3, #4294967295
 80047e2:	e000      	b.n	80047e6 <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
	...

080047f0 <LPS22HH_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LPS22HH sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2200      	movs	r2, #0
 80047fe:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	2201      	movs	r2, #1
 8004804:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2201      	movs	r2, #1
 800480a:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	2200      	movs	r2, #0
 8004810:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	f04f 0200 	mov.w	r2, #0
 8004818:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 200.0f;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	4a05      	ldr	r2, [pc, #20]	; (8004834 <LPS22HH_GetCapabilities+0x44>)
 800481e:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 200.0f;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	4a04      	ldr	r2, [pc, #16]	; (8004834 <LPS22HH_GetCapabilities+0x44>)
 8004824:	60da      	str	r2, [r3, #12]
  return LPS22HH_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	43480000 	.word	0x43480000

08004838 <LPS22HH_PRESS_Enable>:
 * @brief  Enable the LPS22HH pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004846:	2b01      	cmp	r3, #1
 8004848:	d101      	bne.n	800484e <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	e014      	b.n	8004878 <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f103 021c 	add.w	r2, r3, #28
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800485a:	4619      	mov	r1, r3
 800485c:	4610      	mov	r0, r2
 800485e:	f000 fb93 	bl	8004f88 <lps22hh_data_rate_set>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d002      	beq.n	800486e <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8004868:	f04f 33ff 	mov.w	r3, #4294967295
 800486c:	e004      	b.n	8004878 <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HH_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <LPS22HH_PRESS_Disable>:
 * @brief  Disable the LPS22HH pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	e024      	b.n	80048e0 <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800489c:	2b00      	cmp	r3, #0
 800489e:	d11a      	bne.n	80048d6 <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f103 021c 	add.w	r2, r3, #28
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	332b      	adds	r3, #43	; 0x2b
 80048aa:	4619      	mov	r1, r3
 80048ac:	4610      	mov	r0, r2
 80048ae:	f000 fbb9 	bl	8005024 <lps22hh_data_rate_get>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 80048b8:	f04f 33ff 	mov.w	r3, #4294967295
 80048bc:	e010      	b.n	80048e0 <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	331c      	adds	r3, #28
 80048c2:	2100      	movs	r1, #0
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fb5f 	bl	8004f88 <lps22hh_data_rate_set>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 80048d0:	f04f 33ff 	mov.w	r3, #4294967295
 80048d4:	e004      	b.n	80048e0 <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HH_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <LPS22HH_PRESS_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 80048f2:	6839      	ldr	r1, [r7, #0]
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f90f 	bl	8004b18 <LPS22HH_GetOutputDataRate>
 80048fa:	4603      	mov	r3, r0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <LPS22HH_PRESS_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004916:	2b01      	cmp	r3, #1
 8004918:	d106      	bne.n	8004928 <LPS22HH_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 800491a:	ed97 0a00 	vldr	s0, [r7]
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f95e 	bl	8004be0 <LPS22HH_SetOutputDataRate_When_Enabled>
 8004924:	4603      	mov	r3, r0
 8004926:	e005      	b.n	8004934 <LPS22HH_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004928:	ed97 0a00 	vldr	s0, [r7]
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f9c9 	bl	8004cc4 <LPS22HH_SetOutputDataRate_When_Disabled>
 8004932:	4603      	mov	r3, r0
  }
}
 8004934:	4618      	mov	r0, r3
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <LPS22HH_PRESS_GetPressure>:
 * @param  pObj the device pObj
 * @param  Value pointer where the pressure value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8004946:	f107 030c 	add.w	r3, r7, #12
 800494a:	2204      	movs	r2, #4
 800494c:	2100      	movs	r1, #0
 800494e:	4618      	mov	r0, r3
 8004950:	f012 fcfe 	bl	8017350 <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	331c      	adds	r3, #28
 8004958:	f107 020c 	add.w	r2, r7, #12
 800495c:	4611      	mov	r1, r2
 800495e:	4618      	mov	r0, r3
 8004960:	f000 fc08 	bl	8005174 <lps22hh_pressure_raw_get>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 800496a:	f04f 33ff 	mov.w	r3, #4294967295
 800496e:	e009      	b.n	8004984 <LPS22HH_PRESS_GetPressure+0x48>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4618      	mov	r0, r3
 8004974:	f000 fab0 	bl	8004ed8 <lps22hh_from_lsb_to_hpa>
 8004978:	eef0 7a40 	vmov.f32	s15, s0
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <LPS22HH_TEMP_Enable>:
 * @brief  Enable the LPS22HH temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	e014      	b.n	80049cc <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f103 021c 	add.w	r2, r3, #28
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80049ae:	4619      	mov	r1, r3
 80049b0:	4610      	mov	r0, r2
 80049b2:	f000 fae9 	bl	8004f88 <lps22hh_data_rate_set>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 80049bc:	f04f 33ff 	mov.w	r3, #4294967295
 80049c0:	e004      	b.n	80049cc <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HH_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <LPS22HH_TEMP_Disable>:
 * @brief  Disable the LPS22HH temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 80049e6:	2300      	movs	r3, #0
 80049e8:	e024      	b.n	8004a34 <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d11a      	bne.n	8004a2a <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f103 021c 	add.w	r2, r3, #28
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	332b      	adds	r3, #43	; 0x2b
 80049fe:	4619      	mov	r1, r3
 8004a00:	4610      	mov	r0, r2
 8004a02:	f000 fb0f 	bl	8005024 <lps22hh_data_rate_get>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d002      	beq.n	8004a12 <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8004a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a10:	e010      	b.n	8004a34 <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	331c      	adds	r3, #28
 8004a16:	2100      	movs	r1, #0
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 fab5 	bl	8004f88 <lps22hh_data_rate_set>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d002      	beq.n	8004a2a <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8004a24:	f04f 33ff 	mov.w	r3, #4294967295
 8004a28:	e004      	b.n	8004a34 <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HH_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <LPS22HH_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8004a46:	6839      	ldr	r1, [r7, #0]
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 f865 	bl	8004b18 <LPS22HH_GetOutputDataRate>
 8004a4e:	4603      	mov	r3, r0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <LPS22HH_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d106      	bne.n	8004a7c <LPS22HH_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004a6e:	ed97 0a00 	vldr	s0, [r7]
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f8b4 	bl	8004be0 <LPS22HH_SetOutputDataRate_When_Enabled>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	e005      	b.n	8004a88 <LPS22HH_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004a7c:	ed97 0a00 	vldr	s0, [r7]
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f91f 	bl	8004cc4 <LPS22HH_SetOutputDataRate_When_Disabled>
 8004a86:	4603      	mov	r3, r0
  }
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <LPS22HH_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8004a9a:	f107 030c 	add.w	r3, r7, #12
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f012 fc54 	bl	8017350 <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	331c      	adds	r3, #28
 8004aac:	f107 020c 	add.w	r2, r7, #12
 8004ab0:	4611      	mov	r1, r2
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 fb87 	bl	80051c6 <lps22hh_temperature_raw_get>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d002      	beq.n	8004ac4 <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 8004abe:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac2:	e00a      	b.n	8004ada <LPS22HH_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8004ac4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 fa1d 	bl	8004f08 <lps22hh_from_lsb_to_celsius>
 8004ace:	eef0 7a40 	vmov.f32	s15, s0
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <LPS22HH_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b082      	sub	sp, #8
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	460b      	mov	r3, r1
 8004aec:	70fb      	strb	r3, [r7, #3]
 8004aee:	4613      	mov	r3, r2
 8004af0:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f103 001c 	add.w	r0, r3, #28
 8004af8:	1cba      	adds	r2, r7, #2
 8004afa:	78f9      	ldrb	r1, [r7, #3]
 8004afc:	2301      	movs	r3, #1
 8004afe:	f000 f9d2 	bl	8004ea6 <lps22hh_write_reg>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 8004b08:	f04f 33ff 	mov.w	r3, #4294967295
 8004b0c:	e000      	b.n	8004b10 <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <LPS22HH_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8004b22:	2300      	movs	r3, #0
 8004b24:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	331c      	adds	r3, #28
 8004b2a:	f107 020b 	add.w	r2, r7, #11
 8004b2e:	4611      	mov	r1, r2
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 fa77 	bl	8005024 <lps22hh_data_rate_get>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d002      	beq.n	8004b42 <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 8004b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b40:	e03d      	b.n	8004bbe <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 8004b42:	7afb      	ldrb	r3, [r7, #11]
 8004b44:	2b07      	cmp	r3, #7
 8004b46:	d835      	bhi.n	8004bb4 <LPS22HH_GetOutputDataRate+0x9c>
 8004b48:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <LPS22HH_GetOutputDataRate+0x38>)
 8004b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4e:	bf00      	nop
 8004b50:	08004b71 	.word	0x08004b71
 8004b54:	08004b7b 	.word	0x08004b7b
 8004b58:	08004b85 	.word	0x08004b85
 8004b5c:	08004b8d 	.word	0x08004b8d
 8004b60:	08004b95 	.word	0x08004b95
 8004b64:	08004b9d 	.word	0x08004b9d
 8004b68:	08004ba5 	.word	0x08004ba5
 8004b6c:	08004bad 	.word	0x08004bad
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	f04f 0200 	mov.w	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]
      break;
 8004b78:	e020      	b.n	8004bbc <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004b80:	601a      	str	r2, [r3, #0]
      break;
 8004b82:	e01b      	b.n	8004bbc <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	4a10      	ldr	r2, [pc, #64]	; (8004bc8 <LPS22HH_GetOutputDataRate+0xb0>)
 8004b88:	601a      	str	r2, [r3, #0]
      break;
 8004b8a:	e017      	b.n	8004bbc <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	4a0f      	ldr	r2, [pc, #60]	; (8004bcc <LPS22HH_GetOutputDataRate+0xb4>)
 8004b90:	601a      	str	r2, [r3, #0]
      break;
 8004b92:	e013      	b.n	8004bbc <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	4a0e      	ldr	r2, [pc, #56]	; (8004bd0 <LPS22HH_GetOutputDataRate+0xb8>)
 8004b98:	601a      	str	r2, [r3, #0]
      break;
 8004b9a:	e00f      	b.n	8004bbc <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	4a0d      	ldr	r2, [pc, #52]	; (8004bd4 <LPS22HH_GetOutputDataRate+0xbc>)
 8004ba0:	601a      	str	r2, [r3, #0]
      break;
 8004ba2:	e00b      	b.n	8004bbc <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	4a0c      	ldr	r2, [pc, #48]	; (8004bd8 <LPS22HH_GetOutputDataRate+0xc0>)
 8004ba8:	601a      	str	r2, [r3, #0]
      break;
 8004baa:	e007      	b.n	8004bbc <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	4a0b      	ldr	r2, [pc, #44]	; (8004bdc <LPS22HH_GetOutputDataRate+0xc4>)
 8004bb0:	601a      	str	r2, [r3, #0]
      break;
 8004bb2:	e003      	b.n	8004bbc <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 8004bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb8:	60fb      	str	r3, [r7, #12]
      break;
 8004bba:	bf00      	nop
  }

  return ret;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	41200000 	.word	0x41200000
 8004bcc:	41c80000 	.word	0x41c80000
 8004bd0:	42480000 	.word	0x42480000
 8004bd4:	42960000 	.word	0x42960000
 8004bd8:	42c80000 	.word	0x42c80000
 8004bdc:	43480000 	.word	0x43480000

08004be0 <LPS22HH_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	ed87 0a00 	vstr	s0, [r7]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004bec:	edd7 7a00 	vldr	s15, [r7]
 8004bf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bfc:	d801      	bhi.n	8004c02 <LPS22HH_SetOutputDataRate_When_Enabled+0x22>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e037      	b.n	8004c72 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004c02:	edd7 7a00 	vldr	s15, [r7]
 8004c06:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c12:	d801      	bhi.n	8004c18 <LPS22HH_SetOutputDataRate_When_Enabled+0x38>
 8004c14:	2302      	movs	r3, #2
 8004c16:	e02c      	b.n	8004c72 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004c18:	edd7 7a00 	vldr	s15, [r7]
 8004c1c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004c20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c28:	d801      	bhi.n	8004c2e <LPS22HH_SetOutputDataRate_When_Enabled+0x4e>
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e021      	b.n	8004c72 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004c2e:	edd7 7a00 	vldr	s15, [r7]
 8004c32:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004cb8 <LPS22HH_SetOutputDataRate_When_Enabled+0xd8>
 8004c36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c3e:	d801      	bhi.n	8004c44 <LPS22HH_SetOutputDataRate_When_Enabled+0x64>
 8004c40:	2304      	movs	r3, #4
 8004c42:	e016      	b.n	8004c72 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004c44:	edd7 7a00 	vldr	s15, [r7]
 8004c48:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004cbc <LPS22HH_SetOutputDataRate_When_Enabled+0xdc>
 8004c4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c54:	d801      	bhi.n	8004c5a <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8004c56:	2305      	movs	r3, #5
 8004c58:	e00b      	b.n	8004c72 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004c5a:	edd7 7a00 	vldr	s15, [r7]
 8004c5e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004cc0 <LPS22HH_SetOutputDataRate_When_Enabled+0xe0>
 8004c62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c6a:	d801      	bhi.n	8004c70 <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
 8004c6c:	2306      	movs	r3, #6
 8004c6e:	e000      	b.n	8004c72 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004c70:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8004c72:	73fb      	strb	r3, [r7, #15]
          : (Odr <=  50.0f) ? LPS22HH_50_Hz
          : (Odr <=  75.0f) ? LPS22HH_75_Hz
          : (Odr <= 100.0f) ? LPS22HH_100_Hz
          :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	331c      	adds	r3, #28
 8004c78:	7bfa      	ldrb	r2, [r7, #15]
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 f983 	bl	8004f88 <lps22hh_data_rate_set>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d002      	beq.n	8004c8e <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
  {
    return LPS22HH_ERROR;
 8004c88:	f04f 33ff 	mov.w	r3, #4294967295
 8004c8c:	e00f      	b.n	8004cae <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f103 021c 	add.w	r2, r3, #28
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	332b      	adds	r3, #43	; 0x2b
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4610      	mov	r0, r2
 8004c9c:	f000 f9c2 	bl	8005024 <lps22hh_data_rate_get>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>
  {
    return LPS22HH_ERROR;
 8004ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8004caa:	e000      	b.n	8004cae <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  return LPS22HH_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	42480000 	.word	0x42480000
 8004cbc:	42960000 	.word	0x42960000
 8004cc0:	42c80000 	.word	0x42c80000

08004cc4 <LPS22HH_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004cd0:	edd7 7a00 	vldr	s15, [r7]
 8004cd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce0:	d801      	bhi.n	8004ce6 <LPS22HH_SetOutputDataRate_When_Disabled+0x22>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e037      	b.n	8004d56 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8004ce6:	edd7 7a00 	vldr	s15, [r7]
 8004cea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004cee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cf6:	d801      	bhi.n	8004cfc <LPS22HH_SetOutputDataRate_When_Disabled+0x38>
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	e02c      	b.n	8004d56 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8004cfc:	edd7 7a00 	vldr	s15, [r7]
 8004d00:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004d04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d0c:	d801      	bhi.n	8004d12 <LPS22HH_SetOutputDataRate_When_Disabled+0x4e>
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e021      	b.n	8004d56 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8004d12:	edd7 7a00 	vldr	s15, [r7]
 8004d16:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004d6c <LPS22HH_SetOutputDataRate_When_Disabled+0xa8>
 8004d1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d22:	d801      	bhi.n	8004d28 <LPS22HH_SetOutputDataRate_When_Disabled+0x64>
 8004d24:	2304      	movs	r3, #4
 8004d26:	e016      	b.n	8004d56 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8004d28:	edd7 7a00 	vldr	s15, [r7]
 8004d2c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004d70 <LPS22HH_SetOutputDataRate_When_Disabled+0xac>
 8004d30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d38:	d801      	bhi.n	8004d3e <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8004d3a:	2305      	movs	r3, #5
 8004d3c:	e00b      	b.n	8004d56 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8004d3e:	edd7 7a00 	vldr	s15, [r7]
 8004d42:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004d74 <LPS22HH_SetOutputDataRate_When_Disabled+0xb0>
 8004d46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d4e:	d801      	bhi.n	8004d54 <LPS22HH_SetOutputDataRate_When_Disabled+0x90>
 8004d50:	2306      	movs	r3, #6
 8004d52:	e000      	b.n	8004d56 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8004d54:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                 : (Odr <=  50.0f) ? LPS22HH_50_Hz
                 : (Odr <=  75.0f) ? LPS22HH_75_Hz
                 : (Odr <= 100.0f) ? LPS22HH_100_Hz
                 :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	42480000 	.word	0x42480000
 8004d70:	42960000 	.word	0x42960000
 8004d74:	42c80000 	.word	0x42c80000

08004d78 <LPS22HH_Initialize>:
 * @brief  Initialize the LPS22HH sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Disable MIPI I3C(SM) interface */
  if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	331c      	adds	r3, #28
 8004d84:	2111      	movs	r1, #17
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 fa9d 	bl	80052c6 <lps22hh_i3c_interface_set>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <LPS22HH_Initialize+0x20>
  {
    return LPS22HH_ERROR;
 8004d92:	f04f 33ff 	mov.w	r3, #4294967295
 8004d96:	e034      	b.n	8004e02 <LPS22HH_Initialize+0x8a>
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	331c      	adds	r3, #28
 8004d9c:	2110      	movs	r1, #16
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 f8f2 	bl	8004f88 <lps22hh_data_rate_set>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <LPS22HH_Initialize+0x38>
  {
    return LPS22HH_ERROR;
 8004daa:	f04f 33ff 	mov.w	r3, #4294967295
 8004dae:	e028      	b.n	8004e02 <LPS22HH_Initialize+0x8a>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	331c      	adds	r3, #28
 8004db4:	2100      	movs	r1, #0
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 fa5f 	bl	800527a <lps22hh_lp_bandwidth_set>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <LPS22HH_Initialize+0x50>
  {
    return LPS22HH_ERROR;
 8004dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004dc6:	e01c      	b.n	8004e02 <LPS22HH_Initialize+0x8a>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	331c      	adds	r3, #28
 8004dcc:	2101      	movs	r1, #1
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 f8b4 	bl	8004f3c <lps22hh_block_data_update_set>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <LPS22HH_Initialize+0x68>
  {
    return LPS22HH_ERROR;
 8004dda:	f04f 33ff 	mov.w	r3, #4294967295
 8004dde:	e010      	b.n	8004e02 <LPS22HH_Initialize+0x8a>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	331c      	adds	r3, #28
 8004de4:	2101      	movs	r1, #1
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 fa21 	bl	800522e <lps22hh_auto_increment_set>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <LPS22HH_Initialize+0x80>
  {
    return LPS22HH_ERROR;
 8004df2:	f04f 33ff 	mov.w	r3, #4294967295
 8004df6:	e004      	b.n	8004e02 <LPS22HH_Initialize+0x8a>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2203      	movs	r2, #3
 8004dfc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  return LPS22HH_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004e0a:	b590      	push	{r4, r7, lr}
 8004e0c:	b087      	sub	sp, #28
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	60f8      	str	r0, [r7, #12]
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	461a      	mov	r2, r3
 8004e16:	460b      	mov	r3, r1
 8004e18:	72fb      	strb	r3, [r7, #11]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	695c      	ldr	r4, [r3, #20]
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	7b1b      	ldrb	r3, [r3, #12]
 8004e2a:	b298      	uxth	r0, r3
 8004e2c:	7afb      	ldrb	r3, [r7, #11]
 8004e2e:	b299      	uxth	r1, r3
 8004e30:	893b      	ldrh	r3, [r7, #8]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	47a0      	blx	r4
 8004e36:	4603      	mov	r3, r0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	371c      	adds	r7, #28
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd90      	pop	{r4, r7, pc}

08004e40 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004e40:	b590      	push	{r4, r7, lr}
 8004e42:	b087      	sub	sp, #28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	607a      	str	r2, [r7, #4]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	72fb      	strb	r3, [r7, #11]
 8004e50:	4613      	mov	r3, r2
 8004e52:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	691c      	ldr	r4, [r3, #16]
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	7b1b      	ldrb	r3, [r3, #12]
 8004e60:	b298      	uxth	r0, r3
 8004e62:	7afb      	ldrb	r3, [r7, #11]
 8004e64:	b299      	uxth	r1, r3
 8004e66:	893b      	ldrh	r3, [r7, #8]
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	47a0      	blx	r4
 8004e6c:	4603      	mov	r3, r0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	371c      	adds	r7, #28
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd90      	pop	{r4, r7, pc}

08004e76 <lps22hh_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8004e76:	b590      	push	{r4, r7, lr}
 8004e78:	b087      	sub	sp, #28
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	60f8      	str	r0, [r7, #12]
 8004e7e:	607a      	str	r2, [r7, #4]
 8004e80:	461a      	mov	r2, r3
 8004e82:	460b      	mov	r3, r1
 8004e84:	72fb      	strb	r3, [r7, #11]
 8004e86:	4613      	mov	r3, r2
 8004e88:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	685c      	ldr	r4, [r3, #4]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6898      	ldr	r0, [r3, #8]
 8004e92:	893b      	ldrh	r3, [r7, #8]
 8004e94:	7af9      	ldrb	r1, [r7, #11]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	47a0      	blx	r4
 8004e9a:	6178      	str	r0, [r7, #20]
  return ret;
 8004e9c:	697b      	ldr	r3, [r7, #20]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	371c      	adds	r7, #28
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd90      	pop	{r4, r7, pc}

08004ea6 <lps22hh_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 8004ea6:	b590      	push	{r4, r7, lr}
 8004ea8:	b087      	sub	sp, #28
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	607a      	str	r2, [r7, #4]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	72fb      	strb	r3, [r7, #11]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681c      	ldr	r4, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6898      	ldr	r0, [r3, #8]
 8004ec2:	893b      	ldrh	r3, [r7, #8]
 8004ec4:	7af9      	ldrb	r1, [r7, #11]
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	47a0      	blx	r4
 8004eca:	6178      	str	r0, [r7, #20]
  return ret;
 8004ecc:	697b      	ldr	r3, [r7, #20]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	371c      	adds	r7, #28
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd90      	pop	{r4, r7, pc}
	...

08004ed8 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  return ( (float_t) lsb / 1048576.0f );
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	ee07 3a90 	vmov	s15, r3
 8004ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eea:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004f04 <lps22hh_from_lsb_to_hpa+0x2c>
 8004eee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004ef2:	eef0 7a66 	vmov.f32	s15, s13
}
 8004ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	49800000 	.word	0x49800000

08004f08 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	4603      	mov	r3, r0
 8004f10:	80fb      	strh	r3, [r7, #6]
  return ( (float_t) lsb / 100.0f );
 8004f12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f16:	ee07 3a90 	vmov	s15, r3
 8004f1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f1e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004f38 <lps22hh_from_lsb_to_celsius+0x30>
 8004f22:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004f26:	eef0 7a66 	vmov.f32	s15, s13
}
 8004f2a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	42c80000 	.word	0x42c80000

08004f3c <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	460b      	mov	r3, r1
 8004f46:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*) &reg, 1);
 8004f48:	f107 0208 	add.w	r2, r7, #8
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	2110      	movs	r1, #16
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f7ff ff90 	bl	8004e76 <lps22hh_read_reg>
 8004f56:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10f      	bne.n	8004f7e <lps22hh_block_data_update_set+0x42>
    reg.bdu = val;
 8004f5e:	78fb      	ldrb	r3, [r7, #3]
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	b2da      	uxtb	r2, r3
 8004f66:	7a3b      	ldrb	r3, [r7, #8]
 8004f68:	f362 0341 	bfi	r3, r2, #1, #1
 8004f6c:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*) &reg, 1);
 8004f6e:	f107 0208 	add.w	r2, r7, #8
 8004f72:	2301      	movs	r3, #1
 8004f74:	2110      	movs	r1, #16
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7ff ff95 	bl	8004ea6 <lps22hh_write_reg>
 8004f7c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004f94:	f107 0210 	add.w	r2, r7, #16
 8004f98:	2301      	movs	r3, #1
 8004f9a:	2110      	movs	r1, #16
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7ff ff6a 	bl	8004e76 <lps22hh_read_reg>
 8004fa2:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d107      	bne.n	8004fba <lps22hh_data_rate_set+0x32>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8004faa:	f107 020c 	add.w	r2, r7, #12
 8004fae:	2301      	movs	r3, #1
 8004fb0:	2111      	movs	r1, #17
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7ff ff5f 	bl	8004e76 <lps22hh_read_reg>
 8004fb8:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10f      	bne.n	8004fe0 <lps22hh_data_rate_set+0x58>
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8004fc0:	78fb      	ldrb	r3, [r7, #3]
 8004fc2:	f003 0307 	and.w	r3, r3, #7
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	7c3b      	ldrb	r3, [r7, #16]
 8004fca:	f362 1306 	bfi	r3, r2, #4, #3
 8004fce:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004fd0:	f107 0210 	add.w	r2, r7, #16
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	2110      	movs	r1, #16
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7ff ff64 	bl	8004ea6 <lps22hh_write_reg>
 8004fde:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d119      	bne.n	800501a <lps22hh_data_rate_set+0x92>
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8004fe6:	78fb      	ldrb	r3, [r7, #3]
 8004fe8:	091b      	lsrs	r3, r3, #4
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	7b3b      	ldrb	r3, [r7, #12]
 8004ff2:	f362 0341 	bfi	r3, r2, #1, #1
 8004ff6:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8004ff8:	78fb      	ldrb	r3, [r7, #3]
 8004ffa:	08db      	lsrs	r3, r3, #3
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	b2da      	uxtb	r2, r3
 8005002:	7b3b      	ldrb	r3, [r7, #12]
 8005004:	f362 0300 	bfi	r3, r2, #0, #1
 8005008:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 800500a:	f107 020c 	add.w	r2, r7, #12
 800500e:	2301      	movs	r3, #1
 8005010:	2111      	movs	r1, #17
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7ff ff47 	bl	8004ea6 <lps22hh_write_reg>
 8005018:	6178      	str	r0, [r7, #20]
  }
  return ret;
 800501a:	697b      	ldr	r3, [r7, #20]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 800502e:	f107 0210 	add.w	r2, r7, #16
 8005032:	2301      	movs	r3, #1
 8005034:	2110      	movs	r1, #16
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff ff1d 	bl	8004e76 <lps22hh_read_reg>
 800503c:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d107      	bne.n	8005054 <lps22hh_data_rate_get+0x30>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8005044:	f107 020c 	add.w	r2, r7, #12
 8005048:	2301      	movs	r3, #1
 800504a:	2111      	movs	r1, #17
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f7ff ff12 	bl	8004e76 <lps22hh_read_reg>
 8005052:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	2b00      	cmp	r3, #0
 8005058:	f040 8086 	bne.w	8005168 <lps22hh_data_rate_get+0x144>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 800505c:	f107 020c 	add.w	r2, r7, #12
 8005060:	2301      	movs	r3, #1
 8005062:	2111      	movs	r1, #17
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7ff ff06 	bl	8004e76 <lps22hh_read_reg>
 800506a:	6178      	str	r0, [r7, #20]
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 800506c:	7b3b      	ldrb	r3, [r7, #12]
 800506e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005072:	b2db      	uxtb	r3, r3
 8005074:	011a      	lsls	r2, r3, #4
 8005076:	7b3b      	ldrb	r3, [r7, #12]
 8005078:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800507c:	b2db      	uxtb	r3, r3
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	4413      	add	r3, r2
            ctrl_reg1.odr )) {
 8005082:	7c3a      	ldrb	r2, [r7, #16]
 8005084:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8005088:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 800508a:	4413      	add	r3, r2
 800508c:	2b15      	cmp	r3, #21
 800508e:	d867      	bhi.n	8005160 <lps22hh_data_rate_get+0x13c>
 8005090:	a201      	add	r2, pc, #4	; (adr r2, 8005098 <lps22hh_data_rate_get+0x74>)
 8005092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005096:	bf00      	nop
 8005098:	080050f1 	.word	0x080050f1
 800509c:	08005101 	.word	0x08005101
 80050a0:	08005109 	.word	0x08005109
 80050a4:	08005111 	.word	0x08005111
 80050a8:	08005119 	.word	0x08005119
 80050ac:	08005121 	.word	0x08005121
 80050b0:	08005151 	.word	0x08005151
 80050b4:	08005159 	.word	0x08005159
 80050b8:	080050f9 	.word	0x080050f9
 80050bc:	08005161 	.word	0x08005161
 80050c0:	08005161 	.word	0x08005161
 80050c4:	08005161 	.word	0x08005161
 80050c8:	08005161 	.word	0x08005161
 80050cc:	08005161 	.word	0x08005161
 80050d0:	08005161 	.word	0x08005161
 80050d4:	08005161 	.word	0x08005161
 80050d8:	08005161 	.word	0x08005161
 80050dc:	08005129 	.word	0x08005129
 80050e0:	08005131 	.word	0x08005131
 80050e4:	08005139 	.word	0x08005139
 80050e8:	08005141 	.word	0x08005141
 80050ec:	08005149 	.word	0x08005149
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	2200      	movs	r2, #0
 80050f4:	701a      	strb	r2, [r3, #0]
        break;
 80050f6:	e038      	b.n	800516a <lps22hh_data_rate_get+0x146>
      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2208      	movs	r2, #8
 80050fc:	701a      	strb	r2, [r3, #0]
        break;
 80050fe:	e034      	b.n	800516a <lps22hh_data_rate_get+0x146>
      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	2201      	movs	r2, #1
 8005104:	701a      	strb	r2, [r3, #0]
        break;
 8005106:	e030      	b.n	800516a <lps22hh_data_rate_get+0x146>
      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2202      	movs	r2, #2
 800510c:	701a      	strb	r2, [r3, #0]
        break;
 800510e:	e02c      	b.n	800516a <lps22hh_data_rate_get+0x146>
      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2203      	movs	r2, #3
 8005114:	701a      	strb	r2, [r3, #0]
        break;
 8005116:	e028      	b.n	800516a <lps22hh_data_rate_get+0x146>
      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	2204      	movs	r2, #4
 800511c:	701a      	strb	r2, [r3, #0]
        break;
 800511e:	e024      	b.n	800516a <lps22hh_data_rate_get+0x146>
      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2205      	movs	r2, #5
 8005124:	701a      	strb	r2, [r3, #0]
        break;
 8005126:	e020      	b.n	800516a <lps22hh_data_rate_get+0x146>
      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	2211      	movs	r2, #17
 800512c:	701a      	strb	r2, [r3, #0]
        break;
 800512e:	e01c      	b.n	800516a <lps22hh_data_rate_get+0x146>
      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	2212      	movs	r2, #18
 8005134:	701a      	strb	r2, [r3, #0]
        break;
 8005136:	e018      	b.n	800516a <lps22hh_data_rate_get+0x146>
      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2213      	movs	r2, #19
 800513c:	701a      	strb	r2, [r3, #0]
        break;
 800513e:	e014      	b.n	800516a <lps22hh_data_rate_get+0x146>
      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2214      	movs	r2, #20
 8005144:	701a      	strb	r2, [r3, #0]
        break;
 8005146:	e010      	b.n	800516a <lps22hh_data_rate_get+0x146>
      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	2215      	movs	r2, #21
 800514c:	701a      	strb	r2, [r3, #0]
        break;
 800514e:	e00c      	b.n	800516a <lps22hh_data_rate_get+0x146>
      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2206      	movs	r2, #6
 8005154:	701a      	strb	r2, [r3, #0]
        break;
 8005156:	e008      	b.n	800516a <lps22hh_data_rate_get+0x146>
      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	2207      	movs	r2, #7
 800515c:	701a      	strb	r2, [r3, #0]
        break;
 800515e:	e004      	b.n	800516a <lps22hh_data_rate_get+0x146>
      default:
        *val = LPS22HH_POWER_DOWN;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	2200      	movs	r2, #0
 8005164:	701a      	strb	r2, [r3, #0]
        break;
 8005166:	e000      	b.n	800516a <lps22hh_data_rate_get+0x146>
    }
  }
 8005168:	bf00      	nop
  return ret;
 800516a:	697b      	ldr	r3, [r7, #20]
}
 800516c:	4618      	mov	r0, r3
 800516e:	3718      	adds	r7, #24
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[3];

  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 800517e:	f107 0208 	add.w	r2, r7, #8
 8005182:	2303      	movs	r3, #3
 8005184:	2128      	movs	r1, #40	; 0x28
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7ff fe75 	bl	8004e76 <lps22hh_read_reg>
 800518c:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 800518e:	7abb      	ldrb	r3, [r7, #10]
 8005190:	461a      	mov	r2, r3
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	021b      	lsls	r3, r3, #8
 800519c:	7a7a      	ldrb	r2, [r7, #9]
 800519e:	441a      	add	r2, r3
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	021b      	lsls	r3, r3, #8
 80051aa:	7a3a      	ldrb	r2, [r7, #8]
 80051ac:	441a      	add	r2, r3
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	021a      	lsls	r2, r3, #8
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	601a      	str	r2, [r3, #0]

  return ret;
 80051bc:	68fb      	ldr	r3, [r7, #12]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b084      	sub	sp, #16
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
 80051ce:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[2];

  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 80051d0:	f107 0208 	add.w	r2, r7, #8
 80051d4:	2302      	movs	r3, #2
 80051d6:	212b      	movs	r1, #43	; 0x2b
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7ff fe4c 	bl	8004e76 <lps22hh_read_reg>
 80051de:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 80051e0:	7a7b      	ldrb	r3, [r7, #9]
 80051e2:	b21a      	sxth	r2, r3
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	021b      	lsls	r3, r3, #8
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	7a3b      	ldrb	r3, [r7, #8]
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	4413      	add	r3, r2
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	b21a      	sxth	r2, r3
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	801a      	strh	r2, [r3, #0]

  return ret;
 8005202:	68fb      	ldr	r3, [r7, #12]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8005216:	2301      	movs	r3, #1
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	210f      	movs	r1, #15
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7ff fe2a 	bl	8004e76 <lps22hh_read_reg>
 8005222:	60f8      	str	r0, [r7, #12]
  return ret;
 8005224:	68fb      	ldr	r3, [r7, #12]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b084      	sub	sp, #16
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
 8005236:	460b      	mov	r3, r1
 8005238:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t*) &reg, 1);
 800523a:	f107 0208 	add.w	r2, r7, #8
 800523e:	2301      	movs	r3, #1
 8005240:	2111      	movs	r1, #17
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7ff fe17 	bl	8004e76 <lps22hh_read_reg>
 8005248:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10f      	bne.n	8005270 <lps22hh_auto_increment_set+0x42>
    reg.if_add_inc = val;
 8005250:	78fb      	ldrb	r3, [r7, #3]
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	b2da      	uxtb	r2, r3
 8005258:	7a3b      	ldrb	r3, [r7, #8]
 800525a:	f362 1304 	bfi	r3, r2, #4, #1
 800525e:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t*) &reg, 1);
 8005260:	f107 0208 	add.w	r2, r7, #8
 8005264:	2301      	movs	r3, #1
 8005266:	2111      	movs	r1, #17
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f7ff fe1c 	bl	8004ea6 <lps22hh_write_reg>
 800526e:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005270:	68fb      	ldr	r3, [r7, #12]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <lps22hh_lp_bandwidth_set>:
  * @param  val      change the values of lpfp_cfg in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx, lps22hh_lpfp_cfg_t val)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b084      	sub	sp, #16
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	460b      	mov	r3, r1
 8005284:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*) &reg, 1);
 8005286:	f107 0208 	add.w	r2, r7, #8
 800528a:	2301      	movs	r3, #1
 800528c:	2110      	movs	r1, #16
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7ff fdf1 	bl	8004e76 <lps22hh_read_reg>
 8005294:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10f      	bne.n	80052bc <lps22hh_lp_bandwidth_set+0x42>
    reg.lpfp_cfg = (uint8_t)val;
 800529c:	78fb      	ldrb	r3, [r7, #3]
 800529e:	f003 0303 	and.w	r3, r3, #3
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	7a3b      	ldrb	r3, [r7, #8]
 80052a6:	f362 0383 	bfi	r3, r2, #2, #2
 80052aa:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*) &reg, 1);
 80052ac:	f107 0208 	add.w	r2, r7, #8
 80052b0:	2301      	movs	r3, #1
 80052b2:	2110      	movs	r1, #16
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7ff fdf6 	bl	8004ea6 <lps22hh_write_reg>
 80052ba:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80052bc:	68fb      	ldr	r3, [r7, #12]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b084      	sub	sp, #16
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	460b      	mov	r3, r1
 80052d0:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t*) &reg, 1);
 80052d2:	f107 0208 	add.w	r2, r7, #8
 80052d6:	2301      	movs	r3, #1
 80052d8:	210e      	movs	r1, #14
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7ff fdcb 	bl	8004e76 <lps22hh_read_reg>
 80052e0:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d118      	bne.n	800531a <lps22hh_i3c_interface_set+0x54>
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 80052e8:	78fb      	ldrb	r3, [r7, #3]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	7a3b      	ldrb	r3, [r7, #8]
 80052f2:	f362 0341 	bfi	r3, r2, #1, #1
 80052f6:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 80052f8:	78fb      	ldrb	r3, [r7, #3]
 80052fa:	091b      	lsrs	r3, r3, #4
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	b2da      	uxtb	r2, r3
 8005302:	7a3b      	ldrb	r3, [r7, #8]
 8005304:	f362 13c7 	bfi	r3, r2, #7, #1
 8005308:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t*) &reg, 1);
 800530a:	f107 0208 	add.w	r2, r7, #8
 800530e:	2301      	movs	r3, #1
 8005310:	210e      	movs	r1, #14
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7ff fdc7 	bl	8004ea6 <lps22hh_write_reg>
 8005318:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800531a:	68fb      	ldr	r3, [r7, #12]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <LSM6DSO_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d103      	bne.n	8005340 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8005338:	f04f 33ff 	mov.w	r3, #4294967295
 800533c:	60fb      	str	r3, [r7, #12]
 800533e:	e04d      	b.n	80053dc <LSM6DSO_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	7b1a      	ldrb	r2, [r3, #12]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	691a      	ldr	r2, [r3, #16]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	695a      	ldr	r2, [r3, #20]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	699a      	ldr	r2, [r3, #24]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a1b      	ldr	r2, [pc, #108]	; (80053e8 <LSM6DSO_RegisterBusIO+0xc4>)
 800537c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a1a      	ldr	r2, [pc, #104]	; (80053ec <LSM6DSO_RegisterBusIO+0xc8>)
 8005382:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d103      	bne.n	800539a <LSM6DSO_RegisterBusIO+0x76>
    {
      ret = LSM6DSO_ERROR;
 8005392:	f04f 33ff 	mov.w	r3, #4294967295
 8005396:	60fb      	str	r3, [r7, #12]
 8005398:	e020      	b.n	80053dc <LSM6DSO_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4798      	blx	r3
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <LSM6DSO_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO_ERROR;
 80053a6:	f04f 33ff 	mov.w	r3, #4294967295
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	e016      	b.n	80053dc <LSM6DSO_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d112      	bne.n	80053dc <LSM6DSO_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10d      	bne.n	80053dc <LSM6DSO_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80053c0:	230c      	movs	r3, #12
 80053c2:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 80053c4:	7afb      	ldrb	r3, [r7, #11]
 80053c6:	461a      	mov	r2, r3
 80053c8:	2112      	movs	r1, #18
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 ff59 	bl	8006282 <LSM6DSO_Write_Reg>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <LSM6DSO_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO_ERROR;
 80053d6:	f04f 33ff 	mov.w	r3, #4294967295
 80053da:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80053dc:	68fb      	ldr	r3, [r7, #12]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	08006725 	.word	0x08006725
 80053ec:	0800675b 	.word	0x0800675b

080053f0 <LSM6DSO_Init>:
 * @brief  Initialize the LSM6DSO sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	331c      	adds	r3, #28
 80053fc:	2180      	movs	r1, #128	; 0x80
 80053fe:	4618      	mov	r0, r3
 8005400:	f001 fe23 	bl	800704a <lsm6dso_i3c_disable_set>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 800540a:	f04f 33ff 	mov.w	r3, #4294967295
 800540e:	e060      	b.n	80054d2 <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	331c      	adds	r3, #28
 8005414:	2101      	movs	r1, #1
 8005416:	4618      	mov	r0, r3
 8005418:	f001 fdf1 	bl	8006ffe <lsm6dso_auto_increment_set>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d002      	beq.n	8005428 <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 8005422:	f04f 33ff 	mov.w	r3, #4294967295
 8005426:	e054      	b.n	80054d2 <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	331c      	adds	r3, #28
 800542c:	2101      	movs	r1, #1
 800542e:	4618      	mov	r0, r3
 8005430:	f001 fd66 	bl	8006f00 <lsm6dso_block_data_update_set>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d002      	beq.n	8005440 <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 800543a:	f04f 33ff 	mov.w	r3, #4294967295
 800543e:	e048      	b.n	80054d2 <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	331c      	adds	r3, #28
 8005444:	2100      	movs	r1, #0
 8005446:	4618      	mov	r0, r3
 8005448:	f001 fe45 	bl	80070d6 <lsm6dso_fifo_mode_set>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d002      	beq.n	8005458 <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 8005452:	f04f 33ff 	mov.w	r3, #4294967295
 8005456:	e03c      	b.n	80054d2 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2204      	movs	r2, #4
 800545c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	331c      	adds	r3, #28
 8005464:	2100      	movs	r1, #0
 8005466:	4618      	mov	r0, r3
 8005468:	f001 fa20 	bl	80068ac <lsm6dso_xl_data_rate_set>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 8005472:	f04f 33ff 	mov.w	r3, #4294967295
 8005476:	e02c      	b.n	80054d2 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	331c      	adds	r3, #28
 800547c:	2100      	movs	r1, #0
 800547e:	4618      	mov	r0, r3
 8005480:	f001 f9b6 	bl	80067f0 <lsm6dso_xl_full_scale_set>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 800548a:	f04f 33ff 	mov.w	r3, #4294967295
 800548e:	e020      	b.n	80054d2 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2204      	movs	r2, #4
 8005494:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	331c      	adds	r3, #28
 800549c:	2100      	movs	r1, #0
 800549e:	4618      	mov	r0, r3
 80054a0:	f001 fbd0 	bl	8006c44 <lsm6dso_gy_data_rate_set>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d002      	beq.n	80054b0 <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 80054aa:	f04f 33ff 	mov.w	r3, #4294967295
 80054ae:	e010      	b.n	80054d2 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	331c      	adds	r3, #28
 80054b4:	2106      	movs	r1, #6
 80054b6:	4618      	mov	r0, r3
 80054b8:	f001 fb5c 	bl	8006b74 <lsm6dso_gy_full_scale_set>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d002      	beq.n	80054c8 <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 80054c2:	f04f 33ff 	mov.w	r3, #4294967295
 80054c6:	e004      	b.n	80054d2 <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <LSM6DSO_DeInit>:
 * @brief  Deinitialize the LSM6DSO sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b082      	sub	sp, #8
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f888 	bl	80055f8 <LSM6DSO_ACC_Disable>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 80054ee:	f04f 33ff 	mov.w	r3, #4294967295
 80054f2:	e015      	b.n	8005520 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 fc2e 	bl	8005d56 <LSM6DSO_GYRO_Disable>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d002      	beq.n	8005506 <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8005500:	f04f 33ff 	mov.w	r3, #4294967295
 8005504:	e00c      	b.n	8005520 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3708      	adds	r7, #8
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <LSM6DSO_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	331c      	adds	r3, #28
 8005536:	6839      	ldr	r1, [r7, #0]
 8005538:	4618      	mov	r0, r3
 800553a:	f001 fd4f 	bl	8006fdc <lsm6dso_device_id_get>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d002      	beq.n	800554a <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8005544:	f04f 33ff 	mov.w	r3, #4294967295
 8005548:	e000      	b.n	800554c <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <LSM6DSO_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSO sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	2201      	movs	r2, #1
 8005562:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	2201      	movs	r2, #1
 8005568:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2200      	movs	r2, #0
 800556e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	2200      	movs	r2, #0
 8005574:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800557c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2210      	movs	r2, #16
 8005582:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	2200      	movs	r2, #0
 8005588:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	4a07      	ldr	r2, [pc, #28]	; (80055ac <LSM6DSO_GetCapabilities+0x58>)
 800558e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	4a06      	ldr	r2, [pc, #24]	; (80055ac <LSM6DSO_GetCapabilities+0x58>)
 8005594:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	45d02000 	.word	0x45d02000

080055b0 <LSM6DSO_ACC_Enable>:
 * @brief  Enable the LSM6DSO accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d101      	bne.n	80055c6 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	e014      	b.n	80055f0 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f103 021c 	add.w	r2, r3, #28
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80055d2:	4619      	mov	r1, r3
 80055d4:	4610      	mov	r0, r2
 80055d6:	f001 f969 	bl	80068ac <lsm6dso_xl_data_rate_set>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 80055e0:	f04f 33ff 	mov.w	r3, #4294967295
 80055e4:	e004      	b.n	80055f0 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <LSM6DSO_ACC_Disable>:
 * @brief  Disable the LSM6DSO accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 800560a:	2300      	movs	r3, #0
 800560c:	e01f      	b.n	800564e <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f103 021c 	add.w	r2, r3, #28
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	332b      	adds	r3, #43	; 0x2b
 8005618:	4619      	mov	r1, r3
 800561a:	4610      	mov	r0, r2
 800561c:	f001 fa42 	bl	8006aa4 <lsm6dso_xl_data_rate_get>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8005626:	f04f 33ff 	mov.w	r3, #4294967295
 800562a:	e010      	b.n	800564e <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	331c      	adds	r3, #28
 8005630:	2100      	movs	r1, #0
 8005632:	4618      	mov	r0, r3
 8005634:	f001 f93a 	bl	80068ac <lsm6dso_xl_data_rate_set>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d002      	beq.n	8005644 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 800563e:	f04f 33ff 	mov.w	r3, #4294967295
 8005642:	e004      	b.n	800564e <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
	...

08005658 <LSM6DSO_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005662:	2300      	movs	r3, #0
 8005664:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	331c      	adds	r3, #28
 800566a:	f107 020b 	add.w	r2, r7, #11
 800566e:	4611      	mov	r1, r2
 8005670:	4618      	mov	r0, r3
 8005672:	f001 f8e3 	bl	800683c <lsm6dso_xl_full_scale_get>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 800567c:	f04f 33ff 	mov.w	r3, #4294967295
 8005680:	e023      	b.n	80056ca <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8005682:	7afb      	ldrb	r3, [r7, #11]
 8005684:	2b03      	cmp	r3, #3
 8005686:	d81b      	bhi.n	80056c0 <LSM6DSO_ACC_GetSensitivity+0x68>
 8005688:	a201      	add	r2, pc, #4	; (adr r2, 8005690 <LSM6DSO_ACC_GetSensitivity+0x38>)
 800568a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568e:	bf00      	nop
 8005690:	080056a1 	.word	0x080056a1
 8005694:	080056b9 	.word	0x080056b9
 8005698:	080056a9 	.word	0x080056a9
 800569c:	080056b1 	.word	0x080056b1
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	4a0c      	ldr	r2, [pc, #48]	; (80056d4 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 80056a4:	601a      	str	r2, [r3, #0]
      break;
 80056a6:	e00f      	b.n	80056c8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	4a0b      	ldr	r2, [pc, #44]	; (80056d8 <LSM6DSO_ACC_GetSensitivity+0x80>)
 80056ac:	601a      	str	r2, [r3, #0]
      break;
 80056ae:	e00b      	b.n	80056c8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	4a0a      	ldr	r2, [pc, #40]	; (80056dc <LSM6DSO_ACC_GetSensitivity+0x84>)
 80056b4:	601a      	str	r2, [r3, #0]
      break;
 80056b6:	e007      	b.n	80056c8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	4a09      	ldr	r2, [pc, #36]	; (80056e0 <LSM6DSO_ACC_GetSensitivity+0x88>)
 80056bc:	601a      	str	r2, [r3, #0]
      break;
 80056be:	e003      	b.n	80056c8 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 80056c0:	f04f 33ff 	mov.w	r3, #4294967295
 80056c4:	60fb      	str	r3, [r7, #12]
      break;
 80056c6:	bf00      	nop
  }

  return ret;
 80056c8:	68fb      	ldr	r3, [r7, #12]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	3d79db23 	.word	0x3d79db23
 80056d8:	3df9db23 	.word	0x3df9db23
 80056dc:	3e79db23 	.word	0x3e79db23
 80056e0:	3ef9db23 	.word	0x3ef9db23

080056e4 <LSM6DSO_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	331c      	adds	r3, #28
 80056f6:	f107 020b 	add.w	r2, r7, #11
 80056fa:	4611      	mov	r1, r2
 80056fc:	4618      	mov	r0, r3
 80056fe:	f001 f9d1 	bl	8006aa4 <lsm6dso_xl_data_rate_get>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d002      	beq.n	800570e <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8005708:	f04f 33ff 	mov.w	r3, #4294967295
 800570c:	e054      	b.n	80057b8 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 800570e:	7afb      	ldrb	r3, [r7, #11]
 8005710:	2b0b      	cmp	r3, #11
 8005712:	d84c      	bhi.n	80057ae <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8005714:	a201      	add	r2, pc, #4	; (adr r2, 800571c <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8005716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571a:	bf00      	nop
 800571c:	0800574d 	.word	0x0800574d
 8005720:	0800575f 	.word	0x0800575f
 8005724:	08005767 	.word	0x08005767
 8005728:	0800576f 	.word	0x0800576f
 800572c:	08005777 	.word	0x08005777
 8005730:	0800577f 	.word	0x0800577f
 8005734:	08005787 	.word	0x08005787
 8005738:	0800578f 	.word	0x0800578f
 800573c:	08005797 	.word	0x08005797
 8005740:	0800579f 	.word	0x0800579f
 8005744:	080057a7 	.word	0x080057a7
 8005748:	08005757 	.word	0x08005757
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	601a      	str	r2, [r3, #0]
      break;
 8005754:	e02f      	b.n	80057b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	4a19      	ldr	r2, [pc, #100]	; (80057c0 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 800575a:	601a      	str	r2, [r3, #0]
      break;
 800575c:	e02b      	b.n	80057b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	4a18      	ldr	r2, [pc, #96]	; (80057c4 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8005762:	601a      	str	r2, [r3, #0]
      break;
 8005764:	e027      	b.n	80057b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	4a17      	ldr	r2, [pc, #92]	; (80057c8 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 800576a:	601a      	str	r2, [r3, #0]
      break;
 800576c:	e023      	b.n	80057b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	4a16      	ldr	r2, [pc, #88]	; (80057cc <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8005772:	601a      	str	r2, [r3, #0]
      break;
 8005774:	e01f      	b.n	80057b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	4a15      	ldr	r2, [pc, #84]	; (80057d0 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 800577a:	601a      	str	r2, [r3, #0]
      break;
 800577c:	e01b      	b.n	80057b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	4a14      	ldr	r2, [pc, #80]	; (80057d4 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8005782:	601a      	str	r2, [r3, #0]
      break;
 8005784:	e017      	b.n	80057b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	4a13      	ldr	r2, [pc, #76]	; (80057d8 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 800578a:	601a      	str	r2, [r3, #0]
      break;
 800578c:	e013      	b.n	80057b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	4a12      	ldr	r2, [pc, #72]	; (80057dc <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8005792:	601a      	str	r2, [r3, #0]
      break;
 8005794:	e00f      	b.n	80057b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	4a11      	ldr	r2, [pc, #68]	; (80057e0 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 800579a:	601a      	str	r2, [r3, #0]
      break;
 800579c:	e00b      	b.n	80057b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	4a10      	ldr	r2, [pc, #64]	; (80057e4 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 80057a2:	601a      	str	r2, [r3, #0]
      break;
 80057a4:	e007      	b.n	80057b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	4a0f      	ldr	r2, [pc, #60]	; (80057e8 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 80057aa:	601a      	str	r2, [r3, #0]
      break;
 80057ac:	e003      	b.n	80057b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 80057ae:	f04f 33ff 	mov.w	r3, #4294967295
 80057b2:	60fb      	str	r3, [r7, #12]
      break;
 80057b4:	bf00      	nop
  }

  return ret;
 80057b6:	68fb      	ldr	r3, [r7, #12]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	3fcccccd 	.word	0x3fcccccd
 80057c4:	41480000 	.word	0x41480000
 80057c8:	41d00000 	.word	0x41d00000
 80057cc:	42500000 	.word	0x42500000
 80057d0:	42d00000 	.word	0x42d00000
 80057d4:	43500000 	.word	0x43500000
 80057d8:	43d08000 	.word	0x43d08000
 80057dc:	44504000 	.word	0x44504000
 80057e0:	44d06000 	.word	0x44d06000
 80057e4:	45505000 	.word	0x45505000
 80057e8:	45d05800 	.word	0x45d05800

080057ec <LSM6DSO_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 80057f8:	2100      	movs	r1, #0
 80057fa:	ed97 0a00 	vldr	s0, [r7]
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f806 	bl	8005810 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8005804:	4603      	mov	r3, r0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3708      	adds	r7, #8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
	...

08005810 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
 * @param  Mode the accelerometer operating mode
 * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08c      	sub	sp, #48	; 0x30
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	ed87 0a02 	vstr	s0, [r7, #8]
 800581c:	460b      	mov	r3, r1
 800581e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8005820:	2300      	movs	r3, #0
 8005822:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	62bb      	str	r3, [r7, #40]	; 0x28
  
  switch (Mode)
 8005828:	79fb      	ldrb	r3, [r7, #7]
 800582a:	2b02      	cmp	r3, #2
 800582c:	f000 80ea 	beq.w	8005a04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8005830:	2b02      	cmp	r3, #2
 8005832:	f300 8163 	bgt.w	8005afc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 8005836:	2b00      	cmp	r3, #0
 8005838:	d002      	beq.n	8005840 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 800583a:	2b01      	cmp	r3, #1
 800583c:	d074      	beq.n	8005928 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 800583e:	e15d      	b.n	8005afc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f103 001c 	add.w	r0, r3, #28
 8005846:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800584a:	2301      	movs	r3, #1
 800584c:	2114      	movs	r1, #20
 800584e:	f000 ff9f 	bl	8006790 <lsm6dso_read_reg>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8005858:	f04f 33ff 	mov.w	r3, #4294967295
 800585c:	e16c      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 800585e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005862:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	d025      	beq.n	80058b8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005872:	2b01      	cmp	r3, #1
 8005874:	d10b      	bne.n	800588e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	331c      	adds	r3, #28
 800587a:	2100      	movs	r1, #0
 800587c:	4618      	mov	r0, r3
 800587e:	f001 f815 	bl	80068ac <lsm6dso_xl_data_rate_set>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8005888:	f04f 33ff 	mov.w	r3, #4294967295
 800588c:	e154      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 800588e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005892:	f36f 13c7 	bfc	r3, #7, #1
 8005896:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f103 001c 	add.w	r0, r3, #28
 80058a0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80058a4:	2301      	movs	r3, #1
 80058a6:	2114      	movs	r1, #20
 80058a8:	f000 ff8a 	bl	80067c0 <lsm6dso_write_reg>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 80058b2:	f04f 33ff 	mov.w	r3, #4294967295
 80058b6:	e13f      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f103 001c 	add.w	r0, r3, #28
 80058be:	f107 0220 	add.w	r2, r7, #32
 80058c2:	2301      	movs	r3, #1
 80058c4:	2115      	movs	r1, #21
 80058c6:	f000 ff63 	bl	8006790 <lsm6dso_read_reg>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 80058d0:	f04f 33ff 	mov.w	r3, #4294967295
 80058d4:	e130      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 80058d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80058da:	f003 0310 	and.w	r3, r3, #16
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d014      	beq.n	800590e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 80058e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80058e8:	f36f 1304 	bfc	r3, #4, #1
 80058ec:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f103 001c 	add.w	r0, r3, #28
 80058f6:	f107 0220 	add.w	r2, r7, #32
 80058fa:	2301      	movs	r3, #1
 80058fc:	2115      	movs	r1, #21
 80058fe:	f000 ff5f 	bl	80067c0 <lsm6dso_write_reg>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d002      	beq.n	800590e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8005908:	f04f 33ff 	mov.w	r3, #4294967295
 800590c:	e114      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 800590e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005912:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005916:	eef4 7ac7 	vcmpe.f32	s15, s14
 800591a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800591e:	d400      	bmi.n	8005922 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8005920:	e0f0      	b.n	8005b04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 8005922:	4b87      	ldr	r3, [pc, #540]	; (8005b40 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8005924:	62bb      	str	r3, [r7, #40]	; 0x28
 8005926:	e0ed      	b.n	8005b04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f103 001c 	add.w	r0, r3, #28
 800592e:	f107 021c 	add.w	r2, r7, #28
 8005932:	2301      	movs	r3, #1
 8005934:	2114      	movs	r1, #20
 8005936:	f000 ff2b 	bl	8006790 <lsm6dso_read_reg>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d002      	beq.n	8005946 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8005940:	f04f 33ff 	mov.w	r3, #4294967295
 8005944:	e0f8      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8005946:	7f3b      	ldrb	r3, [r7, #28]
 8005948:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d023      	beq.n	800599a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005958:	2b01      	cmp	r3, #1
 800595a:	d10b      	bne.n	8005974 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	331c      	adds	r3, #28
 8005960:	2100      	movs	r1, #0
 8005962:	4618      	mov	r0, r3
 8005964:	f000 ffa2 	bl	80068ac <lsm6dso_xl_data_rate_set>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 800596e:	f04f 33ff 	mov.w	r3, #4294967295
 8005972:	e0e1      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8005974:	7f3b      	ldrb	r3, [r7, #28]
 8005976:	f36f 13c7 	bfc	r3, #7, #1
 800597a:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f103 001c 	add.w	r0, r3, #28
 8005982:	f107 021c 	add.w	r2, r7, #28
 8005986:	2301      	movs	r3, #1
 8005988:	2114      	movs	r1, #20
 800598a:	f000 ff19 	bl	80067c0 <lsm6dso_write_reg>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d002      	beq.n	800599a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8005994:	f04f 33ff 	mov.w	r3, #4294967295
 8005998:	e0ce      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f103 001c 	add.w	r0, r3, #28
 80059a0:	f107 0218 	add.w	r2, r7, #24
 80059a4:	2301      	movs	r3, #1
 80059a6:	2115      	movs	r1, #21
 80059a8:	f000 fef2 	bl	8006790 <lsm6dso_read_reg>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 80059b2:	f04f 33ff 	mov.w	r3, #4294967295
 80059b6:	e0bf      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 80059b8:	7e3b      	ldrb	r3, [r7, #24]
 80059ba:	f003 0310 	and.w	r3, r3, #16
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d112      	bne.n	80059ea <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 80059c4:	7e3b      	ldrb	r3, [r7, #24]
 80059c6:	f043 0310 	orr.w	r3, r3, #16
 80059ca:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f103 001c 	add.w	r0, r3, #28
 80059d2:	f107 0218 	add.w	r2, r7, #24
 80059d6:	2301      	movs	r3, #1
 80059d8:	2115      	movs	r1, #21
 80059da:	f000 fef1 	bl	80067c0 <lsm6dso_write_reg>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 80059e4:	f04f 33ff 	mov.w	r3, #4294967295
 80059e8:	e0a6      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80059ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80059ee:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8005b44 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 80059f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059fa:	dc00      	bgt.n	80059fe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 80059fc:	e082      	b.n	8005b04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 80059fe:	4b52      	ldr	r3, [pc, #328]	; (8005b48 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8005a00:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a02:	e07f      	b.n	8005b04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f103 001c 	add.w	r0, r3, #28
 8005a0a:	f107 0210 	add.w	r2, r7, #16
 8005a0e:	2301      	movs	r3, #1
 8005a10:	2115      	movs	r1, #21
 8005a12:	f000 febd 	bl	8006790 <lsm6dso_read_reg>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8005a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a20:	e08a      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8005a22:	7c3b      	ldrb	r3, [r7, #16]
 8005a24:	f003 0310 	and.w	r3, r3, #16
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d012      	beq.n	8005a54 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8005a2e:	7c3b      	ldrb	r3, [r7, #16]
 8005a30:	f36f 1304 	bfc	r3, #4, #1
 8005a34:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f103 001c 	add.w	r0, r3, #28
 8005a3c:	f107 0210 	add.w	r2, r7, #16
 8005a40:	2301      	movs	r3, #1
 8005a42:	2115      	movs	r1, #21
 8005a44:	f000 febc 	bl	80067c0 <lsm6dso_write_reg>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8005a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a52:	e071      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d108      	bne.n	8005a70 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 f979 	bl	8005d56 <LSM6DSO_GYRO_Disable>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8005a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a6e:	e063      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f103 001c 	add.w	r0, r3, #28
 8005a76:	f107 0214 	add.w	r2, r7, #20
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	2114      	movs	r1, #20
 8005a7e:	f000 fe87 	bl	8006790 <lsm6dso_read_reg>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8005a88:	f04f 33ff 	mov.w	r3, #4294967295
 8005a8c:	e054      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 8005a8e:	7d3b      	ldrb	r3, [r7, #20]
 8005a90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d123      	bne.n	8005ae2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d10b      	bne.n	8005abc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	331c      	adds	r3, #28
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 fefe 	bl	80068ac <lsm6dso_xl_data_rate_set>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8005ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aba:	e03d      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8005abc:	7d3b      	ldrb	r3, [r7, #20]
 8005abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ac2:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f103 001c 	add.w	r0, r3, #28
 8005aca:	f107 0214 	add.w	r2, r7, #20
 8005ace:	2301      	movs	r3, #1
 8005ad0:	2114      	movs	r1, #20
 8005ad2:	f000 fe75 	bl	80067c0 <lsm6dso_write_reg>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d002      	beq.n	8005ae2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8005adc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae0:	e02a      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8005ae2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005ae6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005b44 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8005aea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005af2:	dc00      	bgt.n	8005af6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8005af4:	e006      	b.n	8005b04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8005af6:	4b14      	ldr	r3, [pc, #80]	; (8005b48 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8005af8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005afa:	e003      	b.n	8005b04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8005afc:	f04f 33ff 	mov.w	r3, #4294967295
 8005b00:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8005b02:	bf00      	nop
  }

  if(ret == LSM6DSO_ERROR)
 8005b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b0a:	d102      	bne.n	8005b12 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8005b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b10:	e012      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d106      	bne.n	8005b2a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8005b1c:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 fbc9 	bl	80062b8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8005b26:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005b28:	e005      	b.n	8005b36 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8005b2a:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f000 fc5a 	bl	80063e8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8005b34:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8005b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3730      	adds	r7, #48	; 0x30
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	41480000 	.word	0x41480000
 8005b44:	43500000 	.word	0x43500000
 8005b48:	43500000 	.word	0x43500000

08005b4c <LSM6DSO_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	331c      	adds	r3, #28
 8005b5e:	f107 020b 	add.w	r2, r7, #11
 8005b62:	4611      	mov	r1, r2
 8005b64:	4618      	mov	r0, r3
 8005b66:	f000 fe69 	bl	800683c <lsm6dso_xl_full_scale_get>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8005b70:	f04f 33ff 	mov.w	r3, #4294967295
 8005b74:	e023      	b.n	8005bbe <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8005b76:	7afb      	ldrb	r3, [r7, #11]
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d81b      	bhi.n	8005bb4 <LSM6DSO_ACC_GetFullScale+0x68>
 8005b7c:	a201      	add	r2, pc, #4	; (adr r2, 8005b84 <LSM6DSO_ACC_GetFullScale+0x38>)
 8005b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b82:	bf00      	nop
 8005b84:	08005b95 	.word	0x08005b95
 8005b88:	08005bad 	.word	0x08005bad
 8005b8c:	08005b9d 	.word	0x08005b9d
 8005b90:	08005ba5 	.word	0x08005ba5
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2202      	movs	r2, #2
 8005b98:	601a      	str	r2, [r3, #0]
      break;
 8005b9a:	e00f      	b.n	8005bbc <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	2204      	movs	r2, #4
 8005ba0:	601a      	str	r2, [r3, #0]
      break;
 8005ba2:	e00b      	b.n	8005bbc <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	2208      	movs	r2, #8
 8005ba8:	601a      	str	r2, [r3, #0]
      break;
 8005baa:	e007      	b.n	8005bbc <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	2210      	movs	r2, #16
 8005bb0:	601a      	str	r2, [r3, #0]
      break;
 8005bb2:	e003      	b.n	8005bbc <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8005bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb8:	60fb      	str	r3, [r7, #12]
      break;
 8005bba:	bf00      	nop
  }

  return ret;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop

08005bc8 <LSM6DSO_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	dd0b      	ble.n	8005bf0 <LSM6DSO_ACC_SetFullScale+0x28>
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	dd06      	ble.n	8005bec <LSM6DSO_ACC_SetFullScale+0x24>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	dc01      	bgt.n	8005be8 <LSM6DSO_ACC_SetFullScale+0x20>
 8005be4:	2303      	movs	r3, #3
 8005be6:	e004      	b.n	8005bf2 <LSM6DSO_ACC_SetFullScale+0x2a>
 8005be8:	2301      	movs	r3, #1
 8005bea:	e002      	b.n	8005bf2 <LSM6DSO_ACC_SetFullScale+0x2a>
 8005bec:	2302      	movs	r3, #2
 8005bee:	e000      	b.n	8005bf2 <LSM6DSO_ACC_SetFullScale+0x2a>
 8005bf0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8005bf2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	331c      	adds	r3, #28
 8005bf8:	7bfa      	ldrb	r2, [r7, #15]
 8005bfa:	4611      	mov	r1, r2
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f000 fdf7 	bl	80067f0 <lsm6dso_xl_full_scale_set>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d002      	beq.n	8005c0e <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8005c08:	f04f 33ff 	mov.w	r3, #4294967295
 8005c0c:	e000      	b.n	8005c10 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <LSM6DSO_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	331c      	adds	r3, #28
 8005c26:	f107 0208 	add.w	r2, r7, #8
 8005c2a:	4611      	mov	r1, r2
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f001 f99e 	bl	8006f6e <lsm6dso_acceleration_raw_get>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d002      	beq.n	8005c3e <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8005c38:	f04f 33ff 	mov.w	r3, #4294967295
 8005c3c:	e00c      	b.n	8005c58 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8005c3e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8005c46:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005c4e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <LSM6DSO_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8005c6a:	f04f 0300 	mov.w	r3, #0
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	331c      	adds	r3, #28
 8005c74:	f107 0210 	add.w	r2, r7, #16
 8005c78:	4611      	mov	r1, r2
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f001 f977 	bl	8006f6e <lsm6dso_acceleration_raw_get>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d002      	beq.n	8005c8c <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8005c86:	f04f 33ff 	mov.w	r3, #4294967295
 8005c8a:	e03c      	b.n	8005d06 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8005c8c:	f107 030c 	add.w	r3, r7, #12
 8005c90:	4619      	mov	r1, r3
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7ff fce0 	bl	8005658 <LSM6DSO_ACC_GetSensitivity>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d002      	beq.n	8005ca4 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8005c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca2:	e030      	b.n	8005d06 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8005ca4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005ca8:	ee07 3a90 	vmov	s15, r3
 8005cac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cbc:	ee17 2a90 	vmov	r2, s15
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8005cc4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005cc8:	ee07 3a90 	vmov	s15, r3
 8005ccc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cdc:	ee17 2a90 	vmov	r2, s15
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8005ce4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005ce8:	ee07 3a90 	vmov	s15, r3
 8005cec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cf0:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cfc:	ee17 2a90 	vmov	r2, s15
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3718      	adds	r7, #24
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <LSM6DSO_GYRO_Enable>:
 * @brief  Enable the LSM6DSO gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b082      	sub	sp, #8
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d101      	bne.n	8005d24 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8005d20:	2300      	movs	r3, #0
 8005d22:	e014      	b.n	8005d4e <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f103 021c 	add.w	r2, r3, #28
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005d30:	4619      	mov	r1, r3
 8005d32:	4610      	mov	r0, r2
 8005d34:	f000 ff86 	bl	8006c44 <lsm6dso_gy_data_rate_set>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d002      	beq.n	8005d44 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8005d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d42:	e004      	b.n	8005d4e <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <LSM6DSO_GYRO_Disable>:
 * @brief  Disable the LSM6DSO gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b082      	sub	sp, #8
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d101      	bne.n	8005d6c <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	e01f      	b.n	8005dac <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f103 021c 	add.w	r2, r3, #28
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	332c      	adds	r3, #44	; 0x2c
 8005d76:	4619      	mov	r1, r3
 8005d78:	4610      	mov	r0, r2
 8005d7a:	f001 f85f 	bl	8006e3c <lsm6dso_gy_data_rate_get>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d002      	beq.n	8005d8a <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8005d84:	f04f 33ff 	mov.w	r3, #4294967295
 8005d88:	e010      	b.n	8005dac <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	331c      	adds	r3, #28
 8005d8e:	2100      	movs	r1, #0
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 ff57 	bl	8006c44 <lsm6dso_gy_data_rate_set>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8005d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005da0:	e004      	b.n	8005dac <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3708      	adds	r7, #8
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <LSM6DSO_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	331c      	adds	r3, #28
 8005dc6:	f107 020b 	add.w	r2, r7, #11
 8005dca:	4611      	mov	r1, r2
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f000 fef7 	bl	8006bc0 <lsm6dso_gy_full_scale_get>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d002      	beq.n	8005dde <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8005dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8005ddc:	e02d      	b.n	8005e3a <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8005dde:	7afb      	ldrb	r3, [r7, #11]
 8005de0:	2b06      	cmp	r3, #6
 8005de2:	d825      	bhi.n	8005e30 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8005de4:	a201      	add	r2, pc, #4	; (adr r2, 8005dec <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8005de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dea:	bf00      	nop
 8005dec:	08005e11 	.word	0x08005e11
 8005df0:	08005e09 	.word	0x08005e09
 8005df4:	08005e19 	.word	0x08005e19
 8005df8:	08005e31 	.word	0x08005e31
 8005dfc:	08005e21 	.word	0x08005e21
 8005e00:	08005e31 	.word	0x08005e31
 8005e04:	08005e29 	.word	0x08005e29
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	4a0e      	ldr	r2, [pc, #56]	; (8005e44 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8005e0c:	601a      	str	r2, [r3, #0]
      break;
 8005e0e:	e013      	b.n	8005e38 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	4a0d      	ldr	r2, [pc, #52]	; (8005e48 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8005e14:	601a      	str	r2, [r3, #0]
      break;
 8005e16:	e00f      	b.n	8005e38 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	4a0c      	ldr	r2, [pc, #48]	; (8005e4c <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8005e1c:	601a      	str	r2, [r3, #0]
      break;
 8005e1e:	e00b      	b.n	8005e38 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	4a0b      	ldr	r2, [pc, #44]	; (8005e50 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8005e24:	601a      	str	r2, [r3, #0]
      break;
 8005e26:	e007      	b.n	8005e38 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	4a0a      	ldr	r2, [pc, #40]	; (8005e54 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8005e2c:	601a      	str	r2, [r3, #0]
      break;
 8005e2e:	e003      	b.n	8005e38 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8005e30:	f04f 33ff 	mov.w	r3, #4294967295
 8005e34:	60fb      	str	r3, [r7, #12]
      break;
 8005e36:	bf00      	nop
  }

  return ret;
 8005e38:	68fb      	ldr	r3, [r7, #12]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	408c0000 	.word	0x408c0000
 8005e48:	410c0000 	.word	0x410c0000
 8005e4c:	418c0000 	.word	0x418c0000
 8005e50:	420c0000 	.word	0x420c0000
 8005e54:	428c0000 	.word	0x428c0000

08005e58 <LSM6DSO_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	331c      	adds	r3, #28
 8005e6a:	f107 020b 	add.w	r2, r7, #11
 8005e6e:	4611      	mov	r1, r2
 8005e70:	4618      	mov	r0, r3
 8005e72:	f000 ffe3 	bl	8006e3c <lsm6dso_gy_data_rate_get>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d002      	beq.n	8005e82 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8005e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e80:	e04e      	b.n	8005f20 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8005e82:	7afb      	ldrb	r3, [r7, #11]
 8005e84:	2b0a      	cmp	r3, #10
 8005e86:	d846      	bhi.n	8005f16 <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8005e88:	a201      	add	r2, pc, #4	; (adr r2, 8005e90 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8005e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8e:	bf00      	nop
 8005e90:	08005ebd 	.word	0x08005ebd
 8005e94:	08005ec7 	.word	0x08005ec7
 8005e98:	08005ecf 	.word	0x08005ecf
 8005e9c:	08005ed7 	.word	0x08005ed7
 8005ea0:	08005edf 	.word	0x08005edf
 8005ea4:	08005ee7 	.word	0x08005ee7
 8005ea8:	08005eef 	.word	0x08005eef
 8005eac:	08005ef7 	.word	0x08005ef7
 8005eb0:	08005eff 	.word	0x08005eff
 8005eb4:	08005f07 	.word	0x08005f07
 8005eb8:	08005f0f 	.word	0x08005f0f
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	f04f 0200 	mov.w	r2, #0
 8005ec2:	601a      	str	r2, [r3, #0]
      break;
 8005ec4:	e02b      	b.n	8005f1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	4a17      	ldr	r2, [pc, #92]	; (8005f28 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8005eca:	601a      	str	r2, [r3, #0]
      break;
 8005ecc:	e027      	b.n	8005f1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	4a16      	ldr	r2, [pc, #88]	; (8005f2c <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8005ed2:	601a      	str	r2, [r3, #0]
      break;
 8005ed4:	e023      	b.n	8005f1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	4a15      	ldr	r2, [pc, #84]	; (8005f30 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8005eda:	601a      	str	r2, [r3, #0]
      break;
 8005edc:	e01f      	b.n	8005f1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	4a14      	ldr	r2, [pc, #80]	; (8005f34 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8005ee2:	601a      	str	r2, [r3, #0]
      break;
 8005ee4:	e01b      	b.n	8005f1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	4a13      	ldr	r2, [pc, #76]	; (8005f38 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8005eea:	601a      	str	r2, [r3, #0]
      break;
 8005eec:	e017      	b.n	8005f1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	4a12      	ldr	r2, [pc, #72]	; (8005f3c <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8005ef2:	601a      	str	r2, [r3, #0]
      break;
 8005ef4:	e013      	b.n	8005f1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	4a11      	ldr	r2, [pc, #68]	; (8005f40 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8005efa:	601a      	str	r2, [r3, #0]
      break;
 8005efc:	e00f      	b.n	8005f1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	4a10      	ldr	r2, [pc, #64]	; (8005f44 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8005f02:	601a      	str	r2, [r3, #0]
      break;
 8005f04:	e00b      	b.n	8005f1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	4a0f      	ldr	r2, [pc, #60]	; (8005f48 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8005f0a:	601a      	str	r2, [r3, #0]
      break;
 8005f0c:	e007      	b.n	8005f1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	4a0e      	ldr	r2, [pc, #56]	; (8005f4c <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8005f12:	601a      	str	r2, [r3, #0]
      break;
 8005f14:	e003      	b.n	8005f1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 8005f16:	f04f 33ff 	mov.w	r3, #4294967295
 8005f1a:	60fb      	str	r3, [r7, #12]
      break;
 8005f1c:	bf00      	nop
  }

  return ret;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	41480000 	.word	0x41480000
 8005f2c:	41d00000 	.word	0x41d00000
 8005f30:	42500000 	.word	0x42500000
 8005f34:	42d00000 	.word	0x42d00000
 8005f38:	43500000 	.word	0x43500000
 8005f3c:	43d08000 	.word	0x43d08000
 8005f40:	44504000 	.word	0x44504000
 8005f44:	44d06000 	.word	0x44d06000
 8005f48:	45505000 	.word	0x45505000
 8005f4c:	45d05800 	.word	0x45d05800

08005f50 <LSM6DSO_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	ed97 0a00 	vldr	s0, [r7]
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f806 	bl	8005f74 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8005f68:	4603      	mov	r3, r0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
	...

08005f74 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
 * @param  Odr the output data rate value to be set
 * @param  Mode the gyroscope operating mode
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b088      	sub	sp, #32
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8005f80:	460b      	mov	r3, r1
 8005f82:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8005f84:	2300      	movs	r3, #0
 8005f86:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8005f8c:	79fb      	ldrb	r3, [r7, #7]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d002      	beq.n	8005f98 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d028      	beq.n	8005fe8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8005f96:	e05c      	b.n	8006052 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f103 001c 	add.w	r0, r3, #28
 8005f9e:	f107 0214 	add.w	r2, r7, #20
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	2116      	movs	r1, #22
 8005fa6:	f000 fbf3 	bl	8006790 <lsm6dso_read_reg>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d002      	beq.n	8005fb6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8005fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb4:	e06c      	b.n	8006090 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 8005fb6:	7d3b      	ldrb	r3, [r7, #20]
 8005fb8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d04b      	beq.n	800605a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8005fc2:	7d3b      	ldrb	r3, [r7, #20]
 8005fc4:	f36f 13c7 	bfc	r3, #7, #1
 8005fc8:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f103 001c 	add.w	r0, r3, #28
 8005fd0:	f107 0214 	add.w	r2, r7, #20
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	2116      	movs	r1, #22
 8005fd8:	f000 fbf2 	bl	80067c0 <lsm6dso_write_reg>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d03b      	beq.n	800605a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8005fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe6:	e053      	b.n	8006090 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f103 001c 	add.w	r0, r3, #28
 8005fee:	f107 0210 	add.w	r2, r7, #16
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	2116      	movs	r1, #22
 8005ff6:	f000 fbcb 	bl	8006790 <lsm6dso_read_reg>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8006000:	f04f 33ff 	mov.w	r3, #4294967295
 8006004:	e044      	b.n	8006090 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 8006006:	7c3b      	ldrb	r3, [r7, #16]
 8006008:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d112      	bne.n	8006038 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 8006012:	7c3b      	ldrb	r3, [r7, #16]
 8006014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006018:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f103 001c 	add.w	r0, r3, #28
 8006020:	f107 0210 	add.w	r2, r7, #16
 8006024:	2301      	movs	r3, #1
 8006026:	2116      	movs	r1, #22
 8006028:	f000 fbca 	bl	80067c0 <lsm6dso_write_reg>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d002      	beq.n	8006038 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8006032:	f04f 33ff 	mov.w	r3, #4294967295
 8006036:	e02b      	b.n	8006090 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8006038:	edd7 7a06 	vldr	s15, [r7, #24]
 800603c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8006098 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8006040:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006048:	dc00      	bgt.n	800604c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 800604a:	e007      	b.n	800605c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 800604c:	4b13      	ldr	r3, [pc, #76]	; (800609c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 800604e:	61bb      	str	r3, [r7, #24]
 8006050:	e004      	b.n	800605c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8006052:	f04f 33ff 	mov.w	r3, #4294967295
 8006056:	61fb      	str	r3, [r7, #28]
      break;
 8006058:	e000      	b.n	800605c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 800605a:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006062:	d102      	bne.n	800606a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8006064:	f04f 33ff 	mov.w	r3, #4294967295
 8006068:	e012      	b.n	8006090 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006070:	2b01      	cmp	r3, #1
 8006072:	d106      	bne.n	8006082 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8006074:	ed97 0a06 	vldr	s0, [r7, #24]
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 fa45 	bl	8006508 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 800607e:	61f8      	str	r0, [r7, #28]
 8006080:	e005      	b.n	800608e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8006082:	ed97 0a06 	vldr	s0, [r7, #24]
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 faca 	bl	8006620 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 800608c:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 800608e:	69fb      	ldr	r3, [r7, #28]
}
 8006090:	4618      	mov	r0, r3
 8006092:	3720      	adds	r7, #32
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	43500000 	.word	0x43500000
 800609c:	43500000 	.word	0x43500000

080060a0 <LSM6DSO_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	331c      	adds	r3, #28
 80060b2:	f107 020b 	add.w	r2, r7, #11
 80060b6:	4611      	mov	r1, r2
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 fd81 	bl	8006bc0 <lsm6dso_gy_full_scale_get>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d002      	beq.n	80060ca <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 80060c4:	f04f 33ff 	mov.w	r3, #4294967295
 80060c8:	e030      	b.n	800612c <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 80060ca:	7afb      	ldrb	r3, [r7, #11]
 80060cc:	2b06      	cmp	r3, #6
 80060ce:	d828      	bhi.n	8006122 <LSM6DSO_GYRO_GetFullScale+0x82>
 80060d0:	a201      	add	r2, pc, #4	; (adr r2, 80060d8 <LSM6DSO_GYRO_GetFullScale+0x38>)
 80060d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d6:	bf00      	nop
 80060d8:	080060fd 	.word	0x080060fd
 80060dc:	080060f5 	.word	0x080060f5
 80060e0:	08006105 	.word	0x08006105
 80060e4:	08006123 	.word	0x08006123
 80060e8:	0800610f 	.word	0x0800610f
 80060ec:	08006123 	.word	0x08006123
 80060f0:	08006119 	.word	0x08006119
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	227d      	movs	r2, #125	; 0x7d
 80060f8:	601a      	str	r2, [r3, #0]
      break;
 80060fa:	e016      	b.n	800612a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	22fa      	movs	r2, #250	; 0xfa
 8006100:	601a      	str	r2, [r3, #0]
      break;
 8006102:	e012      	b.n	800612a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800610a:	601a      	str	r2, [r3, #0]
      break;
 800610c:	e00d      	b.n	800612a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006114:	601a      	str	r2, [r3, #0]
      break;
 8006116:	e008      	b.n	800612a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800611e:	601a      	str	r2, [r3, #0]
      break;
 8006120:	e003      	b.n	800612a <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8006122:	f04f 33ff 	mov.w	r3, #4294967295
 8006126:	60fb      	str	r3, [r7, #12]
      break;
 8006128:	bf00      	nop
  }

  return ret;
 800612a:	68fb      	ldr	r3, [r7, #12]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <LSM6DSO_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2b7d      	cmp	r3, #125	; 0x7d
 8006142:	dd12      	ble.n	800616a <LSM6DSO_GYRO_SetFullScale+0x36>
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	2bfa      	cmp	r3, #250	; 0xfa
 8006148:	dd0d      	ble.n	8006166 <LSM6DSO_GYRO_SetFullScale+0x32>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006150:	dd07      	ble.n	8006162 <LSM6DSO_GYRO_SetFullScale+0x2e>
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006158:	dc01      	bgt.n	800615e <LSM6DSO_GYRO_SetFullScale+0x2a>
 800615a:	2304      	movs	r3, #4
 800615c:	e006      	b.n	800616c <LSM6DSO_GYRO_SetFullScale+0x38>
 800615e:	2306      	movs	r3, #6
 8006160:	e004      	b.n	800616c <LSM6DSO_GYRO_SetFullScale+0x38>
 8006162:	2302      	movs	r3, #2
 8006164:	e002      	b.n	800616c <LSM6DSO_GYRO_SetFullScale+0x38>
 8006166:	2300      	movs	r3, #0
 8006168:	e000      	b.n	800616c <LSM6DSO_GYRO_SetFullScale+0x38>
 800616a:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 800616c:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	331c      	adds	r3, #28
 8006172:	7bfa      	ldrb	r2, [r7, #15]
 8006174:	4611      	mov	r1, r2
 8006176:	4618      	mov	r0, r3
 8006178:	f000 fcfc 	bl	8006b74 <lsm6dso_gy_full_scale_set>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8006182:	f04f 33ff 	mov.w	r3, #4294967295
 8006186:	e000      	b.n	800618a <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <LSM6DSO_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b084      	sub	sp, #16
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	331c      	adds	r3, #28
 80061a0:	f107 0208 	add.w	r2, r7, #8
 80061a4:	4611      	mov	r1, r2
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 fed0 	bl	8006f4c <lsm6dso_angular_rate_raw_get>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d002      	beq.n	80061b8 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 80061b2:	f04f 33ff 	mov.w	r3, #4294967295
 80061b6:	e00c      	b.n	80061d2 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80061b8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80061c0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80061c8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <LSM6DSO_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b086      	sub	sp, #24
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	331c      	adds	r3, #28
 80061e8:	f107 0210 	add.w	r2, r7, #16
 80061ec:	4611      	mov	r1, r2
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 feac 	bl	8006f4c <lsm6dso_angular_rate_raw_get>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 80061fa:	f04f 33ff 	mov.w	r3, #4294967295
 80061fe:	e03c      	b.n	800627a <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8006200:	f107 030c 	add.w	r3, r7, #12
 8006204:	4619      	mov	r1, r3
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7ff fdd4 	bl	8005db4 <LSM6DSO_GYRO_GetSensitivity>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d002      	beq.n	8006218 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8006212:	f04f 33ff 	mov.w	r3, #4294967295
 8006216:	e030      	b.n	800627a <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8006218:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800621c:	ee07 3a90 	vmov	s15, r3
 8006220:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006224:	edd7 7a03 	vldr	s15, [r7, #12]
 8006228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800622c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006230:	ee17 2a90 	vmov	r2, s15
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8006238:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800623c:	ee07 3a90 	vmov	s15, r3
 8006240:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006244:	edd7 7a03 	vldr	s15, [r7, #12]
 8006248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800624c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006250:	ee17 2a90 	vmov	r2, s15
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8006258:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800625c:	ee07 3a90 	vmov	s15, r3
 8006260:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006264:	edd7 7a03 	vldr	s15, [r7, #12]
 8006268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800626c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006270:	ee17 2a90 	vmov	r2, s15
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <LSM6DSO_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b082      	sub	sp, #8
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	460b      	mov	r3, r1
 800628c:	70fb      	strb	r3, [r7, #3]
 800628e:	4613      	mov	r3, r2
 8006290:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f103 001c 	add.w	r0, r3, #28
 8006298:	1cba      	adds	r2, r7, #2
 800629a:	78f9      	ldrb	r1, [r7, #3]
 800629c:	2301      	movs	r3, #1
 800629e:	f000 fa8f 	bl	80067c0 <lsm6dso_write_reg>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d002      	beq.n	80062ae <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 80062a8:	f04f 33ff 	mov.w	r3, #4294967295
 80062ac:	e000      	b.n	80062b0 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3708      	adds	r7, #8
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80062c4:	edd7 7a00 	vldr	s15, [r7]
 80062c8:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80063c8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 80062cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062d4:	d801      	bhi.n	80062da <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 80062d6:	230b      	movs	r3, #11
 80062d8:	e063      	b.n	80063a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80062da:	edd7 7a00 	vldr	s15, [r7]
 80062de:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80062e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ea:	d801      	bhi.n	80062f0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 80062ec:	2301      	movs	r3, #1
 80062ee:	e058      	b.n	80063a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80062f0:	edd7 7a00 	vldr	s15, [r7]
 80062f4:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80062f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006300:	d801      	bhi.n	8006306 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8006302:	2302      	movs	r3, #2
 8006304:	e04d      	b.n	80063a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006306:	edd7 7a00 	vldr	s15, [r7]
 800630a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80063cc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 800630e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006316:	d801      	bhi.n	800631c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8006318:	2303      	movs	r3, #3
 800631a:	e042      	b.n	80063a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800631c:	edd7 7a00 	vldr	s15, [r7]
 8006320:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80063d0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8006324:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800632c:	d801      	bhi.n	8006332 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800632e:	2304      	movs	r3, #4
 8006330:	e037      	b.n	80063a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006332:	edd7 7a00 	vldr	s15, [r7]
 8006336:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80063d4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 800633a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800633e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006342:	d801      	bhi.n	8006348 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8006344:	2305      	movs	r3, #5
 8006346:	e02c      	b.n	80063a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006348:	edd7 7a00 	vldr	s15, [r7]
 800634c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80063d8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8006350:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006358:	d801      	bhi.n	800635e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800635a:	2306      	movs	r3, #6
 800635c:	e021      	b.n	80063a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800635e:	edd7 7a00 	vldr	s15, [r7]
 8006362:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80063dc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8006366:	eef4 7ac7 	vcmpe.f32	s15, s14
 800636a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800636e:	d801      	bhi.n	8006374 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8006370:	2307      	movs	r3, #7
 8006372:	e016      	b.n	80063a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006374:	edd7 7a00 	vldr	s15, [r7]
 8006378:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80063e0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 800637c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006384:	d801      	bhi.n	800638a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8006386:	2308      	movs	r3, #8
 8006388:	e00b      	b.n	80063a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800638a:	edd7 7a00 	vldr	s15, [r7]
 800638e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80063e4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8006392:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800639a:	d801      	bhi.n	80063a0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 800639c:	2309      	movs	r3, #9
 800639e:	e000      	b.n	80063a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80063a0:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 80063a2:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
          : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
          :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	331c      	adds	r3, #28
 80063a8:	7bfa      	ldrb	r2, [r7, #15]
 80063aa:	4611      	mov	r1, r2
 80063ac:	4618      	mov	r0, r3
 80063ae:	f000 fa7d 	bl	80068ac <lsm6dso_xl_data_rate_set>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d002      	beq.n	80063be <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 80063b8:	f04f 33ff 	mov.w	r3, #4294967295
 80063bc:	e000      	b.n	80063c0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	3fcccccd 	.word	0x3fcccccd
 80063cc:	42500000 	.word	0x42500000
 80063d0:	42d00000 	.word	0x42d00000
 80063d4:	43500000 	.word	0x43500000
 80063d8:	43d08000 	.word	0x43d08000
 80063dc:	44504000 	.word	0x44504000
 80063e0:	44d06000 	.word	0x44d06000
 80063e4:	45505000 	.word	0x45505000

080063e8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80063f4:	edd7 7a00 	vldr	s15, [r7]
 80063f8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80064e8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 80063fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006404:	d801      	bhi.n	800640a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 8006406:	230b      	movs	r3, #11
 8006408:	e063      	b.n	80064d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800640a:	edd7 7a00 	vldr	s15, [r7]
 800640e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006412:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800641a:	d801      	bhi.n	8006420 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 800641c:	2301      	movs	r3, #1
 800641e:	e058      	b.n	80064d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006420:	edd7 7a00 	vldr	s15, [r7]
 8006424:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006428:	eef4 7ac7 	vcmpe.f32	s15, s14
 800642c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006430:	d801      	bhi.n	8006436 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8006432:	2302      	movs	r3, #2
 8006434:	e04d      	b.n	80064d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006436:	edd7 7a00 	vldr	s15, [r7]
 800643a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80064ec <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 800643e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006446:	d801      	bhi.n	800644c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8006448:	2303      	movs	r3, #3
 800644a:	e042      	b.n	80064d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800644c:	edd7 7a00 	vldr	s15, [r7]
 8006450:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80064f0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8006454:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800645c:	d801      	bhi.n	8006462 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800645e:	2304      	movs	r3, #4
 8006460:	e037      	b.n	80064d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006462:	edd7 7a00 	vldr	s15, [r7]
 8006466:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80064f4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 800646a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800646e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006472:	d801      	bhi.n	8006478 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8006474:	2305      	movs	r3, #5
 8006476:	e02c      	b.n	80064d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006478:	edd7 7a00 	vldr	s15, [r7]
 800647c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80064f8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8006480:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006488:	d801      	bhi.n	800648e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800648a:	2306      	movs	r3, #6
 800648c:	e021      	b.n	80064d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800648e:	edd7 7a00 	vldr	s15, [r7]
 8006492:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80064fc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 8006496:	eef4 7ac7 	vcmpe.f32	s15, s14
 800649a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800649e:	d801      	bhi.n	80064a4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80064a0:	2307      	movs	r3, #7
 80064a2:	e016      	b.n	80064d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80064a4:	edd7 7a00 	vldr	s15, [r7]
 80064a8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8006500 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 80064ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064b4:	d801      	bhi.n	80064ba <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80064b6:	2308      	movs	r3, #8
 80064b8:	e00b      	b.n	80064d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80064ba:	edd7 7a00 	vldr	s15, [r7]
 80064be:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006504 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 80064c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ca:	d801      	bhi.n	80064d0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80064cc:	2309      	movs	r3, #9
 80064ce:	e000      	b.n	80064d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80064d0:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	3fcccccd 	.word	0x3fcccccd
 80064ec:	42500000 	.word	0x42500000
 80064f0:	42d00000 	.word	0x42d00000
 80064f4:	43500000 	.word	0x43500000
 80064f8:	43d08000 	.word	0x43d08000
 80064fc:	44504000 	.word	0x44504000
 8006500:	44d06000 	.word	0x44d06000
 8006504:	45505000 	.word	0x45505000

08006508 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8006514:	edd7 7a00 	vldr	s15, [r7]
 8006518:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800651c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006524:	d801      	bhi.n	800652a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8006526:	2301      	movs	r3, #1
 8006528:	e058      	b.n	80065dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800652a:	edd7 7a00 	vldr	s15, [r7]
 800652e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800653a:	d801      	bhi.n	8006540 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 800653c:	2302      	movs	r3, #2
 800653e:	e04d      	b.n	80065dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006540:	edd7 7a00 	vldr	s15, [r7]
 8006544:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8006604 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8006548:	eef4 7ac7 	vcmpe.f32	s15, s14
 800654c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006550:	d801      	bhi.n	8006556 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8006552:	2303      	movs	r3, #3
 8006554:	e042      	b.n	80065dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006556:	edd7 7a00 	vldr	s15, [r7]
 800655a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006608 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800655e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006566:	d801      	bhi.n	800656c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8006568:	2304      	movs	r3, #4
 800656a:	e037      	b.n	80065dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800656c:	edd7 7a00 	vldr	s15, [r7]
 8006570:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800660c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8006574:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800657c:	d801      	bhi.n	8006582 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800657e:	2305      	movs	r3, #5
 8006580:	e02c      	b.n	80065dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006582:	edd7 7a00 	vldr	s15, [r7]
 8006586:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006610 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800658a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800658e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006592:	d801      	bhi.n	8006598 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8006594:	2306      	movs	r3, #6
 8006596:	e021      	b.n	80065dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006598:	edd7 7a00 	vldr	s15, [r7]
 800659c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006614 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80065a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065a8:	d801      	bhi.n	80065ae <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80065aa:	2307      	movs	r3, #7
 80065ac:	e016      	b.n	80065dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80065ae:	edd7 7a00 	vldr	s15, [r7]
 80065b2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006618 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80065b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065be:	d801      	bhi.n	80065c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80065c0:	2308      	movs	r3, #8
 80065c2:	e00b      	b.n	80065dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80065c4:	edd7 7a00 	vldr	s15, [r7]
 80065c8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800661c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80065cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065d4:	d801      	bhi.n	80065da <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80065d6:	2309      	movs	r3, #9
 80065d8:	e000      	b.n	80065dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80065da:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80065dc:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
          : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
          :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	331c      	adds	r3, #28
 80065e2:	7bfa      	ldrb	r2, [r7, #15]
 80065e4:	4611      	mov	r1, r2
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 fb2c 	bl	8006c44 <lsm6dso_gy_data_rate_set>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d002      	beq.n	80065f8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 80065f2:	f04f 33ff 	mov.w	r3, #4294967295
 80065f6:	e000      	b.n	80065fa <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	42500000 	.word	0x42500000
 8006608:	42d00000 	.word	0x42d00000
 800660c:	43500000 	.word	0x43500000
 8006610:	43d08000 	.word	0x43d08000
 8006614:	44504000 	.word	0x44504000
 8006618:	44d06000 	.word	0x44d06000
 800661c:	45505000 	.word	0x45505000

08006620 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 800662c:	edd7 7a00 	vldr	s15, [r7]
 8006630:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006634:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800663c:	d801      	bhi.n	8006642 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800663e:	2301      	movs	r3, #1
 8006640:	e058      	b.n	80066f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006642:	edd7 7a00 	vldr	s15, [r7]
 8006646:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800664a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800664e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006652:	d801      	bhi.n	8006658 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8006654:	2302      	movs	r3, #2
 8006656:	e04d      	b.n	80066f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006658:	edd7 7a00 	vldr	s15, [r7]
 800665c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8006708 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8006660:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006668:	d801      	bhi.n	800666e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800666a:	2303      	movs	r3, #3
 800666c:	e042      	b.n	80066f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800666e:	edd7 7a00 	vldr	s15, [r7]
 8006672:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800670c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8006676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800667a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800667e:	d801      	bhi.n	8006684 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8006680:	2304      	movs	r3, #4
 8006682:	e037      	b.n	80066f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006684:	edd7 7a00 	vldr	s15, [r7]
 8006688:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8006710 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 800668c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006694:	d801      	bhi.n	800669a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8006696:	2305      	movs	r3, #5
 8006698:	e02c      	b.n	80066f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800669a:	edd7 7a00 	vldr	s15, [r7]
 800669e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006714 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80066a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066aa:	d801      	bhi.n	80066b0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80066ac:	2306      	movs	r3, #6
 80066ae:	e021      	b.n	80066f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80066b0:	edd7 7a00 	vldr	s15, [r7]
 80066b4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006718 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80066b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066c0:	d801      	bhi.n	80066c6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80066c2:	2307      	movs	r3, #7
 80066c4:	e016      	b.n	80066f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80066c6:	edd7 7a00 	vldr	s15, [r7]
 80066ca:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800671c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80066ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066d6:	d801      	bhi.n	80066dc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80066d8:	2308      	movs	r3, #8
 80066da:	e00b      	b.n	80066f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80066dc:	edd7 7a00 	vldr	s15, [r7]
 80066e0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8006720 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80066e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ec:	d801      	bhi.n	80066f2 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80066ee:	2309      	movs	r3, #9
 80066f0:	e000      	b.n	80066f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80066f2:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                 : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                 : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                 :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	42500000 	.word	0x42500000
 800670c:	42d00000 	.word	0x42d00000
 8006710:	43500000 	.word	0x43500000
 8006714:	43d08000 	.word	0x43d08000
 8006718:	44504000 	.word	0x44504000
 800671c:	44d06000 	.word	0x44d06000
 8006720:	45505000 	.word	0x45505000

08006724 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006724:	b590      	push	{r4, r7, lr}
 8006726:	b087      	sub	sp, #28
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	607a      	str	r2, [r7, #4]
 800672e:	461a      	mov	r2, r3
 8006730:	460b      	mov	r3, r1
 8006732:	72fb      	strb	r3, [r7, #11]
 8006734:	4613      	mov	r3, r2
 8006736:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	695c      	ldr	r4, [r3, #20]
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	7b1b      	ldrb	r3, [r3, #12]
 8006744:	b298      	uxth	r0, r3
 8006746:	7afb      	ldrb	r3, [r7, #11]
 8006748:	b299      	uxth	r1, r3
 800674a:	893b      	ldrh	r3, [r7, #8]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	47a0      	blx	r4
 8006750:	4603      	mov	r3, r0
}
 8006752:	4618      	mov	r0, r3
 8006754:	371c      	adds	r7, #28
 8006756:	46bd      	mov	sp, r7
 8006758:	bd90      	pop	{r4, r7, pc}

0800675a <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800675a:	b590      	push	{r4, r7, lr}
 800675c:	b087      	sub	sp, #28
 800675e:	af00      	add	r7, sp, #0
 8006760:	60f8      	str	r0, [r7, #12]
 8006762:	607a      	str	r2, [r7, #4]
 8006764:	461a      	mov	r2, r3
 8006766:	460b      	mov	r3, r1
 8006768:	72fb      	strb	r3, [r7, #11]
 800676a:	4613      	mov	r3, r2
 800676c:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	691c      	ldr	r4, [r3, #16]
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	7b1b      	ldrb	r3, [r3, #12]
 800677a:	b298      	uxth	r0, r3
 800677c:	7afb      	ldrb	r3, [r7, #11]
 800677e:	b299      	uxth	r1, r3
 8006780:	893b      	ldrh	r3, [r7, #8]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	47a0      	blx	r4
 8006786:	4603      	mov	r3, r0
}
 8006788:	4618      	mov	r0, r3
 800678a:	371c      	adds	r7, #28
 800678c:	46bd      	mov	sp, r7
 800678e:	bd90      	pop	{r4, r7, pc}

08006790 <lsm6dso_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8006790:	b590      	push	{r4, r7, lr}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	607a      	str	r2, [r7, #4]
 800679a:	461a      	mov	r2, r3
 800679c:	460b      	mov	r3, r1
 800679e:	72fb      	strb	r3, [r7, #11]
 80067a0:	4613      	mov	r3, r2
 80067a2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	685c      	ldr	r4, [r3, #4]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6898      	ldr	r0, [r3, #8]
 80067ac:	893b      	ldrh	r3, [r7, #8]
 80067ae:	7af9      	ldrb	r1, [r7, #11]
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	47a0      	blx	r4
 80067b4:	6178      	str	r0, [r7, #20]
  return ret;
 80067b6:	697b      	ldr	r3, [r7, #20]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	371c      	adds	r7, #28
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd90      	pop	{r4, r7, pc}

080067c0 <lsm6dso_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80067c0:	b590      	push	{r4, r7, lr}
 80067c2:	b087      	sub	sp, #28
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	607a      	str	r2, [r7, #4]
 80067ca:	461a      	mov	r2, r3
 80067cc:	460b      	mov	r3, r1
 80067ce:	72fb      	strb	r3, [r7, #11]
 80067d0:	4613      	mov	r3, r2
 80067d2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681c      	ldr	r4, [r3, #0]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6898      	ldr	r0, [r3, #8]
 80067dc:	893b      	ldrh	r3, [r7, #8]
 80067de:	7af9      	ldrb	r1, [r7, #11]
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	47a0      	blx	r4
 80067e4:	6178      	str	r0, [r7, #20]
  return ret;
 80067e6:	697b      	ldr	r3, [r7, #20]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	371c      	adds	r7, #28
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd90      	pop	{r4, r7, pc}

080067f0 <lsm6dso_xl_full_scale_set>:
  * @param  val      change the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	460b      	mov	r3, r1
 80067fa:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 80067fc:	f107 0208 	add.w	r2, r7, #8
 8006800:	2301      	movs	r3, #1
 8006802:	2110      	movs	r1, #16
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7ff ffc3 	bl	8006790 <lsm6dso_read_reg>
 800680a:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10f      	bne.n	8006832 <lsm6dso_xl_full_scale_set+0x42>
    reg.fs_xl = (uint8_t) val;
 8006812:	78fb      	ldrb	r3, [r7, #3]
 8006814:	f003 0303 	and.w	r3, r3, #3
 8006818:	b2da      	uxtb	r2, r3
 800681a:	7a3b      	ldrb	r3, [r7, #8]
 800681c:	f362 0383 	bfi	r3, r2, #2, #2
 8006820:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8006822:	f107 0208 	add.w	r2, r7, #8
 8006826:	2301      	movs	r3, #1
 8006828:	2110      	movs	r1, #16
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7ff ffc8 	bl	80067c0 <lsm6dso_write_reg>
 8006830:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006832:	68fb      	ldr	r3, [r7, #12]
}
 8006834:	4618      	mov	r0, r3
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <lsm6dso_xl_full_scale_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx, lsm6dso_fs_xl_t *val)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8006846:	f107 0208 	add.w	r2, r7, #8
 800684a:	2301      	movs	r3, #1
 800684c:	2110      	movs	r1, #16
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7ff ff9e 	bl	8006790 <lsm6dso_read_reg>
 8006854:	60f8      	str	r0, [r7, #12]
  switch (reg.fs_xl) {
 8006856:	7a3b      	ldrb	r3, [r7, #8]
 8006858:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b03      	cmp	r3, #3
 8006860:	d81a      	bhi.n	8006898 <lsm6dso_xl_full_scale_get+0x5c>
 8006862:	a201      	add	r2, pc, #4	; (adr r2, 8006868 <lsm6dso_xl_full_scale_get+0x2c>)
 8006864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006868:	08006879 	.word	0x08006879
 800686c:	08006881 	.word	0x08006881
 8006870:	08006889 	.word	0x08006889
 8006874:	08006891 	.word	0x08006891
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	2200      	movs	r2, #0
 800687c:	701a      	strb	r2, [r3, #0]
      break;
 800687e:	e00f      	b.n	80068a0 <lsm6dso_xl_full_scale_get+0x64>
    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	2201      	movs	r2, #1
 8006884:	701a      	strb	r2, [r3, #0]
      break;
 8006886:	e00b      	b.n	80068a0 <lsm6dso_xl_full_scale_get+0x64>
    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	2202      	movs	r2, #2
 800688c:	701a      	strb	r2, [r3, #0]
      break;
 800688e:	e007      	b.n	80068a0 <lsm6dso_xl_full_scale_get+0x64>
    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	2203      	movs	r2, #3
 8006894:	701a      	strb	r2, [r3, #0]
      break;
 8006896:	e003      	b.n	80068a0 <lsm6dso_xl_full_scale_get+0x64>
    default:
      *val = LSM6DSO_2g;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	2200      	movs	r2, #0
 800689c:	701a      	strb	r2, [r3, #0]
      break;
 800689e:	bf00      	nop
  }

  return ret;
 80068a0:	68fb      	ldr	r3, [r7, #12]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop

080068ac <lsm6dso_xl_data_rate_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dso_odr_xl_t val)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	460b      	mov	r3, r1
 80068b6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 80068b8:	78fb      	ldrb	r3, [r7, #3]
 80068ba:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80068bc:	f107 030c 	add.w	r3, r7, #12
 80068c0:	4619      	mov	r1, r3
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fc2d 	bl	8007122 <lsm6dso_fsm_enable_get>
 80068c8:	6138      	str	r0, [r7, #16]
  if (ret == 0) {
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f040 80c4 	bne.w	8006a5a <lsm6dso_xl_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80068d2:	7b3b      	ldrb	r3, [r7, #12]
 80068d4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80068d8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 80068da:	7b3b      	ldrb	r3, [r7, #12]
 80068dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80068e0:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80068e2:	4313      	orrs	r3, r2
 80068e4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 80068e6:	7b3b      	ldrb	r3, [r7, #12]
 80068e8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80068ec:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 80068ee:	4313      	orrs	r3, r2
 80068f0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 80068f2:	7b3b      	ldrb	r3, [r7, #12]
 80068f4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80068f8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 80068fa:	4313      	orrs	r3, r2
 80068fc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 80068fe:	7b3b      	ldrb	r3, [r7, #12]
 8006900:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006904:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8006906:	4313      	orrs	r3, r2
 8006908:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 800690a:	7b3b      	ldrb	r3, [r7, #12]
 800690c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006910:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8006912:	4313      	orrs	r3, r2
 8006914:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8006916:	7b3b      	ldrb	r3, [r7, #12]
 8006918:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800691c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 800691e:	4313      	orrs	r3, r2
 8006920:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8006922:	7b3b      	ldrb	r3, [r7, #12]
 8006924:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006928:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 800692a:	4313      	orrs	r3, r2
 800692c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 800692e:	7b7b      	ldrb	r3, [r7, #13]
 8006930:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006934:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8006936:	4313      	orrs	r3, r2
 8006938:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800693a:	7b7b      	ldrb	r3, [r7, #13]
 800693c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006940:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8006942:	4313      	orrs	r3, r2
 8006944:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8006946:	7b7b      	ldrb	r3, [r7, #13]
 8006948:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800694c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800694e:	4313      	orrs	r3, r2
 8006950:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8006952:	7b7b      	ldrb	r3, [r7, #13]
 8006954:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006958:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 800695a:	4313      	orrs	r3, r2
 800695c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 800695e:	7b7b      	ldrb	r3, [r7, #13]
 8006960:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006964:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8006966:	4313      	orrs	r3, r2
 8006968:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800696a:	7b7b      	ldrb	r3, [r7, #13]
 800696c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006970:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8006972:	4313      	orrs	r3, r2
 8006974:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8006976:	7b7b      	ldrb	r3, [r7, #13]
 8006978:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800697c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800697e:	4313      	orrs	r3, r2
 8006980:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ){
 8006982:	7b7b      	ldrb	r3, [r7, #13]
 8006984:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006988:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 800698a:	4313      	orrs	r3, r2
 800698c:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800698e:	2b01      	cmp	r3, #1
 8006990:	d163      	bne.n	8006a5a <lsm6dso_xl_data_rate_set+0x1ae>

      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8006992:	f107 030b 	add.w	r3, r7, #11
 8006996:	4619      	mov	r1, r3
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 fbe3 	bl	8007164 <lsm6dso_fsm_data_rate_get>
 800699e:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d159      	bne.n	8006a5a <lsm6dso_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 80069a6:	7afb      	ldrb	r3, [r7, #11]
 80069a8:	2b03      	cmp	r3, #3
 80069aa:	d853      	bhi.n	8006a54 <lsm6dso_xl_data_rate_set+0x1a8>
 80069ac:	a201      	add	r2, pc, #4	; (adr r2, 80069b4 <lsm6dso_xl_data_rate_set+0x108>)
 80069ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b2:	bf00      	nop
 80069b4:	080069c5 	.word	0x080069c5
 80069b8:	080069d7 	.word	0x080069d7
 80069bc:	080069f5 	.word	0x080069f5
 80069c0:	08006a1f 	.word	0x08006a1f
          case LSM6DSO_ODR_FSM_12Hz5:

            if (val == LSM6DSO_XL_ODR_OFF){
 80069c4:	78fb      	ldrb	r3, [r7, #3]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d102      	bne.n	80069d0 <lsm6dso_xl_data_rate_set+0x124>
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 80069ca:	2301      	movs	r3, #1
 80069cc:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_xl = val;
            }
            break;
 80069ce:	e045      	b.n	8006a5c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80069d0:	78fb      	ldrb	r3, [r7, #3]
 80069d2:	75fb      	strb	r3, [r7, #23]
            break;
 80069d4:	e042      	b.n	8006a5c <lsm6dso_xl_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_26Hz:

            if (val == LSM6DSO_XL_ODR_OFF){
 80069d6:	78fb      	ldrb	r3, [r7, #3]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d102      	bne.n	80069e2 <lsm6dso_xl_data_rate_set+0x136>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 80069dc:	2302      	movs	r3, #2
 80069de:	75fb      	strb	r3, [r7, #23]
              odr_xl = LSM6DSO_XL_ODR_26Hz;

            } else {
              odr_xl = val;
            }
            break;
 80069e0:	e03c      	b.n	8006a5c <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_12Hz5){
 80069e2:	78fb      	ldrb	r3, [r7, #3]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d102      	bne.n	80069ee <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 80069e8:	2302      	movs	r3, #2
 80069ea:	75fb      	strb	r3, [r7, #23]
            break;
 80069ec:	e036      	b.n	8006a5c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80069ee:	78fb      	ldrb	r3, [r7, #3]
 80069f0:	75fb      	strb	r3, [r7, #23]
            break;
 80069f2:	e033      	b.n	8006a5c <lsm6dso_xl_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_52Hz:

            if (val == LSM6DSO_XL_ODR_OFF){
 80069f4:	78fb      	ldrb	r3, [r7, #3]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d102      	bne.n	8006a00 <lsm6dso_xl_data_rate_set+0x154>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80069fa:	2303      	movs	r3, #3
 80069fc:	75fb      	strb	r3, [r7, #23]
              odr_xl = LSM6DSO_XL_ODR_52Hz;

            } else {
              odr_xl = val;
            }
            break;
 80069fe:	e02d      	b.n	8006a5c <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_12Hz5){
 8006a00:	78fb      	ldrb	r3, [r7, #3]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d102      	bne.n	8006a0c <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8006a06:	2303      	movs	r3, #3
 8006a08:	75fb      	strb	r3, [r7, #23]
            break;
 8006a0a:	e027      	b.n	8006a5c <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_26Hz){
 8006a0c:	78fb      	ldrb	r3, [r7, #3]
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d102      	bne.n	8006a18 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8006a12:	2303      	movs	r3, #3
 8006a14:	75fb      	strb	r3, [r7, #23]
            break;
 8006a16:	e021      	b.n	8006a5c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006a18:	78fb      	ldrb	r3, [r7, #3]
 8006a1a:	75fb      	strb	r3, [r7, #23]
            break;
 8006a1c:	e01e      	b.n	8006a5c <lsm6dso_xl_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_104Hz:

            if (val == LSM6DSO_XL_ODR_OFF){
 8006a1e:	78fb      	ldrb	r3, [r7, #3]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d102      	bne.n	8006a2a <lsm6dso_xl_data_rate_set+0x17e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006a24:	2304      	movs	r3, #4
 8006a26:	75fb      	strb	r3, [r7, #23]
              odr_xl = LSM6DSO_XL_ODR_104Hz;

            } else {
              odr_xl = val;
            }
            break;
 8006a28:	e018      	b.n	8006a5c <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_12Hz5){
 8006a2a:	78fb      	ldrb	r3, [r7, #3]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d102      	bne.n	8006a36 <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006a30:	2304      	movs	r3, #4
 8006a32:	75fb      	strb	r3, [r7, #23]
            break;
 8006a34:	e012      	b.n	8006a5c <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_26Hz){
 8006a36:	78fb      	ldrb	r3, [r7, #3]
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d102      	bne.n	8006a42 <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006a3c:	2304      	movs	r3, #4
 8006a3e:	75fb      	strb	r3, [r7, #23]
            break;
 8006a40:	e00c      	b.n	8006a5c <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_52Hz){
 8006a42:	78fb      	ldrb	r3, [r7, #3]
 8006a44:	2b03      	cmp	r3, #3
 8006a46:	d102      	bne.n	8006a4e <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006a48:	2304      	movs	r3, #4
 8006a4a:	75fb      	strb	r3, [r7, #23]
            break;
 8006a4c:	e006      	b.n	8006a5c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006a4e:	78fb      	ldrb	r3, [r7, #3]
 8006a50:	75fb      	strb	r3, [r7, #23]
            break;
 8006a52:	e003      	b.n	8006a5c <lsm6dso_xl_data_rate_set+0x1b0>
          default:
            odr_xl = val;
 8006a54:	78fb      	ldrb	r3, [r7, #3]
 8006a56:	75fb      	strb	r3, [r7, #23]
            break;
 8006a58:	e000      	b.n	8006a5c <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 8006a5a:	bf00      	nop
    }
  }
  if (ret == 0) {
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d107      	bne.n	8006a72 <lsm6dso_xl_data_rate_set+0x1c6>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8006a62:	f107 0208 	add.w	r2, r7, #8
 8006a66:	2301      	movs	r3, #1
 8006a68:	2110      	movs	r1, #16
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7ff fe90 	bl	8006790 <lsm6dso_read_reg>
 8006a70:	6138      	str	r0, [r7, #16]
  }
  if (ret == 0) {
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10f      	bne.n	8006a98 <lsm6dso_xl_data_rate_set+0x1ec>
    reg.odr_xl = (uint8_t) odr_xl;
 8006a78:	7dfb      	ldrb	r3, [r7, #23]
 8006a7a:	f003 030f 	and.w	r3, r3, #15
 8006a7e:	b2da      	uxtb	r2, r3
 8006a80:	7a3b      	ldrb	r3, [r7, #8]
 8006a82:	f362 1307 	bfi	r3, r2, #4, #4
 8006a86:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8006a88:	f107 0208 	add.w	r2, r7, #8
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	2110      	movs	r1, #16
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f7ff fe95 	bl	80067c0 <lsm6dso_write_reg>
 8006a96:	6138      	str	r0, [r7, #16]
  }
  return ret;
 8006a98:	693b      	ldr	r3, [r7, #16]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3718      	adds	r7, #24
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop

08006aa4 <lsm6dso_xl_data_rate_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx, lsm6dso_odr_xl_t *val)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8006aae:	f107 0208 	add.w	r2, r7, #8
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	2110      	movs	r1, #16
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7ff fe6a 	bl	8006790 <lsm6dso_read_reg>
 8006abc:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl) {
 8006abe:	7a3b      	ldrb	r3, [r7, #8]
 8006ac0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b0b      	cmp	r3, #11
 8006ac8:	d84a      	bhi.n	8006b60 <lsm6dso_xl_data_rate_get+0xbc>
 8006aca:	a201      	add	r2, pc, #4	; (adr r2, 8006ad0 <lsm6dso_xl_data_rate_get+0x2c>)
 8006acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad0:	08006b01 	.word	0x08006b01
 8006ad4:	08006b09 	.word	0x08006b09
 8006ad8:	08006b11 	.word	0x08006b11
 8006adc:	08006b19 	.word	0x08006b19
 8006ae0:	08006b21 	.word	0x08006b21
 8006ae4:	08006b29 	.word	0x08006b29
 8006ae8:	08006b31 	.word	0x08006b31
 8006aec:	08006b39 	.word	0x08006b39
 8006af0:	08006b41 	.word	0x08006b41
 8006af4:	08006b49 	.word	0x08006b49
 8006af8:	08006b51 	.word	0x08006b51
 8006afc:	08006b59 	.word	0x08006b59
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	2200      	movs	r2, #0
 8006b04:	701a      	strb	r2, [r3, #0]
      break;
 8006b06:	e02f      	b.n	8006b68 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	701a      	strb	r2, [r3, #0]
      break;
 8006b0e:	e02b      	b.n	8006b68 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	2202      	movs	r2, #2
 8006b14:	701a      	strb	r2, [r3, #0]
      break;
 8006b16:	e027      	b.n	8006b68 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	2203      	movs	r2, #3
 8006b1c:	701a      	strb	r2, [r3, #0]
      break;
 8006b1e:	e023      	b.n	8006b68 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	2204      	movs	r2, #4
 8006b24:	701a      	strb	r2, [r3, #0]
      break;
 8006b26:	e01f      	b.n	8006b68 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	2205      	movs	r2, #5
 8006b2c:	701a      	strb	r2, [r3, #0]
      break;
 8006b2e:	e01b      	b.n	8006b68 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	2206      	movs	r2, #6
 8006b34:	701a      	strb	r2, [r3, #0]
      break;
 8006b36:	e017      	b.n	8006b68 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	2207      	movs	r2, #7
 8006b3c:	701a      	strb	r2, [r3, #0]
      break;
 8006b3e:	e013      	b.n	8006b68 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	2208      	movs	r2, #8
 8006b44:	701a      	strb	r2, [r3, #0]
      break;
 8006b46:	e00f      	b.n	8006b68 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	2209      	movs	r2, #9
 8006b4c:	701a      	strb	r2, [r3, #0]
      break;
 8006b4e:	e00b      	b.n	8006b68 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	220a      	movs	r2, #10
 8006b54:	701a      	strb	r2, [r3, #0]
      break;
 8006b56:	e007      	b.n	8006b68 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	220b      	movs	r2, #11
 8006b5c:	701a      	strb	r2, [r3, #0]
      break;
 8006b5e:	e003      	b.n	8006b68 <lsm6dso_xl_data_rate_get+0xc4>
    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	2200      	movs	r2, #0
 8006b64:	701a      	strb	r2, [r3, #0]
      break;
 8006b66:	bf00      	nop
  }
  return ret;
 8006b68:	68fb      	ldr	r3, [r7, #12]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop

08006b74 <lsm6dso_gy_full_scale_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dso_fs_g_t val)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8006b80:	f107 0208 	add.w	r2, r7, #8
 8006b84:	2301      	movs	r3, #1
 8006b86:	2111      	movs	r1, #17
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f7ff fe01 	bl	8006790 <lsm6dso_read_reg>
 8006b8e:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10f      	bne.n	8006bb6 <lsm6dso_gy_full_scale_set+0x42>
    reg.fs_g = (uint8_t) val;
 8006b96:	78fb      	ldrb	r3, [r7, #3]
 8006b98:	f003 0307 	and.w	r3, r3, #7
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	7a3b      	ldrb	r3, [r7, #8]
 8006ba0:	f362 0343 	bfi	r3, r2, #1, #3
 8006ba4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8006ba6:	f107 0208 	add.w	r2, r7, #8
 8006baa:	2301      	movs	r3, #1
 8006bac:	2111      	movs	r1, #17
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7ff fe06 	bl	80067c0 <lsm6dso_write_reg>
 8006bb4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <lsm6dso_gy_full_scale_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx, lsm6dso_fs_g_t *val)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8006bca:	f107 0208 	add.w	r2, r7, #8
 8006bce:	2301      	movs	r3, #1
 8006bd0:	2111      	movs	r1, #17
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7ff fddc 	bl	8006790 <lsm6dso_read_reg>
 8006bd8:	60f8      	str	r0, [r7, #12]
  switch (reg.fs_g) {
 8006bda:	7a3b      	ldrb	r3, [r7, #8]
 8006bdc:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b06      	cmp	r3, #6
 8006be4:	d824      	bhi.n	8006c30 <lsm6dso_gy_full_scale_get+0x70>
 8006be6:	a201      	add	r2, pc, #4	; (adr r2, 8006bec <lsm6dso_gy_full_scale_get+0x2c>)
 8006be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bec:	08006c09 	.word	0x08006c09
 8006bf0:	08006c11 	.word	0x08006c11
 8006bf4:	08006c19 	.word	0x08006c19
 8006bf8:	08006c31 	.word	0x08006c31
 8006bfc:	08006c21 	.word	0x08006c21
 8006c00:	08006c31 	.word	0x08006c31
 8006c04:	08006c29 	.word	0x08006c29
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	701a      	strb	r2, [r3, #0]
      break;
 8006c0e:	e013      	b.n	8006c38 <lsm6dso_gy_full_scale_get+0x78>
    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	2201      	movs	r2, #1
 8006c14:	701a      	strb	r2, [r3, #0]
      break;
 8006c16:	e00f      	b.n	8006c38 <lsm6dso_gy_full_scale_get+0x78>
    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	701a      	strb	r2, [r3, #0]
      break;
 8006c1e:	e00b      	b.n	8006c38 <lsm6dso_gy_full_scale_get+0x78>
    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	2204      	movs	r2, #4
 8006c24:	701a      	strb	r2, [r3, #0]
      break;
 8006c26:	e007      	b.n	8006c38 <lsm6dso_gy_full_scale_get+0x78>
    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	2206      	movs	r2, #6
 8006c2c:	701a      	strb	r2, [r3, #0]
      break;
 8006c2e:	e003      	b.n	8006c38 <lsm6dso_gy_full_scale_get+0x78>
    default:
      *val = LSM6DSO_250dps;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	2200      	movs	r2, #0
 8006c34:	701a      	strb	r2, [r3, #0]
      break;
 8006c36:	bf00      	nop
  }

  return ret;
 8006c38:	68fb      	ldr	r3, [r7, #12]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop

08006c44 <lsm6dso_gy_data_rate_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of odr_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dso_odr_g_t val)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8006c50:	78fb      	ldrb	r3, [r7, #3]
 8006c52:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8006c54:	f107 030c 	add.w	r3, r7, #12
 8006c58:	4619      	mov	r1, r3
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 fa61 	bl	8007122 <lsm6dso_fsm_enable_get>
 8006c60:	6138      	str	r0, [r7, #16]
  if (ret == 0) {
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f040 80c4 	bne.w	8006df2 <lsm6dso_gy_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8006c6a:	7b3b      	ldrb	r3, [r7, #12]
 8006c6c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006c70:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8006c72:	7b3b      	ldrb	r3, [r7, #12]
 8006c74:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006c78:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8006c7e:	7b3b      	ldrb	r3, [r7, #12]
 8006c80:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006c84:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8006c86:	4313      	orrs	r3, r2
 8006c88:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8006c8a:	7b3b      	ldrb	r3, [r7, #12]
 8006c8c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006c90:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8006c92:	4313      	orrs	r3, r2
 8006c94:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8006c96:	7b3b      	ldrb	r3, [r7, #12]
 8006c98:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006c9c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8006ca2:	7b3b      	ldrb	r3, [r7, #12]
 8006ca4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006ca8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8006caa:	4313      	orrs	r3, r2
 8006cac:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8006cae:	7b3b      	ldrb	r3, [r7, #12]
 8006cb0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006cb4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8006cba:	7b3b      	ldrb	r3, [r7, #12]
 8006cbc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006cc0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8006cc6:	7b7b      	ldrb	r3, [r7, #13]
 8006cc8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006ccc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8006cd2:	7b7b      	ldrb	r3, [r7, #13]
 8006cd4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006cd8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8006cde:	7b7b      	ldrb	r3, [r7, #13]
 8006ce0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006ce4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8006cea:	7b7b      	ldrb	r3, [r7, #13]
 8006cec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006cf0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8006cf6:	7b7b      	ldrb	r3, [r7, #13]
 8006cf8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006cfc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8006d02:	7b7b      	ldrb	r3, [r7, #13]
 8006d04:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006d08:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8006d0e:	7b7b      	ldrb	r3, [r7, #13]
 8006d10:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006d14:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8006d16:	4313      	orrs	r3, r2
 8006d18:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ){
 8006d1a:	7b7b      	ldrb	r3, [r7, #13]
 8006d1c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006d20:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8006d22:	4313      	orrs	r3, r2
 8006d24:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d163      	bne.n	8006df2 <lsm6dso_gy_data_rate_set+0x1ae>

      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8006d2a:	f107 030b 	add.w	r3, r7, #11
 8006d2e:	4619      	mov	r1, r3
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 fa17 	bl	8007164 <lsm6dso_fsm_data_rate_get>
 8006d36:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d159      	bne.n	8006df2 <lsm6dso_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8006d3e:	7afb      	ldrb	r3, [r7, #11]
 8006d40:	2b03      	cmp	r3, #3
 8006d42:	d853      	bhi.n	8006dec <lsm6dso_gy_data_rate_set+0x1a8>
 8006d44:	a201      	add	r2, pc, #4	; (adr r2, 8006d4c <lsm6dso_gy_data_rate_set+0x108>)
 8006d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4a:	bf00      	nop
 8006d4c:	08006d5d 	.word	0x08006d5d
 8006d50:	08006d6f 	.word	0x08006d6f
 8006d54:	08006d8d 	.word	0x08006d8d
 8006d58:	08006db7 	.word	0x08006db7
          case LSM6DSO_ODR_FSM_12Hz5:

            if (val == LSM6DSO_GY_ODR_OFF){
 8006d5c:	78fb      	ldrb	r3, [r7, #3]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d102      	bne.n	8006d68 <lsm6dso_gy_data_rate_set+0x124>
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8006d62:	2301      	movs	r3, #1
 8006d64:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_gy = val;
            }
            break;
 8006d66:	e045      	b.n	8006df4 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006d68:	78fb      	ldrb	r3, [r7, #3]
 8006d6a:	75fb      	strb	r3, [r7, #23]
            break;
 8006d6c:	e042      	b.n	8006df4 <lsm6dso_gy_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_26Hz:

            if (val == LSM6DSO_GY_ODR_OFF){
 8006d6e:	78fb      	ldrb	r3, [r7, #3]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d102      	bne.n	8006d7a <lsm6dso_gy_data_rate_set+0x136>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8006d74:	2302      	movs	r3, #2
 8006d76:	75fb      	strb	r3, [r7, #23]
              odr_gy = LSM6DSO_GY_ODR_26Hz;

            } else {
              odr_gy = val;
            }
            break;
 8006d78:	e03c      	b.n	8006df4 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_12Hz5){
 8006d7a:	78fb      	ldrb	r3, [r7, #3]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d102      	bne.n	8006d86 <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8006d80:	2302      	movs	r3, #2
 8006d82:	75fb      	strb	r3, [r7, #23]
            break;
 8006d84:	e036      	b.n	8006df4 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006d86:	78fb      	ldrb	r3, [r7, #3]
 8006d88:	75fb      	strb	r3, [r7, #23]
            break;
 8006d8a:	e033      	b.n	8006df4 <lsm6dso_gy_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_52Hz:

            if (val == LSM6DSO_GY_ODR_OFF){
 8006d8c:	78fb      	ldrb	r3, [r7, #3]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d102      	bne.n	8006d98 <lsm6dso_gy_data_rate_set+0x154>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8006d92:	2303      	movs	r3, #3
 8006d94:	75fb      	strb	r3, [r7, #23]
              odr_gy = LSM6DSO_GY_ODR_52Hz;

            } else {
              odr_gy = val;
            }
            break;
 8006d96:	e02d      	b.n	8006df4 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_12Hz5){
 8006d98:	78fb      	ldrb	r3, [r7, #3]
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d102      	bne.n	8006da4 <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	75fb      	strb	r3, [r7, #23]
            break;
 8006da2:	e027      	b.n	8006df4 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_26Hz){
 8006da4:	78fb      	ldrb	r3, [r7, #3]
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d102      	bne.n	8006db0 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8006daa:	2303      	movs	r3, #3
 8006dac:	75fb      	strb	r3, [r7, #23]
            break;
 8006dae:	e021      	b.n	8006df4 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006db0:	78fb      	ldrb	r3, [r7, #3]
 8006db2:	75fb      	strb	r3, [r7, #23]
            break;
 8006db4:	e01e      	b.n	8006df4 <lsm6dso_gy_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_104Hz:

            if (val == LSM6DSO_GY_ODR_OFF){
 8006db6:	78fb      	ldrb	r3, [r7, #3]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d102      	bne.n	8006dc2 <lsm6dso_gy_data_rate_set+0x17e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006dbc:	2304      	movs	r3, #4
 8006dbe:	75fb      	strb	r3, [r7, #23]
              odr_gy = LSM6DSO_GY_ODR_104Hz;

            } else {
              odr_gy = val;
            }
            break;
 8006dc0:	e018      	b.n	8006df4 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_12Hz5){
 8006dc2:	78fb      	ldrb	r3, [r7, #3]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d102      	bne.n	8006dce <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006dc8:	2304      	movs	r3, #4
 8006dca:	75fb      	strb	r3, [r7, #23]
            break;
 8006dcc:	e012      	b.n	8006df4 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_26Hz){
 8006dce:	78fb      	ldrb	r3, [r7, #3]
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d102      	bne.n	8006dda <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006dd4:	2304      	movs	r3, #4
 8006dd6:	75fb      	strb	r3, [r7, #23]
            break;
 8006dd8:	e00c      	b.n	8006df4 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_52Hz){
 8006dda:	78fb      	ldrb	r3, [r7, #3]
 8006ddc:	2b03      	cmp	r3, #3
 8006dde:	d102      	bne.n	8006de6 <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006de0:	2304      	movs	r3, #4
 8006de2:	75fb      	strb	r3, [r7, #23]
            break;
 8006de4:	e006      	b.n	8006df4 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006de6:	78fb      	ldrb	r3, [r7, #3]
 8006de8:	75fb      	strb	r3, [r7, #23]
            break;
 8006dea:	e003      	b.n	8006df4 <lsm6dso_gy_data_rate_set+0x1b0>
          default:
            odr_gy = val;
 8006dec:	78fb      	ldrb	r3, [r7, #3]
 8006dee:	75fb      	strb	r3, [r7, #23]
            break;
 8006df0:	e000      	b.n	8006df4 <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 8006df2:	bf00      	nop
    }
  }

  if (ret == 0) {
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d107      	bne.n	8006e0a <lsm6dso_gy_data_rate_set+0x1c6>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8006dfa:	f107 0208 	add.w	r2, r7, #8
 8006dfe:	2301      	movs	r3, #1
 8006e00:	2111      	movs	r1, #17
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7ff fcc4 	bl	8006790 <lsm6dso_read_reg>
 8006e08:	6138      	str	r0, [r7, #16]
  }
  if (ret == 0) {
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10f      	bne.n	8006e30 <lsm6dso_gy_data_rate_set+0x1ec>
    reg.odr_g = (uint8_t) odr_gy;
 8006e10:	7dfb      	ldrb	r3, [r7, #23]
 8006e12:	f003 030f 	and.w	r3, r3, #15
 8006e16:	b2da      	uxtb	r2, r3
 8006e18:	7a3b      	ldrb	r3, [r7, #8]
 8006e1a:	f362 1307 	bfi	r3, r2, #4, #4
 8006e1e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8006e20:	f107 0208 	add.w	r2, r7, #8
 8006e24:	2301      	movs	r3, #1
 8006e26:	2111      	movs	r1, #17
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f7ff fcc9 	bl	80067c0 <lsm6dso_write_reg>
 8006e2e:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8006e30:	693b      	ldr	r3, [r7, #16]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3718      	adds	r7, #24
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop

08006e3c <lsm6dso_gy_data_rate_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of odr_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx, lsm6dso_odr_g_t *val)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8006e46:	f107 0208 	add.w	r2, r7, #8
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	2111      	movs	r1, #17
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7ff fc9e 	bl	8006790 <lsm6dso_read_reg>
 8006e54:	60f8      	str	r0, [r7, #12]
  switch (reg.odr_g) {
 8006e56:	7a3b      	ldrb	r3, [r7, #8]
 8006e58:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b0a      	cmp	r3, #10
 8006e60:	d844      	bhi.n	8006eec <lsm6dso_gy_data_rate_get+0xb0>
 8006e62:	a201      	add	r2, pc, #4	; (adr r2, 8006e68 <lsm6dso_gy_data_rate_get+0x2c>)
 8006e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e68:	08006e95 	.word	0x08006e95
 8006e6c:	08006e9d 	.word	0x08006e9d
 8006e70:	08006ea5 	.word	0x08006ea5
 8006e74:	08006ead 	.word	0x08006ead
 8006e78:	08006eb5 	.word	0x08006eb5
 8006e7c:	08006ebd 	.word	0x08006ebd
 8006e80:	08006ec5 	.word	0x08006ec5
 8006e84:	08006ecd 	.word	0x08006ecd
 8006e88:	08006ed5 	.word	0x08006ed5
 8006e8c:	08006edd 	.word	0x08006edd
 8006e90:	08006ee5 	.word	0x08006ee5
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	2200      	movs	r2, #0
 8006e98:	701a      	strb	r2, [r3, #0]
      break;
 8006e9a:	e02b      	b.n	8006ef4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	701a      	strb	r2, [r3, #0]
      break;
 8006ea2:	e027      	b.n	8006ef4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	701a      	strb	r2, [r3, #0]
      break;
 8006eaa:	e023      	b.n	8006ef4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	2203      	movs	r2, #3
 8006eb0:	701a      	strb	r2, [r3, #0]
      break;
 8006eb2:	e01f      	b.n	8006ef4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	2204      	movs	r2, #4
 8006eb8:	701a      	strb	r2, [r3, #0]
      break;
 8006eba:	e01b      	b.n	8006ef4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	2205      	movs	r2, #5
 8006ec0:	701a      	strb	r2, [r3, #0]
      break;
 8006ec2:	e017      	b.n	8006ef4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	2206      	movs	r2, #6
 8006ec8:	701a      	strb	r2, [r3, #0]
      break;
 8006eca:	e013      	b.n	8006ef4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	2207      	movs	r2, #7
 8006ed0:	701a      	strb	r2, [r3, #0]
      break;
 8006ed2:	e00f      	b.n	8006ef4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	2208      	movs	r2, #8
 8006ed8:	701a      	strb	r2, [r3, #0]
      break;
 8006eda:	e00b      	b.n	8006ef4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	2209      	movs	r2, #9
 8006ee0:	701a      	strb	r2, [r3, #0]
      break;
 8006ee2:	e007      	b.n	8006ef4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	220a      	movs	r2, #10
 8006ee8:	701a      	strb	r2, [r3, #0]
      break;
 8006eea:	e003      	b.n	8006ef4 <lsm6dso_gy_data_rate_get+0xb8>
    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	701a      	strb	r2, [r3, #0]
      break;
 8006ef2:	bf00      	nop
  }
  return ret;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop

08006f00 <lsm6dso_block_data_update_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of bdu in reg CTRL3_C
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	460b      	mov	r3, r1
 8006f0a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 8006f0c:	f107 0208 	add.w	r2, r7, #8
 8006f10:	2301      	movs	r3, #1
 8006f12:	2112      	movs	r1, #18
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f7ff fc3b 	bl	8006790 <lsm6dso_read_reg>
 8006f1a:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10f      	bne.n	8006f42 <lsm6dso_block_data_update_set+0x42>
    reg.bdu = val;
 8006f22:	78fb      	ldrb	r3, [r7, #3]
 8006f24:	f003 0301 	and.w	r3, r3, #1
 8006f28:	b2da      	uxtb	r2, r3
 8006f2a:	7a3b      	ldrb	r3, [r7, #8]
 8006f2c:	f362 1386 	bfi	r3, r2, #6, #1
 8006f30:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 8006f32:	f107 0208 	add.w	r2, r7, #8
 8006f36:	2301      	movs	r3, #1
 8006f38:	2112      	movs	r1, #18
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7ff fc40 	bl	80067c0 <lsm6dso_write_reg>
 8006f40:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006f42:	68fb      	ldr	r3, [r7, #12]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <lsm6dso_angular_rate_raw_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8006f56:	2306      	movs	r3, #6
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	2122      	movs	r1, #34	; 0x22
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f7ff fc17 	bl	8006790 <lsm6dso_read_reg>
 8006f62:	60f8      	str	r0, [r7, #12]
  return ret;
 8006f64:	68fb      	ldr	r3, [r7, #12]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <lsm6dso_acceleration_raw_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b084      	sub	sp, #16
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8006f78:	2306      	movs	r3, #6
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	2128      	movs	r1, #40	; 0x28
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f7ff fc06 	bl	8006790 <lsm6dso_read_reg>
 8006f84:	60f8      	str	r0, [r7, #12]
  return ret;
 8006f86:	68fb      	ldr	r3, [r7, #12]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <lsm6dso_mem_bank_set>:
  * @param  val      change the values of reg_access in
  *                               reg FUNC_CFG_ACCESS
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx, lsm6dso_reg_access_t val)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	460b      	mov	r3, r1
 8006f9a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t*)&reg, 1);
 8006f9c:	f107 0208 	add.w	r2, r7, #8
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	2101      	movs	r1, #1
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f7ff fbf3 	bl	8006790 <lsm6dso_read_reg>
 8006faa:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10f      	bne.n	8006fd2 <lsm6dso_mem_bank_set+0x42>
    reg.reg_access = (uint8_t)val;
 8006fb2:	78fb      	ldrb	r3, [r7, #3]
 8006fb4:	f003 0303 	and.w	r3, r3, #3
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	7a3b      	ldrb	r3, [r7, #8]
 8006fbc:	f362 1387 	bfi	r3, r2, #6, #2
 8006fc0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t*)&reg, 1);
 8006fc2:	f107 0208 	add.w	r2, r7, #8
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	2101      	movs	r1, #1
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7ff fbf8 	bl	80067c0 <lsm6dso_write_reg>
 8006fd0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <lsm6dso_device_id_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	683a      	ldr	r2, [r7, #0]
 8006fea:	210f      	movs	r1, #15
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f7ff fbcf 	bl	8006790 <lsm6dso_read_reg>
 8006ff2:	60f8      	str	r0, [r7, #12]
  return ret;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <lsm6dso_auto_increment_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of if_inc in reg CTRL3_C
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b084      	sub	sp, #16
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	460b      	mov	r3, r1
 8007008:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 800700a:	f107 0208 	add.w	r2, r7, #8
 800700e:	2301      	movs	r3, #1
 8007010:	2112      	movs	r1, #18
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f7ff fbbc 	bl	8006790 <lsm6dso_read_reg>
 8007018:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10f      	bne.n	8007040 <lsm6dso_auto_increment_set+0x42>
    reg.if_inc = val;
 8007020:	78fb      	ldrb	r3, [r7, #3]
 8007022:	f003 0301 	and.w	r3, r3, #1
 8007026:	b2da      	uxtb	r2, r3
 8007028:	7a3b      	ldrb	r3, [r7, #8]
 800702a:	f362 0382 	bfi	r3, r2, #2, #1
 800702e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 8007030:	f107 0208 	add.w	r2, r7, #8
 8007034:	2301      	movs	r3, #1
 8007036:	2112      	movs	r1, #18
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7ff fbc1 	bl	80067c0 <lsm6dso_write_reg>
 800703e:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007040:	68fb      	ldr	r3, [r7, #12]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <lsm6dso_i3c_disable_set>:
  * @param  val      change the values of i3c_disable
  *                                    in reg CTRL9_XL
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx, lsm6dso_i3c_disable_t val)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b086      	sub	sp, #24
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
 8007052:	460b      	mov	r3, r1
 8007054:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
 8007056:	f107 020c 	add.w	r2, r7, #12
 800705a:	2301      	movs	r3, #1
 800705c:	2118      	movs	r1, #24
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f7ff fb96 	bl	8006790 <lsm6dso_read_reg>
 8007064:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d111      	bne.n	8007090 <lsm6dso_i3c_disable_set+0x46>
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 800706c:	78fb      	ldrb	r3, [r7, #3]
 800706e:	09db      	lsrs	r3, r3, #7
 8007070:	b2db      	uxtb	r3, r3
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	b2da      	uxtb	r2, r3
 8007078:	7b3b      	ldrb	r3, [r7, #12]
 800707a:	f362 0341 	bfi	r3, r2, #1, #1
 800707e:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
 8007080:	f107 020c 	add.w	r2, r7, #12
 8007084:	2301      	movs	r3, #1
 8007086:	2118      	movs	r1, #24
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f7ff fb99 	bl	80067c0 <lsm6dso_write_reg>
 800708e:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d107      	bne.n	80070a6 <lsm6dso_i3c_disable_set+0x5c>

    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8007096:	f107 0210 	add.w	r2, r7, #16
 800709a:	2301      	movs	r3, #1
 800709c:	2162      	movs	r1, #98	; 0x62
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f7ff fb76 	bl	8006790 <lsm6dso_read_reg>
 80070a4:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&i3c_bus_avb, 1);
  }
  if (ret == 0) {
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10f      	bne.n	80070cc <lsm6dso_i3c_disable_set+0x82>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 80070ac:	78fb      	ldrb	r3, [r7, #3]
 80070ae:	f003 0303 	and.w	r3, r3, #3
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	7c3b      	ldrb	r3, [r7, #16]
 80070b6:	f362 03c4 	bfi	r3, r2, #3, #2
 80070ba:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 80070bc:	f107 0210 	add.w	r2, r7, #16
 80070c0:	2301      	movs	r3, #1
 80070c2:	2162      	movs	r1, #98	; 0x62
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f7ff fb7b 	bl	80067c0 <lsm6dso_write_reg>
 80070ca:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&i3c_bus_avb, 1);
  }

  return ret;
 80070cc:	697b      	ldr	r3, [r7, #20]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3718      	adds	r7, #24
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <lsm6dso_fifo_mode_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of fifo_mode in reg FIFO_CTRL4
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dso_fifo_mode_t val)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b084      	sub	sp, #16
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
 80070de:	460b      	mov	r3, r1
 80070e0:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t*)&reg, 1);
 80070e2:	f107 0208 	add.w	r2, r7, #8
 80070e6:	2301      	movs	r3, #1
 80070e8:	210a      	movs	r1, #10
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7ff fb50 	bl	8006790 <lsm6dso_read_reg>
 80070f0:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10f      	bne.n	8007118 <lsm6dso_fifo_mode_set+0x42>
    reg.fifo_mode = (uint8_t)val;
 80070f8:	78fb      	ldrb	r3, [r7, #3]
 80070fa:	f003 0307 	and.w	r3, r3, #7
 80070fe:	b2da      	uxtb	r2, r3
 8007100:	7a3b      	ldrb	r3, [r7, #8]
 8007102:	f362 0302 	bfi	r3, r2, #0, #3
 8007106:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t*)&reg, 1);
 8007108:	f107 0208 	add.w	r2, r7, #8
 800710c:	2301      	movs	r3, #1
 800710e:	210a      	movs	r1, #10
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f7ff fb55 	bl	80067c0 <lsm6dso_write_reg>
 8007116:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007118:	68fb      	ldr	r3, [r7, #12]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <lsm6dso_fsm_enable_get>:
  * @param  val      union of registers from FSM_ENABLE_A to FSM_ENABLE_B
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b084      	sub	sp, #16
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
 800712a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800712c:	2102      	movs	r1, #2
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f7ff ff2e 	bl	8006f90 <lsm6dso_mem_bank_set>
 8007134:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d106      	bne.n	800714a <lsm6dso_fsm_enable_get+0x28>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t*) val, 2);
 800713c:	2302      	movs	r3, #2
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	2146      	movs	r1, #70	; 0x46
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7ff fb24 	bl	8006790 <lsm6dso_read_reg>
 8007148:	60f8      	str	r0, [r7, #12]
  }
  if (ret == 0) {
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d104      	bne.n	800715a <lsm6dso_fsm_enable_get+0x38>
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8007150:	2100      	movs	r1, #0
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7ff ff1c 	bl	8006f90 <lsm6dso_mem_bank_set>
 8007158:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800715a:	68fb      	ldr	r3, [r7, #12]
}
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <lsm6dso_fsm_data_rate_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of fsm_odr in reg EMB_FUNC_ODR_CFG_B
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx, lsm6dso_fsm_odr_t *val)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800716e:	2102      	movs	r1, #2
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f7ff ff0d 	bl	8006f90 <lsm6dso_mem_bank_set>
 8007176:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d107      	bne.n	800718e <lsm6dso_fsm_data_rate_get+0x2a>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 800717e:	f107 0208 	add.w	r2, r7, #8
 8007182:	2301      	movs	r3, #1
 8007184:	215f      	movs	r1, #95	; 0x5f
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7ff fb02 	bl	8006790 <lsm6dso_read_reg>
 800718c:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&reg, 1);
  }
  if (ret == 0) {
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d12a      	bne.n	80071ea <lsm6dso_fsm_data_rate_get+0x86>
    switch (reg.fsm_odr) {
 8007194:	7a3b      	ldrb	r3, [r7, #8]
 8007196:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800719a:	b2db      	uxtb	r3, r3
 800719c:	2b03      	cmp	r3, #3
 800719e:	d81b      	bhi.n	80071d8 <lsm6dso_fsm_data_rate_get+0x74>
 80071a0:	a201      	add	r2, pc, #4	; (adr r2, 80071a8 <lsm6dso_fsm_data_rate_get+0x44>)
 80071a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a6:	bf00      	nop
 80071a8:	080071b9 	.word	0x080071b9
 80071ac:	080071c1 	.word	0x080071c1
 80071b0:	080071c9 	.word	0x080071c9
 80071b4:	080071d1 	.word	0x080071d1
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	2200      	movs	r2, #0
 80071bc:	701a      	strb	r2, [r3, #0]
        break;
 80071be:	e00f      	b.n	80071e0 <lsm6dso_fsm_data_rate_get+0x7c>
      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	2201      	movs	r2, #1
 80071c4:	701a      	strb	r2, [r3, #0]
        break;
 80071c6:	e00b      	b.n	80071e0 <lsm6dso_fsm_data_rate_get+0x7c>
      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	2202      	movs	r2, #2
 80071cc:	701a      	strb	r2, [r3, #0]
        break;
 80071ce:	e007      	b.n	80071e0 <lsm6dso_fsm_data_rate_get+0x7c>
      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	2203      	movs	r2, #3
 80071d4:	701a      	strb	r2, [r3, #0]
        break;
 80071d6:	e003      	b.n	80071e0 <lsm6dso_fsm_data_rate_get+0x7c>
      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	2200      	movs	r2, #0
 80071dc:	701a      	strb	r2, [r3, #0]
        break;
 80071de:	bf00      	nop
    }
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80071e0:	2100      	movs	r1, #0
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f7ff fed4 	bl	8006f90 <lsm6dso_mem_bank_set>
 80071e8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80071ea:	68fb      	ldr	r3, [r7, #12]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <STTS751_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d103      	bne.n	800720c <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 8007204:	f04f 33ff 	mov.w	r3, #4294967295
 8007208:	60fb      	str	r3, [r7, #12]
 800720a:	e030      	b.n	800726e <STTS751_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	689a      	ldr	r2, [r3, #8]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	7b1a      	ldrb	r2, [r3, #12]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	691a      	ldr	r2, [r3, #16]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	695a      	ldr	r2, [r3, #20]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	699a      	ldr	r2, [r3, #24]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a0c      	ldr	r2, [pc, #48]	; (8007278 <STTS751_RegisterBusIO+0x84>)
 8007248:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a0b      	ldr	r2, [pc, #44]	; (800727c <STTS751_RegisterBusIO+0x88>)
 800724e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d004      	beq.n	8007268 <STTS751_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4798      	blx	r3
 8007264:	60f8      	str	r0, [r7, #12]
 8007266:	e002      	b.n	800726e <STTS751_RegisterBusIO+0x7a>
    }
    else
    {
      ret = STTS751_ERROR;
 8007268:	f04f 33ff 	mov.w	r3, #4294967295
 800726c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800726e:	68fb      	ldr	r3, [r7, #12]
}
 8007270:	4618      	mov	r0, r3
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	08007701 	.word	0x08007701
 800727c:	0800776f 	.word	0x0800776f

08007280 <STTS751_Init>:
 * @brief  Initialize the STTS751 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800728e:	2b00      	cmp	r3, #0
 8007290:	d127      	bne.n	80072e2 <STTS751_Init+0x62>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	331c      	adds	r3, #28
 8007296:	2101      	movs	r1, #1
 8007298:	4618      	mov	r0, r3
 800729a:	f000 fc46 	bl	8007b2a <stts751_pin_event_route_set>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d002      	beq.n	80072aa <STTS751_Init+0x2a>
    {
      return STTS751_ERROR;
 80072a4:	f04f 33ff 	mov.w	r3, #4294967295
 80072a8:	e020      	b.n	80072ec <STTS751_Init+0x6c>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80072b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	331c      	adds	r3, #28
 80072b6:	2103      	movs	r1, #3
 80072b8:	4618      	mov	r0, r3
 80072ba:	f000 fbaf 	bl	8007a1c <stts751_resolution_set>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d002      	beq.n	80072ca <STTS751_Init+0x4a>
    {
      return STTS751_ERROR;
 80072c4:	f04f 33ff 	mov.w	r3, #4294967295
 80072c8:	e010      	b.n	80072ec <STTS751_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	331c      	adds	r3, #28
 80072ce:	2180      	movs	r1, #128	; 0x80
 80072d0:	4618      	mov	r0, r3
 80072d2:	f000 facd 	bl	8007870 <stts751_temp_data_rate_set>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d002      	beq.n	80072e2 <STTS751_Init+0x62>
    {
      return STTS751_ERROR;
 80072dc:	f04f 33ff 	mov.w	r3, #4294967295
 80072e0:	e004      	b.n	80072ec <STTS751_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return STTS751_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <STTS751_DeInit>:
 * @brief  Deinitialize the STTS751 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007302:	2b01      	cmp	r3, #1
 8007304:	d108      	bne.n	8007318 <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f870 	bl	80073ec <STTS751_TEMP_Disable>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d002      	beq.n	8007318 <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 8007312:	f04f 33ff 	mov.w	r3, #4294967295
 8007316:	e004      	b.n	8007322 <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return STTS751_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <STTS751_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b084      	sub	sp, #16
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
 8007332:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	331c      	adds	r3, #28
 8007338:	f107 020c 	add.w	r2, r7, #12
 800733c:	4611      	mov	r1, r2
 800733e:	4618      	mov	r0, r3
 8007340:	f000 fc19 	bl	8007b76 <stts751_device_id_get>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d002      	beq.n	8007350 <STTS751_ReadID+0x26>
  {
    return STTS751_ERROR;
 800734a:	f04f 33ff 	mov.w	r3, #4294967295
 800734e:	e003      	b.n	8007358 <STTS751_ReadID+0x2e>
  }

  *Id = buf.manufacturer_id;
 8007350:	7b7a      	ldrb	r2, [r7, #13]
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <STTS751_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to STTS751 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	2200      	movs	r2, #0
 800736e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	2200      	movs	r2, #0
 8007374:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	2201      	movs	r2, #1
 800737a:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	2200      	movs	r2, #0
 8007380:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	f04f 0200 	mov.w	r2, #0
 8007388:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 32.0f;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8007390:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	f04f 0200 	mov.w	r2, #0
 8007398:	60da      	str	r2, [r3, #12]
  return STTS751_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <STTS751_TEMP_Enable>:
 * @brief  Enable the STTS751 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d101      	bne.n	80073be <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	e012      	b.n	80073e4 <STTS751_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80073c4:	eeb0 0a67 	vmov.f32	s0, s15
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f8b5 	bl	8007538 <STTS751_TEMP_SetOutputDataRate>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d002      	beq.n	80073da <STTS751_TEMP_Enable+0x32>
  {
    return STTS751_ERROR;
 80073d4:	f04f 33ff 	mov.w	r3, #4294967295
 80073d8:	e004      	b.n	80073e4 <STTS751_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2201      	movs	r2, #1
 80073de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return STTS751_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <STTS751_TEMP_Disable>:
 * @brief  Disable the STTS751 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 80073fe:	2300      	movs	r3, #0
 8007400:	e01c      	b.n	800743c <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	332c      	adds	r3, #44	; 0x2c
 8007406:	4619      	mov	r1, r3
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f81b 	bl	8007444 <STTS751_TEMP_GetOutputDataRate>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d002      	beq.n	800741a <STTS751_TEMP_Disable+0x2e>
  {
    return STTS751_ERROR;
 8007414:	f04f 33ff 	mov.w	r3, #4294967295
 8007418:	e010      	b.n	800743c <STTS751_TEMP_Disable+0x50>
  }
  
  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	331c      	adds	r3, #28
 800741e:	2180      	movs	r1, #128	; 0x80
 8007420:	4618      	mov	r0, r3
 8007422:	f000 fa25 	bl	8007870 <stts751_temp_data_rate_set>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d002      	beq.n	8007432 <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 800742c:	f04f 33ff 	mov.w	r3, #4294967295
 8007430:	e004      	b.n	800743c <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return STTS751_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3708      	adds	r7, #8
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <STTS751_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 800744e:	2300      	movs	r3, #0
 8007450:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	331c      	adds	r3, #28
 8007456:	f107 020b 	add.w	r2, r7, #11
 800745a:	4611      	mov	r1, r2
 800745c:	4618      	mov	r0, r3
 800745e:	f000 fa5d 	bl	800791c <stts751_temp_data_rate_get>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d002      	beq.n	800746e <STTS751_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS751_ERROR;
 8007468:	f04f 33ff 	mov.w	r3, #4294967295
 800746c:	e060      	b.n	8007530 <STTS751_TEMP_GetOutputDataRate+0xec>
  }

  switch (odr_low_level)
 800746e:	7afb      	ldrb	r3, [r7, #11]
 8007470:	2b90      	cmp	r3, #144	; 0x90
 8007472:	d021      	beq.n	80074b8 <STTS751_TEMP_GetOutputDataRate+0x74>
 8007474:	2b90      	cmp	r3, #144	; 0x90
 8007476:	dc56      	bgt.n	8007526 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8007478:	2b09      	cmp	r3, #9
 800747a:	dc1b      	bgt.n	80074b4 <STTS751_TEMP_GetOutputDataRate+0x70>
 800747c:	2b00      	cmp	r3, #0
 800747e:	db52      	blt.n	8007526 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8007480:	2b09      	cmp	r3, #9
 8007482:	d850      	bhi.n	8007526 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8007484:	a201      	add	r2, pc, #4	; (adr r2, 800748c <STTS751_TEMP_GetOutputDataRate+0x48>)
 8007486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748a:	bf00      	nop
 800748c:	080074c3 	.word	0x080074c3
 8007490:	080074cd 	.word	0x080074cd
 8007494:	080074d7 	.word	0x080074d7
 8007498:	080074e1 	.word	0x080074e1
 800749c:	080074eb 	.word	0x080074eb
 80074a0:	080074f5 	.word	0x080074f5
 80074a4:	080074ff 	.word	0x080074ff
 80074a8:	08007509 	.word	0x08007509
 80074ac:	08007513 	.word	0x08007513
 80074b0:	0800751d 	.word	0x0800751d
 80074b4:	2b80      	cmp	r3, #128	; 0x80
 80074b6:	d136      	bne.n	8007526 <STTS751_TEMP_GetOutputDataRate+0xe2>
  {
    case STTS751_TEMP_ODR_OFF:
	case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	f04f 0200 	mov.w	r2, #0
 80074be:	601a      	str	r2, [r3, #0]
      break;
 80074c0:	e035      	b.n	800752e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 80074c8:	601a      	str	r2, [r3, #0]
      break;
 80074ca:	e030      	b.n	800752e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
 80074d2:	601a      	str	r2, [r3, #0]
      break;
 80074d4:	e02b      	b.n	800752e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80074dc:	601a      	str	r2, [r3, #0]
      break;
 80074de:	e026      	b.n	800752e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80074e6:	601a      	str	r2, [r3, #0]
      break;
 80074e8:	e021      	b.n	800752e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80074f0:	601a      	str	r2, [r3, #0]
      break;
 80074f2:	e01c      	b.n	800752e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80074fa:	601a      	str	r2, [r3, #0]
      break;
 80074fc:	e017      	b.n	800752e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8007504:	601a      	str	r2, [r3, #0]
      break;
 8007506:	e012      	b.n	800752e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800750e:	601a      	str	r2, [r3, #0]
      break;
 8007510:	e00d      	b.n	800752e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8007518:	601a      	str	r2, [r3, #0]
      break;
 800751a:	e008      	b.n	800752e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8007522:	601a      	str	r2, [r3, #0]
      break;
 8007524:	e003      	b.n	800752e <STTS751_TEMP_GetOutputDataRate+0xea>

    default:
      ret = STTS751_ERROR;
 8007526:	f04f 33ff 	mov.w	r3, #4294967295
 800752a:	60fb      	str	r3, [r7, #12]
      break;
 800752c:	bf00      	nop
  }

  return ret;
 800752e:	68fb      	ldr	r3, [r7, #12]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <STTS751_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	ed87 0a00 	vstr	s0, [r7]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	331c      	adds	r3, #28
 8007548:	f107 020e 	add.w	r2, r7, #14
 800754c:	4611      	mov	r1, r2
 800754e:	4618      	mov	r0, r3
 8007550:	f000 fa8a 	bl	8007a68 <stts751_resolution_get>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d002      	beq.n	8007560 <STTS751_TEMP_SetOutputDataRate+0x28>
  {
    return STTS751_ERROR;
 800755a:	f04f 33ff 	mov.w	r3, #4294967295
 800755e:	e0a5      	b.n	80076ac <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if(Odr == 16.0f && res == STTS751_12bit)
 8007560:	edd7 7a00 	vldr	s15, [r7]
 8007564:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8007568:	eef4 7a47 	vcmp.f32	s15, s14
 800756c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007570:	d10e      	bne.n	8007590 <STTS751_TEMP_SetOutputDataRate+0x58>
 8007572:	7bbb      	ldrb	r3, [r7, #14]
 8007574:	2b03      	cmp	r3, #3
 8007576:	d10b      	bne.n	8007590 <STTS751_TEMP_SetOutputDataRate+0x58>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	331c      	adds	r3, #28
 800757c:	2101      	movs	r1, #1
 800757e:	4618      	mov	r0, r3
 8007580:	f000 fa4c 	bl	8007a1c <stts751_resolution_set>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d002      	beq.n	8007590 <STTS751_TEMP_SetOutputDataRate+0x58>
    {
      return STTS751_ERROR;
 800758a:	f04f 33ff 	mov.w	r3, #4294967295
 800758e:	e08d      	b.n	80076ac <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if(Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 8007590:	edd7 7a00 	vldr	s15, [r7]
 8007594:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80076b4 <STTS751_TEMP_SetOutputDataRate+0x17c>
 8007598:	eef4 7a47 	vcmp.f32	s15, s14
 800759c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075a0:	d111      	bne.n	80075c6 <STTS751_TEMP_SetOutputDataRate+0x8e>
 80075a2:	7bbb      	ldrb	r3, [r7, #14]
 80075a4:	2b03      	cmp	r3, #3
 80075a6:	d002      	beq.n	80075ae <STTS751_TEMP_SetOutputDataRate+0x76>
 80075a8:	7bbb      	ldrb	r3, [r7, #14]
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d10b      	bne.n	80075c6 <STTS751_TEMP_SetOutputDataRate+0x8e>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	331c      	adds	r3, #28
 80075b2:	2100      	movs	r1, #0
 80075b4:	4618      	mov	r0, r3
 80075b6:	f000 fa31 	bl	8007a1c <stts751_resolution_set>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d002      	beq.n	80075c6 <STTS751_TEMP_SetOutputDataRate+0x8e>
    {
      return STTS751_ERROR;
 80075c0:	f04f 33ff 	mov.w	r3, #4294967295
 80075c4:	e072      	b.n	80076ac <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
          : (Odr <= 0.125f ) ? STTS751_TEMP_ODR_125mHz
 80075c6:	edd7 7a00 	vldr	s15, [r7]
 80075ca:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80076b8 <STTS751_TEMP_SetOutputDataRate+0x180>
 80075ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075d6:	d801      	bhi.n	80075dc <STTS751_TEMP_SetOutputDataRate+0xa4>
 80075d8:	2300      	movs	r3, #0
 80075da:	e058      	b.n	800768e <STTS751_TEMP_SetOutputDataRate+0x156>
 80075dc:	edd7 7a00 	vldr	s15, [r7]
 80075e0:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 80075e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ec:	d801      	bhi.n	80075f2 <STTS751_TEMP_SetOutputDataRate+0xba>
 80075ee:	2301      	movs	r3, #1
 80075f0:	e04d      	b.n	800768e <STTS751_TEMP_SetOutputDataRate+0x156>
 80075f2:	edd7 7a00 	vldr	s15, [r7]
 80075f6:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80075fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007602:	d801      	bhi.n	8007608 <STTS751_TEMP_SetOutputDataRate+0xd0>
 8007604:	2302      	movs	r3, #2
 8007606:	e042      	b.n	800768e <STTS751_TEMP_SetOutputDataRate+0x156>
 8007608:	edd7 7a00 	vldr	s15, [r7]
 800760c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007610:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007618:	d801      	bhi.n	800761e <STTS751_TEMP_SetOutputDataRate+0xe6>
 800761a:	2303      	movs	r3, #3
 800761c:	e037      	b.n	800768e <STTS751_TEMP_SetOutputDataRate+0x156>
 800761e:	edd7 7a00 	vldr	s15, [r7]
 8007622:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007626:	eef4 7ac7 	vcmpe.f32	s15, s14
 800762a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800762e:	d801      	bhi.n	8007634 <STTS751_TEMP_SetOutputDataRate+0xfc>
 8007630:	2304      	movs	r3, #4
 8007632:	e02c      	b.n	800768e <STTS751_TEMP_SetOutputDataRate+0x156>
 8007634:	edd7 7a00 	vldr	s15, [r7]
 8007638:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800763c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007644:	d801      	bhi.n	800764a <STTS751_TEMP_SetOutputDataRate+0x112>
 8007646:	2305      	movs	r3, #5
 8007648:	e021      	b.n	800768e <STTS751_TEMP_SetOutputDataRate+0x156>
 800764a:	edd7 7a00 	vldr	s15, [r7]
 800764e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8007652:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800765a:	d801      	bhi.n	8007660 <STTS751_TEMP_SetOutputDataRate+0x128>
 800765c:	2306      	movs	r3, #6
 800765e:	e016      	b.n	800768e <STTS751_TEMP_SetOutputDataRate+0x156>
 8007660:	edd7 7a00 	vldr	s15, [r7]
 8007664:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8007668:	eef4 7ac7 	vcmpe.f32	s15, s14
 800766c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007670:	d801      	bhi.n	8007676 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8007672:	2307      	movs	r3, #7
 8007674:	e00b      	b.n	800768e <STTS751_TEMP_SetOutputDataRate+0x156>
 8007676:	edd7 7a00 	vldr	s15, [r7]
 800767a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800767e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007686:	d801      	bhi.n	800768c <STTS751_TEMP_SetOutputDataRate+0x154>
 8007688:	2308      	movs	r3, #8
 800768a:	e000      	b.n	800768e <STTS751_TEMP_SetOutputDataRate+0x156>
 800768c:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 800768e:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 4.0f   ) ? STTS751_TEMP_ODR_4Hz
          : (Odr <= 8.0f   ) ? STTS751_TEMP_ODR_8Hz
          : (Odr <= 16.0f  ) ? STTS751_TEMP_ODR_16Hz
          :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	331c      	adds	r3, #28
 8007694:	7bfa      	ldrb	r2, [r7, #15]
 8007696:	4611      	mov	r1, r2
 8007698:	4618      	mov	r0, r3
 800769a:	f000 f8e9 	bl	8007870 <stts751_temp_data_rate_set>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d002      	beq.n	80076aa <STTS751_TEMP_SetOutputDataRate+0x172>
  {
    return STTS751_ERROR;
 80076a4:	f04f 33ff 	mov.w	r3, #4294967295
 80076a8:	e000      	b.n	80076ac <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  return STTS751_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	42000000 	.word	0x42000000
 80076b8:	3d800000 	.word	0x3d800000

080076bc <STTS751_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	331c      	adds	r3, #28
 80076ca:	f107 020e 	add.w	r2, r7, #14
 80076ce:	4611      	mov	r1, r2
 80076d0:	4618      	mov	r0, r3
 80076d2:	f000 fa01 	bl	8007ad8 <stts751_temperature_raw_get>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d002      	beq.n	80076e2 <STTS751_TEMP_GetTemperature+0x26>
  {
    return STTS751_ERROR;
 80076dc:	f04f 33ff 	mov.w	r3, #4294967295
 80076e0:	e00a      	b.n	80076f8 <STTS751_TEMP_GetTemperature+0x3c>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 80076e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80076e6:	4618      	mov	r0, r3
 80076e8:	f000 f8a8 	bl	800783c <stts751_from_lsb_to_celsius>
 80076ec:	eef0 7a40 	vmov.f32	s15, s0
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	edc3 7a00 	vstr	s15, [r3]

  return STTS751_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007700:	b590      	push	{r4, r7, lr}
 8007702:	b089      	sub	sp, #36	; 0x24
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	607a      	str	r2, [r7, #4]
 800770a:	461a      	mov	r2, r3
 800770c:	460b      	mov	r3, r1
 800770e:	72fb      	strb	r3, [r7, #11]
 8007710:	4613      	mov	r3, r2
 8007712:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8007714:	2300      	movs	r3, #0
 8007716:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d11f      	bne.n	8007764 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8007724:	2300      	movs	r3, #0
 8007726:	83fb      	strh	r3, [r7, #30]
 8007728:	e018      	b.n	800775c <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	695c      	ldr	r4, [r3, #20]
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	7b1b      	ldrb	r3, [r3, #12]
 8007732:	b298      	uxth	r0, r3
 8007734:	7afb      	ldrb	r3, [r7, #11]
 8007736:	b29a      	uxth	r2, r3
 8007738:	8bfb      	ldrh	r3, [r7, #30]
 800773a:	4413      	add	r3, r2
 800773c:	b299      	uxth	r1, r3
 800773e:	8bfb      	ldrh	r3, [r7, #30]
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	441a      	add	r2, r3
 8007744:	2301      	movs	r3, #1
 8007746:	47a0      	blx	r4
 8007748:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d002      	beq.n	8007756 <ReadRegWrap+0x56>
      {
        return STTS751_ERROR;
 8007750:	f04f 33ff 	mov.w	r3, #4294967295
 8007754:	e007      	b.n	8007766 <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8007756:	8bfb      	ldrh	r3, [r7, #30]
 8007758:	3301      	adds	r3, #1
 800775a:	83fb      	strh	r3, [r7, #30]
 800775c:	8bfa      	ldrh	r2, [r7, #30]
 800775e:	893b      	ldrh	r3, [r7, #8]
 8007760:	429a      	cmp	r2, r3
 8007762:	d3e2      	bcc.n	800772a <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 8007764:	69bb      	ldr	r3, [r7, #24]
}
 8007766:	4618      	mov	r0, r3
 8007768:	3724      	adds	r7, #36	; 0x24
 800776a:	46bd      	mov	sp, r7
 800776c:	bd90      	pop	{r4, r7, pc}

0800776e <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800776e:	b590      	push	{r4, r7, lr}
 8007770:	b089      	sub	sp, #36	; 0x24
 8007772:	af00      	add	r7, sp, #0
 8007774:	60f8      	str	r0, [r7, #12]
 8007776:	607a      	str	r2, [r7, #4]
 8007778:	461a      	mov	r2, r3
 800777a:	460b      	mov	r3, r1
 800777c:	72fb      	strb	r3, [r7, #11]
 800777e:	4613      	mov	r3, r2
 8007780:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d11f      	bne.n	80077d2 <WriteRegWrap+0x64>
  {
	for (i = 0; i < Length; i++)
 8007792:	2300      	movs	r3, #0
 8007794:	83fb      	strh	r3, [r7, #30]
 8007796:	e018      	b.n	80077ca <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	691c      	ldr	r4, [r3, #16]
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	7b1b      	ldrb	r3, [r3, #12]
 80077a0:	b298      	uxth	r0, r3
 80077a2:	7afb      	ldrb	r3, [r7, #11]
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	8bfb      	ldrh	r3, [r7, #30]
 80077a8:	4413      	add	r3, r2
 80077aa:	b299      	uxth	r1, r3
 80077ac:	8bfb      	ldrh	r3, [r7, #30]
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	441a      	add	r2, r3
 80077b2:	2301      	movs	r3, #1
 80077b4:	47a0      	blx	r4
 80077b6:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d002      	beq.n	80077c4 <WriteRegWrap+0x56>
      {
        return STTS751_ERROR;
 80077be:	f04f 33ff 	mov.w	r3, #4294967295
 80077c2:	e007      	b.n	80077d4 <WriteRegWrap+0x66>
	for (i = 0; i < Length; i++)
 80077c4:	8bfb      	ldrh	r3, [r7, #30]
 80077c6:	3301      	adds	r3, #1
 80077c8:	83fb      	strh	r3, [r7, #30]
 80077ca:	8bfa      	ldrh	r2, [r7, #30]
 80077cc:	893b      	ldrh	r3, [r7, #8]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d3e2      	bcc.n	8007798 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 80077d2:	69bb      	ldr	r3, [r7, #24]
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3724      	adds	r7, #36	; 0x24
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd90      	pop	{r4, r7, pc}

080077dc <stts751_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80077dc:	b590      	push	{r4, r7, lr}
 80077de:	b087      	sub	sp, #28
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	607a      	str	r2, [r7, #4]
 80077e6:	461a      	mov	r2, r3
 80077e8:	460b      	mov	r3, r1
 80077ea:	72fb      	strb	r3, [r7, #11]
 80077ec:	4613      	mov	r3, r2
 80077ee:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	685c      	ldr	r4, [r3, #4]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6898      	ldr	r0, [r3, #8]
 80077f8:	893b      	ldrh	r3, [r7, #8]
 80077fa:	7af9      	ldrb	r1, [r7, #11]
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	47a0      	blx	r4
 8007800:	6178      	str	r0, [r7, #20]
  return ret;
 8007802:	697b      	ldr	r3, [r7, #20]
}
 8007804:	4618      	mov	r0, r3
 8007806:	371c      	adds	r7, #28
 8007808:	46bd      	mov	sp, r7
 800780a:	bd90      	pop	{r4, r7, pc}

0800780c <stts751_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 800780c:	b590      	push	{r4, r7, lr}
 800780e:	b087      	sub	sp, #28
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	607a      	str	r2, [r7, #4]
 8007816:	461a      	mov	r2, r3
 8007818:	460b      	mov	r3, r1
 800781a:	72fb      	strb	r3, [r7, #11]
 800781c:	4613      	mov	r3, r2
 800781e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681c      	ldr	r4, [r3, #0]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6898      	ldr	r0, [r3, #8]
 8007828:	893b      	ldrh	r3, [r7, #8]
 800782a:	7af9      	ldrb	r1, [r7, #11]
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	47a0      	blx	r4
 8007830:	6178      	str	r0, [r7, #20]
  return ret;
 8007832:	697b      	ldr	r3, [r7, #20]
}
 8007834:	4618      	mov	r0, r3
 8007836:	371c      	adds	r7, #28
 8007838:	46bd      	mov	sp, r7
 800783a:	bd90      	pop	{r4, r7, pc}

0800783c <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float stts751_from_lsb_to_celsius(int16_t lsb)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	4603      	mov	r3, r0
 8007844:	80fb      	strh	r3, [r7, #6]
  return ((float)lsb) / 256.0f;
 8007846:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800784a:	ee07 3a90 	vmov	s15, r3
 800784e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007852:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800786c <stts751_from_lsb_to_celsius+0x30>
 8007856:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800785a:	eef0 7a66 	vmov.f32	s15, s13
}
 800785e:	eeb0 0a67 	vmov.f32	s0, s15
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	43800000 	.word	0x43800000

08007870 <stts751_temp_data_rate_set>:
  * @param  val      change the sensor data rate
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx, stts751_odr_t val)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	460b      	mov	r3, r1
 800787a:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 800787c:	23aa      	movs	r3, #170	; 0xaa
 800787e:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8007880:	f107 020c 	add.w	r2, r7, #12
 8007884:	2301      	movs	r3, #1
 8007886:	2104      	movs	r1, #4
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f7ff ffa7 	bl	80077dc <stts751_read_reg>
 800788e:	6178      	str	r0, [r7, #20]
                         (uint8_t*)&conversion_rate, 1);
  if (ret == 0) {
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10f      	bne.n	80078b6 <stts751_temp_data_rate_set+0x46>
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 8007896:	78fb      	ldrb	r3, [r7, #3]
 8007898:	f003 030f 	and.w	r3, r3, #15
 800789c:	b2da      	uxtb	r2, r3
 800789e:	7b3b      	ldrb	r3, [r7, #12]
 80078a0:	f362 0303 	bfi	r3, r2, #0, #4
 80078a4:	733b      	strb	r3, [r7, #12]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 80078a6:	f107 020c 	add.w	r2, r7, #12
 80078aa:	2301      	movs	r3, #1
 80078ac:	2104      	movs	r1, #4
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f7ff ffac 	bl	800780c <stts751_write_reg>
 80078b4:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&conversion_rate, 1);
  }
  if (ret == 0) {
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d107      	bne.n	80078cc <stts751_temp_data_rate_set+0x5c>
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 80078bc:	f107 0210 	add.w	r2, r7, #16
 80078c0:	2301      	movs	r3, #1
 80078c2:	2103      	movs	r1, #3
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f7ff ff89 	bl	80077dc <stts751_read_reg>
 80078ca:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&configuration, 1);
  }
  if (ret == 0) {
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d111      	bne.n	80078f6 <stts751_temp_data_rate_set+0x86>
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 80078d2:	78fb      	ldrb	r3, [r7, #3]
 80078d4:	09db      	lsrs	r3, r3, #7
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	f003 0301 	and.w	r3, r3, #1
 80078dc:	b2da      	uxtb	r2, r3
 80078de:	7c3b      	ldrb	r3, [r7, #16]
 80078e0:	f362 1386 	bfi	r3, r2, #6, #1
 80078e4:	743b      	strb	r3, [r7, #16]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 80078e6:	f107 0210 	add.w	r2, r7, #16
 80078ea:	2301      	movs	r3, #1
 80078ec:	2103      	movs	r1, #3
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f7ff ff8c 	bl	800780c <stts751_write_reg>
 80078f4:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&configuration, 1);
  }
  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT)) {
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d10a      	bne.n	8007912 <stts751_temp_data_rate_set+0xa2>
 80078fc:	78fb      	ldrb	r3, [r7, #3]
 80078fe:	2b90      	cmp	r3, #144	; 0x90
 8007900:	d107      	bne.n	8007912 <stts751_temp_data_rate_set+0xa2>
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 8007902:	f107 020b 	add.w	r2, r7, #11
 8007906:	2301      	movs	r3, #1
 8007908:	210f      	movs	r1, #15
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7ff ff7e 	bl	800780c <stts751_write_reg>
 8007910:	6178      	str	r0, [r7, #20]
  }
  return ret;
 8007912:	697b      	ldr	r3, [r7, #20]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3718      	adds	r7, #24
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <stts751_temp_data_rate_get>:
  * @param  val      Get the sensor data rate
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx, stts751_odr_t *val)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b086      	sub	sp, #24
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8007926:	f107 0210 	add.w	r2, r7, #16
 800792a:	2301      	movs	r3, #1
 800792c:	2104      	movs	r1, #4
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7ff ff54 	bl	80077dc <stts751_read_reg>
 8007934:	6178      	str	r0, [r7, #20]
                         (uint8_t*)&conversion_rate, 1);
  if (ret == 0) {
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d107      	bne.n	800794c <stts751_temp_data_rate_get+0x30>
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 800793c:	f107 020c 	add.w	r2, r7, #12
 8007940:	2301      	movs	r3, #1
 8007942:	2103      	movs	r1, #3
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f7ff ff49 	bl	80077dc <stts751_read_reg>
 800794a:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&configuration, 1);
  }
  switch ( (configuration.stop << 7) + conversion_rate.conv) {
 800794c:	7b3b      	ldrb	r3, [r7, #12]
 800794e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007952:	b2db      	uxtb	r3, r3
 8007954:	01db      	lsls	r3, r3, #7
 8007956:	7c3a      	ldrb	r2, [r7, #16]
 8007958:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800795c:	b2d2      	uxtb	r2, r2
 800795e:	4413      	add	r3, r2
 8007960:	2b90      	cmp	r3, #144	; 0x90
 8007962:	d025      	beq.n	80079b0 <stts751_temp_data_rate_get+0x94>
 8007964:	2b90      	cmp	r3, #144	; 0x90
 8007966:	dc4f      	bgt.n	8007a08 <stts751_temp_data_rate_get+0xec>
 8007968:	2b09      	cmp	r3, #9
 800796a:	dc1b      	bgt.n	80079a4 <stts751_temp_data_rate_get+0x88>
 800796c:	2b00      	cmp	r3, #0
 800796e:	db4b      	blt.n	8007a08 <stts751_temp_data_rate_get+0xec>
 8007970:	2b09      	cmp	r3, #9
 8007972:	d849      	bhi.n	8007a08 <stts751_temp_data_rate_get+0xec>
 8007974:	a201      	add	r2, pc, #4	; (adr r2, 800797c <stts751_temp_data_rate_get+0x60>)
 8007976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800797a:	bf00      	nop
 800797c:	080079b9 	.word	0x080079b9
 8007980:	080079c1 	.word	0x080079c1
 8007984:	080079c9 	.word	0x080079c9
 8007988:	080079d1 	.word	0x080079d1
 800798c:	080079d9 	.word	0x080079d9
 8007990:	080079e1 	.word	0x080079e1
 8007994:	080079e9 	.word	0x080079e9
 8007998:	080079f1 	.word	0x080079f1
 800799c:	080079f9 	.word	0x080079f9
 80079a0:	08007a01 	.word	0x08007a01
 80079a4:	2b80      	cmp	r3, #128	; 0x80
 80079a6:	d12f      	bne.n	8007a08 <stts751_temp_data_rate_get+0xec>
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	2280      	movs	r2, #128	; 0x80
 80079ac:	701a      	strb	r2, [r3, #0]
      break;
 80079ae:	e02f      	b.n	8007a10 <stts751_temp_data_rate_get+0xf4>
    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	2290      	movs	r2, #144	; 0x90
 80079b4:	701a      	strb	r2, [r3, #0]
      break;
 80079b6:	e02b      	b.n	8007a10 <stts751_temp_data_rate_get+0xf4>
    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	2200      	movs	r2, #0
 80079bc:	701a      	strb	r2, [r3, #0]
      break;
 80079be:	e027      	b.n	8007a10 <stts751_temp_data_rate_get+0xf4>
    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	2201      	movs	r2, #1
 80079c4:	701a      	strb	r2, [r3, #0]
      break;
 80079c6:	e023      	b.n	8007a10 <stts751_temp_data_rate_get+0xf4>
     case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	2202      	movs	r2, #2
 80079cc:	701a      	strb	r2, [r3, #0]
      break;
 80079ce:	e01f      	b.n	8007a10 <stts751_temp_data_rate_get+0xf4>
    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	2203      	movs	r2, #3
 80079d4:	701a      	strb	r2, [r3, #0]
      break;
 80079d6:	e01b      	b.n	8007a10 <stts751_temp_data_rate_get+0xf4>
    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	2204      	movs	r2, #4
 80079dc:	701a      	strb	r2, [r3, #0]
      break;
 80079de:	e017      	b.n	8007a10 <stts751_temp_data_rate_get+0xf4>
    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	2205      	movs	r2, #5
 80079e4:	701a      	strb	r2, [r3, #0]
      break;
 80079e6:	e013      	b.n	8007a10 <stts751_temp_data_rate_get+0xf4>
     case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	2206      	movs	r2, #6
 80079ec:	701a      	strb	r2, [r3, #0]
      break;
 80079ee:	e00f      	b.n	8007a10 <stts751_temp_data_rate_get+0xf4>
    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	2207      	movs	r2, #7
 80079f4:	701a      	strb	r2, [r3, #0]
      break;
 80079f6:	e00b      	b.n	8007a10 <stts751_temp_data_rate_get+0xf4>
    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	2208      	movs	r2, #8
 80079fc:	701a      	strb	r2, [r3, #0]
      break;
 80079fe:	e007      	b.n	8007a10 <stts751_temp_data_rate_get+0xf4>
    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	2209      	movs	r2, #9
 8007a04:	701a      	strb	r2, [r3, #0]
      break;
 8007a06:	e003      	b.n	8007a10 <stts751_temp_data_rate_get+0xf4>
    default:
      *val = STTS751_TEMP_ODR_OFF;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	2280      	movs	r2, #128	; 0x80
 8007a0c:	701a      	strb	r2, [r3, #0]
      break;
 8007a0e:	bf00      	nop
  }
  return ret;
 8007a10:	697b      	ldr	r3, [r7, #20]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3718      	adds	r7, #24
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop

08007a1c <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	460b      	mov	r3, r1
 8007a26:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,(uint8_t*) &reg, 1);
 8007a28:	f107 0208 	add.w	r2, r7, #8
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	2103      	movs	r1, #3
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f7ff fed3 	bl	80077dc <stts751_read_reg>
 8007a36:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10f      	bne.n	8007a5e <stts751_resolution_set+0x42>
    reg.tres = (uint8_t) val;
 8007a3e:	78fb      	ldrb	r3, [r7, #3]
 8007a40:	f003 0303 	and.w	r3, r3, #3
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	7a3b      	ldrb	r3, [r7, #8]
 8007a48:	f362 0383 	bfi	r3, r2, #2, #2
 8007a4c:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,(uint8_t*) &reg, 1);
 8007a4e:	f107 0208 	add.w	r2, r7, #8
 8007a52:	2301      	movs	r3, #1
 8007a54:	2103      	movs	r1, #3
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f7ff fed8 	bl	800780c <stts751_write_reg>
 8007a5c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,(uint8_t*) &reg, 1);
 8007a72:	f107 0208 	add.w	r2, r7, #8
 8007a76:	2301      	movs	r3, #1
 8007a78:	2103      	movs	r1, #3
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f7ff feae 	bl	80077dc <stts751_read_reg>
 8007a80:	60f8      	str	r0, [r7, #12]

  switch (reg.tres) {
 8007a82:	7a3b      	ldrb	r3, [r7, #8]
 8007a84:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	2b03      	cmp	r3, #3
 8007a8c:	d81a      	bhi.n	8007ac4 <stts751_resolution_get+0x5c>
 8007a8e:	a201      	add	r2, pc, #4	; (adr r2, 8007a94 <stts751_resolution_get+0x2c>)
 8007a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a94:	08007aad 	.word	0x08007aad
 8007a98:	08007ab5 	.word	0x08007ab5
 8007a9c:	08007aa5 	.word	0x08007aa5
 8007aa0:	08007abd 	.word	0x08007abd
    case STTS751_9bit:
      *val = STTS751_9bit;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	701a      	strb	r2, [r3, #0]
      break;
 8007aaa:	e00f      	b.n	8007acc <stts751_resolution_get+0x64>
    case STTS751_10bit:
      *val = STTS751_10bit;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	701a      	strb	r2, [r3, #0]
      break;
 8007ab2:	e00b      	b.n	8007acc <stts751_resolution_get+0x64>
    case STTS751_11bit:
      *val = STTS751_11bit;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	701a      	strb	r2, [r3, #0]
      break;
 8007aba:	e007      	b.n	8007acc <stts751_resolution_get+0x64>
    case STTS751_12bit:
      *val = STTS751_12bit;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	2203      	movs	r2, #3
 8007ac0:	701a      	strb	r2, [r3, #0]
      break;
 8007ac2:	e003      	b.n	8007acc <stts751_resolution_get+0x64>
    default:
      *val = STTS751_9bit;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	701a      	strb	r2, [r3, #0]
      break;
 8007aca:	bf00      	nop
  }
  return ret;
 8007acc:	68fb      	ldr	r3, [r7, #12]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop

08007ad8 <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  uint16_t temperature;
  uint8_t temperature_low;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 8007ae2:	f107 020a 	add.w	r2, r7, #10
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	2100      	movs	r1, #0
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7ff fe76 	bl	80077dc <stts751_read_reg>
 8007af0:	60f8      	str	r0, [r7, #12]
                         (uint8_t*)&temperature, 1);
  if (ret == 0) {
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d113      	bne.n	8007b20 <stts751_temperature_raw_get+0x48>
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 8007af8:	f107 0209 	add.w	r2, r7, #9
 8007afc:	2301      	movs	r3, #1
 8007afe:	2102      	movs	r1, #2
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f7ff fe6b 	bl	80077dc <stts751_read_reg>
 8007b06:	60f8      	str	r0, [r7, #12]
                           &temperature_low, 1);

    temperature  = (temperature << 8) + temperature_low;
 8007b08:	897b      	ldrh	r3, [r7, #10]
 8007b0a:	021b      	lsls	r3, r3, #8
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	7a7b      	ldrb	r3, [r7, #9]
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	4413      	add	r3, r2
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	817b      	strh	r3, [r7, #10]
    *buff = (int16_t)temperature;
 8007b18:	897b      	ldrh	r3, [r7, #10]
 8007b1a:	b21a      	sxth	r2, r3
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	801a      	strh	r2, [r3, #0]
  }
  return ret;
 8007b20:	68fb      	ldr	r3, [r7, #12]
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3710      	adds	r7, #16
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b084      	sub	sp, #16
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	460b      	mov	r3, r1
 8007b34:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,(uint8_t*)&reg, 1);
 8007b36:	f107 0208 	add.w	r2, r7, #8
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	2103      	movs	r1, #3
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7ff fe4c 	bl	80077dc <stts751_read_reg>
 8007b44:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10f      	bne.n	8007b6c <stts751_pin_event_route_set+0x42>
    reg.mask1 = val;
 8007b4c:	78fb      	ldrb	r3, [r7, #3]
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	b2da      	uxtb	r2, r3
 8007b54:	7a3b      	ldrb	r3, [r7, #8]
 8007b56:	f362 13c7 	bfi	r3, r2, #7, #1
 8007b5a:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t*)&reg, 1);
 8007b5c:	f107 0208 	add.w	r2, r7, #8
 8007b60:	2301      	movs	r3, #1
 8007b62:	2103      	movs	r1, #3
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f7ff fe51 	bl	800780c <stts751_write_reg>
 8007b6a:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b084      	sub	sp, #16
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 8007b80:	683a      	ldr	r2, [r7, #0]
 8007b82:	2301      	movs	r3, #1
 8007b84:	21fd      	movs	r1, #253	; 0xfd
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f7ff fe28 	bl	80077dc <stts751_read_reg>
 8007b8c:	60f8      	str	r0, [r7, #12]
                         (uint8_t*)&buff->product_id, 1);
  if (ret == 0){
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d107      	bne.n	8007ba4 <stts751_device_id_get+0x2e>
  ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	1c5a      	adds	r2, r3, #1
 8007b98:	2301      	movs	r3, #1
 8007b9a:	21fe      	movs	r1, #254	; 0xfe
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f7ff fe1d 	bl	80077dc <stts751_read_reg>
 8007ba2:	60f8      	str	r0, [r7, #12]
                         (uint8_t*)&buff->manufacturer_id, 1);
  }
  if (ret == 0){
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d107      	bne.n	8007bba <stts751_device_id_get+0x44>
  ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	1c9a      	adds	r2, r3, #2
 8007bae:	2301      	movs	r3, #1
 8007bb0:	21ff      	movs	r1, #255	; 0xff
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7ff fe12 	bl	80077dc <stts751_read_reg>
 8007bb8:	60f8      	str	r0, [r7, #12]
                         (uint8_t*)&buff->revision_id, 1);
  }
  return ret;
 8007bba:	68fb      	ldr	r3, [r7, #12]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <IKS01A3_ENV_SENSOR_Init>:
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
 *         - ENV_TEMPERATURE for instance 2
 * @retval BSP status
 */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b08a      	sub	sp, #40	; 0x28
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	61bb      	str	r3, [r7, #24]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d06e      	beq.n	8007cbe <IKS01A3_ENV_SENSOR_Init+0xfa>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	f200 809d 	bhi.w	8007d22 <IKS01A3_ENV_SENSOR_Init+0x15e>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d003      	beq.n	8007bf6 <IKS01A3_ENV_SENSOR_Init+0x32>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d032      	beq.n	8007c5a <IKS01A3_ENV_SENSOR_Init+0x96>
 8007bf4:	e095      	b.n	8007d22 <IKS01A3_ENV_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8007bf6:	6838      	ldr	r0, [r7, #0]
 8007bf8:	f000 f90a 	bl	8007e10 <HTS221_0_Probe>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d002      	beq.n	8007c08 <IKS01A3_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8007c02:	f04f 33ff 	mov.w	r3, #4294967295
 8007c06:	e0cc      	b.n	8007da2 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007c08:	4a68      	ldr	r2, [pc, #416]	; (8007dac <IKS01A3_ENV_SENSOR_Init+0x1e8>)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	4967      	ldr	r1, [pc, #412]	; (8007db0 <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007c1a:	f107 0108 	add.w	r1, r7, #8
 8007c1e:	4610      	mov	r0, r2
 8007c20:	4798      	blx	r3
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d002      	beq.n	8007c2e <IKS01A3_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007c28:	f06f 0306 	mvn.w	r3, #6
 8007c2c:	e0b9      	b.n	8007da2 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 8007c2e:	7a3b      	ldrb	r3, [r7, #8]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d103      	bne.n	8007c3c <IKS01A3_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	f043 0301 	orr.w	r3, r3, #1
 8007c3a:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8007c3c:	7abb      	ldrb	r3, [r7, #10]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d103      	bne.n	8007c4a <IKS01A3_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	f043 0304 	orr.w	r3, r3, #4
 8007c48:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8007c4a:	7a7b      	ldrb	r3, [r7, #9]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d16c      	bne.n	8007d2a <IKS01A3_ENV_SENSOR_Init+0x166>
      {
        component_functions |= ENV_PRESSURE;
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	f043 0302 	orr.w	r3, r3, #2
 8007c56:	61bb      	str	r3, [r7, #24]
      }
      break;
 8007c58:	e067      	b.n	8007d2a <IKS01A3_ENV_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 8007c5a:	6838      	ldr	r0, [r7, #0]
 8007c5c:	f000 f992 	bl	8007f84 <LPS22HH_0_Probe>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d002      	beq.n	8007c6c <IKS01A3_ENV_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8007c66:	f04f 33ff 	mov.w	r3, #4294967295
 8007c6a:	e09a      	b.n	8007da2 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007c6c:	4a4f      	ldr	r2, [pc, #316]	; (8007dac <IKS01A3_ENV_SENSOR_Init+0x1e8>)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	494e      	ldr	r1, [pc, #312]	; (8007db0 <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007c7e:	f107 0108 	add.w	r1, r7, #8
 8007c82:	4610      	mov	r0, r2
 8007c84:	4798      	blx	r3
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d002      	beq.n	8007c92 <IKS01A3_ENV_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007c8c:	f06f 0306 	mvn.w	r3, #6
 8007c90:	e087      	b.n	8007da2 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 8007c92:	7a3b      	ldrb	r3, [r7, #8]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d103      	bne.n	8007ca0 <IKS01A3_ENV_SENSOR_Init+0xdc>
      {
        component_functions |= ENV_TEMPERATURE;
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	f043 0301 	orr.w	r3, r3, #1
 8007c9e:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8007ca0:	7abb      	ldrb	r3, [r7, #10]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d103      	bne.n	8007cae <IKS01A3_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_HUMIDITY;
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	f043 0304 	orr.w	r3, r3, #4
 8007cac:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8007cae:	7a7b      	ldrb	r3, [r7, #9]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d13c      	bne.n	8007d2e <IKS01A3_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_PRESSURE;
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	f043 0302 	orr.w	r3, r3, #2
 8007cba:	61bb      	str	r3, [r7, #24]
      }
      break;
 8007cbc:	e037      	b.n	8007d2e <IKS01A3_ENV_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 8007cbe:	6838      	ldr	r0, [r7, #0]
 8007cc0:	f000 fa1c 	bl	80080fc <STTS751_0_Probe>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d002      	beq.n	8007cd0 <IKS01A3_ENV_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8007cca:	f04f 33ff 	mov.w	r3, #4294967295
 8007cce:	e068      	b.n	8007da2 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007cd0:	4a36      	ldr	r2, [pc, #216]	; (8007dac <IKS01A3_ENV_SENSOR_Init+0x1e8>)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	4935      	ldr	r1, [pc, #212]	; (8007db0 <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007ce2:	f107 0108 	add.w	r1, r7, #8
 8007ce6:	4610      	mov	r0, r2
 8007ce8:	4798      	blx	r3
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d002      	beq.n	8007cf6 <IKS01A3_ENV_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007cf0:	f06f 0306 	mvn.w	r3, #6
 8007cf4:	e055      	b.n	8007da2 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 8007cf6:	7a3b      	ldrb	r3, [r7, #8]
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d103      	bne.n	8007d04 <IKS01A3_ENV_SENSOR_Init+0x140>
      {
        component_functions |= ENV_TEMPERATURE;
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	f043 0301 	orr.w	r3, r3, #1
 8007d02:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8007d04:	7abb      	ldrb	r3, [r7, #10]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d103      	bne.n	8007d12 <IKS01A3_ENV_SENSOR_Init+0x14e>
      {
        component_functions |= ENV_HUMIDITY;
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	f043 0304 	orr.w	r3, r3, #4
 8007d10:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8007d12:	7a7b      	ldrb	r3, [r7, #9]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d10c      	bne.n	8007d32 <IKS01A3_ENV_SENSOR_Init+0x16e>
      {
        component_functions |= ENV_PRESSURE;
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	f043 0302 	orr.w	r3, r3, #2
 8007d1e:	61bb      	str	r3, [r7, #24]
      }
      break;
 8007d20:	e007      	b.n	8007d32 <IKS01A3_ENV_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007d22:	f06f 0301 	mvn.w	r3, #1
 8007d26:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007d28:	e004      	b.n	8007d34 <IKS01A3_ENV_SENSOR_Init+0x170>
      break;
 8007d2a:	bf00      	nop
 8007d2c:	e002      	b.n	8007d34 <IKS01A3_ENV_SENSOR_Init+0x170>
      break;
 8007d2e:	bf00      	nop
 8007d30:	e000      	b.n	8007d34 <IKS01A3_ENV_SENSOR_Init+0x170>
      break;
 8007d32:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8007d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d001      	beq.n	8007d3e <IKS01A3_ENV_SENSOR_Init+0x17a>
  {
    return ret;
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3c:	e031      	b.n	8007da2 <IKS01A3_ENV_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8007d3e:	2300      	movs	r3, #0
 8007d40:	61fb      	str	r3, [r7, #28]
 8007d42:	e02a      	b.n	8007d9a <IKS01A3_ENV_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8007d44:	683a      	ldr	r2, [r7, #0]
 8007d46:	6a3b      	ldr	r3, [r7, #32]
 8007d48:	4013      	ands	r3, r2
 8007d4a:	6a3a      	ldr	r2, [r7, #32]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d11e      	bne.n	8007d8e <IKS01A3_ENV_SENSOR_Init+0x1ca>
 8007d50:	69ba      	ldr	r2, [r7, #24]
 8007d52:	6a3b      	ldr	r3, [r7, #32]
 8007d54:	4013      	ands	r3, r2
 8007d56:	6a3a      	ldr	r2, [r7, #32]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d118      	bne.n	8007d8e <IKS01A3_ENV_SENSOR_Init+0x1ca>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8007d5c:	4a15      	ldr	r2, [pc, #84]	; (8007db4 <IKS01A3_ENV_SENSOR_Init+0x1f0>)
 8007d5e:	6a3b      	ldr	r3, [r7, #32]
 8007d60:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007d64:	4814      	ldr	r0, [pc, #80]	; (8007db8 <IKS01A3_ENV_SENSOR_Init+0x1f4>)
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	005b      	lsls	r3, r3, #1
 8007d6c:	4413      	add	r3, r2
 8007d6e:	440b      	add	r3, r1
 8007d70:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	490e      	ldr	r1, [pc, #56]	; (8007db0 <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007d7e:	4610      	mov	r0, r2
 8007d80:	4798      	blx	r3
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d002      	beq.n	8007d8e <IKS01A3_ENV_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8007d88:	f06f 0304 	mvn.w	r3, #4
 8007d8c:	e009      	b.n	8007da2 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8007d8e:	6a3b      	ldr	r3, [r7, #32]
 8007d90:	005b      	lsls	r3, r3, #1
 8007d92:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	3301      	adds	r3, #1
 8007d98:	61fb      	str	r3, [r7, #28]
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d9d1      	bls.n	8007d44 <IKS01A3_ENV_SENSOR_Init+0x180>
  }

  return ret;
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3728      	adds	r7, #40	; 0x28
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	20002ab0 	.word	0x20002ab0
 8007db0:	2000be5c 	.word	0x2000be5c
 8007db4:	20001380 	.word	0x20001380
 8007db8:	20002a8c 	.word	0x20002a8c

08007dbc <IKS01A3_ENV_SENSOR_GetCapabilities>:
 * @param  Instance Environmental sensor instance
 * @param  Capabilities pointer to Environmental sensor capabilities
 * @retval BSP status
 */
int32_t IKS01A3_ENV_SENSOR_GetCapabilities(uint32_t Instance, IKS01A3_ENV_SENSOR_Capabilities_t *Capabilities)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d903      	bls.n	8007dd4 <IKS01A3_ENV_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007dcc:	f06f 0301 	mvn.w	r3, #1
 8007dd0:	60fb      	str	r3, [r7, #12]
 8007dd2:	e014      	b.n	8007dfe <IKS01A3_ENV_SENSOR_GetCapabilities+0x42>
  }
  else if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 8007dd4:	4a0c      	ldr	r2, [pc, #48]	; (8007e08 <IKS01A3_ENV_SENSOR_GetCapabilities+0x4c>)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	490b      	ldr	r1, [pc, #44]	; (8007e0c <IKS01A3_ENV_SENSOR_GetCapabilities+0x50>)
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	4610      	mov	r0, r2
 8007dea:	4798      	blx	r3
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d003      	beq.n	8007dfa <IKS01A3_ENV_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007df2:	f06f 0306 	mvn.w	r3, #6
 8007df6:	60fb      	str	r3, [r7, #12]
 8007df8:	e001      	b.n	8007dfe <IKS01A3_ENV_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	20002ab0 	.word	0x20002ab0
 8007e0c:	2000be5c 	.word	0x2000be5c

08007e10 <HTS221_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b090      	sub	sp, #64	; 0x40
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t              id;
  int32_t              ret = BSP_ERROR_NONE;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8007e20:	23bf      	movs	r3, #191	; 0xbf
 8007e22:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A3_I2C_Init;
 8007e26:	4b49      	ldr	r3, [pc, #292]	; (8007f4c <HTS221_0_Probe+0x13c>)
 8007e28:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8007e2a:	4b49      	ldr	r3, [pc, #292]	; (8007f50 <HTS221_0_Probe+0x140>)
 8007e2c:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8007e2e:	4b49      	ldr	r3, [pc, #292]	; (8007f54 <HTS221_0_Probe+0x144>)
 8007e30:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8007e32:	4b49      	ldr	r3, [pc, #292]	; (8007f58 <HTS221_0_Probe+0x148>)
 8007e34:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A3_GetTick;
 8007e36:	4b49      	ldr	r3, [pc, #292]	; (8007f5c <HTS221_0_Probe+0x14c>)
 8007e38:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8007e3a:	f107 0320 	add.w	r3, r7, #32
 8007e3e:	4619      	mov	r1, r3
 8007e40:	4847      	ldr	r0, [pc, #284]	; (8007f60 <HTS221_0_Probe+0x150>)
 8007e42:	f7f9 fe3d 	bl	8001ac0 <HTS221_RegisterBusIO>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d003      	beq.n	8007e54 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007e4c:	f06f 0306 	mvn.w	r3, #6
 8007e50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e52:	e076      	b.n	8007f42 <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8007e54:	f107 031f 	add.w	r3, r7, #31
 8007e58:	4619      	mov	r1, r3
 8007e5a:	4841      	ldr	r0, [pc, #260]	; (8007f60 <HTS221_0_Probe+0x150>)
 8007e5c:	f7f9 feb5 	bl	8001bca <HTS221_ReadID>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d003      	beq.n	8007e6e <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007e66:	f06f 0306 	mvn.w	r3, #6
 8007e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e6c:	e069      	b.n	8007f42 <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 8007e6e:	7ffb      	ldrb	r3, [r7, #31]
 8007e70:	2bbc      	cmp	r3, #188	; 0xbc
 8007e72:	d003      	beq.n	8007e7c <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007e74:	f06f 0306 	mvn.w	r3, #6
 8007e78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e7a:	e062      	b.n	8007f42 <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8007e7c:	f107 030c 	add.w	r3, r7, #12
 8007e80:	4619      	mov	r1, r3
 8007e82:	4837      	ldr	r0, [pc, #220]	; (8007f60 <HTS221_0_Probe+0x150>)
 8007e84:	f7f9 feb8 	bl	8001bf8 <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007e88:	7b3b      	ldrb	r3, [r7, #12]
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	7b7b      	ldrb	r3, [r7, #13]
 8007e8e:	005b      	lsls	r3, r3, #1
 8007e90:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 8007e92:	7bbb      	ldrb	r3, [r7, #14]
 8007e94:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007e96:	4313      	orrs	r3, r2
 8007e98:	4a32      	ldr	r2, [pc, #200]	; (8007f64 <HTS221_0_Probe+0x154>)
 8007e9a:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 8007e9c:	4b32      	ldr	r3, [pc, #200]	; (8007f68 <HTS221_0_Probe+0x158>)
 8007e9e:	4a30      	ldr	r2, [pc, #192]	; (8007f60 <HTS221_0_Probe+0x150>)
 8007ea0:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8007ea2:	4b32      	ldr	r3, [pc, #200]	; (8007f6c <HTS221_0_Probe+0x15c>)
 8007ea4:	4a32      	ldr	r2, [pc, #200]	; (8007f70 <HTS221_0_Probe+0x160>)
 8007ea6:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8007ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d11d      	bne.n	8007eea <HTS221_0_Probe+0xda>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f003 0301 	and.w	r3, r3, #1
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d018      	beq.n	8007eea <HTS221_0_Probe+0xda>
 8007eb8:	7b3b      	ldrb	r3, [r7, #12]
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d115      	bne.n	8007eea <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8007ebe:	4b2d      	ldr	r3, [pc, #180]	; (8007f74 <HTS221_0_Probe+0x164>)
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	4a2d      	ldr	r2, [pc, #180]	; (8007f78 <HTS221_0_Probe+0x168>)
 8007ec4:	492d      	ldr	r1, [pc, #180]	; (8007f7c <HTS221_0_Probe+0x16c>)
 8007ec6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8007eca:	4b28      	ldr	r3, [pc, #160]	; (8007f6c <HTS221_0_Probe+0x15c>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a25      	ldr	r2, [pc, #148]	; (8007f68 <HTS221_0_Probe+0x158>)
 8007ed2:	6812      	ldr	r2, [r2, #0]
 8007ed4:	4610      	mov	r0, r2
 8007ed6:	4798      	blx	r3
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d003      	beq.n	8007ee6 <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007ede:	f06f 0304 	mvn.w	r3, #4
 8007ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ee4:	e001      	b.n	8007eea <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8007eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d11d      	bne.n	8007f2c <HTS221_0_Probe+0x11c>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f003 0304 	and.w	r3, r3, #4
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d018      	beq.n	8007f2c <HTS221_0_Probe+0x11c>
 8007efa:	7bbb      	ldrb	r3, [r7, #14]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d115      	bne.n	8007f2c <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8007f00:	4b1c      	ldr	r3, [pc, #112]	; (8007f74 <HTS221_0_Probe+0x164>)
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	4a1c      	ldr	r2, [pc, #112]	; (8007f78 <HTS221_0_Probe+0x168>)
 8007f06:	491e      	ldr	r1, [pc, #120]	; (8007f80 <HTS221_0_Probe+0x170>)
 8007f08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8007f0c:	4b17      	ldr	r3, [pc, #92]	; (8007f6c <HTS221_0_Probe+0x15c>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a15      	ldr	r2, [pc, #84]	; (8007f68 <HTS221_0_Probe+0x158>)
 8007f14:	6812      	ldr	r2, [r2, #0]
 8007f16:	4610      	mov	r0, r2
 8007f18:	4798      	blx	r3
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d003      	beq.n	8007f28 <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f20:	f06f 0304 	mvn.w	r3, #4
 8007f24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f26:	e001      	b.n	8007f2c <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8007f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d107      	bne.n	8007f42 <HTS221_0_Probe+0x132>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f003 0302 	and.w	r3, r3, #2
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d002      	beq.n	8007f42 <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f3c:	f06f 0304 	mvn.w	r3, #4
 8007f40:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 8007f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3740      	adds	r7, #64	; 0x40
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	080015f5 	.word	0x080015f5
 8007f50:	08001659 	.word	0x08001659
 8007f54:	0800170d 	.word	0x0800170d
 8007f58:	080016a9 	.word	0x080016a9
 8007f5c:	08001771 	.word	0x08001771
 8007f60:	20002ac8 	.word	0x20002ac8
 8007f64:	20002abc 	.word	0x20002abc
 8007f68:	2000be5c 	.word	0x2000be5c
 8007f6c:	20002ab0 	.word	0x20002ab0
 8007f70:	2000122c 	.word	0x2000122c
 8007f74:	20001380 	.word	0x20001380
 8007f78:	20002a8c 	.word	0x20002a8c
 8007f7c:	20001250 	.word	0x20001250
 8007f80:	2000123c 	.word	0x2000123c

08007f84 <LPS22HH_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b090      	sub	sp, #64	; 0x40
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 8007f90:	2300      	movs	r3, #0
 8007f92:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 8007f94:	23bb      	movs	r3, #187	; 0xbb
 8007f96:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A3_I2C_Init;
 8007f9a:	4b4a      	ldr	r3, [pc, #296]	; (80080c4 <LPS22HH_0_Probe+0x140>)
 8007f9c:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8007f9e:	4b4a      	ldr	r3, [pc, #296]	; (80080c8 <LPS22HH_0_Probe+0x144>)
 8007fa0:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8007fa2:	4b4a      	ldr	r3, [pc, #296]	; (80080cc <LPS22HH_0_Probe+0x148>)
 8007fa4:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8007fa6:	4b4a      	ldr	r3, [pc, #296]	; (80080d0 <LPS22HH_0_Probe+0x14c>)
 8007fa8:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A3_GetTick;
 8007faa:	4b4a      	ldr	r3, [pc, #296]	; (80080d4 <LPS22HH_0_Probe+0x150>)
 8007fac:	63bb      	str	r3, [r7, #56]	; 0x38

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 8007fae:	f107 0320 	add.w	r3, r7, #32
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	4848      	ldr	r0, [pc, #288]	; (80080d8 <LPS22HH_0_Probe+0x154>)
 8007fb6:	f7fc fb5f 	bl	8004678 <LPS22HH_RegisterBusIO>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d003      	beq.n	8007fc8 <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007fc0:	f06f 0306 	mvn.w	r3, #6
 8007fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fc6:	e078      	b.n	80080ba <LPS22HH_0_Probe+0x136>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 8007fc8:	f107 031f 	add.w	r3, r7, #31
 8007fcc:	4619      	mov	r1, r3
 8007fce:	4842      	ldr	r0, [pc, #264]	; (80080d8 <LPS22HH_0_Probe+0x154>)
 8007fd0:	f7fc fbf7 	bl	80047c2 <LPS22HH_ReadID>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d003      	beq.n	8007fe2 <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007fda:	f06f 0306 	mvn.w	r3, #6
 8007fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fe0:	e06b      	b.n	80080ba <LPS22HH_0_Probe+0x136>
  }
  else if (id != LPS22HH_ID)
 8007fe2:	7ffb      	ldrb	r3, [r7, #31]
 8007fe4:	2bb3      	cmp	r3, #179	; 0xb3
 8007fe6:	d003      	beq.n	8007ff0 <LPS22HH_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007fe8:	f06f 0306 	mvn.w	r3, #6
 8007fec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fee:	e064      	b.n	80080ba <LPS22HH_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 8007ff0:	f107 030c 	add.w	r3, r7, #12
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	4838      	ldr	r0, [pc, #224]	; (80080d8 <LPS22HH_0_Probe+0x154>)
 8007ff8:	f7fc fbfa 	bl	80047f0 <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007ffc:	7b3b      	ldrb	r3, [r7, #12]
 8007ffe:	461a      	mov	r2, r3
 8008000:	7b7b      	ldrb	r3, [r7, #13]
 8008002:	005b      	lsls	r3, r3, #1
 8008004:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 8008006:	7bbb      	ldrb	r3, [r7, #14]
 8008008:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800800a:	4313      	orrs	r3, r2
 800800c:	4a33      	ldr	r2, [pc, #204]	; (80080dc <LPS22HH_0_Probe+0x158>)
 800800e:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 8008010:	4b33      	ldr	r3, [pc, #204]	; (80080e0 <LPS22HH_0_Probe+0x15c>)
 8008012:	4a31      	ldr	r2, [pc, #196]	; (80080d8 <LPS22HH_0_Probe+0x154>)
 8008014:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 8008016:	4b33      	ldr	r3, [pc, #204]	; (80080e4 <LPS22HH_0_Probe+0x160>)
 8008018:	4a33      	ldr	r2, [pc, #204]	; (80080e8 <LPS22HH_0_Probe+0x164>)
 800801a:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800801c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800801e:	2b00      	cmp	r3, #0
 8008020:	d11e      	bne.n	8008060 <LPS22HH_0_Probe+0xdc>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f003 0301 	and.w	r3, r3, #1
 8008028:	2b00      	cmp	r3, #0
 800802a:	d019      	beq.n	8008060 <LPS22HH_0_Probe+0xdc>
 800802c:	7b3b      	ldrb	r3, [r7, #12]
 800802e:	2b01      	cmp	r3, #1
 8008030:	d116      	bne.n	8008060 <LPS22HH_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 8008032:	4b2e      	ldr	r3, [pc, #184]	; (80080ec <LPS22HH_0_Probe+0x168>)
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	4a2e      	ldr	r2, [pc, #184]	; (80080f0 <LPS22HH_0_Probe+0x16c>)
 8008038:	3303      	adds	r3, #3
 800803a:	492e      	ldr	r1, [pc, #184]	; (80080f4 <LPS22HH_0_Probe+0x170>)
 800803c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8008040:	4b28      	ldr	r3, [pc, #160]	; (80080e4 <LPS22HH_0_Probe+0x160>)
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a26      	ldr	r2, [pc, #152]	; (80080e0 <LPS22HH_0_Probe+0x15c>)
 8008048:	6852      	ldr	r2, [r2, #4]
 800804a:	4610      	mov	r0, r2
 800804c:	4798      	blx	r3
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d003      	beq.n	800805c <LPS22HH_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008054:	f06f 0304 	mvn.w	r3, #4
 8008058:	63fb      	str	r3, [r7, #60]	; 0x3c
 800805a:	e001      	b.n	8008060 <LPS22HH_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800805c:	2300      	movs	r3, #0
 800805e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8008060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008062:	2b00      	cmp	r3, #0
 8008064:	d11e      	bne.n	80080a4 <LPS22HH_0_Probe+0x120>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f003 0302 	and.w	r3, r3, #2
 800806c:	2b00      	cmp	r3, #0
 800806e:	d019      	beq.n	80080a4 <LPS22HH_0_Probe+0x120>
 8008070:	7b7b      	ldrb	r3, [r7, #13]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d116      	bne.n	80080a4 <LPS22HH_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 8008076:	4b1d      	ldr	r3, [pc, #116]	; (80080ec <LPS22HH_0_Probe+0x168>)
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	4a1d      	ldr	r2, [pc, #116]	; (80080f0 <LPS22HH_0_Probe+0x16c>)
 800807c:	3303      	adds	r3, #3
 800807e:	491e      	ldr	r1, [pc, #120]	; (80080f8 <LPS22HH_0_Probe+0x174>)
 8008080:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8008084:	4b17      	ldr	r3, [pc, #92]	; (80080e4 <LPS22HH_0_Probe+0x160>)
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a15      	ldr	r2, [pc, #84]	; (80080e0 <LPS22HH_0_Probe+0x15c>)
 800808c:	6852      	ldr	r2, [r2, #4]
 800808e:	4610      	mov	r0, r2
 8008090:	4798      	blx	r3
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d003      	beq.n	80080a0 <LPS22HH_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008098:	f06f 0304 	mvn.w	r3, #4
 800809c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800809e:	e001      	b.n	80080a4 <LPS22HH_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80080a0:	2300      	movs	r3, #0
 80080a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 80080a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d107      	bne.n	80080ba <LPS22HH_0_Probe+0x136>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f003 0304 	and.w	r3, r3, #4
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d002      	beq.n	80080ba <LPS22HH_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80080b4:	f06f 0304 	mvn.w	r3, #4
 80080b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 80080ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3740      	adds	r7, #64	; 0x40
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	080015f5 	.word	0x080015f5
 80080c8:	08001659 	.word	0x08001659
 80080cc:	0800170d 	.word	0x0800170d
 80080d0:	080016a9 	.word	0x080016a9
 80080d4:	08001771 	.word	0x08001771
 80080d8:	20002af4 	.word	0x20002af4
 80080dc:	20002abc 	.word	0x20002abc
 80080e0:	2000be5c 	.word	0x2000be5c
 80080e4:	20002ab0 	.word	0x20002ab0
 80080e8:	200012cc 	.word	0x200012cc
 80080ec:	20001380 	.word	0x20001380
 80080f0:	20002a8c 	.word	0x20002a8c
 80080f4:	200012f0 	.word	0x200012f0
 80080f8:	200012dc 	.word	0x200012dc

080080fc <STTS751_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE
 * @retval BSP status
 */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b090      	sub	sp, #64	; 0x40
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8008104:	2300      	movs	r3, #0
 8008106:	63fb      	str	r3, [r7, #60]	; 0x3c
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 8008108:	2300      	movs	r3, #0
 800810a:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 800810c:	2395      	movs	r3, #149	; 0x95
 800810e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008112:	4b3f      	ldr	r3, [pc, #252]	; (8008210 <STTS751_0_Probe+0x114>)
 8008114:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8008116:	4b3f      	ldr	r3, [pc, #252]	; (8008214 <STTS751_0_Probe+0x118>)
 8008118:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800811a:	4b3f      	ldr	r3, [pc, #252]	; (8008218 <STTS751_0_Probe+0x11c>)
 800811c:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800811e:	4b3f      	ldr	r3, [pc, #252]	; (800821c <STTS751_0_Probe+0x120>)
 8008120:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008122:	4b3f      	ldr	r3, [pc, #252]	; (8008220 <STTS751_0_Probe+0x124>)
 8008124:	63bb      	str	r3, [r7, #56]	; 0x38

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 8008126:	f107 0320 	add.w	r3, r7, #32
 800812a:	4619      	mov	r1, r3
 800812c:	483d      	ldr	r0, [pc, #244]	; (8008224 <STTS751_0_Probe+0x128>)
 800812e:	f7ff f861 	bl	80071f4 <STTS751_RegisterBusIO>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d003      	beq.n	8008140 <STTS751_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008138:	f06f 0306 	mvn.w	r3, #6
 800813c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800813e:	e061      	b.n	8008204 <STTS751_0_Probe+0x108>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 8008140:	f107 031f 	add.w	r3, r7, #31
 8008144:	4619      	mov	r1, r3
 8008146:	4837      	ldr	r0, [pc, #220]	; (8008224 <STTS751_0_Probe+0x128>)
 8008148:	f7ff f8ef 	bl	800732a <STTS751_ReadID>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d003      	beq.n	800815a <STTS751_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008152:	f06f 0306 	mvn.w	r3, #6
 8008156:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008158:	e054      	b.n	8008204 <STTS751_0_Probe+0x108>
  }
  else if (id != STTS751_ID_MAN)
 800815a:	7ffb      	ldrb	r3, [r7, #31]
 800815c:	2b53      	cmp	r3, #83	; 0x53
 800815e:	d003      	beq.n	8008168 <STTS751_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008160:	f06f 0306 	mvn.w	r3, #6
 8008164:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008166:	e04d      	b.n	8008204 <STTS751_0_Probe+0x108>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 8008168:	f107 030c 	add.w	r3, r7, #12
 800816c:	4619      	mov	r1, r3
 800816e:	482d      	ldr	r0, [pc, #180]	; (8008224 <STTS751_0_Probe+0x128>)
 8008170:	f7ff f8f6 	bl	8007360 <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008174:	7b3b      	ldrb	r3, [r7, #12]
 8008176:	461a      	mov	r2, r3
 8008178:	7b7b      	ldrb	r3, [r7, #13]
 800817a:	005b      	lsls	r3, r3, #1
 800817c:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 800817e:	7bbb      	ldrb	r3, [r7, #14]
 8008180:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008182:	4313      	orrs	r3, r2
 8008184:	4a28      	ldr	r2, [pc, #160]	; (8008228 <STTS751_0_Probe+0x12c>)
 8008186:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 8008188:	4b28      	ldr	r3, [pc, #160]	; (800822c <STTS751_0_Probe+0x130>)
 800818a:	4a26      	ldr	r2, [pc, #152]	; (8008224 <STTS751_0_Probe+0x128>)
 800818c:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 800818e:	4b28      	ldr	r3, [pc, #160]	; (8008230 <STTS751_0_Probe+0x134>)
 8008190:	4a28      	ldr	r2, [pc, #160]	; (8008234 <STTS751_0_Probe+0x138>)
 8008192:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8008194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008196:	2b00      	cmp	r3, #0
 8008198:	d11e      	bne.n	80081d8 <STTS751_0_Probe+0xdc>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f003 0301 	and.w	r3, r3, #1
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d019      	beq.n	80081d8 <STTS751_0_Probe+0xdc>
 80081a4:	7b3b      	ldrb	r3, [r7, #12]
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d116      	bne.n	80081d8 <STTS751_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 80081aa:	4b23      	ldr	r3, [pc, #140]	; (8008238 <STTS751_0_Probe+0x13c>)
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	4a23      	ldr	r2, [pc, #140]	; (800823c <STTS751_0_Probe+0x140>)
 80081b0:	3306      	adds	r3, #6
 80081b2:	4923      	ldr	r1, [pc, #140]	; (8008240 <STTS751_0_Probe+0x144>)
 80081b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 80081b8:	4b1d      	ldr	r3, [pc, #116]	; (8008230 <STTS751_0_Probe+0x134>)
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a1b      	ldr	r2, [pc, #108]	; (800822c <STTS751_0_Probe+0x130>)
 80081c0:	6892      	ldr	r2, [r2, #8]
 80081c2:	4610      	mov	r0, r2
 80081c4:	4798      	blx	r3
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d003      	beq.n	80081d4 <STTS751_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80081cc:	f06f 0304 	mvn.w	r3, #4
 80081d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081d2:	e001      	b.n	80081d8 <STTS751_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80081d4:	2300      	movs	r3, #0
 80081d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 80081d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d107      	bne.n	80081ee <STTS751_0_Probe+0xf2>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f003 0304 	and.w	r3, r3, #4
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d002      	beq.n	80081ee <STTS751_0_Probe+0xf2>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80081e8:	f06f 0304 	mvn.w	r3, #4
 80081ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 80081ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d107      	bne.n	8008204 <STTS751_0_Probe+0x108>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f003 0302 	and.w	r3, r3, #2
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d002      	beq.n	8008204 <STTS751_0_Probe+0x108>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80081fe:	f06f 0304 	mvn.w	r3, #4
 8008202:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 8008204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008206:	4618      	mov	r0, r3
 8008208:	3740      	adds	r7, #64	; 0x40
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	080015f5 	.word	0x080015f5
 8008214:	08001659 	.word	0x08001659
 8008218:	0800170d 	.word	0x0800170d
 800821c:	080016a9 	.word	0x080016a9
 8008220:	08001771 	.word	0x08001771
 8008224:	20002b20 	.word	0x20002b20
 8008228:	20002abc 	.word	0x20002abc
 800822c:	2000be5c 	.word	0x2000be5c
 8008230:	20002ab0 	.word	0x20002ab0
 8008234:	2000135c 	.word	0x2000135c
 8008238:	20001380 	.word	0x20001380
 800823c:	20002a8c 	.word	0x20002a8c
 8008240:	2000136c 	.word	0x2000136c

08008244 <IKS01A3_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b08e      	sub	sp, #56	; 0x38
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800824e:	2300      	movs	r3, #0
 8008250:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8008252:	2301      	movs	r3, #1
 8008254:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8008256:	2300      	movs	r3, #0
 8008258:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2b02      	cmp	r3, #2
 800825e:	d06e      	beq.n	800833e <IKS01A3_MOTION_SENSOR_Init+0xfa>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b02      	cmp	r3, #2
 8008264:	f200 809d 	bhi.w	80083a2 <IKS01A3_MOTION_SENSOR_Init+0x15e>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d003      	beq.n	8008276 <IKS01A3_MOTION_SENSOR_Init+0x32>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d032      	beq.n	80082da <IKS01A3_MOTION_SENSOR_Init+0x96>
 8008274:	e095      	b.n	80083a2 <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8008276:	6838      	ldr	r0, [r7, #0]
 8008278:	f000 f90a 	bl	8008490 <LSM6DSO_0_Probe>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d002      	beq.n	8008288 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8008282:	f04f 33ff 	mov.w	r3, #4294967295
 8008286:	e0cc      	b.n	8008422 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008288:	4a68      	ldr	r2, [pc, #416]	; (800842c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	4967      	ldr	r1, [pc, #412]	; (8008430 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800829a:	f107 010c 	add.w	r1, r7, #12
 800829e:	4610      	mov	r0, r2
 80082a0:	4798      	blx	r3
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d002      	beq.n	80082ae <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80082a8:	f06f 0306 	mvn.w	r3, #6
 80082ac:	e0b9      	b.n	8008422 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80082ae:	7b3b      	ldrb	r3, [r7, #12]
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d103      	bne.n	80082bc <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 80082b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b6:	f043 0302 	orr.w	r3, r3, #2
 80082ba:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80082bc:	7b7b      	ldrb	r3, [r7, #13]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d103      	bne.n	80082ca <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 80082c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c4:	f043 0301 	orr.w	r3, r3, #1
 80082c8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80082ca:	7bbb      	ldrb	r3, [r7, #14]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d16c      	bne.n	80083aa <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 80082d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d2:	f043 0304 	orr.w	r3, r3, #4
 80082d6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80082d8:	e067      	b.n	80083aa <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 80082da:	6838      	ldr	r0, [r7, #0]
 80082dc:	f000 f994 	bl	8008608 <LIS2DW12_0_Probe>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d002      	beq.n	80082ec <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 80082e6:	f04f 33ff 	mov.w	r3, #4294967295
 80082ea:	e09a      	b.n	8008422 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80082ec:	4a4f      	ldr	r2, [pc, #316]	; (800842c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	494e      	ldr	r1, [pc, #312]	; (8008430 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80082fe:	f107 010c 	add.w	r1, r7, #12
 8008302:	4610      	mov	r0, r2
 8008304:	4798      	blx	r3
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d002      	beq.n	8008312 <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800830c:	f06f 0306 	mvn.w	r3, #6
 8008310:	e087      	b.n	8008422 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8008312:	7b3b      	ldrb	r3, [r7, #12]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d103      	bne.n	8008320 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8008318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831a:	f043 0302 	orr.w	r3, r3, #2
 800831e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8008320:	7b7b      	ldrb	r3, [r7, #13]
 8008322:	2b01      	cmp	r3, #1
 8008324:	d103      	bne.n	800832e <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8008326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008328:	f043 0301 	orr.w	r3, r3, #1
 800832c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800832e:	7bbb      	ldrb	r3, [r7, #14]
 8008330:	2b01      	cmp	r3, #1
 8008332:	d13c      	bne.n	80083ae <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8008334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008336:	f043 0304 	orr.w	r3, r3, #4
 800833a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800833c:	e037      	b.n	80083ae <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 800833e:	6838      	ldr	r0, [r7, #0]
 8008340:	f000 fa06 	bl	8008750 <LIS2MDL_0_Probe>
 8008344:	4603      	mov	r3, r0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d002      	beq.n	8008350 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 800834a:	f04f 33ff 	mov.w	r3, #4294967295
 800834e:	e068      	b.n	8008422 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008350:	4a36      	ldr	r2, [pc, #216]	; (800842c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	4935      	ldr	r1, [pc, #212]	; (8008430 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008362:	f107 010c 	add.w	r1, r7, #12
 8008366:	4610      	mov	r0, r2
 8008368:	4798      	blx	r3
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d002      	beq.n	8008376 <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008370:	f06f 0306 	mvn.w	r3, #6
 8008374:	e055      	b.n	8008422 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8008376:	7b3b      	ldrb	r3, [r7, #12]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d103      	bne.n	8008384 <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 800837c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837e:	f043 0302 	orr.w	r3, r3, #2
 8008382:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8008384:	7b7b      	ldrb	r3, [r7, #13]
 8008386:	2b01      	cmp	r3, #1
 8008388:	d103      	bne.n	8008392 <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 800838a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838c:	f043 0301 	orr.w	r3, r3, #1
 8008390:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8008392:	7bbb      	ldrb	r3, [r7, #14]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d10c      	bne.n	80083b2 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8008398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839a:	f043 0304 	orr.w	r3, r3, #4
 800839e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80083a0:	e007      	b.n	80083b2 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80083a2:	f06f 0301 	mvn.w	r3, #1
 80083a6:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80083a8:	e004      	b.n	80083b4 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80083aa:	bf00      	nop
 80083ac:	e002      	b.n	80083b4 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80083ae:	bf00      	nop
 80083b0:	e000      	b.n	80083b4 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80083b2:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80083b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d001      	beq.n	80083be <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 80083ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083bc:	e031      	b.n	8008422 <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 80083be:	2300      	movs	r3, #0
 80083c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083c2:	e02a      	b.n	800841a <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80083c4:	683a      	ldr	r2, [r7, #0]
 80083c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c8:	4013      	ands	r3, r2
 80083ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d11e      	bne.n	800840e <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 80083d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d4:	4013      	ands	r3, r2
 80083d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083d8:	429a      	cmp	r2, r3
 80083da:	d118      	bne.n	800840e <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80083dc:	4a15      	ldr	r2, [pc, #84]	; (8008434 <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 80083de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80083e4:	4814      	ldr	r0, [pc, #80]	; (8008438 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	4613      	mov	r3, r2
 80083ea:	005b      	lsls	r3, r3, #1
 80083ec:	4413      	add	r3, r2
 80083ee:	440b      	add	r3, r1
 80083f0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	490e      	ldr	r1, [pc, #56]	; (8008430 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80083fe:	4610      	mov	r0, r2
 8008400:	4798      	blx	r3
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d002      	beq.n	800840e <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8008408:	f06f 0304 	mvn.w	r3, #4
 800840c:	e009      	b.n	8008422 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 800840e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008410:	005b      	lsls	r3, r3, #1
 8008412:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8008414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008416:	3301      	adds	r3, #1
 8008418:	62fb      	str	r3, [r7, #44]	; 0x2c
 800841a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841c:	2b02      	cmp	r3, #2
 800841e:	d9d1      	bls.n	80083c4 <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8008420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008422:	4618      	mov	r0, r3
 8008424:	3738      	adds	r7, #56	; 0x38
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	20002b74 	.word	0x20002b74
 8008430:	2000be68 	.word	0x2000be68
 8008434:	20001394 	.word	0x20001394
 8008438:	20002b50 	.word	0x20002b50

0800843c <IKS01A3_MOTION_SENSOR_GetCapabilities>:
 * @param  Instance Motion sensor instance
 * @param  Capabilities pointer to motion sensor capabilities
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_GetCapabilities(uint32_t Instance, IKS01A3_MOTION_SENSOR_Capabilities_t *Capabilities)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2b02      	cmp	r3, #2
 800844a:	d903      	bls.n	8008454 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800844c:	f06f 0301 	mvn.w	r3, #1
 8008450:	60fb      	str	r3, [r7, #12]
 8008452:	e014      	b.n	800847e <IKS01A3_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 8008454:	4a0c      	ldr	r2, [pc, #48]	; (8008488 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x4c>)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	490b      	ldr	r1, [pc, #44]	; (800848c <IKS01A3_MOTION_SENSOR_GetCapabilities+0x50>)
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008466:	6839      	ldr	r1, [r7, #0]
 8008468:	4610      	mov	r0, r2
 800846a:	4798      	blx	r3
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d003      	beq.n	800847a <IKS01A3_MOTION_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008472:	f06f 0306 	mvn.w	r3, #6
 8008476:	60fb      	str	r3, [r7, #12]
 8008478:	e001      	b.n	800847e <IKS01A3_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800847a:	2300      	movs	r3, #0
 800847c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800847e:	68fb      	ldr	r3, [r7, #12]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	20002b74 	.word	0x20002b74
 800848c:	2000be68 	.word	0x2000be68

08008490 <LSM6DSO_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b092      	sub	sp, #72	; 0x48
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8008498:	2300      	movs	r3, #0
 800849a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 800849c:	2300      	movs	r3, #0
 800849e:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 80084a0:	23d7      	movs	r3, #215	; 0xd7
 80084a2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 80084a6:	4b4a      	ldr	r3, [pc, #296]	; (80085d0 <LSM6DSO_0_Probe+0x140>)
 80084a8:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80084aa:	4b4a      	ldr	r3, [pc, #296]	; (80085d4 <LSM6DSO_0_Probe+0x144>)
 80084ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80084ae:	4b4a      	ldr	r3, [pc, #296]	; (80085d8 <LSM6DSO_0_Probe+0x148>)
 80084b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80084b2:	4b4a      	ldr	r3, [pc, #296]	; (80085dc <LSM6DSO_0_Probe+0x14c>)
 80084b4:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 80084b6:	4b4a      	ldr	r3, [pc, #296]	; (80085e0 <LSM6DSO_0_Probe+0x150>)
 80084b8:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 80084ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80084be:	4619      	mov	r1, r3
 80084c0:	4848      	ldr	r0, [pc, #288]	; (80085e4 <LSM6DSO_0_Probe+0x154>)
 80084c2:	f7fc ff2f 	bl	8005324 <LSM6DSO_RegisterBusIO>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d003      	beq.n	80084d4 <LSM6DSO_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80084cc:	f06f 0306 	mvn.w	r3, #6
 80084d0:	647b      	str	r3, [r7, #68]	; 0x44
 80084d2:	e077      	b.n	80085c4 <LSM6DSO_0_Probe+0x134>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 80084d4:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80084d8:	4619      	mov	r1, r3
 80084da:	4842      	ldr	r0, [pc, #264]	; (80085e4 <LSM6DSO_0_Probe+0x154>)
 80084dc:	f7fd f824 	bl	8005528 <LSM6DSO_ReadID>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d003      	beq.n	80084ee <LSM6DSO_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80084e6:	f06f 0306 	mvn.w	r3, #6
 80084ea:	647b      	str	r3, [r7, #68]	; 0x44
 80084ec:	e06a      	b.n	80085c4 <LSM6DSO_0_Probe+0x134>
  }
  else if (id != LSM6DSO_ID)
 80084ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084f2:	2b6c      	cmp	r3, #108	; 0x6c
 80084f4:	d003      	beq.n	80084fe <LSM6DSO_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80084f6:	f06f 0306 	mvn.w	r3, #6
 80084fa:	647b      	str	r3, [r7, #68]	; 0x44
 80084fc:	e062      	b.n	80085c4 <LSM6DSO_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 80084fe:	f107 0308 	add.w	r3, r7, #8
 8008502:	4619      	mov	r1, r3
 8008504:	4837      	ldr	r0, [pc, #220]	; (80085e4 <LSM6DSO_0_Probe+0x154>)
 8008506:	f7fd f825 	bl	8005554 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800850a:	7a7b      	ldrb	r3, [r7, #9]
 800850c:	461a      	mov	r2, r3
 800850e:	7a3b      	ldrb	r3, [r7, #8]
 8008510:	005b      	lsls	r3, r3, #1
 8008512:	431a      	orrs	r2, r3
 8008514:	7abb      	ldrb	r3, [r7, #10]
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	4313      	orrs	r3, r2
 800851a:	4a33      	ldr	r2, [pc, #204]	; (80085e8 <LSM6DSO_0_Probe+0x158>)
 800851c:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 800851e:	4b33      	ldr	r3, [pc, #204]	; (80085ec <LSM6DSO_0_Probe+0x15c>)
 8008520:	4a30      	ldr	r2, [pc, #192]	; (80085e4 <LSM6DSO_0_Probe+0x154>)
 8008522:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8008524:	4b32      	ldr	r3, [pc, #200]	; (80085f0 <LSM6DSO_0_Probe+0x160>)
 8008526:	4a33      	ldr	r2, [pc, #204]	; (80085f4 <LSM6DSO_0_Probe+0x164>)
 8008528:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800852a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800852c:	2b00      	cmp	r3, #0
 800852e:	d11d      	bne.n	800856c <LSM6DSO_0_Probe+0xdc>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f003 0301 	and.w	r3, r3, #1
 8008536:	2b00      	cmp	r3, #0
 8008538:	d018      	beq.n	800856c <LSM6DSO_0_Probe+0xdc>
 800853a:	7a7b      	ldrb	r3, [r7, #9]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d115      	bne.n	800856c <LSM6DSO_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8008540:	4b2d      	ldr	r3, [pc, #180]	; (80085f8 <LSM6DSO_0_Probe+0x168>)
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	4a2d      	ldr	r2, [pc, #180]	; (80085fc <LSM6DSO_0_Probe+0x16c>)
 8008546:	492e      	ldr	r1, [pc, #184]	; (8008600 <LSM6DSO_0_Probe+0x170>)
 8008548:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800854c:	4b28      	ldr	r3, [pc, #160]	; (80085f0 <LSM6DSO_0_Probe+0x160>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a26      	ldr	r2, [pc, #152]	; (80085ec <LSM6DSO_0_Probe+0x15c>)
 8008554:	6812      	ldr	r2, [r2, #0]
 8008556:	4610      	mov	r0, r2
 8008558:	4798      	blx	r3
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d003      	beq.n	8008568 <LSM6DSO_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008560:	f06f 0304 	mvn.w	r3, #4
 8008564:	647b      	str	r3, [r7, #68]	; 0x44
 8008566:	e001      	b.n	800856c <LSM6DSO_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008568:	2300      	movs	r3, #0
 800856a:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800856c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800856e:	2b00      	cmp	r3, #0
 8008570:	d11d      	bne.n	80085ae <LSM6DSO_0_Probe+0x11e>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f003 0302 	and.w	r3, r3, #2
 8008578:	2b00      	cmp	r3, #0
 800857a:	d018      	beq.n	80085ae <LSM6DSO_0_Probe+0x11e>
 800857c:	7a3b      	ldrb	r3, [r7, #8]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d115      	bne.n	80085ae <LSM6DSO_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008582:	4b1d      	ldr	r3, [pc, #116]	; (80085f8 <LSM6DSO_0_Probe+0x168>)
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	4a1d      	ldr	r2, [pc, #116]	; (80085fc <LSM6DSO_0_Probe+0x16c>)
 8008588:	491e      	ldr	r1, [pc, #120]	; (8008604 <LSM6DSO_0_Probe+0x174>)
 800858a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800858e:	4b18      	ldr	r3, [pc, #96]	; (80085f0 <LSM6DSO_0_Probe+0x160>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a15      	ldr	r2, [pc, #84]	; (80085ec <LSM6DSO_0_Probe+0x15c>)
 8008596:	6812      	ldr	r2, [r2, #0]
 8008598:	4610      	mov	r0, r2
 800859a:	4798      	blx	r3
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d003      	beq.n	80085aa <LSM6DSO_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80085a2:	f06f 0304 	mvn.w	r3, #4
 80085a6:	647b      	str	r3, [r7, #68]	; 0x44
 80085a8:	e001      	b.n	80085ae <LSM6DSO_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80085aa:	2300      	movs	r3, #0
 80085ac:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80085ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d107      	bne.n	80085c4 <LSM6DSO_0_Probe+0x134>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f003 0304 	and.w	r3, r3, #4
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d002      	beq.n	80085c4 <LSM6DSO_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80085be:	f06f 0304 	mvn.w	r3, #4
 80085c2:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 80085c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3748      	adds	r7, #72	; 0x48
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	080015f5 	.word	0x080015f5
 80085d4:	08001659 	.word	0x08001659
 80085d8:	0800170d 	.word	0x0800170d
 80085dc:	080016a9 	.word	0x080016a9
 80085e0:	08001771 	.word	0x08001771
 80085e4:	20002b8c 	.word	0x20002b8c
 80085e8:	20002b80 	.word	0x20002b80
 80085ec:	2000be68 	.word	0x2000be68
 80085f0:	20002b74 	.word	0x20002b74
 80085f4:	20001304 	.word	0x20001304
 80085f8:	20001394 	.word	0x20001394
 80085fc:	20002b50 	.word	0x20002b50
 8008600:	20001338 	.word	0x20001338
 8008604:	20001314 	.word	0x20001314

08008608 <LIS2DW12_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval BSP status
 */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b092      	sub	sp, #72	; 0x48
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8008610:	2300      	movs	r3, #0
 8008612:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8008614:	2300      	movs	r3, #0
 8008616:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8008618:	2333      	movs	r3, #51	; 0x33
 800861a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 800861e:	4b3f      	ldr	r3, [pc, #252]	; (800871c <LIS2DW12_0_Probe+0x114>)
 8008620:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8008622:	4b3f      	ldr	r3, [pc, #252]	; (8008720 <LIS2DW12_0_Probe+0x118>)
 8008624:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8008626:	4b3f      	ldr	r3, [pc, #252]	; (8008724 <LIS2DW12_0_Probe+0x11c>)
 8008628:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800862a:	4b3f      	ldr	r3, [pc, #252]	; (8008728 <LIS2DW12_0_Probe+0x120>)
 800862c:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 800862e:	4b3f      	ldr	r3, [pc, #252]	; (800872c <LIS2DW12_0_Probe+0x124>)
 8008630:	643b      	str	r3, [r7, #64]	; 0x40

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8008632:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008636:	4619      	mov	r1, r3
 8008638:	483d      	ldr	r0, [pc, #244]	; (8008730 <LIS2DW12_0_Probe+0x128>)
 800863a:	f7fa f85f 	bl	80026fc <LIS2DW12_RegisterBusIO>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d003      	beq.n	800864c <LIS2DW12_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008644:	f06f 0306 	mvn.w	r3, #6
 8008648:	647b      	str	r3, [r7, #68]	; 0x44
 800864a:	e062      	b.n	8008712 <LIS2DW12_0_Probe+0x10a>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 800864c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8008650:	4619      	mov	r1, r3
 8008652:	4837      	ldr	r0, [pc, #220]	; (8008730 <LIS2DW12_0_Probe+0x128>)
 8008654:	f7fa f93c 	bl	80028d0 <LIS2DW12_ReadID>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d003      	beq.n	8008666 <LIS2DW12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800865e:	f06f 0306 	mvn.w	r3, #6
 8008662:	647b      	str	r3, [r7, #68]	; 0x44
 8008664:	e055      	b.n	8008712 <LIS2DW12_0_Probe+0x10a>
  }
  else if (id != LIS2DW12_ID)
 8008666:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800866a:	2b44      	cmp	r3, #68	; 0x44
 800866c:	d003      	beq.n	8008676 <LIS2DW12_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800866e:	f06f 0306 	mvn.w	r3, #6
 8008672:	647b      	str	r3, [r7, #68]	; 0x44
 8008674:	e04d      	b.n	8008712 <LIS2DW12_0_Probe+0x10a>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8008676:	f107 0308 	add.w	r3, r7, #8
 800867a:	4619      	mov	r1, r3
 800867c:	482c      	ldr	r0, [pc, #176]	; (8008730 <LIS2DW12_0_Probe+0x128>)
 800867e:	f7fa f93d 	bl	80028fc <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8008682:	7a7b      	ldrb	r3, [r7, #9]
 8008684:	461a      	mov	r2, r3
 8008686:	7a3b      	ldrb	r3, [r7, #8]
 8008688:	005b      	lsls	r3, r3, #1
 800868a:	431a      	orrs	r2, r3
 800868c:	7abb      	ldrb	r3, [r7, #10]
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	4313      	orrs	r3, r2
 8008692:	4a28      	ldr	r2, [pc, #160]	; (8008734 <LIS2DW12_0_Probe+0x12c>)
 8008694:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 8008696:	4b28      	ldr	r3, [pc, #160]	; (8008738 <LIS2DW12_0_Probe+0x130>)
 8008698:	4a25      	ldr	r2, [pc, #148]	; (8008730 <LIS2DW12_0_Probe+0x128>)
 800869a:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 800869c:	4b27      	ldr	r3, [pc, #156]	; (800873c <LIS2DW12_0_Probe+0x134>)
 800869e:	4a28      	ldr	r2, [pc, #160]	; (8008740 <LIS2DW12_0_Probe+0x138>)
 80086a0:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80086a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d11e      	bne.n	80086e6 <LIS2DW12_0_Probe+0xde>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f003 0302 	and.w	r3, r3, #2
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d019      	beq.n	80086e6 <LIS2DW12_0_Probe+0xde>
 80086b2:	7a3b      	ldrb	r3, [r7, #8]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d116      	bne.n	80086e6 <LIS2DW12_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80086b8:	4b22      	ldr	r3, [pc, #136]	; (8008744 <LIS2DW12_0_Probe+0x13c>)
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	4a22      	ldr	r2, [pc, #136]	; (8008748 <LIS2DW12_0_Probe+0x140>)
 80086be:	3303      	adds	r3, #3
 80086c0:	4922      	ldr	r1, [pc, #136]	; (800874c <LIS2DW12_0_Probe+0x144>)
 80086c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 80086c6:	4b1d      	ldr	r3, [pc, #116]	; (800873c <LIS2DW12_0_Probe+0x134>)
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a1a      	ldr	r2, [pc, #104]	; (8008738 <LIS2DW12_0_Probe+0x130>)
 80086ce:	6852      	ldr	r2, [r2, #4]
 80086d0:	4610      	mov	r0, r2
 80086d2:	4798      	blx	r3
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <LIS2DW12_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80086da:	f06f 0304 	mvn.w	r3, #4
 80086de:	647b      	str	r3, [r7, #68]	; 0x44
 80086e0:	e001      	b.n	80086e6 <LIS2DW12_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80086e2:	2300      	movs	r3, #0
 80086e4:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80086e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d107      	bne.n	80086fc <LIS2DW12_0_Probe+0xf4>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f003 0301 	and.w	r3, r3, #1
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d002      	beq.n	80086fc <LIS2DW12_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80086f6:	f06f 0304 	mvn.w	r3, #4
 80086fa:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80086fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d107      	bne.n	8008712 <LIS2DW12_0_Probe+0x10a>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f003 0304 	and.w	r3, r3, #4
 8008708:	2b00      	cmp	r3, #0
 800870a:	d002      	beq.n	8008712 <LIS2DW12_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800870c:	f06f 0304 	mvn.w	r3, #4
 8008710:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8008712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8008714:	4618      	mov	r0, r3
 8008716:	3748      	adds	r7, #72	; 0x48
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}
 800871c:	080015f5 	.word	0x080015f5
 8008720:	08001659 	.word	0x08001659
 8008724:	0800170d 	.word	0x0800170d
 8008728:	080016a9 	.word	0x080016a9
 800872c:	08001771 	.word	0x08001771
 8008730:	20002bbc 	.word	0x20002bbc
 8008734:	20002b80 	.word	0x20002b80
 8008738:	2000be68 	.word	0x2000be68
 800873c:	20002b74 	.word	0x20002b74
 8008740:	20001264 	.word	0x20001264
 8008744:	20001394 	.word	0x20001394
 8008748:	20002b50 	.word	0x20002b50
 800874c:	20001274 	.word	0x20001274

08008750 <LIS2MDL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval BSP status
 */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b092      	sub	sp, #72	; 0x48
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8008758:	2300      	movs	r3, #0
 800875a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800875c:	2300      	movs	r3, #0
 800875e:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8008760:	233d      	movs	r3, #61	; 0x3d
 8008762:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008766:	4b3f      	ldr	r3, [pc, #252]	; (8008864 <LIS2MDL_0_Probe+0x114>)
 8008768:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800876a:	4b3f      	ldr	r3, [pc, #252]	; (8008868 <LIS2MDL_0_Probe+0x118>)
 800876c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800876e:	4b3f      	ldr	r3, [pc, #252]	; (800886c <LIS2MDL_0_Probe+0x11c>)
 8008770:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8008772:	4b3f      	ldr	r3, [pc, #252]	; (8008870 <LIS2MDL_0_Probe+0x120>)
 8008774:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008776:	4b3f      	ldr	r3, [pc, #252]	; (8008874 <LIS2MDL_0_Probe+0x124>)
 8008778:	643b      	str	r3, [r7, #64]	; 0x40

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800877a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800877e:	4619      	mov	r1, r3
 8008780:	483d      	ldr	r0, [pc, #244]	; (8008878 <LIS2MDL_0_Probe+0x128>)
 8008782:	f7fb fb0b 	bl	8003d9c <LIS2MDL_RegisterBusIO>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d003      	beq.n	8008794 <LIS2MDL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800878c:	f06f 0306 	mvn.w	r3, #6
 8008790:	647b      	str	r3, [r7, #68]	; 0x44
 8008792:	e062      	b.n	800885a <LIS2MDL_0_Probe+0x10a>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8008794:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8008798:	4619      	mov	r1, r3
 800879a:	4837      	ldr	r0, [pc, #220]	; (8008878 <LIS2MDL_0_Probe+0x128>)
 800879c:	f7fb fbc7 	bl	8003f2e <LIS2MDL_ReadID>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d003      	beq.n	80087ae <LIS2MDL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80087a6:	f06f 0306 	mvn.w	r3, #6
 80087aa:	647b      	str	r3, [r7, #68]	; 0x44
 80087ac:	e055      	b.n	800885a <LIS2MDL_0_Probe+0x10a>
  }
  else if (id != LIS2MDL_ID)
 80087ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087b2:	2b40      	cmp	r3, #64	; 0x40
 80087b4:	d003      	beq.n	80087be <LIS2MDL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80087b6:	f06f 0306 	mvn.w	r3, #6
 80087ba:	647b      	str	r3, [r7, #68]	; 0x44
 80087bc:	e04d      	b.n	800885a <LIS2MDL_0_Probe+0x10a>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 80087be:	f107 0308 	add.w	r3, r7, #8
 80087c2:	4619      	mov	r1, r3
 80087c4:	482c      	ldr	r0, [pc, #176]	; (8008878 <LIS2MDL_0_Probe+0x128>)
 80087c6:	f7fb fbc9 	bl	8003f5c <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80087ca:	7a7b      	ldrb	r3, [r7, #9]
 80087cc:	461a      	mov	r2, r3
 80087ce:	7a3b      	ldrb	r3, [r7, #8]
 80087d0:	005b      	lsls	r3, r3, #1
 80087d2:	431a      	orrs	r2, r3
 80087d4:	7abb      	ldrb	r3, [r7, #10]
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	4313      	orrs	r3, r2
 80087da:	4a28      	ldr	r2, [pc, #160]	; (800887c <LIS2MDL_0_Probe+0x12c>)
 80087dc:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 80087de:	4b28      	ldr	r3, [pc, #160]	; (8008880 <LIS2MDL_0_Probe+0x130>)
 80087e0:	4a25      	ldr	r2, [pc, #148]	; (8008878 <LIS2MDL_0_Probe+0x128>)
 80087e2:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 80087e4:	4b27      	ldr	r3, [pc, #156]	; (8008884 <LIS2MDL_0_Probe+0x134>)
 80087e6:	4a28      	ldr	r2, [pc, #160]	; (8008888 <LIS2MDL_0_Probe+0x138>)
 80087e8:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 80087ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d11e      	bne.n	800882e <LIS2MDL_0_Probe+0xde>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f003 0304 	and.w	r3, r3, #4
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d019      	beq.n	800882e <LIS2MDL_0_Probe+0xde>
 80087fa:	7abb      	ldrb	r3, [r7, #10]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d116      	bne.n	800882e <LIS2MDL_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008800:	4b22      	ldr	r3, [pc, #136]	; (800888c <LIS2MDL_0_Probe+0x13c>)
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	4a22      	ldr	r2, [pc, #136]	; (8008890 <LIS2MDL_0_Probe+0x140>)
 8008806:	3306      	adds	r3, #6
 8008808:	4922      	ldr	r1, [pc, #136]	; (8008894 <LIS2MDL_0_Probe+0x144>)
 800880a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 800880e:	4b1d      	ldr	r3, [pc, #116]	; (8008884 <LIS2MDL_0_Probe+0x134>)
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a1a      	ldr	r2, [pc, #104]	; (8008880 <LIS2MDL_0_Probe+0x130>)
 8008816:	6892      	ldr	r2, [r2, #8]
 8008818:	4610      	mov	r0, r2
 800881a:	4798      	blx	r3
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d003      	beq.n	800882a <LIS2MDL_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008822:	f06f 0304 	mvn.w	r3, #4
 8008826:	647b      	str	r3, [r7, #68]	; 0x44
 8008828:	e001      	b.n	800882e <LIS2MDL_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800882a:	2300      	movs	r3, #0
 800882c:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800882e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008830:	2b00      	cmp	r3, #0
 8008832:	d107      	bne.n	8008844 <LIS2MDL_0_Probe+0xf4>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f003 0302 	and.w	r3, r3, #2
 800883a:	2b00      	cmp	r3, #0
 800883c:	d002      	beq.n	8008844 <LIS2MDL_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800883e:	f06f 0304 	mvn.w	r3, #4
 8008842:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8008844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008846:	2b00      	cmp	r3, #0
 8008848:	d107      	bne.n	800885a <LIS2MDL_0_Probe+0x10a>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f003 0301 	and.w	r3, r3, #1
 8008850:	2b00      	cmp	r3, #0
 8008852:	d002      	beq.n	800885a <LIS2MDL_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008854:	f06f 0304 	mvn.w	r3, #4
 8008858:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 800885a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800885c:	4618      	mov	r0, r3
 800885e:	3748      	adds	r7, #72	; 0x48
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	080015f5 	.word	0x080015f5
 8008868:	08001659 	.word	0x08001659
 800886c:	0800170d 	.word	0x0800170d
 8008870:	080016a9 	.word	0x080016a9
 8008874:	08001771 	.word	0x08001771
 8008878:	20002bf0 	.word	0x20002bf0
 800887c:	20002b80 	.word	0x20002b80
 8008880:	2000be68 	.word	0x2000be68
 8008884:	20002b74 	.word	0x20002b74
 8008888:	20001298 	.word	0x20001298
 800888c:	20001394 	.word	0x20001394
 8008890:	20002b50 	.word	0x20002b50
 8008894:	200012a8 	.word	0x200012a8

08008898 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	4603      	mov	r3, r0
 80088a0:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 80088a2:	79fb      	ldrb	r3, [r7, #7]
 80088a4:	4a04      	ldr	r2, [pc, #16]	; (80088b8 <BSP_LED_Init+0x20>)
 80088a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088aa:	4798      	blx	r3
  return BSP_ERROR_NONE;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3708      	adds	r7, #8
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	0801d080 	.word	0x0801d080

080088bc <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	4603      	mov	r3, r0
 80088c4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 80088c6:	79fb      	ldrb	r3, [r7, #7]
 80088c8:	4a06      	ldr	r2, [pc, #24]	; (80088e4 <BSP_LED_On+0x28>)
 80088ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088ce:	2120      	movs	r1, #32
 80088d0:	2201      	movs	r2, #1
 80088d2:	4618      	mov	r0, r3
 80088d4:	f000 fdc6 	bl	8009464 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	200013a8 	.word	0x200013a8

080088e8 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	4603      	mov	r3, r0
 80088f0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 80088f2:	79fb      	ldrb	r3, [r7, #7]
 80088f4:	4a06      	ldr	r2, [pc, #24]	; (8008910 <BSP_LED_Off+0x28>)
 80088f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088fa:	2120      	movs	r1, #32
 80088fc:	2200      	movs	r2, #0
 80088fe:	4618      	mov	r0, r3
 8008900:	f000 fdb0 	bl	8009464 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3708      	adds	r7, #8
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	200013a8 	.word	0x200013a8

08008914 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8008914:	b580      	push	{r7, lr}
 8008916:	b088      	sub	sp, #32
 8008918:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800891a:	2300      	movs	r3, #0
 800891c:	60bb      	str	r3, [r7, #8]
 800891e:	4b1c      	ldr	r3, [pc, #112]	; (8008990 <LED_USER_GPIO_Init+0x7c>)
 8008920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008922:	4a1b      	ldr	r2, [pc, #108]	; (8008990 <LED_USER_GPIO_Init+0x7c>)
 8008924:	f043 0301 	orr.w	r3, r3, #1
 8008928:	6313      	str	r3, [r2, #48]	; 0x30
 800892a:	4b19      	ldr	r3, [pc, #100]	; (8008990 <LED_USER_GPIO_Init+0x7c>)
 800892c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892e:	f003 0301 	and.w	r3, r3, #1
 8008932:	60bb      	str	r3, [r7, #8]
 8008934:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008936:	f107 030c 	add.w	r3, r7, #12
 800893a:	2200      	movs	r2, #0
 800893c:	601a      	str	r2, [r3, #0]
 800893e:	605a      	str	r2, [r3, #4]
 8008940:	609a      	str	r2, [r3, #8]
 8008942:	60da      	str	r2, [r3, #12]
 8008944:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008946:	2300      	movs	r3, #0
 8008948:	607b      	str	r3, [r7, #4]
 800894a:	4b11      	ldr	r3, [pc, #68]	; (8008990 <LED_USER_GPIO_Init+0x7c>)
 800894c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800894e:	4a10      	ldr	r2, [pc, #64]	; (8008990 <LED_USER_GPIO_Init+0x7c>)
 8008950:	f043 0301 	orr.w	r3, r3, #1
 8008954:	6313      	str	r3, [r2, #48]	; 0x30
 8008956:	4b0e      	ldr	r3, [pc, #56]	; (8008990 <LED_USER_GPIO_Init+0x7c>)
 8008958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800895a:	f003 0301 	and.w	r3, r3, #1
 800895e:	607b      	str	r3, [r7, #4]
 8008960:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8008962:	2200      	movs	r2, #0
 8008964:	2120      	movs	r1, #32
 8008966:	480b      	ldr	r0, [pc, #44]	; (8008994 <LED_USER_GPIO_Init+0x80>)
 8008968:	f000 fd7c 	bl	8009464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 800896c:	2320      	movs	r3, #32
 800896e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008970:	2301      	movs	r3, #1
 8008972:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008974:	2300      	movs	r3, #0
 8008976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008978:	2300      	movs	r3, #0
 800897a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 800897c:	f107 030c 	add.w	r3, r7, #12
 8008980:	4619      	mov	r1, r3
 8008982:	4804      	ldr	r0, [pc, #16]	; (8008994 <LED_USER_GPIO_Init+0x80>)
 8008984:	f000 faee 	bl	8008f64 <HAL_GPIO_Init>

}
 8008988:	bf00      	nop
 800898a:	3720      	adds	r7, #32
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	40023800 	.word	0x40023800
 8008994:	40020000 	.word	0x40020000

08008998 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	4603      	mov	r3, r0
 80089a0:	460a      	mov	r2, r1
 80089a2:	71fb      	strb	r3, [r7, #7]
 80089a4:	4613      	mov	r3, r2
 80089a6:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80089a8:	2300      	movs	r3, #0
 80089aa:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 80089ac:	79fb      	ldrb	r3, [r7, #7]
 80089ae:	4a1f      	ldr	r2, [pc, #124]	; (8008a2c <BSP_PB_Init+0x94>)
 80089b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089b4:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 80089b6:	79bb      	ldrb	r3, [r7, #6]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d132      	bne.n	8008a22 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 80089bc:	79fb      	ldrb	r3, [r7, #7]
 80089be:	00db      	lsls	r3, r3, #3
 80089c0:	4a1b      	ldr	r2, [pc, #108]	; (8008a30 <BSP_PB_Init+0x98>)
 80089c2:	441a      	add	r2, r3
 80089c4:	79fb      	ldrb	r3, [r7, #7]
 80089c6:	491b      	ldr	r1, [pc, #108]	; (8008a34 <BSP_PB_Init+0x9c>)
 80089c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80089cc:	4619      	mov	r1, r3
 80089ce:	4610      	mov	r0, r2
 80089d0:	f000 fab4 	bl	8008f3c <HAL_EXTI_GetHandle>
 80089d4:	4603      	mov	r3, r0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d003      	beq.n	80089e2 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80089da:	f06f 0303 	mvn.w	r3, #3
 80089de:	60fb      	str	r3, [r7, #12]
 80089e0:	e01f      	b.n	8008a22 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 80089e2:	79fb      	ldrb	r3, [r7, #7]
 80089e4:	00db      	lsls	r3, r3, #3
 80089e6:	4a12      	ldr	r2, [pc, #72]	; (8008a30 <BSP_PB_Init+0x98>)
 80089e8:	1898      	adds	r0, r3, r2
 80089ea:	79fb      	ldrb	r3, [r7, #7]
 80089ec:	4a12      	ldr	r2, [pc, #72]	; (8008a38 <BSP_PB_Init+0xa0>)
 80089ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089f2:	461a      	mov	r2, r3
 80089f4:	2100      	movs	r1, #0
 80089f6:	f000 fa87 	bl	8008f08 <HAL_EXTI_RegisterCallback>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d003      	beq.n	8008a08 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8008a00:	f06f 0303 	mvn.w	r3, #3
 8008a04:	60fb      	str	r3, [r7, #12]
 8008a06:	e00c      	b.n	8008a22 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8008a08:	2028      	movs	r0, #40	; 0x28
 8008a0a:	79fb      	ldrb	r3, [r7, #7]
 8008a0c:	4a0b      	ldr	r2, [pc, #44]	; (8008a3c <BSP_PB_Init+0xa4>)
 8008a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a12:	2200      	movs	r2, #0
 8008a14:	4619      	mov	r1, r3
 8008a16:	f000 fa31 	bl	8008e7c <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8008a1a:	2328      	movs	r3, #40	; 0x28
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f000 fa49 	bl	8008eb4 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8008a22:	68fb      	ldr	r3, [r7, #12]
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	0801d084 	.word	0x0801d084
 8008a30:	200013b0 	.word	0x200013b0
 8008a34:	0801d088 	.word	0x0801d088
 8008a38:	0801d08c 	.word	0x0801d08c
 8008a3c:	0801d090 	.word	0x0801d090

08008a40 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	4603      	mov	r3, r0
 8008a48:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8008a4a:	79fb      	ldrb	r3, [r7, #7]
 8008a4c:	4a09      	ldr	r2, [pc, #36]	; (8008a74 <BSP_PB_GetState+0x34>)
 8008a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008a56:	4611      	mov	r1, r2
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f000 fceb 	bl	8009434 <HAL_GPIO_ReadPin>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	bf0c      	ite	eq
 8008a64:	2301      	moveq	r3, #1
 8008a66:	2300      	movne	r3, #0
 8008a68:	b2db      	uxtb	r3, r3
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3708      	adds	r7, #8
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	200013ac 	.word	0x200013ac

08008a78 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8008a7c:	2000      	movs	r0, #0
 8008a7e:	f003 fa75 	bl	800bf6c <BSP_PB_Callback>
}
 8008a82:	bf00      	nop
 8008a84:	bd80      	pop	{r7, pc}
	...

08008a88 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b088      	sub	sp, #32
 8008a8c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008a8e:	2300      	movs	r3, #0
 8008a90:	60bb      	str	r3, [r7, #8]
 8008a92:	4b19      	ldr	r3, [pc, #100]	; (8008af8 <BUTTON_USER_GPIO_Init+0x70>)
 8008a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a96:	4a18      	ldr	r2, [pc, #96]	; (8008af8 <BUTTON_USER_GPIO_Init+0x70>)
 8008a98:	f043 0304 	orr.w	r3, r3, #4
 8008a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8008a9e:	4b16      	ldr	r3, [pc, #88]	; (8008af8 <BUTTON_USER_GPIO_Init+0x70>)
 8008aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa2:	f003 0304 	and.w	r3, r3, #4
 8008aa6:	60bb      	str	r3, [r7, #8]
 8008aa8:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008aaa:	f107 030c 	add.w	r3, r7, #12
 8008aae:	2200      	movs	r2, #0
 8008ab0:	601a      	str	r2, [r3, #0]
 8008ab2:	605a      	str	r2, [r3, #4]
 8008ab4:	609a      	str	r2, [r3, #8]
 8008ab6:	60da      	str	r2, [r3, #12]
 8008ab8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008aba:	2300      	movs	r3, #0
 8008abc:	607b      	str	r3, [r7, #4]
 8008abe:	4b0e      	ldr	r3, [pc, #56]	; (8008af8 <BUTTON_USER_GPIO_Init+0x70>)
 8008ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac2:	4a0d      	ldr	r2, [pc, #52]	; (8008af8 <BUTTON_USER_GPIO_Init+0x70>)
 8008ac4:	f043 0304 	orr.w	r3, r3, #4
 8008ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8008aca:	4b0b      	ldr	r3, [pc, #44]	; (8008af8 <BUTTON_USER_GPIO_Init+0x70>)
 8008acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ace:	f003 0304 	and.w	r3, r3, #4
 8008ad2:	607b      	str	r3, [r7, #4]
 8008ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8008ad6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ada:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008adc:	4b07      	ldr	r3, [pc, #28]	; (8008afc <BUTTON_USER_GPIO_Init+0x74>)
 8008ade:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8008ae4:	f107 030c 	add.w	r3, r7, #12
 8008ae8:	4619      	mov	r1, r3
 8008aea:	4805      	ldr	r0, [pc, #20]	; (8008b00 <BUTTON_USER_GPIO_Init+0x78>)
 8008aec:	f000 fa3a 	bl	8008f64 <HAL_GPIO_Init>

}
 8008af0:	bf00      	nop
 8008af2:	3720      	adds	r7, #32
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	40023800 	.word	0x40023800
 8008afc:	10210000 	.word	0x10210000
 8008b00:	40020800 	.word	0x40020800

08008b04 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8008b12:	79fb      	ldrb	r3, [r7, #7]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d903      	bls.n	8008b20 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008b18:	f06f 0301 	mvn.w	r3, #1
 8008b1c:	60fb      	str	r3, [r7, #12]
 8008b1e:	e01c      	b.n	8008b5a <BSP_COM_Init+0x56>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8008b20:	79fa      	ldrb	r2, [r7, #7]
 8008b22:	79fb      	ldrb	r3, [r7, #7]
 8008b24:	490f      	ldr	r1, [pc, #60]	; (8008b64 <BSP_COM_Init+0x60>)
 8008b26:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008b2a:	490f      	ldr	r1, [pc, #60]	; (8008b68 <BSP_COM_Init+0x64>)
 8008b2c:	019b      	lsls	r3, r3, #6
 8008b2e:	440b      	add	r3, r1
 8008b30:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8008b32:	79fb      	ldrb	r3, [r7, #7]
 8008b34:	019b      	lsls	r3, r3, #6
 8008b36:	4a0c      	ldr	r2, [pc, #48]	; (8008b68 <BSP_COM_Init+0x64>)
 8008b38:	4413      	add	r3, r2
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 f85c 	bl	8008bf8 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8008b40:	79fb      	ldrb	r3, [r7, #7]
 8008b42:	019b      	lsls	r3, r3, #6
 8008b44:	4a08      	ldr	r2, [pc, #32]	; (8008b68 <BSP_COM_Init+0x64>)
 8008b46:	4413      	add	r3, r2
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f000 f80f 	bl	8008b6c <MX_USART2_UART_Init>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d002      	beq.n	8008b5a <BSP_COM_Init+0x56>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8008b54:	f06f 0303 	mvn.w	r3, #3
 8008b58:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3710      	adds	r7, #16
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	200013b8 	.word	0x200013b8
 8008b68:	2000be74 	.word	0x2000be74

08008b6c <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008b74:	2300      	movs	r3, #0
 8008b76:	73fb      	strb	r3, [r7, #15]
  huart->Instance = USART2;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a12      	ldr	r2, [pc, #72]	; (8008bc4 <MX_USART2_UART_Init+0x58>)
 8008b7c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008b84:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	220c      	movs	r2, #12
 8008b9c:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f002 fb4e 	bl	800b24c <HAL_UART_Init>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d001      	beq.n	8008bba <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3710      	adds	r7, #16
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	40004400 	.word	0x40004400

08008bc8 <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) /* For IAR and MDK-ARM */
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* __GNUC__ */
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8008bd0:	4b07      	ldr	r3, [pc, #28]	; (8008bf0 <__io_putchar+0x28>)
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	019b      	lsls	r3, r3, #6
 8008bd6:	4a07      	ldr	r2, [pc, #28]	; (8008bf4 <__io_putchar+0x2c>)
 8008bd8:	1898      	adds	r0, r3, r2
 8008bda:	1d39      	adds	r1, r7, #4
 8008bdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008be0:	2201      	movs	r2, #1
 8008be2:	f002 fb8a 	bl	800b2fa <HAL_UART_Transmit>
  return ch;
 8008be6:	687b      	ldr	r3, [r7, #4]
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3708      	adds	r7, #8
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	20002c1c 	.word	0x20002c1c
 8008bf4:	2000be74 	.word	0x2000be74

08008bf8 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b08a      	sub	sp, #40	; 0x28
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008c00:	2300      	movs	r3, #0
 8008c02:	613b      	str	r3, [r7, #16]
 8008c04:	4b1e      	ldr	r3, [pc, #120]	; (8008c80 <USART2_MspInit+0x88>)
 8008c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c08:	4a1d      	ldr	r2, [pc, #116]	; (8008c80 <USART2_MspInit+0x88>)
 8008c0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c0e:	6413      	str	r3, [r2, #64]	; 0x40
 8008c10:	4b1b      	ldr	r3, [pc, #108]	; (8008c80 <USART2_MspInit+0x88>)
 8008c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c18:	613b      	str	r3, [r7, #16]
 8008c1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	60fb      	str	r3, [r7, #12]
 8008c20:	4b17      	ldr	r3, [pc, #92]	; (8008c80 <USART2_MspInit+0x88>)
 8008c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c24:	4a16      	ldr	r2, [pc, #88]	; (8008c80 <USART2_MspInit+0x88>)
 8008c26:	f043 0301 	orr.w	r3, r3, #1
 8008c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8008c2c:	4b14      	ldr	r3, [pc, #80]	; (8008c80 <USART2_MspInit+0x88>)
 8008c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c30:	f003 0301 	and.w	r3, r3, #1
 8008c34:	60fb      	str	r3, [r7, #12]
 8008c36:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8008c38:	2304      	movs	r3, #4
 8008c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c40:	2300      	movs	r3, #0
 8008c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c44:	2300      	movs	r3, #0
 8008c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8008c48:	2307      	movs	r3, #7
 8008c4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8008c4c:	f107 0314 	add.w	r3, r7, #20
 8008c50:	4619      	mov	r1, r3
 8008c52:	480c      	ldr	r0, [pc, #48]	; (8008c84 <USART2_MspInit+0x8c>)
 8008c54:	f000 f986 	bl	8008f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8008c58:	2308      	movs	r3, #8
 8008c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c60:	2300      	movs	r3, #0
 8008c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c64:	2300      	movs	r3, #0
 8008c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8008c68:	2307      	movs	r3, #7
 8008c6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8008c6c:	f107 0314 	add.w	r3, r7, #20
 8008c70:	4619      	mov	r1, r3
 8008c72:	4804      	ldr	r0, [pc, #16]	; (8008c84 <USART2_MspInit+0x8c>)
 8008c74:	f000 f976 	bl	8008f64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8008c78:	bf00      	nop
 8008c7a:	3728      	adds	r7, #40	; 0x28
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	40023800 	.word	0x40023800
 8008c84:	40020000 	.word	0x40020000

08008c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008c8c:	4b0e      	ldr	r3, [pc, #56]	; (8008cc8 <HAL_Init+0x40>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a0d      	ldr	r2, [pc, #52]	; (8008cc8 <HAL_Init+0x40>)
 8008c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008c96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008c98:	4b0b      	ldr	r3, [pc, #44]	; (8008cc8 <HAL_Init+0x40>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a0a      	ldr	r2, [pc, #40]	; (8008cc8 <HAL_Init+0x40>)
 8008c9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008ca2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008ca4:	4b08      	ldr	r3, [pc, #32]	; (8008cc8 <HAL_Init+0x40>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a07      	ldr	r2, [pc, #28]	; (8008cc8 <HAL_Init+0x40>)
 8008caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008cb0:	2003      	movs	r0, #3
 8008cb2:	f000 f8d8 	bl	8008e66 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008cb6:	2000      	movs	r0, #0
 8008cb8:	f7f8 fc24 	bl	8001504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008cbc:	f7f8 fbd4 	bl	8001468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	40023c00 	.word	0x40023c00

08008ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008cd0:	4b06      	ldr	r3, [pc, #24]	; (8008cec <HAL_IncTick+0x20>)
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	4b06      	ldr	r3, [pc, #24]	; (8008cf0 <HAL_IncTick+0x24>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4413      	add	r3, r2
 8008cdc:	4a04      	ldr	r2, [pc, #16]	; (8008cf0 <HAL_IncTick+0x24>)
 8008cde:	6013      	str	r3, [r2, #0]
}
 8008ce0:	bf00      	nop
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	200013c0 	.word	0x200013c0
 8008cf0:	2000beb4 	.word	0x2000beb4

08008cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8008cf8:	4b03      	ldr	r3, [pc, #12]	; (8008d08 <HAL_GetTick+0x14>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	2000beb4 	.word	0x2000beb4

08008d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b085      	sub	sp, #20
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f003 0307 	and.w	r3, r3, #7
 8008d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008d1c:	4b0c      	ldr	r3, [pc, #48]	; (8008d50 <__NVIC_SetPriorityGrouping+0x44>)
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008d22:	68ba      	ldr	r2, [r7, #8]
 8008d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008d28:	4013      	ands	r3, r2
 8008d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008d3e:	4a04      	ldr	r2, [pc, #16]	; (8008d50 <__NVIC_SetPriorityGrouping+0x44>)
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	60d3      	str	r3, [r2, #12]
}
 8008d44:	bf00      	nop
 8008d46:	3714      	adds	r7, #20
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr
 8008d50:	e000ed00 	.word	0xe000ed00

08008d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008d54:	b480      	push	{r7}
 8008d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008d58:	4b04      	ldr	r3, [pc, #16]	; (8008d6c <__NVIC_GetPriorityGrouping+0x18>)
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	0a1b      	lsrs	r3, r3, #8
 8008d5e:	f003 0307 	and.w	r3, r3, #7
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	e000ed00 	.word	0xe000ed00

08008d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	4603      	mov	r3, r0
 8008d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	db0b      	blt.n	8008d9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008d82:	79fb      	ldrb	r3, [r7, #7]
 8008d84:	f003 021f 	and.w	r2, r3, #31
 8008d88:	4907      	ldr	r1, [pc, #28]	; (8008da8 <__NVIC_EnableIRQ+0x38>)
 8008d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d8e:	095b      	lsrs	r3, r3, #5
 8008d90:	2001      	movs	r0, #1
 8008d92:	fa00 f202 	lsl.w	r2, r0, r2
 8008d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008d9a:	bf00      	nop
 8008d9c:	370c      	adds	r7, #12
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	e000e100 	.word	0xe000e100

08008dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	4603      	mov	r3, r0
 8008db4:	6039      	str	r1, [r7, #0]
 8008db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	db0a      	blt.n	8008dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	b2da      	uxtb	r2, r3
 8008dc4:	490c      	ldr	r1, [pc, #48]	; (8008df8 <__NVIC_SetPriority+0x4c>)
 8008dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008dca:	0112      	lsls	r2, r2, #4
 8008dcc:	b2d2      	uxtb	r2, r2
 8008dce:	440b      	add	r3, r1
 8008dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008dd4:	e00a      	b.n	8008dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	b2da      	uxtb	r2, r3
 8008dda:	4908      	ldr	r1, [pc, #32]	; (8008dfc <__NVIC_SetPriority+0x50>)
 8008ddc:	79fb      	ldrb	r3, [r7, #7]
 8008dde:	f003 030f 	and.w	r3, r3, #15
 8008de2:	3b04      	subs	r3, #4
 8008de4:	0112      	lsls	r2, r2, #4
 8008de6:	b2d2      	uxtb	r2, r2
 8008de8:	440b      	add	r3, r1
 8008dea:	761a      	strb	r2, [r3, #24]
}
 8008dec:	bf00      	nop
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr
 8008df8:	e000e100 	.word	0xe000e100
 8008dfc:	e000ed00 	.word	0xe000ed00

08008e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b089      	sub	sp, #36	; 0x24
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f003 0307 	and.w	r3, r3, #7
 8008e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	f1c3 0307 	rsb	r3, r3, #7
 8008e1a:	2b04      	cmp	r3, #4
 8008e1c:	bf28      	it	cs
 8008e1e:	2304      	movcs	r3, #4
 8008e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	3304      	adds	r3, #4
 8008e26:	2b06      	cmp	r3, #6
 8008e28:	d902      	bls.n	8008e30 <NVIC_EncodePriority+0x30>
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	3b03      	subs	r3, #3
 8008e2e:	e000      	b.n	8008e32 <NVIC_EncodePriority+0x32>
 8008e30:	2300      	movs	r3, #0
 8008e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008e34:	f04f 32ff 	mov.w	r2, #4294967295
 8008e38:	69bb      	ldr	r3, [r7, #24]
 8008e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e3e:	43da      	mvns	r2, r3
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	401a      	ands	r2, r3
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008e48:	f04f 31ff 	mov.w	r1, #4294967295
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8008e52:	43d9      	mvns	r1, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008e58:	4313      	orrs	r3, r2
         );
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3724      	adds	r7, #36	; 0x24
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr

08008e66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b082      	sub	sp, #8
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f7ff ff4c 	bl	8008d0c <__NVIC_SetPriorityGrouping>
}
 8008e74:	bf00      	nop
 8008e76:	3708      	adds	r7, #8
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b086      	sub	sp, #24
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	4603      	mov	r3, r0
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	607a      	str	r2, [r7, #4]
 8008e88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008e8e:	f7ff ff61 	bl	8008d54 <__NVIC_GetPriorityGrouping>
 8008e92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	68b9      	ldr	r1, [r7, #8]
 8008e98:	6978      	ldr	r0, [r7, #20]
 8008e9a:	f7ff ffb1 	bl	8008e00 <NVIC_EncodePriority>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ea4:	4611      	mov	r1, r2
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7ff ff80 	bl	8008dac <__NVIC_SetPriority>
}
 8008eac:	bf00      	nop
 8008eae:	3718      	adds	r7, #24
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	4603      	mov	r3, r0
 8008ebc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7ff ff54 	bl	8008d70 <__NVIC_EnableIRQ>
}
 8008ec8:	bf00      	nop
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d101      	bne.n	8008ee2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e00e      	b.n	8008f00 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	795b      	ldrb	r3, [r3, #5]
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d105      	bne.n	8008ef8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f7f8 fae4 	bl	80014c0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2201      	movs	r2, #1
 8008efc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b087      	sub	sp, #28
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	460b      	mov	r3, r1
 8008f12:	607a      	str	r2, [r7, #4]
 8008f14:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008f16:	2300      	movs	r3, #0
 8008f18:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8008f1a:	7afb      	ldrb	r3, [r7, #11]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d103      	bne.n	8008f28 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	605a      	str	r2, [r3, #4]
      break;
 8008f26:	e002      	b.n	8008f2e <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f2c:	bf00      	nop
  }

  return status;
 8008f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	371c      	adds	r7, #28
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d101      	bne.n	8008f50 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e003      	b.n	8008f58 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	683a      	ldr	r2, [r7, #0]
 8008f54:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8008f56:	2300      	movs	r3, #0
  }
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b089      	sub	sp, #36	; 0x24
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008f72:	2300      	movs	r3, #0
 8008f74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008f76:	2300      	movs	r3, #0
 8008f78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	61fb      	str	r3, [r7, #28]
 8008f7e:	e159      	b.n	8009234 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008f80:	2201      	movs	r2, #1
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	fa02 f303 	lsl.w	r3, r2, r3
 8008f88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	697a      	ldr	r2, [r7, #20]
 8008f90:	4013      	ands	r3, r2
 8008f92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008f94:	693a      	ldr	r2, [r7, #16]
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	f040 8148 	bne.w	800922e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d00b      	beq.n	8008fbe <HAL_GPIO_Init+0x5a>
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	2b02      	cmp	r3, #2
 8008fac:	d007      	beq.n	8008fbe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008fb2:	2b11      	cmp	r3, #17
 8008fb4:	d003      	beq.n	8008fbe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	2b12      	cmp	r3, #18
 8008fbc:	d130      	bne.n	8009020 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008fc4:	69fb      	ldr	r3, [r7, #28]
 8008fc6:	005b      	lsls	r3, r3, #1
 8008fc8:	2203      	movs	r2, #3
 8008fca:	fa02 f303 	lsl.w	r3, r2, r3
 8008fce:	43db      	mvns	r3, r3
 8008fd0:	69ba      	ldr	r2, [r7, #24]
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	68da      	ldr	r2, [r3, #12]
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	005b      	lsls	r3, r3, #1
 8008fde:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe2:	69ba      	ldr	r2, [r7, #24]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	69ba      	ldr	r2, [r7, #24]
 8008fec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8008ffc:	43db      	mvns	r3, r3
 8008ffe:	69ba      	ldr	r2, [r7, #24]
 8009000:	4013      	ands	r3, r2
 8009002:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	091b      	lsrs	r3, r3, #4
 800900a:	f003 0201 	and.w	r2, r3, #1
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	fa02 f303 	lsl.w	r3, r2, r3
 8009014:	69ba      	ldr	r2, [r7, #24]
 8009016:	4313      	orrs	r3, r2
 8009018:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	69ba      	ldr	r2, [r7, #24]
 800901e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	005b      	lsls	r3, r3, #1
 800902a:	2203      	movs	r2, #3
 800902c:	fa02 f303 	lsl.w	r3, r2, r3
 8009030:	43db      	mvns	r3, r3
 8009032:	69ba      	ldr	r2, [r7, #24]
 8009034:	4013      	ands	r3, r2
 8009036:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	689a      	ldr	r2, [r3, #8]
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	005b      	lsls	r3, r3, #1
 8009040:	fa02 f303 	lsl.w	r3, r2, r3
 8009044:	69ba      	ldr	r2, [r7, #24]
 8009046:	4313      	orrs	r3, r2
 8009048:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	69ba      	ldr	r2, [r7, #24]
 800904e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	2b02      	cmp	r3, #2
 8009056:	d003      	beq.n	8009060 <HAL_GPIO_Init+0xfc>
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	2b12      	cmp	r3, #18
 800905e:	d123      	bne.n	80090a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	08da      	lsrs	r2, r3, #3
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	3208      	adds	r2, #8
 8009068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800906c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	f003 0307 	and.w	r3, r3, #7
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	220f      	movs	r2, #15
 8009078:	fa02 f303 	lsl.w	r3, r2, r3
 800907c:	43db      	mvns	r3, r3
 800907e:	69ba      	ldr	r2, [r7, #24]
 8009080:	4013      	ands	r3, r2
 8009082:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	691a      	ldr	r2, [r3, #16]
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	f003 0307 	and.w	r3, r3, #7
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	fa02 f303 	lsl.w	r3, r2, r3
 8009094:	69ba      	ldr	r2, [r7, #24]
 8009096:	4313      	orrs	r3, r2
 8009098:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	08da      	lsrs	r2, r3, #3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	3208      	adds	r2, #8
 80090a2:	69b9      	ldr	r1, [r7, #24]
 80090a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	005b      	lsls	r3, r3, #1
 80090b2:	2203      	movs	r2, #3
 80090b4:	fa02 f303 	lsl.w	r3, r2, r3
 80090b8:	43db      	mvns	r3, r3
 80090ba:	69ba      	ldr	r2, [r7, #24]
 80090bc:	4013      	ands	r3, r2
 80090be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	f003 0203 	and.w	r2, r3, #3
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	005b      	lsls	r3, r3, #1
 80090cc:	fa02 f303 	lsl.w	r3, r2, r3
 80090d0:	69ba      	ldr	r2, [r7, #24]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	69ba      	ldr	r2, [r7, #24]
 80090da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	f000 80a2 	beq.w	800922e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80090ea:	2300      	movs	r3, #0
 80090ec:	60fb      	str	r3, [r7, #12]
 80090ee:	4b57      	ldr	r3, [pc, #348]	; (800924c <HAL_GPIO_Init+0x2e8>)
 80090f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090f2:	4a56      	ldr	r2, [pc, #344]	; (800924c <HAL_GPIO_Init+0x2e8>)
 80090f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80090f8:	6453      	str	r3, [r2, #68]	; 0x44
 80090fa:	4b54      	ldr	r3, [pc, #336]	; (800924c <HAL_GPIO_Init+0x2e8>)
 80090fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009102:	60fb      	str	r3, [r7, #12]
 8009104:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009106:	4a52      	ldr	r2, [pc, #328]	; (8009250 <HAL_GPIO_Init+0x2ec>)
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	089b      	lsrs	r3, r3, #2
 800910c:	3302      	adds	r3, #2
 800910e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	f003 0303 	and.w	r3, r3, #3
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	220f      	movs	r2, #15
 800911e:	fa02 f303 	lsl.w	r3, r2, r3
 8009122:	43db      	mvns	r3, r3
 8009124:	69ba      	ldr	r2, [r7, #24]
 8009126:	4013      	ands	r3, r2
 8009128:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4a49      	ldr	r2, [pc, #292]	; (8009254 <HAL_GPIO_Init+0x2f0>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d019      	beq.n	8009166 <HAL_GPIO_Init+0x202>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4a48      	ldr	r2, [pc, #288]	; (8009258 <HAL_GPIO_Init+0x2f4>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d013      	beq.n	8009162 <HAL_GPIO_Init+0x1fe>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4a47      	ldr	r2, [pc, #284]	; (800925c <HAL_GPIO_Init+0x2f8>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d00d      	beq.n	800915e <HAL_GPIO_Init+0x1fa>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4a46      	ldr	r2, [pc, #280]	; (8009260 <HAL_GPIO_Init+0x2fc>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d007      	beq.n	800915a <HAL_GPIO_Init+0x1f6>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a45      	ldr	r2, [pc, #276]	; (8009264 <HAL_GPIO_Init+0x300>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d101      	bne.n	8009156 <HAL_GPIO_Init+0x1f2>
 8009152:	2304      	movs	r3, #4
 8009154:	e008      	b.n	8009168 <HAL_GPIO_Init+0x204>
 8009156:	2307      	movs	r3, #7
 8009158:	e006      	b.n	8009168 <HAL_GPIO_Init+0x204>
 800915a:	2303      	movs	r3, #3
 800915c:	e004      	b.n	8009168 <HAL_GPIO_Init+0x204>
 800915e:	2302      	movs	r3, #2
 8009160:	e002      	b.n	8009168 <HAL_GPIO_Init+0x204>
 8009162:	2301      	movs	r3, #1
 8009164:	e000      	b.n	8009168 <HAL_GPIO_Init+0x204>
 8009166:	2300      	movs	r3, #0
 8009168:	69fa      	ldr	r2, [r7, #28]
 800916a:	f002 0203 	and.w	r2, r2, #3
 800916e:	0092      	lsls	r2, r2, #2
 8009170:	4093      	lsls	r3, r2
 8009172:	69ba      	ldr	r2, [r7, #24]
 8009174:	4313      	orrs	r3, r2
 8009176:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009178:	4935      	ldr	r1, [pc, #212]	; (8009250 <HAL_GPIO_Init+0x2ec>)
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	089b      	lsrs	r3, r3, #2
 800917e:	3302      	adds	r3, #2
 8009180:	69ba      	ldr	r2, [r7, #24]
 8009182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009186:	4b38      	ldr	r3, [pc, #224]	; (8009268 <HAL_GPIO_Init+0x304>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	43db      	mvns	r3, r3
 8009190:	69ba      	ldr	r2, [r7, #24]
 8009192:	4013      	ands	r3, r2
 8009194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d003      	beq.n	80091aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80091a2:	69ba      	ldr	r2, [r7, #24]
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	4313      	orrs	r3, r2
 80091a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80091aa:	4a2f      	ldr	r2, [pc, #188]	; (8009268 <HAL_GPIO_Init+0x304>)
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80091b0:	4b2d      	ldr	r3, [pc, #180]	; (8009268 <HAL_GPIO_Init+0x304>)
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	43db      	mvns	r3, r3
 80091ba:	69ba      	ldr	r2, [r7, #24]
 80091bc:	4013      	ands	r3, r2
 80091be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d003      	beq.n	80091d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80091cc:	69ba      	ldr	r2, [r7, #24]
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	4313      	orrs	r3, r2
 80091d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80091d4:	4a24      	ldr	r2, [pc, #144]	; (8009268 <HAL_GPIO_Init+0x304>)
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80091da:	4b23      	ldr	r3, [pc, #140]	; (8009268 <HAL_GPIO_Init+0x304>)
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	43db      	mvns	r3, r3
 80091e4:	69ba      	ldr	r2, [r7, #24]
 80091e6:	4013      	ands	r3, r2
 80091e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d003      	beq.n	80091fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80091f6:	69ba      	ldr	r2, [r7, #24]
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80091fe:	4a1a      	ldr	r2, [pc, #104]	; (8009268 <HAL_GPIO_Init+0x304>)
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009204:	4b18      	ldr	r3, [pc, #96]	; (8009268 <HAL_GPIO_Init+0x304>)
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	43db      	mvns	r3, r3
 800920e:	69ba      	ldr	r2, [r7, #24]
 8009210:	4013      	ands	r3, r2
 8009212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800921c:	2b00      	cmp	r3, #0
 800921e:	d003      	beq.n	8009228 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8009220:	69ba      	ldr	r2, [r7, #24]
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	4313      	orrs	r3, r2
 8009226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009228:	4a0f      	ldr	r2, [pc, #60]	; (8009268 <HAL_GPIO_Init+0x304>)
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800922e:	69fb      	ldr	r3, [r7, #28]
 8009230:	3301      	adds	r3, #1
 8009232:	61fb      	str	r3, [r7, #28]
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	2b0f      	cmp	r3, #15
 8009238:	f67f aea2 	bls.w	8008f80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800923c:	bf00      	nop
 800923e:	bf00      	nop
 8009240:	3724      	adds	r7, #36	; 0x24
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop
 800924c:	40023800 	.word	0x40023800
 8009250:	40013800 	.word	0x40013800
 8009254:	40020000 	.word	0x40020000
 8009258:	40020400 	.word	0x40020400
 800925c:	40020800 	.word	0x40020800
 8009260:	40020c00 	.word	0x40020c00
 8009264:	40021000 	.word	0x40021000
 8009268:	40013c00 	.word	0x40013c00

0800926c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800926c:	b480      	push	{r7}
 800926e:	b087      	sub	sp, #28
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009276:	2300      	movs	r3, #0
 8009278:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800927a:	2300      	movs	r3, #0
 800927c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800927e:	2300      	movs	r3, #0
 8009280:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009282:	2300      	movs	r3, #0
 8009284:	617b      	str	r3, [r7, #20]
 8009286:	e0bb      	b.n	8009400 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009288:	2201      	movs	r2, #1
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	fa02 f303 	lsl.w	r3, r2, r3
 8009290:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8009292:	683a      	ldr	r2, [r7, #0]
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	4013      	ands	r3, r2
 8009298:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800929a:	68fa      	ldr	r2, [r7, #12]
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	429a      	cmp	r2, r3
 80092a0:	f040 80ab 	bne.w	80093fa <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80092a4:	4a5c      	ldr	r2, [pc, #368]	; (8009418 <HAL_GPIO_DeInit+0x1ac>)
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	089b      	lsrs	r3, r3, #2
 80092aa:	3302      	adds	r3, #2
 80092ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092b0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	f003 0303 	and.w	r3, r3, #3
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	220f      	movs	r2, #15
 80092bc:	fa02 f303 	lsl.w	r3, r2, r3
 80092c0:	68ba      	ldr	r2, [r7, #8]
 80092c2:	4013      	ands	r3, r2
 80092c4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	4a54      	ldr	r2, [pc, #336]	; (800941c <HAL_GPIO_DeInit+0x1b0>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d019      	beq.n	8009302 <HAL_GPIO_DeInit+0x96>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	4a53      	ldr	r2, [pc, #332]	; (8009420 <HAL_GPIO_DeInit+0x1b4>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d013      	beq.n	80092fe <HAL_GPIO_DeInit+0x92>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	4a52      	ldr	r2, [pc, #328]	; (8009424 <HAL_GPIO_DeInit+0x1b8>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d00d      	beq.n	80092fa <HAL_GPIO_DeInit+0x8e>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4a51      	ldr	r2, [pc, #324]	; (8009428 <HAL_GPIO_DeInit+0x1bc>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d007      	beq.n	80092f6 <HAL_GPIO_DeInit+0x8a>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	4a50      	ldr	r2, [pc, #320]	; (800942c <HAL_GPIO_DeInit+0x1c0>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d101      	bne.n	80092f2 <HAL_GPIO_DeInit+0x86>
 80092ee:	2304      	movs	r3, #4
 80092f0:	e008      	b.n	8009304 <HAL_GPIO_DeInit+0x98>
 80092f2:	2307      	movs	r3, #7
 80092f4:	e006      	b.n	8009304 <HAL_GPIO_DeInit+0x98>
 80092f6:	2303      	movs	r3, #3
 80092f8:	e004      	b.n	8009304 <HAL_GPIO_DeInit+0x98>
 80092fa:	2302      	movs	r3, #2
 80092fc:	e002      	b.n	8009304 <HAL_GPIO_DeInit+0x98>
 80092fe:	2301      	movs	r3, #1
 8009300:	e000      	b.n	8009304 <HAL_GPIO_DeInit+0x98>
 8009302:	2300      	movs	r3, #0
 8009304:	697a      	ldr	r2, [r7, #20]
 8009306:	f002 0203 	and.w	r2, r2, #3
 800930a:	0092      	lsls	r2, r2, #2
 800930c:	4093      	lsls	r3, r2
 800930e:	68ba      	ldr	r2, [r7, #8]
 8009310:	429a      	cmp	r2, r3
 8009312:	d132      	bne.n	800937a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8009314:	4b46      	ldr	r3, [pc, #280]	; (8009430 <HAL_GPIO_DeInit+0x1c4>)
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	43db      	mvns	r3, r3
 800931c:	4944      	ldr	r1, [pc, #272]	; (8009430 <HAL_GPIO_DeInit+0x1c4>)
 800931e:	4013      	ands	r3, r2
 8009320:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8009322:	4b43      	ldr	r3, [pc, #268]	; (8009430 <HAL_GPIO_DeInit+0x1c4>)
 8009324:	685a      	ldr	r2, [r3, #4]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	43db      	mvns	r3, r3
 800932a:	4941      	ldr	r1, [pc, #260]	; (8009430 <HAL_GPIO_DeInit+0x1c4>)
 800932c:	4013      	ands	r3, r2
 800932e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009330:	4b3f      	ldr	r3, [pc, #252]	; (8009430 <HAL_GPIO_DeInit+0x1c4>)
 8009332:	689a      	ldr	r2, [r3, #8]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	43db      	mvns	r3, r3
 8009338:	493d      	ldr	r1, [pc, #244]	; (8009430 <HAL_GPIO_DeInit+0x1c4>)
 800933a:	4013      	ands	r3, r2
 800933c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800933e:	4b3c      	ldr	r3, [pc, #240]	; (8009430 <HAL_GPIO_DeInit+0x1c4>)
 8009340:	68da      	ldr	r2, [r3, #12]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	43db      	mvns	r3, r3
 8009346:	493a      	ldr	r1, [pc, #232]	; (8009430 <HAL_GPIO_DeInit+0x1c4>)
 8009348:	4013      	ands	r3, r2
 800934a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	f003 0303 	and.w	r3, r3, #3
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	220f      	movs	r2, #15
 8009356:	fa02 f303 	lsl.w	r3, r2, r3
 800935a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800935c:	4a2e      	ldr	r2, [pc, #184]	; (8009418 <HAL_GPIO_DeInit+0x1ac>)
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	089b      	lsrs	r3, r3, #2
 8009362:	3302      	adds	r3, #2
 8009364:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	43da      	mvns	r2, r3
 800936c:	482a      	ldr	r0, [pc, #168]	; (8009418 <HAL_GPIO_DeInit+0x1ac>)
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	089b      	lsrs	r3, r3, #2
 8009372:	400a      	ands	r2, r1
 8009374:	3302      	adds	r3, #2
 8009376:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	005b      	lsls	r3, r3, #1
 8009382:	2103      	movs	r1, #3
 8009384:	fa01 f303 	lsl.w	r3, r1, r3
 8009388:	43db      	mvns	r3, r3
 800938a:	401a      	ands	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	08da      	lsrs	r2, r3, #3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	3208      	adds	r2, #8
 8009398:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	f003 0307 	and.w	r3, r3, #7
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	220f      	movs	r2, #15
 80093a6:	fa02 f303 	lsl.w	r3, r2, r3
 80093aa:	43db      	mvns	r3, r3
 80093ac:	697a      	ldr	r2, [r7, #20]
 80093ae:	08d2      	lsrs	r2, r2, #3
 80093b0:	4019      	ands	r1, r3
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	3208      	adds	r2, #8
 80093b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	68da      	ldr	r2, [r3, #12]
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	005b      	lsls	r3, r3, #1
 80093c2:	2103      	movs	r1, #3
 80093c4:	fa01 f303 	lsl.w	r3, r1, r3
 80093c8:	43db      	mvns	r3, r3
 80093ca:	401a      	ands	r2, r3
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	685a      	ldr	r2, [r3, #4]
 80093d4:	2101      	movs	r1, #1
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	fa01 f303 	lsl.w	r3, r1, r3
 80093dc:	43db      	mvns	r3, r3
 80093de:	401a      	ands	r2, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	689a      	ldr	r2, [r3, #8]
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	005b      	lsls	r3, r3, #1
 80093ec:	2103      	movs	r1, #3
 80093ee:	fa01 f303 	lsl.w	r3, r1, r3
 80093f2:	43db      	mvns	r3, r3
 80093f4:	401a      	ands	r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	3301      	adds	r3, #1
 80093fe:	617b      	str	r3, [r7, #20]
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	2b0f      	cmp	r3, #15
 8009404:	f67f af40 	bls.w	8009288 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8009408:	bf00      	nop
 800940a:	bf00      	nop
 800940c:	371c      	adds	r7, #28
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr
 8009416:	bf00      	nop
 8009418:	40013800 	.word	0x40013800
 800941c:	40020000 	.word	0x40020000
 8009420:	40020400 	.word	0x40020400
 8009424:	40020800 	.word	0x40020800
 8009428:	40020c00 	.word	0x40020c00
 800942c:	40021000 	.word	0x40021000
 8009430:	40013c00 	.word	0x40013c00

08009434 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	460b      	mov	r3, r1
 800943e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	691a      	ldr	r2, [r3, #16]
 8009444:	887b      	ldrh	r3, [r7, #2]
 8009446:	4013      	ands	r3, r2
 8009448:	2b00      	cmp	r3, #0
 800944a:	d002      	beq.n	8009452 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800944c:	2301      	movs	r3, #1
 800944e:	73fb      	strb	r3, [r7, #15]
 8009450:	e001      	b.n	8009456 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009452:	2300      	movs	r3, #0
 8009454:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009456:	7bfb      	ldrb	r3, [r7, #15]
}
 8009458:	4618      	mov	r0, r3
 800945a:	3714      	adds	r7, #20
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	460b      	mov	r3, r1
 800946e:	807b      	strh	r3, [r7, #2]
 8009470:	4613      	mov	r3, r2
 8009472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009474:	787b      	ldrb	r3, [r7, #1]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d003      	beq.n	8009482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800947a:	887a      	ldrh	r2, [r7, #2]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009480:	e003      	b.n	800948a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009482:	887b      	ldrh	r3, [r7, #2]
 8009484:	041a      	lsls	r2, r3, #16
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	619a      	str	r2, [r3, #24]
}
 800948a:	bf00      	nop
 800948c:	370c      	adds	r7, #12
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr
	...

08009498 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d101      	bne.n	80094aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e12b      	b.n	8009702 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d106      	bne.n	80094c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 f95d 	bl	800977e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2224      	movs	r2, #36	; 0x24
 80094c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f022 0201 	bic.w	r2, r2, #1
 80094da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80094fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80094fc:	f001 fc2e 	bl	800ad5c <HAL_RCC_GetPCLK1Freq>
 8009500:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	4a81      	ldr	r2, [pc, #516]	; (800970c <HAL_I2C_Init+0x274>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d807      	bhi.n	800951c <HAL_I2C_Init+0x84>
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	4a80      	ldr	r2, [pc, #512]	; (8009710 <HAL_I2C_Init+0x278>)
 8009510:	4293      	cmp	r3, r2
 8009512:	bf94      	ite	ls
 8009514:	2301      	movls	r3, #1
 8009516:	2300      	movhi	r3, #0
 8009518:	b2db      	uxtb	r3, r3
 800951a:	e006      	b.n	800952a <HAL_I2C_Init+0x92>
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	4a7d      	ldr	r2, [pc, #500]	; (8009714 <HAL_I2C_Init+0x27c>)
 8009520:	4293      	cmp	r3, r2
 8009522:	bf94      	ite	ls
 8009524:	2301      	movls	r3, #1
 8009526:	2300      	movhi	r3, #0
 8009528:	b2db      	uxtb	r3, r3
 800952a:	2b00      	cmp	r3, #0
 800952c:	d001      	beq.n	8009532 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	e0e7      	b.n	8009702 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	4a78      	ldr	r2, [pc, #480]	; (8009718 <HAL_I2C_Init+0x280>)
 8009536:	fba2 2303 	umull	r2, r3, r2, r3
 800953a:	0c9b      	lsrs	r3, r3, #18
 800953c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	68ba      	ldr	r2, [r7, #8]
 800954e:	430a      	orrs	r2, r1
 8009550:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	6a1b      	ldr	r3, [r3, #32]
 8009558:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	4a6a      	ldr	r2, [pc, #424]	; (800970c <HAL_I2C_Init+0x274>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d802      	bhi.n	800956c <HAL_I2C_Init+0xd4>
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	3301      	adds	r3, #1
 800956a:	e009      	b.n	8009580 <HAL_I2C_Init+0xe8>
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009572:	fb02 f303 	mul.w	r3, r2, r3
 8009576:	4a69      	ldr	r2, [pc, #420]	; (800971c <HAL_I2C_Init+0x284>)
 8009578:	fba2 2303 	umull	r2, r3, r2, r3
 800957c:	099b      	lsrs	r3, r3, #6
 800957e:	3301      	adds	r3, #1
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	6812      	ldr	r2, [r2, #0]
 8009584:	430b      	orrs	r3, r1
 8009586:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	69db      	ldr	r3, [r3, #28]
 800958e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009592:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	495c      	ldr	r1, [pc, #368]	; (800970c <HAL_I2C_Init+0x274>)
 800959c:	428b      	cmp	r3, r1
 800959e:	d819      	bhi.n	80095d4 <HAL_I2C_Init+0x13c>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	1e59      	subs	r1, r3, #1
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	005b      	lsls	r3, r3, #1
 80095aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80095ae:	1c59      	adds	r1, r3, #1
 80095b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80095b4:	400b      	ands	r3, r1
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d00a      	beq.n	80095d0 <HAL_I2C_Init+0x138>
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	1e59      	subs	r1, r3, #1
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	005b      	lsls	r3, r3, #1
 80095c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80095c8:	3301      	adds	r3, #1
 80095ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095ce:	e051      	b.n	8009674 <HAL_I2C_Init+0x1dc>
 80095d0:	2304      	movs	r3, #4
 80095d2:	e04f      	b.n	8009674 <HAL_I2C_Init+0x1dc>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d111      	bne.n	8009600 <HAL_I2C_Init+0x168>
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	1e58      	subs	r0, r3, #1
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6859      	ldr	r1, [r3, #4]
 80095e4:	460b      	mov	r3, r1
 80095e6:	005b      	lsls	r3, r3, #1
 80095e8:	440b      	add	r3, r1
 80095ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80095ee:	3301      	adds	r3, #1
 80095f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	bf0c      	ite	eq
 80095f8:	2301      	moveq	r3, #1
 80095fa:	2300      	movne	r3, #0
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	e012      	b.n	8009626 <HAL_I2C_Init+0x18e>
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	1e58      	subs	r0, r3, #1
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6859      	ldr	r1, [r3, #4]
 8009608:	460b      	mov	r3, r1
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	440b      	add	r3, r1
 800960e:	0099      	lsls	r1, r3, #2
 8009610:	440b      	add	r3, r1
 8009612:	fbb0 f3f3 	udiv	r3, r0, r3
 8009616:	3301      	adds	r3, #1
 8009618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800961c:	2b00      	cmp	r3, #0
 800961e:	bf0c      	ite	eq
 8009620:	2301      	moveq	r3, #1
 8009622:	2300      	movne	r3, #0
 8009624:	b2db      	uxtb	r3, r3
 8009626:	2b00      	cmp	r3, #0
 8009628:	d001      	beq.n	800962e <HAL_I2C_Init+0x196>
 800962a:	2301      	movs	r3, #1
 800962c:	e022      	b.n	8009674 <HAL_I2C_Init+0x1dc>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d10e      	bne.n	8009654 <HAL_I2C_Init+0x1bc>
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	1e58      	subs	r0, r3, #1
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6859      	ldr	r1, [r3, #4]
 800963e:	460b      	mov	r3, r1
 8009640:	005b      	lsls	r3, r3, #1
 8009642:	440b      	add	r3, r1
 8009644:	fbb0 f3f3 	udiv	r3, r0, r3
 8009648:	3301      	adds	r3, #1
 800964a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800964e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009652:	e00f      	b.n	8009674 <HAL_I2C_Init+0x1dc>
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	1e58      	subs	r0, r3, #1
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6859      	ldr	r1, [r3, #4]
 800965c:	460b      	mov	r3, r1
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	440b      	add	r3, r1
 8009662:	0099      	lsls	r1, r3, #2
 8009664:	440b      	add	r3, r1
 8009666:	fbb0 f3f3 	udiv	r3, r0, r3
 800966a:	3301      	adds	r3, #1
 800966c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009670:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009674:	6879      	ldr	r1, [r7, #4]
 8009676:	6809      	ldr	r1, [r1, #0]
 8009678:	4313      	orrs	r3, r2
 800967a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	69da      	ldr	r2, [r3, #28]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6a1b      	ldr	r3, [r3, #32]
 800968e:	431a      	orrs	r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	430a      	orrs	r2, r1
 8009696:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80096a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	6911      	ldr	r1, [r2, #16]
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	68d2      	ldr	r2, [r2, #12]
 80096ae:	4311      	orrs	r1, r2
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	6812      	ldr	r2, [r2, #0]
 80096b4:	430b      	orrs	r3, r1
 80096b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	68db      	ldr	r3, [r3, #12]
 80096be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	695a      	ldr	r2, [r3, #20]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	699b      	ldr	r3, [r3, #24]
 80096ca:	431a      	orrs	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	430a      	orrs	r2, r1
 80096d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f042 0201 	orr.w	r2, r2, #1
 80096e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2220      	movs	r2, #32
 80096ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	000186a0 	.word	0x000186a0
 8009710:	001e847f 	.word	0x001e847f
 8009714:	003d08ff 	.word	0x003d08ff
 8009718:	431bde83 	.word	0x431bde83
 800971c:	10624dd3 	.word	0x10624dd3

08009720 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d101      	bne.n	8009732 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	e021      	b.n	8009776 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2224      	movs	r2, #36	; 0x24
 8009736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f022 0201 	bic.w	r2, r2, #1
 8009748:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f821 	bl	8009792 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3708      	adds	r7, #8
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800977e:	b480      	push	{r7}
 8009780:	b083      	sub	sp, #12
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8009786:	bf00      	nop
 8009788:	370c      	adds	r7, #12
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr

08009792 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8009792:	b480      	push	{r7}
 8009794:	b083      	sub	sp, #12
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800979a:	bf00      	nop
 800979c:	370c      	adds	r7, #12
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr
	...

080097a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b088      	sub	sp, #32
 80097ac:	af02      	add	r7, sp, #8
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	4608      	mov	r0, r1
 80097b2:	4611      	mov	r1, r2
 80097b4:	461a      	mov	r2, r3
 80097b6:	4603      	mov	r3, r0
 80097b8:	817b      	strh	r3, [r7, #10]
 80097ba:	460b      	mov	r3, r1
 80097bc:	813b      	strh	r3, [r7, #8]
 80097be:	4613      	mov	r3, r2
 80097c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80097c2:	f7ff fa97 	bl	8008cf4 <HAL_GetTick>
 80097c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	2b20      	cmp	r3, #32
 80097d2:	f040 80d9 	bne.w	8009988 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	9300      	str	r3, [sp, #0]
 80097da:	2319      	movs	r3, #25
 80097dc:	2201      	movs	r2, #1
 80097de:	496d      	ldr	r1, [pc, #436]	; (8009994 <HAL_I2C_Mem_Write+0x1ec>)
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	f000 fc99 	bl	800a118 <I2C_WaitOnFlagUntilTimeout>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d001      	beq.n	80097f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80097ec:	2302      	movs	r3, #2
 80097ee:	e0cc      	b.n	800998a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d101      	bne.n	80097fe <HAL_I2C_Mem_Write+0x56>
 80097fa:	2302      	movs	r3, #2
 80097fc:	e0c5      	b.n	800998a <HAL_I2C_Mem_Write+0x1e2>
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2201      	movs	r2, #1
 8009802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f003 0301 	and.w	r3, r3, #1
 8009810:	2b01      	cmp	r3, #1
 8009812:	d007      	beq.n	8009824 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f042 0201 	orr.w	r2, r2, #1
 8009822:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009832:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2221      	movs	r2, #33	; 0x21
 8009838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2240      	movs	r2, #64	; 0x40
 8009840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2200      	movs	r2, #0
 8009848:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	6a3a      	ldr	r2, [r7, #32]
 800984e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009854:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800985a:	b29a      	uxth	r2, r3
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	4a4d      	ldr	r2, [pc, #308]	; (8009998 <HAL_I2C_Mem_Write+0x1f0>)
 8009864:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009866:	88f8      	ldrh	r0, [r7, #6]
 8009868:	893a      	ldrh	r2, [r7, #8]
 800986a:	8979      	ldrh	r1, [r7, #10]
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	9301      	str	r3, [sp, #4]
 8009870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009872:	9300      	str	r3, [sp, #0]
 8009874:	4603      	mov	r3, r0
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f000 fad0 	bl	8009e1c <I2C_RequestMemoryWrite>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d052      	beq.n	8009928 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	e081      	b.n	800998a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009886:	697a      	ldr	r2, [r7, #20]
 8009888:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800988a:	68f8      	ldr	r0, [r7, #12]
 800988c:	f000 fd1a 	bl	800a2c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009890:	4603      	mov	r3, r0
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00d      	beq.n	80098b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800989a:	2b04      	cmp	r3, #4
 800989c:	d107      	bne.n	80098ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80098ae:	2301      	movs	r3, #1
 80098b0:	e06b      	b.n	800998a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b6:	781a      	ldrb	r2, [r3, #0]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c2:	1c5a      	adds	r2, r3, #1
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098cc:	3b01      	subs	r3, #1
 80098ce:	b29a      	uxth	r2, r3
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098d8:	b29b      	uxth	r3, r3
 80098da:	3b01      	subs	r3, #1
 80098dc:	b29a      	uxth	r2, r3
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	695b      	ldr	r3, [r3, #20]
 80098e8:	f003 0304 	and.w	r3, r3, #4
 80098ec:	2b04      	cmp	r3, #4
 80098ee:	d11b      	bne.n	8009928 <HAL_I2C_Mem_Write+0x180>
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d017      	beq.n	8009928 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098fc:	781a      	ldrb	r2, [r3, #0]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009908:	1c5a      	adds	r2, r3, #1
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009912:	3b01      	subs	r3, #1
 8009914:	b29a      	uxth	r2, r3
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800991e:	b29b      	uxth	r3, r3
 8009920:	3b01      	subs	r3, #1
 8009922:	b29a      	uxth	r2, r3
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800992c:	2b00      	cmp	r3, #0
 800992e:	d1aa      	bne.n	8009886 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009930:	697a      	ldr	r2, [r7, #20]
 8009932:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009934:	68f8      	ldr	r0, [r7, #12]
 8009936:	f000 fd06 	bl	800a346 <I2C_WaitOnBTFFlagUntilTimeout>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d00d      	beq.n	800995c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009944:	2b04      	cmp	r3, #4
 8009946:	d107      	bne.n	8009958 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009956:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009958:	2301      	movs	r3, #1
 800995a:	e016      	b.n	800998a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800996a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2220      	movs	r2, #32
 8009970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2200      	movs	r2, #0
 8009978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2200      	movs	r2, #0
 8009980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009984:	2300      	movs	r3, #0
 8009986:	e000      	b.n	800998a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009988:	2302      	movs	r3, #2
  }
}
 800998a:	4618      	mov	r0, r3
 800998c:	3718      	adds	r7, #24
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	00100002 	.word	0x00100002
 8009998:	ffff0000 	.word	0xffff0000

0800999c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b08c      	sub	sp, #48	; 0x30
 80099a0:	af02      	add	r7, sp, #8
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	4608      	mov	r0, r1
 80099a6:	4611      	mov	r1, r2
 80099a8:	461a      	mov	r2, r3
 80099aa:	4603      	mov	r3, r0
 80099ac:	817b      	strh	r3, [r7, #10]
 80099ae:	460b      	mov	r3, r1
 80099b0:	813b      	strh	r3, [r7, #8]
 80099b2:	4613      	mov	r3, r2
 80099b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80099b6:	f7ff f99d 	bl	8008cf4 <HAL_GetTick>
 80099ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	2b20      	cmp	r3, #32
 80099c6:	f040 8208 	bne.w	8009dda <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80099ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099cc:	9300      	str	r3, [sp, #0]
 80099ce:	2319      	movs	r3, #25
 80099d0:	2201      	movs	r2, #1
 80099d2:	497b      	ldr	r1, [pc, #492]	; (8009bc0 <HAL_I2C_Mem_Read+0x224>)
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f000 fb9f 	bl	800a118 <I2C_WaitOnFlagUntilTimeout>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d001      	beq.n	80099e4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80099e0:	2302      	movs	r3, #2
 80099e2:	e1fb      	b.n	8009ddc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d101      	bne.n	80099f2 <HAL_I2C_Mem_Read+0x56>
 80099ee:	2302      	movs	r3, #2
 80099f0:	e1f4      	b.n	8009ddc <HAL_I2C_Mem_Read+0x440>
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2201      	movs	r2, #1
 80099f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f003 0301 	and.w	r3, r3, #1
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d007      	beq.n	8009a18 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f042 0201 	orr.w	r2, r2, #1
 8009a16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2222      	movs	r2, #34	; 0x22
 8009a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2240      	movs	r2, #64	; 0x40
 8009a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009a48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a4e:	b29a      	uxth	r2, r3
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	4a5b      	ldr	r2, [pc, #364]	; (8009bc4 <HAL_I2C_Mem_Read+0x228>)
 8009a58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009a5a:	88f8      	ldrh	r0, [r7, #6]
 8009a5c:	893a      	ldrh	r2, [r7, #8]
 8009a5e:	8979      	ldrh	r1, [r7, #10]
 8009a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a62:	9301      	str	r3, [sp, #4]
 8009a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a66:	9300      	str	r3, [sp, #0]
 8009a68:	4603      	mov	r3, r0
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	f000 fa6c 	bl	8009f48 <I2C_RequestMemoryRead>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d001      	beq.n	8009a7a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	e1b0      	b.n	8009ddc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d113      	bne.n	8009aaa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a82:	2300      	movs	r3, #0
 8009a84:	623b      	str	r3, [r7, #32]
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	695b      	ldr	r3, [r3, #20]
 8009a8c:	623b      	str	r3, [r7, #32]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	699b      	ldr	r3, [r3, #24]
 8009a94:	623b      	str	r3, [r7, #32]
 8009a96:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009aa6:	601a      	str	r2, [r3, #0]
 8009aa8:	e184      	b.n	8009db4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d11b      	bne.n	8009aea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ac0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	61fb      	str	r3, [r7, #28]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	695b      	ldr	r3, [r3, #20]
 8009acc:	61fb      	str	r3, [r7, #28]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	699b      	ldr	r3, [r3, #24]
 8009ad4:	61fb      	str	r3, [r7, #28]
 8009ad6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ae6:	601a      	str	r2, [r3, #0]
 8009ae8:	e164      	b.n	8009db4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009aee:	2b02      	cmp	r3, #2
 8009af0:	d11b      	bne.n	8009b2a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b00:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b12:	2300      	movs	r3, #0
 8009b14:	61bb      	str	r3, [r7, #24]
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	695b      	ldr	r3, [r3, #20]
 8009b1c:	61bb      	str	r3, [r7, #24]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	699b      	ldr	r3, [r3, #24]
 8009b24:	61bb      	str	r3, [r7, #24]
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	e144      	b.n	8009db4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	617b      	str	r3, [r7, #20]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	695b      	ldr	r3, [r3, #20]
 8009b34:	617b      	str	r3, [r7, #20]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	699b      	ldr	r3, [r3, #24]
 8009b3c:	617b      	str	r3, [r7, #20]
 8009b3e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009b40:	e138      	b.n	8009db4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b46:	2b03      	cmp	r3, #3
 8009b48:	f200 80f1 	bhi.w	8009d2e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d123      	bne.n	8009b9c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f000 fc35 	bl	800a3c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d001      	beq.n	8009b68 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009b64:	2301      	movs	r3, #1
 8009b66:	e139      	b.n	8009ddc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	691a      	ldr	r2, [r3, #16]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b72:	b2d2      	uxtb	r2, r2
 8009b74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7a:	1c5a      	adds	r2, r3, #1
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b84:	3b01      	subs	r3, #1
 8009b86:	b29a      	uxth	r2, r3
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	3b01      	subs	r3, #1
 8009b94:	b29a      	uxth	r2, r3
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009b9a:	e10b      	b.n	8009db4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ba0:	2b02      	cmp	r3, #2
 8009ba2:	d14e      	bne.n	8009c42 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba6:	9300      	str	r3, [sp, #0]
 8009ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009baa:	2200      	movs	r2, #0
 8009bac:	4906      	ldr	r1, [pc, #24]	; (8009bc8 <HAL_I2C_Mem_Read+0x22c>)
 8009bae:	68f8      	ldr	r0, [r7, #12]
 8009bb0:	f000 fab2 	bl	800a118 <I2C_WaitOnFlagUntilTimeout>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d008      	beq.n	8009bcc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e10e      	b.n	8009ddc <HAL_I2C_Mem_Read+0x440>
 8009bbe:	bf00      	nop
 8009bc0:	00100002 	.word	0x00100002
 8009bc4:	ffff0000 	.word	0xffff0000
 8009bc8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	691a      	ldr	r2, [r3, #16]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be6:	b2d2      	uxtb	r2, r2
 8009be8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bee:	1c5a      	adds	r2, r3, #1
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bf8:	3b01      	subs	r3, #1
 8009bfa:	b29a      	uxth	r2, r3
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	3b01      	subs	r3, #1
 8009c08:	b29a      	uxth	r2, r3
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	691a      	ldr	r2, [r3, #16]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c18:	b2d2      	uxtb	r2, r2
 8009c1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c20:	1c5a      	adds	r2, r3, #1
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c2a:	3b01      	subs	r3, #1
 8009c2c:	b29a      	uxth	r2, r3
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	b29a      	uxth	r2, r3
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009c40:	e0b8      	b.n	8009db4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c44:	9300      	str	r3, [sp, #0]
 8009c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c48:	2200      	movs	r2, #0
 8009c4a:	4966      	ldr	r1, [pc, #408]	; (8009de4 <HAL_I2C_Mem_Read+0x448>)
 8009c4c:	68f8      	ldr	r0, [r7, #12]
 8009c4e:	f000 fa63 	bl	800a118 <I2C_WaitOnFlagUntilTimeout>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d001      	beq.n	8009c5c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e0bf      	b.n	8009ddc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	691a      	ldr	r2, [r3, #16]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c76:	b2d2      	uxtb	r2, r2
 8009c78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7e:	1c5a      	adds	r2, r3, #1
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c88:	3b01      	subs	r3, #1
 8009c8a:	b29a      	uxth	r2, r3
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	3b01      	subs	r3, #1
 8009c98:	b29a      	uxth	r2, r3
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca0:	9300      	str	r3, [sp, #0]
 8009ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	494f      	ldr	r1, [pc, #316]	; (8009de4 <HAL_I2C_Mem_Read+0x448>)
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f000 fa35 	bl	800a118 <I2C_WaitOnFlagUntilTimeout>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d001      	beq.n	8009cb8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	e091      	b.n	8009ddc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	691a      	ldr	r2, [r3, #16]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd2:	b2d2      	uxtb	r2, r2
 8009cd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cda:	1c5a      	adds	r2, r3, #1
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	b29a      	uxth	r2, r3
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cf0:	b29b      	uxth	r3, r3
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	b29a      	uxth	r2, r3
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	691a      	ldr	r2, [r3, #16]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d04:	b2d2      	uxtb	r2, r2
 8009d06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0c:	1c5a      	adds	r2, r3, #1
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d16:	3b01      	subs	r3, #1
 8009d18:	b29a      	uxth	r2, r3
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	3b01      	subs	r3, #1
 8009d26:	b29a      	uxth	r2, r3
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d2c:	e042      	b.n	8009db4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d32:	68f8      	ldr	r0, [r7, #12]
 8009d34:	f000 fb48 	bl	800a3c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d001      	beq.n	8009d42 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e04c      	b.n	8009ddc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	691a      	ldr	r2, [r3, #16]
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4c:	b2d2      	uxtb	r2, r2
 8009d4e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d54:	1c5a      	adds	r2, r3, #1
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	b29a      	uxth	r2, r3
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	695b      	ldr	r3, [r3, #20]
 8009d7a:	f003 0304 	and.w	r3, r3, #4
 8009d7e:	2b04      	cmp	r3, #4
 8009d80:	d118      	bne.n	8009db4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	691a      	ldr	r2, [r3, #16]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d8c:	b2d2      	uxtb	r2, r2
 8009d8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d94:	1c5a      	adds	r2, r3, #1
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d9e:	3b01      	subs	r3, #1
 8009da0:	b29a      	uxth	r2, r3
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	3b01      	subs	r3, #1
 8009dae:	b29a      	uxth	r2, r3
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f47f aec2 	bne.w	8009b42 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2220      	movs	r2, #32
 8009dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	e000      	b.n	8009ddc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009dda:	2302      	movs	r3, #2
  }
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3728      	adds	r7, #40	; 0x28
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	00010004 	.word	0x00010004

08009de8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009df6:	b2db      	uxtb	r3, r3
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b088      	sub	sp, #32
 8009e20:	af02      	add	r7, sp, #8
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	4608      	mov	r0, r1
 8009e26:	4611      	mov	r1, r2
 8009e28:	461a      	mov	r2, r3
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	817b      	strh	r3, [r7, #10]
 8009e2e:	460b      	mov	r3, r1
 8009e30:	813b      	strh	r3, [r7, #8]
 8009e32:	4613      	mov	r3, r2
 8009e34:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e48:	9300      	str	r3, [sp, #0]
 8009e4a:	6a3b      	ldr	r3, [r7, #32]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009e52:	68f8      	ldr	r0, [r7, #12]
 8009e54:	f000 f960 	bl	800a118 <I2C_WaitOnFlagUntilTimeout>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00d      	beq.n	8009e7a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e6c:	d103      	bne.n	8009e76 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009e76:	2303      	movs	r3, #3
 8009e78:	e05f      	b.n	8009f3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009e7a:	897b      	ldrh	r3, [r7, #10]
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	461a      	mov	r2, r3
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009e88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8c:	6a3a      	ldr	r2, [r7, #32]
 8009e8e:	492d      	ldr	r1, [pc, #180]	; (8009f44 <I2C_RequestMemoryWrite+0x128>)
 8009e90:	68f8      	ldr	r0, [r7, #12]
 8009e92:	f000 f998 	bl	800a1c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d001      	beq.n	8009ea0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e04c      	b.n	8009f3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	617b      	str	r3, [r7, #20]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	695b      	ldr	r3, [r3, #20]
 8009eaa:	617b      	str	r3, [r7, #20]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	699b      	ldr	r3, [r3, #24]
 8009eb2:	617b      	str	r3, [r7, #20]
 8009eb4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eb8:	6a39      	ldr	r1, [r7, #32]
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f000 fa02 	bl	800a2c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d00d      	beq.n	8009ee2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eca:	2b04      	cmp	r3, #4
 8009ecc:	d107      	bne.n	8009ede <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009edc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e02b      	b.n	8009f3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009ee2:	88fb      	ldrh	r3, [r7, #6]
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d105      	bne.n	8009ef4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009ee8:	893b      	ldrh	r3, [r7, #8]
 8009eea:	b2da      	uxtb	r2, r3
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	611a      	str	r2, [r3, #16]
 8009ef2:	e021      	b.n	8009f38 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009ef4:	893b      	ldrh	r3, [r7, #8]
 8009ef6:	0a1b      	lsrs	r3, r3, #8
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	b2da      	uxtb	r2, r3
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f04:	6a39      	ldr	r1, [r7, #32]
 8009f06:	68f8      	ldr	r0, [r7, #12]
 8009f08:	f000 f9dc 	bl	800a2c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d00d      	beq.n	8009f2e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f16:	2b04      	cmp	r3, #4
 8009f18:	d107      	bne.n	8009f2a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e005      	b.n	8009f3a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009f2e:	893b      	ldrh	r3, [r7, #8]
 8009f30:	b2da      	uxtb	r2, r3
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009f38:	2300      	movs	r3, #0
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3718      	adds	r7, #24
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	bf00      	nop
 8009f44:	00010002 	.word	0x00010002

08009f48 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b088      	sub	sp, #32
 8009f4c:	af02      	add	r7, sp, #8
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	4608      	mov	r0, r1
 8009f52:	4611      	mov	r1, r2
 8009f54:	461a      	mov	r2, r3
 8009f56:	4603      	mov	r3, r0
 8009f58:	817b      	strh	r3, [r7, #10]
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	813b      	strh	r3, [r7, #8]
 8009f5e:	4613      	mov	r3, r2
 8009f60:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009f70:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f84:	9300      	str	r3, [sp, #0]
 8009f86:	6a3b      	ldr	r3, [r7, #32]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f000 f8c2 	bl	800a118 <I2C_WaitOnFlagUntilTimeout>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00d      	beq.n	8009fb6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fa8:	d103      	bne.n	8009fb2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fb0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009fb2:	2303      	movs	r3, #3
 8009fb4:	e0aa      	b.n	800a10c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009fb6:	897b      	ldrh	r3, [r7, #10]
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	461a      	mov	r2, r3
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009fc4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc8:	6a3a      	ldr	r2, [r7, #32]
 8009fca:	4952      	ldr	r1, [pc, #328]	; (800a114 <I2C_RequestMemoryRead+0x1cc>)
 8009fcc:	68f8      	ldr	r0, [r7, #12]
 8009fce:	f000 f8fa 	bl	800a1c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d001      	beq.n	8009fdc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	e097      	b.n	800a10c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009fdc:	2300      	movs	r3, #0
 8009fde:	617b      	str	r3, [r7, #20]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	695b      	ldr	r3, [r3, #20]
 8009fe6:	617b      	str	r3, [r7, #20]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	699b      	ldr	r3, [r3, #24]
 8009fee:	617b      	str	r3, [r7, #20]
 8009ff0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ff4:	6a39      	ldr	r1, [r7, #32]
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f000 f964 	bl	800a2c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00d      	beq.n	800a01e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a006:	2b04      	cmp	r3, #4
 800a008:	d107      	bne.n	800a01a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a018:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a01a:	2301      	movs	r3, #1
 800a01c:	e076      	b.n	800a10c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a01e:	88fb      	ldrh	r3, [r7, #6]
 800a020:	2b01      	cmp	r3, #1
 800a022:	d105      	bne.n	800a030 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a024:	893b      	ldrh	r3, [r7, #8]
 800a026:	b2da      	uxtb	r2, r3
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	611a      	str	r2, [r3, #16]
 800a02e:	e021      	b.n	800a074 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a030:	893b      	ldrh	r3, [r7, #8]
 800a032:	0a1b      	lsrs	r3, r3, #8
 800a034:	b29b      	uxth	r3, r3
 800a036:	b2da      	uxtb	r2, r3
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a03e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a040:	6a39      	ldr	r1, [r7, #32]
 800a042:	68f8      	ldr	r0, [r7, #12]
 800a044:	f000 f93e 	bl	800a2c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a048:	4603      	mov	r3, r0
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d00d      	beq.n	800a06a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a052:	2b04      	cmp	r3, #4
 800a054:	d107      	bne.n	800a066 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a064:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a066:	2301      	movs	r3, #1
 800a068:	e050      	b.n	800a10c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a06a:	893b      	ldrh	r3, [r7, #8]
 800a06c:	b2da      	uxtb	r2, r3
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a076:	6a39      	ldr	r1, [r7, #32]
 800a078:	68f8      	ldr	r0, [r7, #12]
 800a07a:	f000 f923 	bl	800a2c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b00      	cmp	r3, #0
 800a082:	d00d      	beq.n	800a0a0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a088:	2b04      	cmp	r3, #4
 800a08a:	d107      	bne.n	800a09c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a09a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a09c:	2301      	movs	r3, #1
 800a09e:	e035      	b.n	800a10c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b2:	9300      	str	r3, [sp, #0]
 800a0b4:	6a3b      	ldr	r3, [r7, #32]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a0bc:	68f8      	ldr	r0, [r7, #12]
 800a0be:	f000 f82b 	bl	800a118 <I2C_WaitOnFlagUntilTimeout>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d00d      	beq.n	800a0e4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0d6:	d103      	bne.n	800a0e0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a0e0:	2303      	movs	r3, #3
 800a0e2:	e013      	b.n	800a10c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a0e4:	897b      	ldrh	r3, [r7, #10]
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	f043 0301 	orr.w	r3, r3, #1
 800a0ec:	b2da      	uxtb	r2, r3
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f6:	6a3a      	ldr	r2, [r7, #32]
 800a0f8:	4906      	ldr	r1, [pc, #24]	; (800a114 <I2C_RequestMemoryRead+0x1cc>)
 800a0fa:	68f8      	ldr	r0, [r7, #12]
 800a0fc:	f000 f863 	bl	800a1c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a100:	4603      	mov	r3, r0
 800a102:	2b00      	cmp	r3, #0
 800a104:	d001      	beq.n	800a10a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	e000      	b.n	800a10c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a10a:	2300      	movs	r3, #0
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3718      	adds	r7, #24
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	00010002 	.word	0x00010002

0800a118 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	603b      	str	r3, [r7, #0]
 800a124:	4613      	mov	r3, r2
 800a126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a128:	e025      	b.n	800a176 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a130:	d021      	beq.n	800a176 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a132:	f7fe fddf 	bl	8008cf4 <HAL_GetTick>
 800a136:	4602      	mov	r2, r0
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	1ad3      	subs	r3, r2, r3
 800a13c:	683a      	ldr	r2, [r7, #0]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d302      	bcc.n	800a148 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d116      	bne.n	800a176 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2200      	movs	r2, #0
 800a14c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2220      	movs	r2, #32
 800a152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2200      	movs	r2, #0
 800a15a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a162:	f043 0220 	orr.w	r2, r3, #32
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2200      	movs	r2, #0
 800a16e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a172:	2301      	movs	r3, #1
 800a174:	e023      	b.n	800a1be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	0c1b      	lsrs	r3, r3, #16
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d10d      	bne.n	800a19c <I2C_WaitOnFlagUntilTimeout+0x84>
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	695b      	ldr	r3, [r3, #20]
 800a186:	43da      	mvns	r2, r3
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	4013      	ands	r3, r2
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	2b00      	cmp	r3, #0
 800a190:	bf0c      	ite	eq
 800a192:	2301      	moveq	r3, #1
 800a194:	2300      	movne	r3, #0
 800a196:	b2db      	uxtb	r3, r3
 800a198:	461a      	mov	r2, r3
 800a19a:	e00c      	b.n	800a1b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	699b      	ldr	r3, [r3, #24]
 800a1a2:	43da      	mvns	r2, r3
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	4013      	ands	r3, r2
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	bf0c      	ite	eq
 800a1ae:	2301      	moveq	r3, #1
 800a1b0:	2300      	movne	r3, #0
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	79fb      	ldrb	r3, [r7, #7]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d0b6      	beq.n	800a12a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3710      	adds	r7, #16
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b084      	sub	sp, #16
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	60f8      	str	r0, [r7, #12]
 800a1ce:	60b9      	str	r1, [r7, #8]
 800a1d0:	607a      	str	r2, [r7, #4]
 800a1d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a1d4:	e051      	b.n	800a27a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	695b      	ldr	r3, [r3, #20]
 800a1dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a1e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1e4:	d123      	bne.n	800a22e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a1fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2200      	movs	r2, #0
 800a204:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2220      	movs	r2, #32
 800a20a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2200      	movs	r2, #0
 800a212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a21a:	f043 0204 	orr.w	r2, r3, #4
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2200      	movs	r2, #0
 800a226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	e046      	b.n	800a2bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a234:	d021      	beq.n	800a27a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a236:	f7fe fd5d 	bl	8008cf4 <HAL_GetTick>
 800a23a:	4602      	mov	r2, r0
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	1ad3      	subs	r3, r2, r3
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	429a      	cmp	r2, r3
 800a244:	d302      	bcc.n	800a24c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d116      	bne.n	800a27a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2200      	movs	r2, #0
 800a250:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2220      	movs	r2, #32
 800a256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2200      	movs	r2, #0
 800a25e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a266:	f043 0220 	orr.w	r2, r3, #32
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2200      	movs	r2, #0
 800a272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a276:	2301      	movs	r3, #1
 800a278:	e020      	b.n	800a2bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	0c1b      	lsrs	r3, r3, #16
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	2b01      	cmp	r3, #1
 800a282:	d10c      	bne.n	800a29e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	695b      	ldr	r3, [r3, #20]
 800a28a:	43da      	mvns	r2, r3
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	4013      	ands	r3, r2
 800a290:	b29b      	uxth	r3, r3
 800a292:	2b00      	cmp	r3, #0
 800a294:	bf14      	ite	ne
 800a296:	2301      	movne	r3, #1
 800a298:	2300      	moveq	r3, #0
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	e00b      	b.n	800a2b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	699b      	ldr	r3, [r3, #24]
 800a2a4:	43da      	mvns	r2, r3
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	4013      	ands	r3, r2
 800a2aa:	b29b      	uxth	r3, r3
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	bf14      	ite	ne
 800a2b0:	2301      	movne	r3, #1
 800a2b2:	2300      	moveq	r3, #0
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d18d      	bne.n	800a1d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a2ba:	2300      	movs	r3, #0
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3710      	adds	r7, #16
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a2d0:	e02d      	b.n	800a32e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	f000 f8ce 	bl	800a474 <I2C_IsAcknowledgeFailed>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d001      	beq.n	800a2e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e02d      	b.n	800a33e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2e8:	d021      	beq.n	800a32e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2ea:	f7fe fd03 	bl	8008cf4 <HAL_GetTick>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	1ad3      	subs	r3, r2, r3
 800a2f4:	68ba      	ldr	r2, [r7, #8]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d302      	bcc.n	800a300 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d116      	bne.n	800a32e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2200      	movs	r2, #0
 800a304:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2220      	movs	r2, #32
 800a30a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2200      	movs	r2, #0
 800a312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a31a:	f043 0220 	orr.w	r2, r3, #32
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2200      	movs	r2, #0
 800a326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e007      	b.n	800a33e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	695b      	ldr	r3, [r3, #20]
 800a334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a338:	2b80      	cmp	r3, #128	; 0x80
 800a33a:	d1ca      	bne.n	800a2d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a33c:	2300      	movs	r3, #0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3710      	adds	r7, #16
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}

0800a346 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a346:	b580      	push	{r7, lr}
 800a348:	b084      	sub	sp, #16
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	60f8      	str	r0, [r7, #12]
 800a34e:	60b9      	str	r1, [r7, #8]
 800a350:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a352:	e02d      	b.n	800a3b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a354:	68f8      	ldr	r0, [r7, #12]
 800a356:	f000 f88d 	bl	800a474 <I2C_IsAcknowledgeFailed>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d001      	beq.n	800a364 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	e02d      	b.n	800a3c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a36a:	d021      	beq.n	800a3b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a36c:	f7fe fcc2 	bl	8008cf4 <HAL_GetTick>
 800a370:	4602      	mov	r2, r0
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	1ad3      	subs	r3, r2, r3
 800a376:	68ba      	ldr	r2, [r7, #8]
 800a378:	429a      	cmp	r2, r3
 800a37a:	d302      	bcc.n	800a382 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d116      	bne.n	800a3b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2200      	movs	r2, #0
 800a386:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2220      	movs	r2, #32
 800a38c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2200      	movs	r2, #0
 800a394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39c:	f043 0220 	orr.w	r2, r3, #32
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	e007      	b.n	800a3c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	695b      	ldr	r3, [r3, #20]
 800a3b6:	f003 0304 	and.w	r3, r3, #4
 800a3ba:	2b04      	cmp	r3, #4
 800a3bc:	d1ca      	bne.n	800a354 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a3be:	2300      	movs	r3, #0
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3710      	adds	r7, #16
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	60b9      	str	r1, [r7, #8]
 800a3d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a3d4:	e042      	b.n	800a45c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	695b      	ldr	r3, [r3, #20]
 800a3dc:	f003 0310 	and.w	r3, r3, #16
 800a3e0:	2b10      	cmp	r3, #16
 800a3e2:	d119      	bne.n	800a418 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f06f 0210 	mvn.w	r2, #16
 800a3ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2220      	movs	r2, #32
 800a3f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2200      	movs	r2, #0
 800a400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2200      	movs	r2, #0
 800a410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a414:	2301      	movs	r3, #1
 800a416:	e029      	b.n	800a46c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a418:	f7fe fc6c 	bl	8008cf4 <HAL_GetTick>
 800a41c:	4602      	mov	r2, r0
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	1ad3      	subs	r3, r2, r3
 800a422:	68ba      	ldr	r2, [r7, #8]
 800a424:	429a      	cmp	r2, r3
 800a426:	d302      	bcc.n	800a42e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d116      	bne.n	800a45c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2200      	movs	r2, #0
 800a432:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2220      	movs	r2, #32
 800a438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2200      	movs	r2, #0
 800a440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a448:	f043 0220 	orr.w	r2, r3, #32
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2200      	movs	r2, #0
 800a454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	e007      	b.n	800a46c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	695b      	ldr	r3, [r3, #20]
 800a462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a466:	2b40      	cmp	r3, #64	; 0x40
 800a468:	d1b5      	bne.n	800a3d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3710      	adds	r7, #16
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	695b      	ldr	r3, [r3, #20]
 800a482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a48a:	d11b      	bne.n	800a4c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a494:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2200      	movs	r2, #0
 800a49a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2220      	movs	r2, #32
 800a4a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b0:	f043 0204 	orr.w	r2, r3, #4
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	e000      	b.n	800a4c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	370c      	adds	r7, #12
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr
	...

0800a4d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b086      	sub	sp, #24
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d101      	bne.n	800a4e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e25b      	b.n	800a99e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f003 0301 	and.w	r3, r3, #1
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d075      	beq.n	800a5de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a4f2:	4ba3      	ldr	r3, [pc, #652]	; (800a780 <HAL_RCC_OscConfig+0x2ac>)
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	f003 030c 	and.w	r3, r3, #12
 800a4fa:	2b04      	cmp	r3, #4
 800a4fc:	d00c      	beq.n	800a518 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a4fe:	4ba0      	ldr	r3, [pc, #640]	; (800a780 <HAL_RCC_OscConfig+0x2ac>)
 800a500:	689b      	ldr	r3, [r3, #8]
 800a502:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a506:	2b08      	cmp	r3, #8
 800a508:	d112      	bne.n	800a530 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a50a:	4b9d      	ldr	r3, [pc, #628]	; (800a780 <HAL_RCC_OscConfig+0x2ac>)
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a512:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a516:	d10b      	bne.n	800a530 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a518:	4b99      	ldr	r3, [pc, #612]	; (800a780 <HAL_RCC_OscConfig+0x2ac>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a520:	2b00      	cmp	r3, #0
 800a522:	d05b      	beq.n	800a5dc <HAL_RCC_OscConfig+0x108>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d157      	bne.n	800a5dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a52c:	2301      	movs	r3, #1
 800a52e:	e236      	b.n	800a99e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a538:	d106      	bne.n	800a548 <HAL_RCC_OscConfig+0x74>
 800a53a:	4b91      	ldr	r3, [pc, #580]	; (800a780 <HAL_RCC_OscConfig+0x2ac>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a90      	ldr	r2, [pc, #576]	; (800a780 <HAL_RCC_OscConfig+0x2ac>)
 800a540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a544:	6013      	str	r3, [r2, #0]
 800a546:	e01d      	b.n	800a584 <HAL_RCC_OscConfig+0xb0>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a550:	d10c      	bne.n	800a56c <HAL_RCC_OscConfig+0x98>
 800a552:	4b8b      	ldr	r3, [pc, #556]	; (800a780 <HAL_RCC_OscConfig+0x2ac>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a8a      	ldr	r2, [pc, #552]	; (800a780 <HAL_RCC_OscConfig+0x2ac>)
 800a558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a55c:	6013      	str	r3, [r2, #0]
 800a55e:	4b88      	ldr	r3, [pc, #544]	; (800a780 <HAL_RCC_OscConfig+0x2ac>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4a87      	ldr	r2, [pc, #540]	; (800a780 <HAL_RCC_OscConfig+0x2ac>)
 800a564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a568:	6013      	str	r3, [r2, #0]
 800a56a:	e00b      	b.n	800a584 <HAL_RCC_OscConfig+0xb0>
 800a56c:	4b84      	ldr	r3, [pc, #528]	; (800a780 <HAL_RCC_OscConfig+0x2ac>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a83      	ldr	r2, [pc, #524]	; (800a780 <HAL_RCC_OscConfig+0x2ac>)
 800a572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a576:	6013      	str	r3, [r2, #0]
 800a578:	4b81      	ldr	r3, [pc, #516]	; (800a780 <HAL_RCC_OscConfig+0x2ac>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4a80      	ldr	r2, [pc, #512]	; (800a780 <HAL_RCC_OscConfig+0x2ac>)
 800a57e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d013      	beq.n	800a5b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a58c:	f7fe fbb2 	bl	8008cf4 <HAL_GetTick>
 800a590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a592:	e008      	b.n	800a5a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a594:	f7fe fbae 	bl	8008cf4 <HAL_GetTick>
 800a598:	4602      	mov	r2, r0
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	1ad3      	subs	r3, r2, r3
 800a59e:	2b64      	cmp	r3, #100	; 0x64
 800a5a0:	d901      	bls.n	800a5a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a5a2:	2303      	movs	r3, #3
 800a5a4:	e1fb      	b.n	800a99e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a5a6:	4b76      	ldr	r3, [pc, #472]	; (800a780 <HAL_RCC_OscConfig+0x2ac>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d0f0      	beq.n	800a594 <HAL_RCC_OscConfig+0xc0>
 800a5b2:	e014      	b.n	800a5de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5b4:	f7fe fb9e 	bl	8008cf4 <HAL_GetTick>
 800a5b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a5ba:	e008      	b.n	800a5ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a5bc:	f7fe fb9a 	bl	8008cf4 <HAL_GetTick>
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	1ad3      	subs	r3, r2, r3
 800a5c6:	2b64      	cmp	r3, #100	; 0x64
 800a5c8:	d901      	bls.n	800a5ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a5ca:	2303      	movs	r3, #3
 800a5cc:	e1e7      	b.n	800a99e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a5ce:	4b6c      	ldr	r3, [pc, #432]	; (800a780 <HAL_RCC_OscConfig+0x2ac>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d1f0      	bne.n	800a5bc <HAL_RCC_OscConfig+0xe8>
 800a5da:	e000      	b.n	800a5de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a5dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f003 0302 	and.w	r3, r3, #2
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d063      	beq.n	800a6b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a5ea:	4b65      	ldr	r3, [pc, #404]	; (800a780 <HAL_RCC_OscConfig+0x2ac>)
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	f003 030c 	and.w	r3, r3, #12
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d00b      	beq.n	800a60e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a5f6:	4b62      	ldr	r3, [pc, #392]	; (800a780 <HAL_RCC_OscConfig+0x2ac>)
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a5fe:	2b08      	cmp	r3, #8
 800a600:	d11c      	bne.n	800a63c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a602:	4b5f      	ldr	r3, [pc, #380]	; (800a780 <HAL_RCC_OscConfig+0x2ac>)
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d116      	bne.n	800a63c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a60e:	4b5c      	ldr	r3, [pc, #368]	; (800a780 <HAL_RCC_OscConfig+0x2ac>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f003 0302 	and.w	r3, r3, #2
 800a616:	2b00      	cmp	r3, #0
 800a618:	d005      	beq.n	800a626 <HAL_RCC_OscConfig+0x152>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d001      	beq.n	800a626 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a622:	2301      	movs	r3, #1
 800a624:	e1bb      	b.n	800a99e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a626:	4b56      	ldr	r3, [pc, #344]	; (800a780 <HAL_RCC_OscConfig+0x2ac>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	00db      	lsls	r3, r3, #3
 800a634:	4952      	ldr	r1, [pc, #328]	; (800a780 <HAL_RCC_OscConfig+0x2ac>)
 800a636:	4313      	orrs	r3, r2
 800a638:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a63a:	e03a      	b.n	800a6b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d020      	beq.n	800a686 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a644:	4b4f      	ldr	r3, [pc, #316]	; (800a784 <HAL_RCC_OscConfig+0x2b0>)
 800a646:	2201      	movs	r2, #1
 800a648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a64a:	f7fe fb53 	bl	8008cf4 <HAL_GetTick>
 800a64e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a650:	e008      	b.n	800a664 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a652:	f7fe fb4f 	bl	8008cf4 <HAL_GetTick>
 800a656:	4602      	mov	r2, r0
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	1ad3      	subs	r3, r2, r3
 800a65c:	2b02      	cmp	r3, #2
 800a65e:	d901      	bls.n	800a664 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a660:	2303      	movs	r3, #3
 800a662:	e19c      	b.n	800a99e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a664:	4b46      	ldr	r3, [pc, #280]	; (800a780 <HAL_RCC_OscConfig+0x2ac>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f003 0302 	and.w	r3, r3, #2
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d0f0      	beq.n	800a652 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a670:	4b43      	ldr	r3, [pc, #268]	; (800a780 <HAL_RCC_OscConfig+0x2ac>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	691b      	ldr	r3, [r3, #16]
 800a67c:	00db      	lsls	r3, r3, #3
 800a67e:	4940      	ldr	r1, [pc, #256]	; (800a780 <HAL_RCC_OscConfig+0x2ac>)
 800a680:	4313      	orrs	r3, r2
 800a682:	600b      	str	r3, [r1, #0]
 800a684:	e015      	b.n	800a6b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a686:	4b3f      	ldr	r3, [pc, #252]	; (800a784 <HAL_RCC_OscConfig+0x2b0>)
 800a688:	2200      	movs	r2, #0
 800a68a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a68c:	f7fe fb32 	bl	8008cf4 <HAL_GetTick>
 800a690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a692:	e008      	b.n	800a6a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a694:	f7fe fb2e 	bl	8008cf4 <HAL_GetTick>
 800a698:	4602      	mov	r2, r0
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	1ad3      	subs	r3, r2, r3
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	d901      	bls.n	800a6a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a6a2:	2303      	movs	r3, #3
 800a6a4:	e17b      	b.n	800a99e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a6a6:	4b36      	ldr	r3, [pc, #216]	; (800a780 <HAL_RCC_OscConfig+0x2ac>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f003 0302 	and.w	r3, r3, #2
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d1f0      	bne.n	800a694 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f003 0308 	and.w	r3, r3, #8
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d030      	beq.n	800a720 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	695b      	ldr	r3, [r3, #20]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d016      	beq.n	800a6f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a6c6:	4b30      	ldr	r3, [pc, #192]	; (800a788 <HAL_RCC_OscConfig+0x2b4>)
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6cc:	f7fe fb12 	bl	8008cf4 <HAL_GetTick>
 800a6d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a6d2:	e008      	b.n	800a6e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a6d4:	f7fe fb0e 	bl	8008cf4 <HAL_GetTick>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	1ad3      	subs	r3, r2, r3
 800a6de:	2b02      	cmp	r3, #2
 800a6e0:	d901      	bls.n	800a6e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a6e2:	2303      	movs	r3, #3
 800a6e4:	e15b      	b.n	800a99e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a6e6:	4b26      	ldr	r3, [pc, #152]	; (800a780 <HAL_RCC_OscConfig+0x2ac>)
 800a6e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6ea:	f003 0302 	and.w	r3, r3, #2
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d0f0      	beq.n	800a6d4 <HAL_RCC_OscConfig+0x200>
 800a6f2:	e015      	b.n	800a720 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a6f4:	4b24      	ldr	r3, [pc, #144]	; (800a788 <HAL_RCC_OscConfig+0x2b4>)
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a6fa:	f7fe fafb 	bl	8008cf4 <HAL_GetTick>
 800a6fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a700:	e008      	b.n	800a714 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a702:	f7fe faf7 	bl	8008cf4 <HAL_GetTick>
 800a706:	4602      	mov	r2, r0
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	1ad3      	subs	r3, r2, r3
 800a70c:	2b02      	cmp	r3, #2
 800a70e:	d901      	bls.n	800a714 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a710:	2303      	movs	r3, #3
 800a712:	e144      	b.n	800a99e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a714:	4b1a      	ldr	r3, [pc, #104]	; (800a780 <HAL_RCC_OscConfig+0x2ac>)
 800a716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a718:	f003 0302 	and.w	r3, r3, #2
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d1f0      	bne.n	800a702 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f003 0304 	and.w	r3, r3, #4
 800a728:	2b00      	cmp	r3, #0
 800a72a:	f000 80a0 	beq.w	800a86e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a72e:	2300      	movs	r3, #0
 800a730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a732:	4b13      	ldr	r3, [pc, #76]	; (800a780 <HAL_RCC_OscConfig+0x2ac>)
 800a734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d10f      	bne.n	800a75e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a73e:	2300      	movs	r3, #0
 800a740:	60bb      	str	r3, [r7, #8]
 800a742:	4b0f      	ldr	r3, [pc, #60]	; (800a780 <HAL_RCC_OscConfig+0x2ac>)
 800a744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a746:	4a0e      	ldr	r2, [pc, #56]	; (800a780 <HAL_RCC_OscConfig+0x2ac>)
 800a748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a74c:	6413      	str	r3, [r2, #64]	; 0x40
 800a74e:	4b0c      	ldr	r3, [pc, #48]	; (800a780 <HAL_RCC_OscConfig+0x2ac>)
 800a750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a756:	60bb      	str	r3, [r7, #8]
 800a758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a75a:	2301      	movs	r3, #1
 800a75c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a75e:	4b0b      	ldr	r3, [pc, #44]	; (800a78c <HAL_RCC_OscConfig+0x2b8>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a766:	2b00      	cmp	r3, #0
 800a768:	d121      	bne.n	800a7ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a76a:	4b08      	ldr	r3, [pc, #32]	; (800a78c <HAL_RCC_OscConfig+0x2b8>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a07      	ldr	r2, [pc, #28]	; (800a78c <HAL_RCC_OscConfig+0x2b8>)
 800a770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a776:	f7fe fabd 	bl	8008cf4 <HAL_GetTick>
 800a77a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a77c:	e011      	b.n	800a7a2 <HAL_RCC_OscConfig+0x2ce>
 800a77e:	bf00      	nop
 800a780:	40023800 	.word	0x40023800
 800a784:	42470000 	.word	0x42470000
 800a788:	42470e80 	.word	0x42470e80
 800a78c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a790:	f7fe fab0 	bl	8008cf4 <HAL_GetTick>
 800a794:	4602      	mov	r2, r0
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	1ad3      	subs	r3, r2, r3
 800a79a:	2b02      	cmp	r3, #2
 800a79c:	d901      	bls.n	800a7a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800a79e:	2303      	movs	r3, #3
 800a7a0:	e0fd      	b.n	800a99e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a7a2:	4b81      	ldr	r3, [pc, #516]	; (800a9a8 <HAL_RCC_OscConfig+0x4d4>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d0f0      	beq.n	800a790 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	689b      	ldr	r3, [r3, #8]
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d106      	bne.n	800a7c4 <HAL_RCC_OscConfig+0x2f0>
 800a7b6:	4b7d      	ldr	r3, [pc, #500]	; (800a9ac <HAL_RCC_OscConfig+0x4d8>)
 800a7b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7ba:	4a7c      	ldr	r2, [pc, #496]	; (800a9ac <HAL_RCC_OscConfig+0x4d8>)
 800a7bc:	f043 0301 	orr.w	r3, r3, #1
 800a7c0:	6713      	str	r3, [r2, #112]	; 0x70
 800a7c2:	e01c      	b.n	800a7fe <HAL_RCC_OscConfig+0x32a>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	2b05      	cmp	r3, #5
 800a7ca:	d10c      	bne.n	800a7e6 <HAL_RCC_OscConfig+0x312>
 800a7cc:	4b77      	ldr	r3, [pc, #476]	; (800a9ac <HAL_RCC_OscConfig+0x4d8>)
 800a7ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7d0:	4a76      	ldr	r2, [pc, #472]	; (800a9ac <HAL_RCC_OscConfig+0x4d8>)
 800a7d2:	f043 0304 	orr.w	r3, r3, #4
 800a7d6:	6713      	str	r3, [r2, #112]	; 0x70
 800a7d8:	4b74      	ldr	r3, [pc, #464]	; (800a9ac <HAL_RCC_OscConfig+0x4d8>)
 800a7da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7dc:	4a73      	ldr	r2, [pc, #460]	; (800a9ac <HAL_RCC_OscConfig+0x4d8>)
 800a7de:	f043 0301 	orr.w	r3, r3, #1
 800a7e2:	6713      	str	r3, [r2, #112]	; 0x70
 800a7e4:	e00b      	b.n	800a7fe <HAL_RCC_OscConfig+0x32a>
 800a7e6:	4b71      	ldr	r3, [pc, #452]	; (800a9ac <HAL_RCC_OscConfig+0x4d8>)
 800a7e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7ea:	4a70      	ldr	r2, [pc, #448]	; (800a9ac <HAL_RCC_OscConfig+0x4d8>)
 800a7ec:	f023 0301 	bic.w	r3, r3, #1
 800a7f0:	6713      	str	r3, [r2, #112]	; 0x70
 800a7f2:	4b6e      	ldr	r3, [pc, #440]	; (800a9ac <HAL_RCC_OscConfig+0x4d8>)
 800a7f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7f6:	4a6d      	ldr	r2, [pc, #436]	; (800a9ac <HAL_RCC_OscConfig+0x4d8>)
 800a7f8:	f023 0304 	bic.w	r3, r3, #4
 800a7fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d015      	beq.n	800a832 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a806:	f7fe fa75 	bl	8008cf4 <HAL_GetTick>
 800a80a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a80c:	e00a      	b.n	800a824 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a80e:	f7fe fa71 	bl	8008cf4 <HAL_GetTick>
 800a812:	4602      	mov	r2, r0
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	1ad3      	subs	r3, r2, r3
 800a818:	f241 3288 	movw	r2, #5000	; 0x1388
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d901      	bls.n	800a824 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800a820:	2303      	movs	r3, #3
 800a822:	e0bc      	b.n	800a99e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a824:	4b61      	ldr	r3, [pc, #388]	; (800a9ac <HAL_RCC_OscConfig+0x4d8>)
 800a826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a828:	f003 0302 	and.w	r3, r3, #2
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d0ee      	beq.n	800a80e <HAL_RCC_OscConfig+0x33a>
 800a830:	e014      	b.n	800a85c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a832:	f7fe fa5f 	bl	8008cf4 <HAL_GetTick>
 800a836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a838:	e00a      	b.n	800a850 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a83a:	f7fe fa5b 	bl	8008cf4 <HAL_GetTick>
 800a83e:	4602      	mov	r2, r0
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	1ad3      	subs	r3, r2, r3
 800a844:	f241 3288 	movw	r2, #5000	; 0x1388
 800a848:	4293      	cmp	r3, r2
 800a84a:	d901      	bls.n	800a850 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800a84c:	2303      	movs	r3, #3
 800a84e:	e0a6      	b.n	800a99e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a850:	4b56      	ldr	r3, [pc, #344]	; (800a9ac <HAL_RCC_OscConfig+0x4d8>)
 800a852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a854:	f003 0302 	and.w	r3, r3, #2
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d1ee      	bne.n	800a83a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a85c:	7dfb      	ldrb	r3, [r7, #23]
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d105      	bne.n	800a86e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a862:	4b52      	ldr	r3, [pc, #328]	; (800a9ac <HAL_RCC_OscConfig+0x4d8>)
 800a864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a866:	4a51      	ldr	r2, [pc, #324]	; (800a9ac <HAL_RCC_OscConfig+0x4d8>)
 800a868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a86c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	699b      	ldr	r3, [r3, #24]
 800a872:	2b00      	cmp	r3, #0
 800a874:	f000 8092 	beq.w	800a99c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a878:	4b4c      	ldr	r3, [pc, #304]	; (800a9ac <HAL_RCC_OscConfig+0x4d8>)
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	f003 030c 	and.w	r3, r3, #12
 800a880:	2b08      	cmp	r3, #8
 800a882:	d05c      	beq.n	800a93e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	699b      	ldr	r3, [r3, #24]
 800a888:	2b02      	cmp	r3, #2
 800a88a:	d141      	bne.n	800a910 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a88c:	4b48      	ldr	r3, [pc, #288]	; (800a9b0 <HAL_RCC_OscConfig+0x4dc>)
 800a88e:	2200      	movs	r2, #0
 800a890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a892:	f7fe fa2f 	bl	8008cf4 <HAL_GetTick>
 800a896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a898:	e008      	b.n	800a8ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a89a:	f7fe fa2b 	bl	8008cf4 <HAL_GetTick>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	1ad3      	subs	r3, r2, r3
 800a8a4:	2b02      	cmp	r3, #2
 800a8a6:	d901      	bls.n	800a8ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800a8a8:	2303      	movs	r3, #3
 800a8aa:	e078      	b.n	800a99e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a8ac:	4b3f      	ldr	r3, [pc, #252]	; (800a9ac <HAL_RCC_OscConfig+0x4d8>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d1f0      	bne.n	800a89a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	69da      	ldr	r2, [r3, #28]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6a1b      	ldr	r3, [r3, #32]
 800a8c0:	431a      	orrs	r2, r3
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c6:	019b      	lsls	r3, r3, #6
 800a8c8:	431a      	orrs	r2, r3
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ce:	085b      	lsrs	r3, r3, #1
 800a8d0:	3b01      	subs	r3, #1
 800a8d2:	041b      	lsls	r3, r3, #16
 800a8d4:	431a      	orrs	r2, r3
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8da:	061b      	lsls	r3, r3, #24
 800a8dc:	4933      	ldr	r1, [pc, #204]	; (800a9ac <HAL_RCC_OscConfig+0x4d8>)
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a8e2:	4b33      	ldr	r3, [pc, #204]	; (800a9b0 <HAL_RCC_OscConfig+0x4dc>)
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8e8:	f7fe fa04 	bl	8008cf4 <HAL_GetTick>
 800a8ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a8ee:	e008      	b.n	800a902 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a8f0:	f7fe fa00 	bl	8008cf4 <HAL_GetTick>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	1ad3      	subs	r3, r2, r3
 800a8fa:	2b02      	cmp	r3, #2
 800a8fc:	d901      	bls.n	800a902 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a8fe:	2303      	movs	r3, #3
 800a900:	e04d      	b.n	800a99e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a902:	4b2a      	ldr	r3, [pc, #168]	; (800a9ac <HAL_RCC_OscConfig+0x4d8>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d0f0      	beq.n	800a8f0 <HAL_RCC_OscConfig+0x41c>
 800a90e:	e045      	b.n	800a99c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a910:	4b27      	ldr	r3, [pc, #156]	; (800a9b0 <HAL_RCC_OscConfig+0x4dc>)
 800a912:	2200      	movs	r2, #0
 800a914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a916:	f7fe f9ed 	bl	8008cf4 <HAL_GetTick>
 800a91a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a91c:	e008      	b.n	800a930 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a91e:	f7fe f9e9 	bl	8008cf4 <HAL_GetTick>
 800a922:	4602      	mov	r2, r0
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	1ad3      	subs	r3, r2, r3
 800a928:	2b02      	cmp	r3, #2
 800a92a:	d901      	bls.n	800a930 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a92c:	2303      	movs	r3, #3
 800a92e:	e036      	b.n	800a99e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a930:	4b1e      	ldr	r3, [pc, #120]	; (800a9ac <HAL_RCC_OscConfig+0x4d8>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d1f0      	bne.n	800a91e <HAL_RCC_OscConfig+0x44a>
 800a93c:	e02e      	b.n	800a99c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	699b      	ldr	r3, [r3, #24]
 800a942:	2b01      	cmp	r3, #1
 800a944:	d101      	bne.n	800a94a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a946:	2301      	movs	r3, #1
 800a948:	e029      	b.n	800a99e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a94a:	4b18      	ldr	r3, [pc, #96]	; (800a9ac <HAL_RCC_OscConfig+0x4d8>)
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	69db      	ldr	r3, [r3, #28]
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d11c      	bne.n	800a998 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a968:	429a      	cmp	r2, r3
 800a96a:	d115      	bne.n	800a998 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800a96c:	68fa      	ldr	r2, [r7, #12]
 800a96e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a972:	4013      	ands	r3, r2
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a978:	4293      	cmp	r3, r2
 800a97a:	d10d      	bne.n	800a998 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800a986:	429a      	cmp	r2, r3
 800a988:	d106      	bne.n	800a998 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a994:	429a      	cmp	r2, r3
 800a996:	d001      	beq.n	800a99c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800a998:	2301      	movs	r3, #1
 800a99a:	e000      	b.n	800a99e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800a99c:	2300      	movs	r3, #0
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3718      	adds	r7, #24
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	40007000 	.word	0x40007000
 800a9ac:	40023800 	.word	0x40023800
 800a9b0:	42470060 	.word	0x42470060

0800a9b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d101      	bne.n	800a9c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	e0cc      	b.n	800ab62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a9c8:	4b68      	ldr	r3, [pc, #416]	; (800ab6c <HAL_RCC_ClockConfig+0x1b8>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f003 030f 	and.w	r3, r3, #15
 800a9d0:	683a      	ldr	r2, [r7, #0]
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d90c      	bls.n	800a9f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9d6:	4b65      	ldr	r3, [pc, #404]	; (800ab6c <HAL_RCC_ClockConfig+0x1b8>)
 800a9d8:	683a      	ldr	r2, [r7, #0]
 800a9da:	b2d2      	uxtb	r2, r2
 800a9dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9de:	4b63      	ldr	r3, [pc, #396]	; (800ab6c <HAL_RCC_ClockConfig+0x1b8>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f003 030f 	and.w	r3, r3, #15
 800a9e6:	683a      	ldr	r2, [r7, #0]
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d001      	beq.n	800a9f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e0b8      	b.n	800ab62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f003 0302 	and.w	r3, r3, #2
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d020      	beq.n	800aa3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f003 0304 	and.w	r3, r3, #4
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d005      	beq.n	800aa14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800aa08:	4b59      	ldr	r3, [pc, #356]	; (800ab70 <HAL_RCC_ClockConfig+0x1bc>)
 800aa0a:	689b      	ldr	r3, [r3, #8]
 800aa0c:	4a58      	ldr	r2, [pc, #352]	; (800ab70 <HAL_RCC_ClockConfig+0x1bc>)
 800aa0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800aa12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f003 0308 	and.w	r3, r3, #8
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d005      	beq.n	800aa2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800aa20:	4b53      	ldr	r3, [pc, #332]	; (800ab70 <HAL_RCC_ClockConfig+0x1bc>)
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	4a52      	ldr	r2, [pc, #328]	; (800ab70 <HAL_RCC_ClockConfig+0x1bc>)
 800aa26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800aa2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa2c:	4b50      	ldr	r3, [pc, #320]	; (800ab70 <HAL_RCC_ClockConfig+0x1bc>)
 800aa2e:	689b      	ldr	r3, [r3, #8]
 800aa30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	689b      	ldr	r3, [r3, #8]
 800aa38:	494d      	ldr	r1, [pc, #308]	; (800ab70 <HAL_RCC_ClockConfig+0x1bc>)
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f003 0301 	and.w	r3, r3, #1
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d044      	beq.n	800aad4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d107      	bne.n	800aa62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa52:	4b47      	ldr	r3, [pc, #284]	; (800ab70 <HAL_RCC_ClockConfig+0x1bc>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d119      	bne.n	800aa92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	e07f      	b.n	800ab62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	2b02      	cmp	r3, #2
 800aa68:	d003      	beq.n	800aa72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800aa6e:	2b03      	cmp	r3, #3
 800aa70:	d107      	bne.n	800aa82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aa72:	4b3f      	ldr	r3, [pc, #252]	; (800ab70 <HAL_RCC_ClockConfig+0x1bc>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d109      	bne.n	800aa92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	e06f      	b.n	800ab62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa82:	4b3b      	ldr	r3, [pc, #236]	; (800ab70 <HAL_RCC_ClockConfig+0x1bc>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f003 0302 	and.w	r3, r3, #2
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d101      	bne.n	800aa92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	e067      	b.n	800ab62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800aa92:	4b37      	ldr	r3, [pc, #220]	; (800ab70 <HAL_RCC_ClockConfig+0x1bc>)
 800aa94:	689b      	ldr	r3, [r3, #8]
 800aa96:	f023 0203 	bic.w	r2, r3, #3
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	4934      	ldr	r1, [pc, #208]	; (800ab70 <HAL_RCC_ClockConfig+0x1bc>)
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800aaa4:	f7fe f926 	bl	8008cf4 <HAL_GetTick>
 800aaa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aaaa:	e00a      	b.n	800aac2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aaac:	f7fe f922 	bl	8008cf4 <HAL_GetTick>
 800aab0:	4602      	mov	r2, r0
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	1ad3      	subs	r3, r2, r3
 800aab6:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d901      	bls.n	800aac2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800aabe:	2303      	movs	r3, #3
 800aac0:	e04f      	b.n	800ab62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aac2:	4b2b      	ldr	r3, [pc, #172]	; (800ab70 <HAL_RCC_ClockConfig+0x1bc>)
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	f003 020c 	and.w	r2, r3, #12
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	009b      	lsls	r3, r3, #2
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d1eb      	bne.n	800aaac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800aad4:	4b25      	ldr	r3, [pc, #148]	; (800ab6c <HAL_RCC_ClockConfig+0x1b8>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f003 030f 	and.w	r3, r3, #15
 800aadc:	683a      	ldr	r2, [r7, #0]
 800aade:	429a      	cmp	r2, r3
 800aae0:	d20c      	bcs.n	800aafc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aae2:	4b22      	ldr	r3, [pc, #136]	; (800ab6c <HAL_RCC_ClockConfig+0x1b8>)
 800aae4:	683a      	ldr	r2, [r7, #0]
 800aae6:	b2d2      	uxtb	r2, r2
 800aae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aaea:	4b20      	ldr	r3, [pc, #128]	; (800ab6c <HAL_RCC_ClockConfig+0x1b8>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f003 030f 	and.w	r3, r3, #15
 800aaf2:	683a      	ldr	r2, [r7, #0]
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d001      	beq.n	800aafc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800aaf8:	2301      	movs	r3, #1
 800aafa:	e032      	b.n	800ab62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f003 0304 	and.w	r3, r3, #4
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d008      	beq.n	800ab1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ab08:	4b19      	ldr	r3, [pc, #100]	; (800ab70 <HAL_RCC_ClockConfig+0x1bc>)
 800ab0a:	689b      	ldr	r3, [r3, #8]
 800ab0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	4916      	ldr	r1, [pc, #88]	; (800ab70 <HAL_RCC_ClockConfig+0x1bc>)
 800ab16:	4313      	orrs	r3, r2
 800ab18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f003 0308 	and.w	r3, r3, #8
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d009      	beq.n	800ab3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ab26:	4b12      	ldr	r3, [pc, #72]	; (800ab70 <HAL_RCC_ClockConfig+0x1bc>)
 800ab28:	689b      	ldr	r3, [r3, #8]
 800ab2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	691b      	ldr	r3, [r3, #16]
 800ab32:	00db      	lsls	r3, r3, #3
 800ab34:	490e      	ldr	r1, [pc, #56]	; (800ab70 <HAL_RCC_ClockConfig+0x1bc>)
 800ab36:	4313      	orrs	r3, r2
 800ab38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ab3a:	f000 f821 	bl	800ab80 <HAL_RCC_GetSysClockFreq>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	4b0b      	ldr	r3, [pc, #44]	; (800ab70 <HAL_RCC_ClockConfig+0x1bc>)
 800ab42:	689b      	ldr	r3, [r3, #8]
 800ab44:	091b      	lsrs	r3, r3, #4
 800ab46:	f003 030f 	and.w	r3, r3, #15
 800ab4a:	490a      	ldr	r1, [pc, #40]	; (800ab74 <HAL_RCC_ClockConfig+0x1c0>)
 800ab4c:	5ccb      	ldrb	r3, [r1, r3]
 800ab4e:	fa22 f303 	lsr.w	r3, r2, r3
 800ab52:	4a09      	ldr	r2, [pc, #36]	; (800ab78 <HAL_RCC_ClockConfig+0x1c4>)
 800ab54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ab56:	4b09      	ldr	r3, [pc, #36]	; (800ab7c <HAL_RCC_ClockConfig+0x1c8>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7f6 fcd2 	bl	8001504 <HAL_InitTick>

  return HAL_OK;
 800ab60:	2300      	movs	r3, #0
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3710      	adds	r7, #16
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop
 800ab6c:	40023c00 	.word	0x40023c00
 800ab70:	40023800 	.word	0x40023800
 800ab74:	0801d068 	.word	0x0801d068
 800ab78:	20001228 	.word	0x20001228
 800ab7c:	200013bc 	.word	0x200013bc

0800ab80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ab80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ab84:	b084      	sub	sp, #16
 800ab86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	607b      	str	r3, [r7, #4]
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	60fb      	str	r3, [r7, #12]
 800ab90:	2300      	movs	r3, #0
 800ab92:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800ab94:	2300      	movs	r3, #0
 800ab96:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ab98:	4b67      	ldr	r3, [pc, #412]	; (800ad38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ab9a:	689b      	ldr	r3, [r3, #8]
 800ab9c:	f003 030c 	and.w	r3, r3, #12
 800aba0:	2b08      	cmp	r3, #8
 800aba2:	d00d      	beq.n	800abc0 <HAL_RCC_GetSysClockFreq+0x40>
 800aba4:	2b08      	cmp	r3, #8
 800aba6:	f200 80bd 	bhi.w	800ad24 <HAL_RCC_GetSysClockFreq+0x1a4>
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d002      	beq.n	800abb4 <HAL_RCC_GetSysClockFreq+0x34>
 800abae:	2b04      	cmp	r3, #4
 800abb0:	d003      	beq.n	800abba <HAL_RCC_GetSysClockFreq+0x3a>
 800abb2:	e0b7      	b.n	800ad24 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800abb4:	4b61      	ldr	r3, [pc, #388]	; (800ad3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800abb6:	60bb      	str	r3, [r7, #8]
       break;
 800abb8:	e0b7      	b.n	800ad2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800abba:	4b61      	ldr	r3, [pc, #388]	; (800ad40 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800abbc:	60bb      	str	r3, [r7, #8]
      break;
 800abbe:	e0b4      	b.n	800ad2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800abc0:	4b5d      	ldr	r3, [pc, #372]	; (800ad38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abc8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800abca:	4b5b      	ldr	r3, [pc, #364]	; (800ad38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d04d      	beq.n	800ac72 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800abd6:	4b58      	ldr	r3, [pc, #352]	; (800ad38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	099b      	lsrs	r3, r3, #6
 800abdc:	461a      	mov	r2, r3
 800abde:	f04f 0300 	mov.w	r3, #0
 800abe2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800abe6:	f04f 0100 	mov.w	r1, #0
 800abea:	ea02 0800 	and.w	r8, r2, r0
 800abee:	ea03 0901 	and.w	r9, r3, r1
 800abf2:	4640      	mov	r0, r8
 800abf4:	4649      	mov	r1, r9
 800abf6:	f04f 0200 	mov.w	r2, #0
 800abfa:	f04f 0300 	mov.w	r3, #0
 800abfe:	014b      	lsls	r3, r1, #5
 800ac00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800ac04:	0142      	lsls	r2, r0, #5
 800ac06:	4610      	mov	r0, r2
 800ac08:	4619      	mov	r1, r3
 800ac0a:	ebb0 0008 	subs.w	r0, r0, r8
 800ac0e:	eb61 0109 	sbc.w	r1, r1, r9
 800ac12:	f04f 0200 	mov.w	r2, #0
 800ac16:	f04f 0300 	mov.w	r3, #0
 800ac1a:	018b      	lsls	r3, r1, #6
 800ac1c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ac20:	0182      	lsls	r2, r0, #6
 800ac22:	1a12      	subs	r2, r2, r0
 800ac24:	eb63 0301 	sbc.w	r3, r3, r1
 800ac28:	f04f 0000 	mov.w	r0, #0
 800ac2c:	f04f 0100 	mov.w	r1, #0
 800ac30:	00d9      	lsls	r1, r3, #3
 800ac32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ac36:	00d0      	lsls	r0, r2, #3
 800ac38:	4602      	mov	r2, r0
 800ac3a:	460b      	mov	r3, r1
 800ac3c:	eb12 0208 	adds.w	r2, r2, r8
 800ac40:	eb43 0309 	adc.w	r3, r3, r9
 800ac44:	f04f 0000 	mov.w	r0, #0
 800ac48:	f04f 0100 	mov.w	r1, #0
 800ac4c:	0259      	lsls	r1, r3, #9
 800ac4e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800ac52:	0250      	lsls	r0, r2, #9
 800ac54:	4602      	mov	r2, r0
 800ac56:	460b      	mov	r3, r1
 800ac58:	4610      	mov	r0, r2
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	461a      	mov	r2, r3
 800ac60:	f04f 0300 	mov.w	r3, #0
 800ac64:	f7f5 fff8 	bl	8000c58 <__aeabi_uldivmod>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	4613      	mov	r3, r2
 800ac6e:	60fb      	str	r3, [r7, #12]
 800ac70:	e04a      	b.n	800ad08 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ac72:	4b31      	ldr	r3, [pc, #196]	; (800ad38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	099b      	lsrs	r3, r3, #6
 800ac78:	461a      	mov	r2, r3
 800ac7a:	f04f 0300 	mov.w	r3, #0
 800ac7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ac82:	f04f 0100 	mov.w	r1, #0
 800ac86:	ea02 0400 	and.w	r4, r2, r0
 800ac8a:	ea03 0501 	and.w	r5, r3, r1
 800ac8e:	4620      	mov	r0, r4
 800ac90:	4629      	mov	r1, r5
 800ac92:	f04f 0200 	mov.w	r2, #0
 800ac96:	f04f 0300 	mov.w	r3, #0
 800ac9a:	014b      	lsls	r3, r1, #5
 800ac9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800aca0:	0142      	lsls	r2, r0, #5
 800aca2:	4610      	mov	r0, r2
 800aca4:	4619      	mov	r1, r3
 800aca6:	1b00      	subs	r0, r0, r4
 800aca8:	eb61 0105 	sbc.w	r1, r1, r5
 800acac:	f04f 0200 	mov.w	r2, #0
 800acb0:	f04f 0300 	mov.w	r3, #0
 800acb4:	018b      	lsls	r3, r1, #6
 800acb6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800acba:	0182      	lsls	r2, r0, #6
 800acbc:	1a12      	subs	r2, r2, r0
 800acbe:	eb63 0301 	sbc.w	r3, r3, r1
 800acc2:	f04f 0000 	mov.w	r0, #0
 800acc6:	f04f 0100 	mov.w	r1, #0
 800acca:	00d9      	lsls	r1, r3, #3
 800accc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800acd0:	00d0      	lsls	r0, r2, #3
 800acd2:	4602      	mov	r2, r0
 800acd4:	460b      	mov	r3, r1
 800acd6:	1912      	adds	r2, r2, r4
 800acd8:	eb45 0303 	adc.w	r3, r5, r3
 800acdc:	f04f 0000 	mov.w	r0, #0
 800ace0:	f04f 0100 	mov.w	r1, #0
 800ace4:	0299      	lsls	r1, r3, #10
 800ace6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800acea:	0290      	lsls	r0, r2, #10
 800acec:	4602      	mov	r2, r0
 800acee:	460b      	mov	r3, r1
 800acf0:	4610      	mov	r0, r2
 800acf2:	4619      	mov	r1, r3
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	461a      	mov	r2, r3
 800acf8:	f04f 0300 	mov.w	r3, #0
 800acfc:	f7f5 ffac 	bl	8000c58 <__aeabi_uldivmod>
 800ad00:	4602      	mov	r2, r0
 800ad02:	460b      	mov	r3, r1
 800ad04:	4613      	mov	r3, r2
 800ad06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ad08:	4b0b      	ldr	r3, [pc, #44]	; (800ad38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	0c1b      	lsrs	r3, r3, #16
 800ad0e:	f003 0303 	and.w	r3, r3, #3
 800ad12:	3301      	adds	r3, #1
 800ad14:	005b      	lsls	r3, r3, #1
 800ad16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800ad18:	68fa      	ldr	r2, [r7, #12]
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad20:	60bb      	str	r3, [r7, #8]
      break;
 800ad22:	e002      	b.n	800ad2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ad24:	4b05      	ldr	r3, [pc, #20]	; (800ad3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800ad26:	60bb      	str	r3, [r7, #8]
      break;
 800ad28:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ad2a:	68bb      	ldr	r3, [r7, #8]
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3710      	adds	r7, #16
 800ad30:	46bd      	mov	sp, r7
 800ad32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ad36:	bf00      	nop
 800ad38:	40023800 	.word	0x40023800
 800ad3c:	00f42400 	.word	0x00f42400
 800ad40:	007a1200 	.word	0x007a1200

0800ad44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ad44:	b480      	push	{r7}
 800ad46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ad48:	4b03      	ldr	r3, [pc, #12]	; (800ad58 <HAL_RCC_GetHCLKFreq+0x14>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad54:	4770      	bx	lr
 800ad56:	bf00      	nop
 800ad58:	20001228 	.word	0x20001228

0800ad5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ad60:	f7ff fff0 	bl	800ad44 <HAL_RCC_GetHCLKFreq>
 800ad64:	4602      	mov	r2, r0
 800ad66:	4b05      	ldr	r3, [pc, #20]	; (800ad7c <HAL_RCC_GetPCLK1Freq+0x20>)
 800ad68:	689b      	ldr	r3, [r3, #8]
 800ad6a:	0a9b      	lsrs	r3, r3, #10
 800ad6c:	f003 0307 	and.w	r3, r3, #7
 800ad70:	4903      	ldr	r1, [pc, #12]	; (800ad80 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ad72:	5ccb      	ldrb	r3, [r1, r3]
 800ad74:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	bd80      	pop	{r7, pc}
 800ad7c:	40023800 	.word	0x40023800
 800ad80:	0801d078 	.word	0x0801d078

0800ad84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800ad88:	f7ff ffdc 	bl	800ad44 <HAL_RCC_GetHCLKFreq>
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	4b05      	ldr	r3, [pc, #20]	; (800ada4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ad90:	689b      	ldr	r3, [r3, #8]
 800ad92:	0b5b      	lsrs	r3, r3, #13
 800ad94:	f003 0307 	and.w	r3, r3, #7
 800ad98:	4903      	ldr	r1, [pc, #12]	; (800ada8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ad9a:	5ccb      	ldrb	r3, [r1, r3]
 800ad9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	40023800 	.word	0x40023800
 800ada8:	0801d078 	.word	0x0801d078

0800adac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800adac:	b480      	push	{r7}
 800adae:	b083      	sub	sp, #12
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	220f      	movs	r2, #15
 800adba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800adbc:	4b12      	ldr	r3, [pc, #72]	; (800ae08 <HAL_RCC_GetClockConfig+0x5c>)
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	f003 0203 	and.w	r2, r3, #3
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800adc8:	4b0f      	ldr	r3, [pc, #60]	; (800ae08 <HAL_RCC_GetClockConfig+0x5c>)
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800add4:	4b0c      	ldr	r3, [pc, #48]	; (800ae08 <HAL_RCC_GetClockConfig+0x5c>)
 800add6:	689b      	ldr	r3, [r3, #8]
 800add8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800ade0:	4b09      	ldr	r3, [pc, #36]	; (800ae08 <HAL_RCC_GetClockConfig+0x5c>)
 800ade2:	689b      	ldr	r3, [r3, #8]
 800ade4:	08db      	lsrs	r3, r3, #3
 800ade6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800adee:	4b07      	ldr	r3, [pc, #28]	; (800ae0c <HAL_RCC_GetClockConfig+0x60>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f003 020f 	and.w	r2, r3, #15
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	601a      	str	r2, [r3, #0]
}
 800adfa:	bf00      	nop
 800adfc:	370c      	adds	r7, #12
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop
 800ae08:	40023800 	.word	0x40023800
 800ae0c:	40023c00 	.word	0x40023c00

0800ae10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d101      	bne.n	800ae22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ae1e:	2301      	movs	r3, #1
 800ae20:	e01d      	b.n	800ae5e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d106      	bne.n	800ae3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2200      	movs	r2, #0
 800ae32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 f815 	bl	800ae66 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2202      	movs	r2, #2
 800ae40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681a      	ldr	r2, [r3, #0]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	3304      	adds	r3, #4
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	4610      	mov	r0, r2
 800ae50:	f000 f968 	bl	800b124 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2201      	movs	r2, #1
 800ae58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ae5c:	2300      	movs	r3, #0
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3708      	adds	r7, #8
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}

0800ae66 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800ae66:	b480      	push	{r7}
 800ae68:	b083      	sub	sp, #12
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ae6e:	bf00      	nop
 800ae70:	370c      	adds	r7, #12
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr

0800ae7a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ae7a:	b480      	push	{r7}
 800ae7c:	b085      	sub	sp, #20
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	68da      	ldr	r2, [r3, #12]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f042 0201 	orr.w	r2, r2, #1
 800ae90:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	689b      	ldr	r3, [r3, #8]
 800ae98:	f003 0307 	and.w	r3, r3, #7
 800ae9c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2b06      	cmp	r3, #6
 800aea2:	d007      	beq.n	800aeb4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	681a      	ldr	r2, [r3, #0]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f042 0201 	orr.w	r2, r2, #1
 800aeb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aeb4:	2300      	movs	r3, #0
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3714      	adds	r7, #20
 800aeba:	46bd      	mov	sp, r7
 800aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec0:	4770      	bx	lr

0800aec2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aec2:	b580      	push	{r7, lr}
 800aec4:	b082      	sub	sp, #8
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	691b      	ldr	r3, [r3, #16]
 800aed0:	f003 0302 	and.w	r3, r3, #2
 800aed4:	2b02      	cmp	r3, #2
 800aed6:	d122      	bne.n	800af1e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	f003 0302 	and.w	r3, r3, #2
 800aee2:	2b02      	cmp	r3, #2
 800aee4:	d11b      	bne.n	800af1e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f06f 0202 	mvn.w	r2, #2
 800aeee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2201      	movs	r2, #1
 800aef4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	699b      	ldr	r3, [r3, #24]
 800aefc:	f003 0303 	and.w	r3, r3, #3
 800af00:	2b00      	cmp	r3, #0
 800af02:	d003      	beq.n	800af0c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f000 f8ee 	bl	800b0e6 <HAL_TIM_IC_CaptureCallback>
 800af0a:	e005      	b.n	800af18 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 f8e0 	bl	800b0d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 f8f1 	bl	800b0fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2200      	movs	r2, #0
 800af1c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	691b      	ldr	r3, [r3, #16]
 800af24:	f003 0304 	and.w	r3, r3, #4
 800af28:	2b04      	cmp	r3, #4
 800af2a:	d122      	bne.n	800af72 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	68db      	ldr	r3, [r3, #12]
 800af32:	f003 0304 	and.w	r3, r3, #4
 800af36:	2b04      	cmp	r3, #4
 800af38:	d11b      	bne.n	800af72 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f06f 0204 	mvn.w	r2, #4
 800af42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2202      	movs	r2, #2
 800af48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	699b      	ldr	r3, [r3, #24]
 800af50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af54:	2b00      	cmp	r3, #0
 800af56:	d003      	beq.n	800af60 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f000 f8c4 	bl	800b0e6 <HAL_TIM_IC_CaptureCallback>
 800af5e:	e005      	b.n	800af6c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 f8b6 	bl	800b0d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 f8c7 	bl	800b0fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2200      	movs	r2, #0
 800af70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	691b      	ldr	r3, [r3, #16]
 800af78:	f003 0308 	and.w	r3, r3, #8
 800af7c:	2b08      	cmp	r3, #8
 800af7e:	d122      	bne.n	800afc6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	68db      	ldr	r3, [r3, #12]
 800af86:	f003 0308 	and.w	r3, r3, #8
 800af8a:	2b08      	cmp	r3, #8
 800af8c:	d11b      	bne.n	800afc6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f06f 0208 	mvn.w	r2, #8
 800af96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2204      	movs	r2, #4
 800af9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	69db      	ldr	r3, [r3, #28]
 800afa4:	f003 0303 	and.w	r3, r3, #3
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d003      	beq.n	800afb4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 f89a 	bl	800b0e6 <HAL_TIM_IC_CaptureCallback>
 800afb2:	e005      	b.n	800afc0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 f88c 	bl	800b0d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f000 f89d 	bl	800b0fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2200      	movs	r2, #0
 800afc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	691b      	ldr	r3, [r3, #16]
 800afcc:	f003 0310 	and.w	r3, r3, #16
 800afd0:	2b10      	cmp	r3, #16
 800afd2:	d122      	bne.n	800b01a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	68db      	ldr	r3, [r3, #12]
 800afda:	f003 0310 	and.w	r3, r3, #16
 800afde:	2b10      	cmp	r3, #16
 800afe0:	d11b      	bne.n	800b01a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f06f 0210 	mvn.w	r2, #16
 800afea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2208      	movs	r2, #8
 800aff0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	69db      	ldr	r3, [r3, #28]
 800aff8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800affc:	2b00      	cmp	r3, #0
 800affe:	d003      	beq.n	800b008 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f000 f870 	bl	800b0e6 <HAL_TIM_IC_CaptureCallback>
 800b006:	e005      	b.n	800b014 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 f862 	bl	800b0d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 f873 	bl	800b0fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2200      	movs	r2, #0
 800b018:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	691b      	ldr	r3, [r3, #16]
 800b020:	f003 0301 	and.w	r3, r3, #1
 800b024:	2b01      	cmp	r3, #1
 800b026:	d10e      	bne.n	800b046 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	68db      	ldr	r3, [r3, #12]
 800b02e:	f003 0301 	and.w	r3, r3, #1
 800b032:	2b01      	cmp	r3, #1
 800b034:	d107      	bne.n	800b046 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f06f 0201 	mvn.w	r2, #1
 800b03e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f7f6 f959 	bl	80012f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	691b      	ldr	r3, [r3, #16]
 800b04c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b050:	2b80      	cmp	r3, #128	; 0x80
 800b052:	d10e      	bne.n	800b072 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	68db      	ldr	r3, [r3, #12]
 800b05a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b05e:	2b80      	cmp	r3, #128	; 0x80
 800b060:	d107      	bne.n	800b072 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b06a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f000 f8e3 	bl	800b238 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	691b      	ldr	r3, [r3, #16]
 800b078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b07c:	2b40      	cmp	r3, #64	; 0x40
 800b07e:	d10e      	bne.n	800b09e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	68db      	ldr	r3, [r3, #12]
 800b086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b08a:	2b40      	cmp	r3, #64	; 0x40
 800b08c:	d107      	bne.n	800b09e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f000 f838 	bl	800b10e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	691b      	ldr	r3, [r3, #16]
 800b0a4:	f003 0320 	and.w	r3, r3, #32
 800b0a8:	2b20      	cmp	r3, #32
 800b0aa:	d10e      	bne.n	800b0ca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	68db      	ldr	r3, [r3, #12]
 800b0b2:	f003 0320 	and.w	r3, r3, #32
 800b0b6:	2b20      	cmp	r3, #32
 800b0b8:	d107      	bne.n	800b0ca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f06f 0220 	mvn.w	r2, #32
 800b0c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f000 f8ad 	bl	800b224 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b0ca:	bf00      	nop
 800b0cc:	3708      	adds	r7, #8
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b0d2:	b480      	push	{r7}
 800b0d4:	b083      	sub	sp, #12
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b0da:	bf00      	nop
 800b0dc:	370c      	adds	r7, #12
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr

0800b0e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b0e6:	b480      	push	{r7}
 800b0e8:	b083      	sub	sp, #12
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b0ee:	bf00      	nop
 800b0f0:	370c      	adds	r7, #12
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr

0800b0fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b0fa:	b480      	push	{r7}
 800b0fc:	b083      	sub	sp, #12
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b102:	bf00      	nop
 800b104:	370c      	adds	r7, #12
 800b106:	46bd      	mov	sp, r7
 800b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10c:	4770      	bx	lr

0800b10e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b10e:	b480      	push	{r7}
 800b110:	b083      	sub	sp, #12
 800b112:	af00      	add	r7, sp, #0
 800b114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b116:	bf00      	nop
 800b118:	370c      	adds	r7, #12
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr
	...

0800b124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b124:	b480      	push	{r7}
 800b126:	b085      	sub	sp, #20
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	4a34      	ldr	r2, [pc, #208]	; (800b208 <TIM_Base_SetConfig+0xe4>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d00f      	beq.n	800b15c <TIM_Base_SetConfig+0x38>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b142:	d00b      	beq.n	800b15c <TIM_Base_SetConfig+0x38>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	4a31      	ldr	r2, [pc, #196]	; (800b20c <TIM_Base_SetConfig+0xe8>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d007      	beq.n	800b15c <TIM_Base_SetConfig+0x38>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	4a30      	ldr	r2, [pc, #192]	; (800b210 <TIM_Base_SetConfig+0xec>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d003      	beq.n	800b15c <TIM_Base_SetConfig+0x38>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	4a2f      	ldr	r2, [pc, #188]	; (800b214 <TIM_Base_SetConfig+0xf0>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d108      	bne.n	800b16e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	68fa      	ldr	r2, [r7, #12]
 800b16a:	4313      	orrs	r3, r2
 800b16c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	4a25      	ldr	r2, [pc, #148]	; (800b208 <TIM_Base_SetConfig+0xe4>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d01b      	beq.n	800b1ae <TIM_Base_SetConfig+0x8a>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b17c:	d017      	beq.n	800b1ae <TIM_Base_SetConfig+0x8a>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	4a22      	ldr	r2, [pc, #136]	; (800b20c <TIM_Base_SetConfig+0xe8>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d013      	beq.n	800b1ae <TIM_Base_SetConfig+0x8a>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	4a21      	ldr	r2, [pc, #132]	; (800b210 <TIM_Base_SetConfig+0xec>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d00f      	beq.n	800b1ae <TIM_Base_SetConfig+0x8a>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	4a20      	ldr	r2, [pc, #128]	; (800b214 <TIM_Base_SetConfig+0xf0>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d00b      	beq.n	800b1ae <TIM_Base_SetConfig+0x8a>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	4a1f      	ldr	r2, [pc, #124]	; (800b218 <TIM_Base_SetConfig+0xf4>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d007      	beq.n	800b1ae <TIM_Base_SetConfig+0x8a>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	4a1e      	ldr	r2, [pc, #120]	; (800b21c <TIM_Base_SetConfig+0xf8>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d003      	beq.n	800b1ae <TIM_Base_SetConfig+0x8a>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	4a1d      	ldr	r2, [pc, #116]	; (800b220 <TIM_Base_SetConfig+0xfc>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d108      	bne.n	800b1c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	68fa      	ldr	r2, [r7, #12]
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	695b      	ldr	r3, [r3, #20]
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	68fa      	ldr	r2, [r7, #12]
 800b1d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	689a      	ldr	r2, [r3, #8]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	4a08      	ldr	r2, [pc, #32]	; (800b208 <TIM_Base_SetConfig+0xe4>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d103      	bne.n	800b1f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	691a      	ldr	r2, [r3, #16]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	615a      	str	r2, [r3, #20]
}
 800b1fa:	bf00      	nop
 800b1fc:	3714      	adds	r7, #20
 800b1fe:	46bd      	mov	sp, r7
 800b200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b204:	4770      	bx	lr
 800b206:	bf00      	nop
 800b208:	40010000 	.word	0x40010000
 800b20c:	40000400 	.word	0x40000400
 800b210:	40000800 	.word	0x40000800
 800b214:	40000c00 	.word	0x40000c00
 800b218:	40014000 	.word	0x40014000
 800b21c:	40014400 	.word	0x40014400
 800b220:	40014800 	.word	0x40014800

0800b224 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b224:	b480      	push	{r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b22c:	bf00      	nop
 800b22e:	370c      	adds	r7, #12
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b238:	b480      	push	{r7}
 800b23a:	b083      	sub	sp, #12
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b240:	bf00      	nop
 800b242:	370c      	adds	r7, #12
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d101      	bne.n	800b25e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b25a:	2301      	movs	r3, #1
 800b25c:	e03f      	b.n	800b2de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b264:	b2db      	uxtb	r3, r3
 800b266:	2b00      	cmp	r3, #0
 800b268:	d106      	bne.n	800b278 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 f837 	bl	800b2e6 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2224      	movs	r2, #36	; 0x24
 800b27c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	68da      	ldr	r2, [r3, #12]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b28e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f000 f915 	bl	800b4c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	691a      	ldr	r2, [r3, #16]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b2a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	695a      	ldr	r2, [r3, #20]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b2b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	68da      	ldr	r2, [r3, #12]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b2c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2220      	movs	r2, #32
 800b2d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2220      	movs	r2, #32
 800b2d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800b2dc:	2300      	movs	r3, #0
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3708      	adds	r7, #8
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800b2e6:	b480      	push	{r7}
 800b2e8:	b083      	sub	sp, #12
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 800b2ee:	bf00      	nop
 800b2f0:	370c      	adds	r7, #12
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr

0800b2fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b2fa:	b580      	push	{r7, lr}
 800b2fc:	b088      	sub	sp, #32
 800b2fe:	af02      	add	r7, sp, #8
 800b300:	60f8      	str	r0, [r7, #12]
 800b302:	60b9      	str	r1, [r7, #8]
 800b304:	603b      	str	r3, [r7, #0]
 800b306:	4613      	mov	r3, r2
 800b308:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800b30a:	2300      	movs	r3, #0
 800b30c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b314:	b2db      	uxtb	r3, r3
 800b316:	2b20      	cmp	r3, #32
 800b318:	f040 8083 	bne.w	800b422 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d002      	beq.n	800b328 <HAL_UART_Transmit+0x2e>
 800b322:	88fb      	ldrh	r3, [r7, #6]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d101      	bne.n	800b32c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800b328:	2301      	movs	r3, #1
 800b32a:	e07b      	b.n	800b424 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b332:	2b01      	cmp	r3, #1
 800b334:	d101      	bne.n	800b33a <HAL_UART_Transmit+0x40>
 800b336:	2302      	movs	r3, #2
 800b338:	e074      	b.n	800b424 <HAL_UART_Transmit+0x12a>
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2201      	movs	r2, #1
 800b33e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2200      	movs	r2, #0
 800b346:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2221      	movs	r2, #33	; 0x21
 800b34c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800b350:	f7fd fcd0 	bl	8008cf4 <HAL_GetTick>
 800b354:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	88fa      	ldrh	r2, [r7, #6]
 800b35a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	88fa      	ldrh	r2, [r7, #6]
 800b360:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2200      	movs	r2, #0
 800b366:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800b36a:	e042      	b.n	800b3f2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b370:	b29b      	uxth	r3, r3
 800b372:	3b01      	subs	r3, #1
 800b374:	b29a      	uxth	r2, r3
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b382:	d122      	bne.n	800b3ca <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	9300      	str	r3, [sp, #0]
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	2200      	movs	r2, #0
 800b38c:	2180      	movs	r1, #128	; 0x80
 800b38e:	68f8      	ldr	r0, [r7, #12]
 800b390:	f000 f84c 	bl	800b42c <UART_WaitOnFlagUntilTimeout>
 800b394:	4603      	mov	r3, r0
 800b396:	2b00      	cmp	r3, #0
 800b398:	d001      	beq.n	800b39e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800b39a:	2303      	movs	r3, #3
 800b39c:	e042      	b.n	800b424 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	881b      	ldrh	r3, [r3, #0]
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b3b0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	691b      	ldr	r3, [r3, #16]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d103      	bne.n	800b3c2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	3302      	adds	r3, #2
 800b3be:	60bb      	str	r3, [r7, #8]
 800b3c0:	e017      	b.n	800b3f2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	60bb      	str	r3, [r7, #8]
 800b3c8:	e013      	b.n	800b3f2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	9300      	str	r3, [sp, #0]
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	2180      	movs	r1, #128	; 0x80
 800b3d4:	68f8      	ldr	r0, [r7, #12]
 800b3d6:	f000 f829 	bl	800b42c <UART_WaitOnFlagUntilTimeout>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d001      	beq.n	800b3e4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800b3e0:	2303      	movs	r3, #3
 800b3e2:	e01f      	b.n	800b424 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	1c5a      	adds	r2, r3, #1
 800b3e8:	60ba      	str	r2, [r7, #8]
 800b3ea:	781a      	ldrb	r2, [r3, #0]
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b3f6:	b29b      	uxth	r3, r3
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d1b7      	bne.n	800b36c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	9300      	str	r3, [sp, #0]
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	2200      	movs	r2, #0
 800b404:	2140      	movs	r1, #64	; 0x40
 800b406:	68f8      	ldr	r0, [r7, #12]
 800b408:	f000 f810 	bl	800b42c <UART_WaitOnFlagUntilTimeout>
 800b40c:	4603      	mov	r3, r0
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d001      	beq.n	800b416 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800b412:	2303      	movs	r3, #3
 800b414:	e006      	b.n	800b424 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2220      	movs	r2, #32
 800b41a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800b41e:	2300      	movs	r3, #0
 800b420:	e000      	b.n	800b424 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800b422:	2302      	movs	r3, #2
  }
}
 800b424:	4618      	mov	r0, r3
 800b426:	3718      	adds	r7, #24
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	60f8      	str	r0, [r7, #12]
 800b434:	60b9      	str	r1, [r7, #8]
 800b436:	603b      	str	r3, [r7, #0]
 800b438:	4613      	mov	r3, r2
 800b43a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b43c:	e02c      	b.n	800b498 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b43e:	69bb      	ldr	r3, [r7, #24]
 800b440:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b444:	d028      	beq.n	800b498 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b446:	69bb      	ldr	r3, [r7, #24]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d007      	beq.n	800b45c <UART_WaitOnFlagUntilTimeout+0x30>
 800b44c:	f7fd fc52 	bl	8008cf4 <HAL_GetTick>
 800b450:	4602      	mov	r2, r0
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	1ad3      	subs	r3, r2, r3
 800b456:	69ba      	ldr	r2, [r7, #24]
 800b458:	429a      	cmp	r2, r3
 800b45a:	d21d      	bcs.n	800b498 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	68da      	ldr	r2, [r3, #12]
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b46a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	695a      	ldr	r2, [r3, #20]
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f022 0201 	bic.w	r2, r2, #1
 800b47a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	2220      	movs	r2, #32
 800b480:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2220      	movs	r2, #32
 800b488:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2200      	movs	r2, #0
 800b490:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800b494:	2303      	movs	r3, #3
 800b496:	e00f      	b.n	800b4b8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	4013      	ands	r3, r2
 800b4a2:	68ba      	ldr	r2, [r7, #8]
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	bf0c      	ite	eq
 800b4a8:	2301      	moveq	r3, #1
 800b4aa:	2300      	movne	r3, #0
 800b4ac:	b2db      	uxtb	r3, r3
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	79fb      	ldrb	r3, [r7, #7]
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d0c3      	beq.n	800b43e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b4b6:	2300      	movs	r3, #0
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3710      	adds	r7, #16
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c4:	b0bd      	sub	sp, #244	; 0xf4
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b4cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	691b      	ldr	r3, [r3, #16]
 800b4d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b4d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4dc:	68d9      	ldr	r1, [r3, #12]
 800b4de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	ea40 0301 	orr.w	r3, r0, r1
 800b4e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b4ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4ee:	689a      	ldr	r2, [r3, #8]
 800b4f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4f4:	691b      	ldr	r3, [r3, #16]
 800b4f6:	431a      	orrs	r2, r3
 800b4f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4fc:	695b      	ldr	r3, [r3, #20]
 800b4fe:	431a      	orrs	r2, r3
 800b500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b504:	69db      	ldr	r3, [r3, #28]
 800b506:	4313      	orrs	r3, r2
 800b508:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800b50c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b518:	f021 010c 	bic.w	r1, r1, #12
 800b51c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b520:	681a      	ldr	r2, [r3, #0]
 800b522:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b526:	430b      	orrs	r3, r1
 800b528:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b52a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	695b      	ldr	r3, [r3, #20]
 800b532:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b53a:	6999      	ldr	r1, [r3, #24]
 800b53c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b540:	681a      	ldr	r2, [r3, #0]
 800b542:	ea40 0301 	orr.w	r3, r0, r1
 800b546:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b54c:	69db      	ldr	r3, [r3, #28]
 800b54e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b552:	f040 81a5 	bne.w	800b8a0 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b55a:	681a      	ldr	r2, [r3, #0]
 800b55c:	4bcd      	ldr	r3, [pc, #820]	; (800b894 <UART_SetConfig+0x3d4>)
 800b55e:	429a      	cmp	r2, r3
 800b560:	d006      	beq.n	800b570 <UART_SetConfig+0xb0>
 800b562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b566:	681a      	ldr	r2, [r3, #0]
 800b568:	4bcb      	ldr	r3, [pc, #812]	; (800b898 <UART_SetConfig+0x3d8>)
 800b56a:	429a      	cmp	r2, r3
 800b56c:	f040 80cb 	bne.w	800b706 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b570:	f7ff fc08 	bl	800ad84 <HAL_RCC_GetPCLK2Freq>
 800b574:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b578:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b57c:	461c      	mov	r4, r3
 800b57e:	f04f 0500 	mov.w	r5, #0
 800b582:	4622      	mov	r2, r4
 800b584:	462b      	mov	r3, r5
 800b586:	1891      	adds	r1, r2, r2
 800b588:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800b58c:	415b      	adcs	r3, r3
 800b58e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b592:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800b596:	1912      	adds	r2, r2, r4
 800b598:	eb45 0303 	adc.w	r3, r5, r3
 800b59c:	f04f 0000 	mov.w	r0, #0
 800b5a0:	f04f 0100 	mov.w	r1, #0
 800b5a4:	00d9      	lsls	r1, r3, #3
 800b5a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b5aa:	00d0      	lsls	r0, r2, #3
 800b5ac:	4602      	mov	r2, r0
 800b5ae:	460b      	mov	r3, r1
 800b5b0:	1911      	adds	r1, r2, r4
 800b5b2:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800b5b6:	416b      	adcs	r3, r5
 800b5b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b5bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5c0:	685b      	ldr	r3, [r3, #4]
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	f04f 0300 	mov.w	r3, #0
 800b5c8:	1891      	adds	r1, r2, r2
 800b5ca:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800b5ce:	415b      	adcs	r3, r3
 800b5d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b5d4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800b5d8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800b5dc:	f7f5 fb3c 	bl	8000c58 <__aeabi_uldivmod>
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	460b      	mov	r3, r1
 800b5e4:	4bad      	ldr	r3, [pc, #692]	; (800b89c <UART_SetConfig+0x3dc>)
 800b5e6:	fba3 2302 	umull	r2, r3, r3, r2
 800b5ea:	095b      	lsrs	r3, r3, #5
 800b5ec:	011e      	lsls	r6, r3, #4
 800b5ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b5f2:	461c      	mov	r4, r3
 800b5f4:	f04f 0500 	mov.w	r5, #0
 800b5f8:	4622      	mov	r2, r4
 800b5fa:	462b      	mov	r3, r5
 800b5fc:	1891      	adds	r1, r2, r2
 800b5fe:	67b9      	str	r1, [r7, #120]	; 0x78
 800b600:	415b      	adcs	r3, r3
 800b602:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b604:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800b608:	1912      	adds	r2, r2, r4
 800b60a:	eb45 0303 	adc.w	r3, r5, r3
 800b60e:	f04f 0000 	mov.w	r0, #0
 800b612:	f04f 0100 	mov.w	r1, #0
 800b616:	00d9      	lsls	r1, r3, #3
 800b618:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b61c:	00d0      	lsls	r0, r2, #3
 800b61e:	4602      	mov	r2, r0
 800b620:	460b      	mov	r3, r1
 800b622:	1911      	adds	r1, r2, r4
 800b624:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800b628:	416b      	adcs	r3, r5
 800b62a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b62e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	461a      	mov	r2, r3
 800b636:	f04f 0300 	mov.w	r3, #0
 800b63a:	1891      	adds	r1, r2, r2
 800b63c:	6739      	str	r1, [r7, #112]	; 0x70
 800b63e:	415b      	adcs	r3, r3
 800b640:	677b      	str	r3, [r7, #116]	; 0x74
 800b642:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800b646:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800b64a:	f7f5 fb05 	bl	8000c58 <__aeabi_uldivmod>
 800b64e:	4602      	mov	r2, r0
 800b650:	460b      	mov	r3, r1
 800b652:	4b92      	ldr	r3, [pc, #584]	; (800b89c <UART_SetConfig+0x3dc>)
 800b654:	fba3 1302 	umull	r1, r3, r3, r2
 800b658:	095b      	lsrs	r3, r3, #5
 800b65a:	2164      	movs	r1, #100	; 0x64
 800b65c:	fb01 f303 	mul.w	r3, r1, r3
 800b660:	1ad3      	subs	r3, r2, r3
 800b662:	00db      	lsls	r3, r3, #3
 800b664:	3332      	adds	r3, #50	; 0x32
 800b666:	4a8d      	ldr	r2, [pc, #564]	; (800b89c <UART_SetConfig+0x3dc>)
 800b668:	fba2 2303 	umull	r2, r3, r2, r3
 800b66c:	095b      	lsrs	r3, r3, #5
 800b66e:	005b      	lsls	r3, r3, #1
 800b670:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b674:	441e      	add	r6, r3
 800b676:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b67a:	4618      	mov	r0, r3
 800b67c:	f04f 0100 	mov.w	r1, #0
 800b680:	4602      	mov	r2, r0
 800b682:	460b      	mov	r3, r1
 800b684:	1894      	adds	r4, r2, r2
 800b686:	66bc      	str	r4, [r7, #104]	; 0x68
 800b688:	415b      	adcs	r3, r3
 800b68a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b68c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800b690:	1812      	adds	r2, r2, r0
 800b692:	eb41 0303 	adc.w	r3, r1, r3
 800b696:	f04f 0400 	mov.w	r4, #0
 800b69a:	f04f 0500 	mov.w	r5, #0
 800b69e:	00dd      	lsls	r5, r3, #3
 800b6a0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b6a4:	00d4      	lsls	r4, r2, #3
 800b6a6:	4622      	mov	r2, r4
 800b6a8:	462b      	mov	r3, r5
 800b6aa:	1814      	adds	r4, r2, r0
 800b6ac:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800b6b0:	414b      	adcs	r3, r1
 800b6b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b6b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	461a      	mov	r2, r3
 800b6be:	f04f 0300 	mov.w	r3, #0
 800b6c2:	1891      	adds	r1, r2, r2
 800b6c4:	6639      	str	r1, [r7, #96]	; 0x60
 800b6c6:	415b      	adcs	r3, r3
 800b6c8:	667b      	str	r3, [r7, #100]	; 0x64
 800b6ca:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800b6ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b6d2:	f7f5 fac1 	bl	8000c58 <__aeabi_uldivmod>
 800b6d6:	4602      	mov	r2, r0
 800b6d8:	460b      	mov	r3, r1
 800b6da:	4b70      	ldr	r3, [pc, #448]	; (800b89c <UART_SetConfig+0x3dc>)
 800b6dc:	fba3 1302 	umull	r1, r3, r3, r2
 800b6e0:	095b      	lsrs	r3, r3, #5
 800b6e2:	2164      	movs	r1, #100	; 0x64
 800b6e4:	fb01 f303 	mul.w	r3, r1, r3
 800b6e8:	1ad3      	subs	r3, r2, r3
 800b6ea:	00db      	lsls	r3, r3, #3
 800b6ec:	3332      	adds	r3, #50	; 0x32
 800b6ee:	4a6b      	ldr	r2, [pc, #428]	; (800b89c <UART_SetConfig+0x3dc>)
 800b6f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b6f4:	095b      	lsrs	r3, r3, #5
 800b6f6:	f003 0207 	and.w	r2, r3, #7
 800b6fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4432      	add	r2, r6
 800b702:	609a      	str	r2, [r3, #8]
 800b704:	e26d      	b.n	800bbe2 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b706:	f7ff fb29 	bl	800ad5c <HAL_RCC_GetPCLK1Freq>
 800b70a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b70e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b712:	461c      	mov	r4, r3
 800b714:	f04f 0500 	mov.w	r5, #0
 800b718:	4622      	mov	r2, r4
 800b71a:	462b      	mov	r3, r5
 800b71c:	1891      	adds	r1, r2, r2
 800b71e:	65b9      	str	r1, [r7, #88]	; 0x58
 800b720:	415b      	adcs	r3, r3
 800b722:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b724:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b728:	1912      	adds	r2, r2, r4
 800b72a:	eb45 0303 	adc.w	r3, r5, r3
 800b72e:	f04f 0000 	mov.w	r0, #0
 800b732:	f04f 0100 	mov.w	r1, #0
 800b736:	00d9      	lsls	r1, r3, #3
 800b738:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b73c:	00d0      	lsls	r0, r2, #3
 800b73e:	4602      	mov	r2, r0
 800b740:	460b      	mov	r3, r1
 800b742:	1911      	adds	r1, r2, r4
 800b744:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800b748:	416b      	adcs	r3, r5
 800b74a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b74e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	461a      	mov	r2, r3
 800b756:	f04f 0300 	mov.w	r3, #0
 800b75a:	1891      	adds	r1, r2, r2
 800b75c:	6539      	str	r1, [r7, #80]	; 0x50
 800b75e:	415b      	adcs	r3, r3
 800b760:	657b      	str	r3, [r7, #84]	; 0x54
 800b762:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b766:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800b76a:	f7f5 fa75 	bl	8000c58 <__aeabi_uldivmod>
 800b76e:	4602      	mov	r2, r0
 800b770:	460b      	mov	r3, r1
 800b772:	4b4a      	ldr	r3, [pc, #296]	; (800b89c <UART_SetConfig+0x3dc>)
 800b774:	fba3 2302 	umull	r2, r3, r3, r2
 800b778:	095b      	lsrs	r3, r3, #5
 800b77a:	011e      	lsls	r6, r3, #4
 800b77c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b780:	461c      	mov	r4, r3
 800b782:	f04f 0500 	mov.w	r5, #0
 800b786:	4622      	mov	r2, r4
 800b788:	462b      	mov	r3, r5
 800b78a:	1891      	adds	r1, r2, r2
 800b78c:	64b9      	str	r1, [r7, #72]	; 0x48
 800b78e:	415b      	adcs	r3, r3
 800b790:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b792:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b796:	1912      	adds	r2, r2, r4
 800b798:	eb45 0303 	adc.w	r3, r5, r3
 800b79c:	f04f 0000 	mov.w	r0, #0
 800b7a0:	f04f 0100 	mov.w	r1, #0
 800b7a4:	00d9      	lsls	r1, r3, #3
 800b7a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b7aa:	00d0      	lsls	r0, r2, #3
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	460b      	mov	r3, r1
 800b7b0:	1911      	adds	r1, r2, r4
 800b7b2:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800b7b6:	416b      	adcs	r3, r5
 800b7b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b7bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	f04f 0300 	mov.w	r3, #0
 800b7c8:	1891      	adds	r1, r2, r2
 800b7ca:	6439      	str	r1, [r7, #64]	; 0x40
 800b7cc:	415b      	adcs	r3, r3
 800b7ce:	647b      	str	r3, [r7, #68]	; 0x44
 800b7d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b7d4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800b7d8:	f7f5 fa3e 	bl	8000c58 <__aeabi_uldivmod>
 800b7dc:	4602      	mov	r2, r0
 800b7de:	460b      	mov	r3, r1
 800b7e0:	4b2e      	ldr	r3, [pc, #184]	; (800b89c <UART_SetConfig+0x3dc>)
 800b7e2:	fba3 1302 	umull	r1, r3, r3, r2
 800b7e6:	095b      	lsrs	r3, r3, #5
 800b7e8:	2164      	movs	r1, #100	; 0x64
 800b7ea:	fb01 f303 	mul.w	r3, r1, r3
 800b7ee:	1ad3      	subs	r3, r2, r3
 800b7f0:	00db      	lsls	r3, r3, #3
 800b7f2:	3332      	adds	r3, #50	; 0x32
 800b7f4:	4a29      	ldr	r2, [pc, #164]	; (800b89c <UART_SetConfig+0x3dc>)
 800b7f6:	fba2 2303 	umull	r2, r3, r2, r3
 800b7fa:	095b      	lsrs	r3, r3, #5
 800b7fc:	005b      	lsls	r3, r3, #1
 800b7fe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b802:	441e      	add	r6, r3
 800b804:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b808:	4618      	mov	r0, r3
 800b80a:	f04f 0100 	mov.w	r1, #0
 800b80e:	4602      	mov	r2, r0
 800b810:	460b      	mov	r3, r1
 800b812:	1894      	adds	r4, r2, r2
 800b814:	63bc      	str	r4, [r7, #56]	; 0x38
 800b816:	415b      	adcs	r3, r3
 800b818:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b81a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b81e:	1812      	adds	r2, r2, r0
 800b820:	eb41 0303 	adc.w	r3, r1, r3
 800b824:	f04f 0400 	mov.w	r4, #0
 800b828:	f04f 0500 	mov.w	r5, #0
 800b82c:	00dd      	lsls	r5, r3, #3
 800b82e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b832:	00d4      	lsls	r4, r2, #3
 800b834:	4622      	mov	r2, r4
 800b836:	462b      	mov	r3, r5
 800b838:	1814      	adds	r4, r2, r0
 800b83a:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800b83e:	414b      	adcs	r3, r1
 800b840:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	461a      	mov	r2, r3
 800b84c:	f04f 0300 	mov.w	r3, #0
 800b850:	1891      	adds	r1, r2, r2
 800b852:	6339      	str	r1, [r7, #48]	; 0x30
 800b854:	415b      	adcs	r3, r3
 800b856:	637b      	str	r3, [r7, #52]	; 0x34
 800b858:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b85c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b860:	f7f5 f9fa 	bl	8000c58 <__aeabi_uldivmod>
 800b864:	4602      	mov	r2, r0
 800b866:	460b      	mov	r3, r1
 800b868:	4b0c      	ldr	r3, [pc, #48]	; (800b89c <UART_SetConfig+0x3dc>)
 800b86a:	fba3 1302 	umull	r1, r3, r3, r2
 800b86e:	095b      	lsrs	r3, r3, #5
 800b870:	2164      	movs	r1, #100	; 0x64
 800b872:	fb01 f303 	mul.w	r3, r1, r3
 800b876:	1ad3      	subs	r3, r2, r3
 800b878:	00db      	lsls	r3, r3, #3
 800b87a:	3332      	adds	r3, #50	; 0x32
 800b87c:	4a07      	ldr	r2, [pc, #28]	; (800b89c <UART_SetConfig+0x3dc>)
 800b87e:	fba2 2303 	umull	r2, r3, r2, r3
 800b882:	095b      	lsrs	r3, r3, #5
 800b884:	f003 0207 	and.w	r2, r3, #7
 800b888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4432      	add	r2, r6
 800b890:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800b892:	e1a6      	b.n	800bbe2 <UART_SetConfig+0x722>
 800b894:	40011000 	.word	0x40011000
 800b898:	40011400 	.word	0x40011400
 800b89c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b8a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8a4:	681a      	ldr	r2, [r3, #0]
 800b8a6:	4bd1      	ldr	r3, [pc, #836]	; (800bbec <UART_SetConfig+0x72c>)
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	d006      	beq.n	800b8ba <UART_SetConfig+0x3fa>
 800b8ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8b0:	681a      	ldr	r2, [r3, #0]
 800b8b2:	4bcf      	ldr	r3, [pc, #828]	; (800bbf0 <UART_SetConfig+0x730>)
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	f040 80ca 	bne.w	800ba4e <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800b8ba:	f7ff fa63 	bl	800ad84 <HAL_RCC_GetPCLK2Freq>
 800b8be:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b8c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b8c6:	461c      	mov	r4, r3
 800b8c8:	f04f 0500 	mov.w	r5, #0
 800b8cc:	4622      	mov	r2, r4
 800b8ce:	462b      	mov	r3, r5
 800b8d0:	1891      	adds	r1, r2, r2
 800b8d2:	62b9      	str	r1, [r7, #40]	; 0x28
 800b8d4:	415b      	adcs	r3, r3
 800b8d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b8dc:	1912      	adds	r2, r2, r4
 800b8de:	eb45 0303 	adc.w	r3, r5, r3
 800b8e2:	f04f 0000 	mov.w	r0, #0
 800b8e6:	f04f 0100 	mov.w	r1, #0
 800b8ea:	00d9      	lsls	r1, r3, #3
 800b8ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b8f0:	00d0      	lsls	r0, r2, #3
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	eb12 0a04 	adds.w	sl, r2, r4
 800b8fa:	eb43 0b05 	adc.w	fp, r3, r5
 800b8fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	4618      	mov	r0, r3
 800b906:	f04f 0100 	mov.w	r1, #0
 800b90a:	f04f 0200 	mov.w	r2, #0
 800b90e:	f04f 0300 	mov.w	r3, #0
 800b912:	008b      	lsls	r3, r1, #2
 800b914:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b918:	0082      	lsls	r2, r0, #2
 800b91a:	4650      	mov	r0, sl
 800b91c:	4659      	mov	r1, fp
 800b91e:	f7f5 f99b 	bl	8000c58 <__aeabi_uldivmod>
 800b922:	4602      	mov	r2, r0
 800b924:	460b      	mov	r3, r1
 800b926:	4bb3      	ldr	r3, [pc, #716]	; (800bbf4 <UART_SetConfig+0x734>)
 800b928:	fba3 2302 	umull	r2, r3, r3, r2
 800b92c:	095b      	lsrs	r3, r3, #5
 800b92e:	011e      	lsls	r6, r3, #4
 800b930:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b934:	4618      	mov	r0, r3
 800b936:	f04f 0100 	mov.w	r1, #0
 800b93a:	4602      	mov	r2, r0
 800b93c:	460b      	mov	r3, r1
 800b93e:	1894      	adds	r4, r2, r2
 800b940:	623c      	str	r4, [r7, #32]
 800b942:	415b      	adcs	r3, r3
 800b944:	627b      	str	r3, [r7, #36]	; 0x24
 800b946:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b94a:	1812      	adds	r2, r2, r0
 800b94c:	eb41 0303 	adc.w	r3, r1, r3
 800b950:	f04f 0400 	mov.w	r4, #0
 800b954:	f04f 0500 	mov.w	r5, #0
 800b958:	00dd      	lsls	r5, r3, #3
 800b95a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b95e:	00d4      	lsls	r4, r2, #3
 800b960:	4622      	mov	r2, r4
 800b962:	462b      	mov	r3, r5
 800b964:	1814      	adds	r4, r2, r0
 800b966:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800b96a:	414b      	adcs	r3, r1
 800b96c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	4618      	mov	r0, r3
 800b978:	f04f 0100 	mov.w	r1, #0
 800b97c:	f04f 0200 	mov.w	r2, #0
 800b980:	f04f 0300 	mov.w	r3, #0
 800b984:	008b      	lsls	r3, r1, #2
 800b986:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b98a:	0082      	lsls	r2, r0, #2
 800b98c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800b990:	f7f5 f962 	bl	8000c58 <__aeabi_uldivmod>
 800b994:	4602      	mov	r2, r0
 800b996:	460b      	mov	r3, r1
 800b998:	4b96      	ldr	r3, [pc, #600]	; (800bbf4 <UART_SetConfig+0x734>)
 800b99a:	fba3 1302 	umull	r1, r3, r3, r2
 800b99e:	095b      	lsrs	r3, r3, #5
 800b9a0:	2164      	movs	r1, #100	; 0x64
 800b9a2:	fb01 f303 	mul.w	r3, r1, r3
 800b9a6:	1ad3      	subs	r3, r2, r3
 800b9a8:	011b      	lsls	r3, r3, #4
 800b9aa:	3332      	adds	r3, #50	; 0x32
 800b9ac:	4a91      	ldr	r2, [pc, #580]	; (800bbf4 <UART_SetConfig+0x734>)
 800b9ae:	fba2 2303 	umull	r2, r3, r2, r3
 800b9b2:	095b      	lsrs	r3, r3, #5
 800b9b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b9b8:	441e      	add	r6, r3
 800b9ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f04f 0100 	mov.w	r1, #0
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	1894      	adds	r4, r2, r2
 800b9ca:	61bc      	str	r4, [r7, #24]
 800b9cc:	415b      	adcs	r3, r3
 800b9ce:	61fb      	str	r3, [r7, #28]
 800b9d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b9d4:	1812      	adds	r2, r2, r0
 800b9d6:	eb41 0303 	adc.w	r3, r1, r3
 800b9da:	f04f 0400 	mov.w	r4, #0
 800b9de:	f04f 0500 	mov.w	r5, #0
 800b9e2:	00dd      	lsls	r5, r3, #3
 800b9e4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b9e8:	00d4      	lsls	r4, r2, #3
 800b9ea:	4622      	mov	r2, r4
 800b9ec:	462b      	mov	r3, r5
 800b9ee:	1814      	adds	r4, r2, r0
 800b9f0:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800b9f4:	414b      	adcs	r3, r1
 800b9f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b9fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	4618      	mov	r0, r3
 800ba02:	f04f 0100 	mov.w	r1, #0
 800ba06:	f04f 0200 	mov.w	r2, #0
 800ba0a:	f04f 0300 	mov.w	r3, #0
 800ba0e:	008b      	lsls	r3, r1, #2
 800ba10:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ba14:	0082      	lsls	r2, r0, #2
 800ba16:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800ba1a:	f7f5 f91d 	bl	8000c58 <__aeabi_uldivmod>
 800ba1e:	4602      	mov	r2, r0
 800ba20:	460b      	mov	r3, r1
 800ba22:	4b74      	ldr	r3, [pc, #464]	; (800bbf4 <UART_SetConfig+0x734>)
 800ba24:	fba3 1302 	umull	r1, r3, r3, r2
 800ba28:	095b      	lsrs	r3, r3, #5
 800ba2a:	2164      	movs	r1, #100	; 0x64
 800ba2c:	fb01 f303 	mul.w	r3, r1, r3
 800ba30:	1ad3      	subs	r3, r2, r3
 800ba32:	011b      	lsls	r3, r3, #4
 800ba34:	3332      	adds	r3, #50	; 0x32
 800ba36:	4a6f      	ldr	r2, [pc, #444]	; (800bbf4 <UART_SetConfig+0x734>)
 800ba38:	fba2 2303 	umull	r2, r3, r2, r3
 800ba3c:	095b      	lsrs	r3, r3, #5
 800ba3e:	f003 020f 	and.w	r2, r3, #15
 800ba42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	4432      	add	r2, r6
 800ba4a:	609a      	str	r2, [r3, #8]
 800ba4c:	e0c9      	b.n	800bbe2 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800ba4e:	f7ff f985 	bl	800ad5c <HAL_RCC_GetPCLK1Freq>
 800ba52:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ba56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ba5a:	461c      	mov	r4, r3
 800ba5c:	f04f 0500 	mov.w	r5, #0
 800ba60:	4622      	mov	r2, r4
 800ba62:	462b      	mov	r3, r5
 800ba64:	1891      	adds	r1, r2, r2
 800ba66:	6139      	str	r1, [r7, #16]
 800ba68:	415b      	adcs	r3, r3
 800ba6a:	617b      	str	r3, [r7, #20]
 800ba6c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ba70:	1912      	adds	r2, r2, r4
 800ba72:	eb45 0303 	adc.w	r3, r5, r3
 800ba76:	f04f 0000 	mov.w	r0, #0
 800ba7a:	f04f 0100 	mov.w	r1, #0
 800ba7e:	00d9      	lsls	r1, r3, #3
 800ba80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ba84:	00d0      	lsls	r0, r2, #3
 800ba86:	4602      	mov	r2, r0
 800ba88:	460b      	mov	r3, r1
 800ba8a:	eb12 0804 	adds.w	r8, r2, r4
 800ba8e:	eb43 0905 	adc.w	r9, r3, r5
 800ba92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba96:	685b      	ldr	r3, [r3, #4]
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f04f 0100 	mov.w	r1, #0
 800ba9e:	f04f 0200 	mov.w	r2, #0
 800baa2:	f04f 0300 	mov.w	r3, #0
 800baa6:	008b      	lsls	r3, r1, #2
 800baa8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800baac:	0082      	lsls	r2, r0, #2
 800baae:	4640      	mov	r0, r8
 800bab0:	4649      	mov	r1, r9
 800bab2:	f7f5 f8d1 	bl	8000c58 <__aeabi_uldivmod>
 800bab6:	4602      	mov	r2, r0
 800bab8:	460b      	mov	r3, r1
 800baba:	4b4e      	ldr	r3, [pc, #312]	; (800bbf4 <UART_SetConfig+0x734>)
 800babc:	fba3 2302 	umull	r2, r3, r3, r2
 800bac0:	095b      	lsrs	r3, r3, #5
 800bac2:	011e      	lsls	r6, r3, #4
 800bac4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bac8:	4618      	mov	r0, r3
 800baca:	f04f 0100 	mov.w	r1, #0
 800bace:	4602      	mov	r2, r0
 800bad0:	460b      	mov	r3, r1
 800bad2:	1894      	adds	r4, r2, r2
 800bad4:	60bc      	str	r4, [r7, #8]
 800bad6:	415b      	adcs	r3, r3
 800bad8:	60fb      	str	r3, [r7, #12]
 800bada:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bade:	1812      	adds	r2, r2, r0
 800bae0:	eb41 0303 	adc.w	r3, r1, r3
 800bae4:	f04f 0400 	mov.w	r4, #0
 800bae8:	f04f 0500 	mov.w	r5, #0
 800baec:	00dd      	lsls	r5, r3, #3
 800baee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800baf2:	00d4      	lsls	r4, r2, #3
 800baf4:	4622      	mov	r2, r4
 800baf6:	462b      	mov	r3, r5
 800baf8:	1814      	adds	r4, r2, r0
 800bafa:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800bafe:	414b      	adcs	r3, r1
 800bb00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bb04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb08:	685b      	ldr	r3, [r3, #4]
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f04f 0100 	mov.w	r1, #0
 800bb10:	f04f 0200 	mov.w	r2, #0
 800bb14:	f04f 0300 	mov.w	r3, #0
 800bb18:	008b      	lsls	r3, r1, #2
 800bb1a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bb1e:	0082      	lsls	r2, r0, #2
 800bb20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bb24:	f7f5 f898 	bl	8000c58 <__aeabi_uldivmod>
 800bb28:	4602      	mov	r2, r0
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	4b31      	ldr	r3, [pc, #196]	; (800bbf4 <UART_SetConfig+0x734>)
 800bb2e:	fba3 1302 	umull	r1, r3, r3, r2
 800bb32:	095b      	lsrs	r3, r3, #5
 800bb34:	2164      	movs	r1, #100	; 0x64
 800bb36:	fb01 f303 	mul.w	r3, r1, r3
 800bb3a:	1ad3      	subs	r3, r2, r3
 800bb3c:	011b      	lsls	r3, r3, #4
 800bb3e:	3332      	adds	r3, #50	; 0x32
 800bb40:	4a2c      	ldr	r2, [pc, #176]	; (800bbf4 <UART_SetConfig+0x734>)
 800bb42:	fba2 2303 	umull	r2, r3, r2, r3
 800bb46:	095b      	lsrs	r3, r3, #5
 800bb48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb4c:	441e      	add	r6, r3
 800bb4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bb52:	4618      	mov	r0, r3
 800bb54:	f04f 0100 	mov.w	r1, #0
 800bb58:	4602      	mov	r2, r0
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	1894      	adds	r4, r2, r2
 800bb5e:	603c      	str	r4, [r7, #0]
 800bb60:	415b      	adcs	r3, r3
 800bb62:	607b      	str	r3, [r7, #4]
 800bb64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb68:	1812      	adds	r2, r2, r0
 800bb6a:	eb41 0303 	adc.w	r3, r1, r3
 800bb6e:	f04f 0400 	mov.w	r4, #0
 800bb72:	f04f 0500 	mov.w	r5, #0
 800bb76:	00dd      	lsls	r5, r3, #3
 800bb78:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bb7c:	00d4      	lsls	r4, r2, #3
 800bb7e:	4622      	mov	r2, r4
 800bb80:	462b      	mov	r3, r5
 800bb82:	1814      	adds	r4, r2, r0
 800bb84:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800bb88:	414b      	adcs	r3, r1
 800bb8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bb8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	4618      	mov	r0, r3
 800bb96:	f04f 0100 	mov.w	r1, #0
 800bb9a:	f04f 0200 	mov.w	r2, #0
 800bb9e:	f04f 0300 	mov.w	r3, #0
 800bba2:	008b      	lsls	r3, r1, #2
 800bba4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bba8:	0082      	lsls	r2, r0, #2
 800bbaa:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800bbae:	f7f5 f853 	bl	8000c58 <__aeabi_uldivmod>
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	4b0f      	ldr	r3, [pc, #60]	; (800bbf4 <UART_SetConfig+0x734>)
 800bbb8:	fba3 1302 	umull	r1, r3, r3, r2
 800bbbc:	095b      	lsrs	r3, r3, #5
 800bbbe:	2164      	movs	r1, #100	; 0x64
 800bbc0:	fb01 f303 	mul.w	r3, r1, r3
 800bbc4:	1ad3      	subs	r3, r2, r3
 800bbc6:	011b      	lsls	r3, r3, #4
 800bbc8:	3332      	adds	r3, #50	; 0x32
 800bbca:	4a0a      	ldr	r2, [pc, #40]	; (800bbf4 <UART_SetConfig+0x734>)
 800bbcc:	fba2 2303 	umull	r2, r3, r2, r3
 800bbd0:	095b      	lsrs	r3, r3, #5
 800bbd2:	f003 020f 	and.w	r2, r3, #15
 800bbd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4432      	add	r2, r6
 800bbde:	609a      	str	r2, [r3, #8]
}
 800bbe0:	e7ff      	b.n	800bbe2 <UART_SetConfig+0x722>
 800bbe2:	bf00      	nop
 800bbe4:	37f4      	adds	r7, #244	; 0xf4
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbec:	40011000 	.word	0x40011000
 800bbf0:	40011400 	.word	0x40011400
 800bbf4:	51eb851f 	.word	0x51eb851f

0800bbf8 <MX_MEMS_Init>:
static void Press_Sensor_Handler(uint32_t Instance);
static void MX_IKS01A3_DataLogTerminal_Init(void);
static void MX_IKS01A3_DataLogTerminal_Process(void);

void MX_MEMS_Init(void)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Init_PreTreatment */

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */
  MX_IKS01A3_DataLogTerminal_Init();
 800bbfc:	f000 f802 	bl	800bc04 <MX_IKS01A3_DataLogTerminal_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 800bc00:	bf00      	nop
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <MX_IKS01A3_DataLogTerminal_Init>:
/**
  * @brief  Initialize the DataLogTerminal application
  * @retval None
  */
void MX_IKS01A3_DataLogTerminal_Init(void)
{
 800bc04:	b5b0      	push	{r4, r5, r7, lr}
 800bc06:	b088      	sub	sp, #32
 800bc08:	af04      	add	r7, sp, #16
  displayFloatToInt_t out_value_odr;
  int i;

  /* Initialize LED */
  BSP_LED_Init(LED2);
 800bc0a:	2000      	movs	r0, #0
 800bc0c:	f7fc fe44 	bl	8008898 <BSP_LED_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800bc10:	2101      	movs	r1, #1
 800bc12:	2000      	movs	r0, #0
 800bc14:	f7fc fec0 	bl	8008998 <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 800bc18:	2000      	movs	r0, #0
 800bc1a:	f7fc ff11 	bl	8008a40 <BSP_PB_GetState>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	bf0c      	ite	eq
 800bc24:	2301      	moveq	r3, #1
 800bc26:	2300      	movne	r3, #0
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	4b75      	ldr	r3, [pc, #468]	; (800be04 <MX_IKS01A3_DataLogTerminal_Init+0x200>)
 800bc2e:	601a      	str	r2, [r3, #0]

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 800bc30:	2000      	movs	r0, #0
 800bc32:	f7fc ff67 	bl	8008b04 <BSP_COM_Init>

  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO | MOTION_GYRO);
 800bc36:	2103      	movs	r1, #3
 800bc38:	2000      	movs	r0, #0
 800bc3a:	f7fc fb03 	bl	8008244 <IKS01A3_MOTION_SENSOR_Init>

  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2DW12_0, MOTION_ACCELERO);
 800bc3e:	2102      	movs	r1, #2
 800bc40:	2001      	movs	r0, #1
 800bc42:	f7fc faff 	bl	8008244 <IKS01A3_MOTION_SENSOR_Init>

  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2MDL_0, MOTION_MAGNETO);
 800bc46:	2104      	movs	r1, #4
 800bc48:	2002      	movs	r0, #2
 800bc4a:	f7fc fafb 	bl	8008244 <IKS01A3_MOTION_SENSOR_Init>

  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
 800bc4e:	2300      	movs	r3, #0
 800bc50:	60fb      	str	r3, [r7, #12]
 800bc52:	e0c3      	b.n	800bddc <MX_IKS01A3_DataLogTerminal_Init+0x1d8>
  {
    IKS01A3_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
 800bc54:	68f8      	ldr	r0, [r7, #12]
 800bc56:	68fa      	ldr	r2, [r7, #12]
 800bc58:	4613      	mov	r3, r2
 800bc5a:	00db      	lsls	r3, r3, #3
 800bc5c:	1a9b      	subs	r3, r3, r2
 800bc5e:	009b      	lsls	r3, r3, #2
 800bc60:	4a69      	ldr	r2, [pc, #420]	; (800be08 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800bc62:	4413      	add	r3, r2
 800bc64:	4619      	mov	r1, r3
 800bc66:	f7fc fbe9 	bl	800843c <IKS01A3_MOTION_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
             "\r\nMotion Sensor Instance %d capabilities: \r\n ACCELEROMETER: %d\r\n GYROSCOPE: %d\r\n MAGNETOMETER: %d\r\n LOW POWER: %d\r\n",
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800bc6a:	4967      	ldr	r1, [pc, #412]	; (800be08 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800bc6c:	68fa      	ldr	r2, [r7, #12]
 800bc6e:	4613      	mov	r3, r2
 800bc70:	00db      	lsls	r3, r3, #3
 800bc72:	1a9b      	subs	r3, r3, r2
 800bc74:	009b      	lsls	r3, r3, #2
 800bc76:	440b      	add	r3, r1
 800bc78:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800bc7a:	4618      	mov	r0, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800bc7c:	4962      	ldr	r1, [pc, #392]	; (800be08 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800bc7e:	68fa      	ldr	r2, [r7, #12]
 800bc80:	4613      	mov	r3, r2
 800bc82:	00db      	lsls	r3, r3, #3
 800bc84:	1a9b      	subs	r3, r3, r2
 800bc86:	009b      	lsls	r3, r3, #2
 800bc88:	440b      	add	r3, r1
 800bc8a:	3301      	adds	r3, #1
 800bc8c:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800bc8e:	461c      	mov	r4, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800bc90:	495d      	ldr	r1, [pc, #372]	; (800be08 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800bc92:	68fa      	ldr	r2, [r7, #12]
 800bc94:	4613      	mov	r3, r2
 800bc96:	00db      	lsls	r3, r3, #3
 800bc98:	1a9b      	subs	r3, r3, r2
 800bc9a:	009b      	lsls	r3, r3, #2
 800bc9c:	440b      	add	r3, r1
 800bc9e:	3302      	adds	r3, #2
 800bca0:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800bca2:	461d      	mov	r5, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800bca4:	4958      	ldr	r1, [pc, #352]	; (800be08 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800bca6:	68fa      	ldr	r2, [r7, #12]
 800bca8:	4613      	mov	r3, r2
 800bcaa:	00db      	lsls	r3, r3, #3
 800bcac:	1a9b      	subs	r3, r3, r2
 800bcae:	009b      	lsls	r3, r3, #2
 800bcb0:	440b      	add	r3, r1
 800bcb2:	3303      	adds	r3, #3
 800bcb4:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800bcb6:	9303      	str	r3, [sp, #12]
 800bcb8:	9502      	str	r5, [sp, #8]
 800bcba:	9401      	str	r4, [sp, #4]
 800bcbc:	9000      	str	r0, [sp, #0]
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	4a52      	ldr	r2, [pc, #328]	; (800be0c <MX_IKS01A3_DataLogTerminal_Init+0x208>)
 800bcc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bcc6:	4852      	ldr	r0, [pc, #328]	; (800be10 <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800bcc8:	f00b ffcc 	bl	8017c64 <sniprintf>
    printf("%s", dataOut);
 800bccc:	4950      	ldr	r1, [pc, #320]	; (800be10 <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800bcce:	4851      	ldr	r0, [pc, #324]	; (800be14 <MX_IKS01A3_DataLogTerminal_Init+0x210>)
 800bcd0:	f00b ffb0 	bl	8017c34 <iprintf>
    floatToInt(MotionCapabilities[i].AccMaxOdr, &out_value_odr, 3);
 800bcd4:	494c      	ldr	r1, [pc, #304]	; (800be08 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800bcd6:	68fa      	ldr	r2, [r7, #12]
 800bcd8:	4613      	mov	r3, r2
 800bcda:	00db      	lsls	r3, r3, #3
 800bcdc:	1a9b      	subs	r3, r3, r2
 800bcde:	009b      	lsls	r3, r3, #2
 800bce0:	440b      	add	r3, r1
 800bce2:	3314      	adds	r3, #20
 800bce4:	edd3 7a00 	vldr	s15, [r3]
 800bce8:	463b      	mov	r3, r7
 800bcea:	2103      	movs	r1, #3
 800bcec:	4618      	mov	r0, r3
 800bcee:	eeb0 0a67 	vmov.f32	s0, s15
 800bcf2:	f000 f94d 	bl	800bf90 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 800bcfa:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 800bcfc:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 800bcfe:	4942      	ldr	r1, [pc, #264]	; (800be08 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800bd00:	68fa      	ldr	r2, [r7, #12]
 800bd02:	4613      	mov	r3, r2
 800bd04:	00db      	lsls	r3, r3, #3
 800bd06:	1a9b      	subs	r3, r3, r2
 800bd08:	009b      	lsls	r3, r3, #2
 800bd0a:	440b      	add	r3, r1
 800bd0c:	3308      	adds	r3, #8
 800bd0e:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 800bd10:	9301      	str	r3, [sp, #4]
 800bd12:	9000      	str	r0, [sp, #0]
 800bd14:	4623      	mov	r3, r4
 800bd16:	4a40      	ldr	r2, [pc, #256]	; (800be18 <MX_IKS01A3_DataLogTerminal_Init+0x214>)
 800bd18:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bd1c:	483c      	ldr	r0, [pc, #240]	; (800be10 <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800bd1e:	f00b ffa1 	bl	8017c64 <sniprintf>
    printf("%s", dataOut);
 800bd22:	493b      	ldr	r1, [pc, #236]	; (800be10 <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800bd24:	483b      	ldr	r0, [pc, #236]	; (800be14 <MX_IKS01A3_DataLogTerminal_Init+0x210>)
 800bd26:	f00b ff85 	bl	8017c34 <iprintf>
    floatToInt(MotionCapabilities[i].GyroMaxOdr, &out_value_odr, 3);
 800bd2a:	4937      	ldr	r1, [pc, #220]	; (800be08 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800bd2c:	68fa      	ldr	r2, [r7, #12]
 800bd2e:	4613      	mov	r3, r2
 800bd30:	00db      	lsls	r3, r3, #3
 800bd32:	1a9b      	subs	r3, r3, r2
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	440b      	add	r3, r1
 800bd38:	3310      	adds	r3, #16
 800bd3a:	edd3 7a00 	vldr	s15, [r3]
 800bd3e:	463b      	mov	r3, r7
 800bd40:	2103      	movs	r1, #3
 800bd42:	4618      	mov	r0, r3
 800bd44:	eeb0 0a67 	vmov.f32	s0, s15
 800bd48:	f000 f922 	bl	800bf90 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 800bd50:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 800bd52:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 800bd54:	492c      	ldr	r1, [pc, #176]	; (800be08 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800bd56:	68fa      	ldr	r2, [r7, #12]
 800bd58:	4613      	mov	r3, r2
 800bd5a:	00db      	lsls	r3, r3, #3
 800bd5c:	1a9b      	subs	r3, r3, r2
 800bd5e:	009b      	lsls	r3, r3, #2
 800bd60:	440b      	add	r3, r1
 800bd62:	3304      	adds	r3, #4
 800bd64:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 800bd66:	9301      	str	r3, [sp, #4]
 800bd68:	9000      	str	r0, [sp, #0]
 800bd6a:	4623      	mov	r3, r4
 800bd6c:	4a2b      	ldr	r2, [pc, #172]	; (800be1c <MX_IKS01A3_DataLogTerminal_Init+0x218>)
 800bd6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bd72:	4827      	ldr	r0, [pc, #156]	; (800be10 <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800bd74:	f00b ff76 	bl	8017c64 <sniprintf>
    printf("%s", dataOut);
 800bd78:	4925      	ldr	r1, [pc, #148]	; (800be10 <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800bd7a:	4826      	ldr	r0, [pc, #152]	; (800be14 <MX_IKS01A3_DataLogTerminal_Init+0x210>)
 800bd7c:	f00b ff5a 	bl	8017c34 <iprintf>
    floatToInt(MotionCapabilities[i].MagMaxOdr, &out_value_odr, 3);
 800bd80:	4921      	ldr	r1, [pc, #132]	; (800be08 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800bd82:	68fa      	ldr	r2, [r7, #12]
 800bd84:	4613      	mov	r3, r2
 800bd86:	00db      	lsls	r3, r3, #3
 800bd88:	1a9b      	subs	r3, r3, r2
 800bd8a:	009b      	lsls	r3, r3, #2
 800bd8c:	440b      	add	r3, r1
 800bd8e:	3318      	adds	r3, #24
 800bd90:	edd3 7a00 	vldr	s15, [r3]
 800bd94:	463b      	mov	r3, r7
 800bd96:	2103      	movs	r1, #3
 800bd98:	4618      	mov	r0, r3
 800bd9a:	eeb0 0a67 	vmov.f32	s0, s15
 800bd9e:	f000 f8f7 	bl	800bf90 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 800bda6:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 800bda8:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 800bdaa:	4917      	ldr	r1, [pc, #92]	; (800be08 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800bdac:	68fa      	ldr	r2, [r7, #12]
 800bdae:	4613      	mov	r3, r2
 800bdb0:	00db      	lsls	r3, r3, #3
 800bdb2:	1a9b      	subs	r3, r3, r2
 800bdb4:	009b      	lsls	r3, r3, #2
 800bdb6:	440b      	add	r3, r1
 800bdb8:	330c      	adds	r3, #12
 800bdba:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 800bdbc:	9301      	str	r3, [sp, #4]
 800bdbe:	9000      	str	r0, [sp, #0]
 800bdc0:	4623      	mov	r3, r4
 800bdc2:	4a17      	ldr	r2, [pc, #92]	; (800be20 <MX_IKS01A3_DataLogTerminal_Init+0x21c>)
 800bdc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bdc8:	4811      	ldr	r0, [pc, #68]	; (800be10 <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800bdca:	f00b ff4b 	bl	8017c64 <sniprintf>
    printf("%s", dataOut);
 800bdce:	4910      	ldr	r1, [pc, #64]	; (800be10 <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800bdd0:	4810      	ldr	r0, [pc, #64]	; (800be14 <MX_IKS01A3_DataLogTerminal_Init+0x210>)
 800bdd2:	f00b ff2f 	bl	8017c34 <iprintf>
  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	3301      	adds	r3, #1
 800bdda:	60fb      	str	r3, [r7, #12]
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2b02      	cmp	r3, #2
 800bde0:	f67f af38 	bls.w	800bc54 <MX_IKS01A3_DataLogTerminal_Init+0x50>
  }

  IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_TEMPERATURE | ENV_HUMIDITY);
 800bde4:	2105      	movs	r1, #5
 800bde6:	2000      	movs	r0, #0
 800bde8:	f7fb feec 	bl	8007bc4 <IKS01A3_ENV_SENSOR_Init>

  IKS01A3_ENV_SENSOR_Init(IKS01A3_LPS22HH_0, ENV_TEMPERATURE | ENV_PRESSURE);
 800bdec:	2103      	movs	r1, #3
 800bdee:	2001      	movs	r0, #1
 800bdf0:	f7fb fee8 	bl	8007bc4 <IKS01A3_ENV_SENSOR_Init>

  IKS01A3_ENV_SENSOR_Init(IKS01A3_STTS751_0, ENV_TEMPERATURE);
 800bdf4:	2101      	movs	r1, #1
 800bdf6:	2002      	movs	r0, #2
 800bdf8:	f7fb fee4 	bl	8007bc4 <IKS01A3_ENV_SENSOR_Init>

  for(i = 0; i < IKS01A3_ENV_INSTANCES_NBR; i++)
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	60fb      	str	r3, [r7, #12]
 800be00:	e09c      	b.n	800bf3c <MX_IKS01A3_DataLogTerminal_Init+0x338>
 800be02:	bf00      	nop
 800be04:	20002da4 	.word	0x20002da4
 800be08:	20002c20 	.word	0x20002c20
 800be0c:	0801c8a8 	.word	0x0801c8a8
 800be10:	20002ca4 	.word	0x20002ca4
 800be14:	0801c91c 	.word	0x0801c91c
 800be18:	0801c920 	.word	0x0801c920
 800be1c:	0801c94c 	.word	0x0801c94c
 800be20:	0801c97c 	.word	0x0801c97c
  {
    IKS01A3_ENV_SENSOR_GetCapabilities(i, &EnvCapabilities[i]);
 800be24:	68fa      	ldr	r2, [r7, #12]
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	011b      	lsls	r3, r3, #4
 800be2a:	4949      	ldr	r1, [pc, #292]	; (800bf50 <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 800be2c:	440b      	add	r3, r1
 800be2e:	4619      	mov	r1, r3
 800be30:	4610      	mov	r0, r2
 800be32:	f7fb ffc3 	bl	8007dbc <IKS01A3_ENV_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
             "\r\nEnvironmental Sensor Instance %d capabilities: \r\n TEMPERATURE: %d\r\n PRESSURE: %d\r\n HUMIDITY: %d\r\n LOW POWER: %d\r\n",
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 800be36:	4a46      	ldr	r2, [pc, #280]	; (800bf50 <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	011b      	lsls	r3, r3, #4
 800be3c:	4413      	add	r3, r2
 800be3e:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800be40:	4619      	mov	r1, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 800be42:	4a43      	ldr	r2, [pc, #268]	; (800bf50 <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	011b      	lsls	r3, r3, #4
 800be48:	4413      	add	r3, r2
 800be4a:	3301      	adds	r3, #1
 800be4c:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800be4e:	4618      	mov	r0, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 800be50:	4a3f      	ldr	r2, [pc, #252]	; (800bf50 <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	011b      	lsls	r3, r3, #4
 800be56:	4413      	add	r3, r2
 800be58:	3302      	adds	r3, #2
 800be5a:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800be5c:	461c      	mov	r4, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 800be5e:	4a3c      	ldr	r2, [pc, #240]	; (800bf50 <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	011b      	lsls	r3, r3, #4
 800be64:	4413      	add	r3, r2
 800be66:	3303      	adds	r3, #3
 800be68:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800be6a:	9303      	str	r3, [sp, #12]
 800be6c:	9402      	str	r4, [sp, #8]
 800be6e:	9001      	str	r0, [sp, #4]
 800be70:	9100      	str	r1, [sp, #0]
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	4a37      	ldr	r2, [pc, #220]	; (800bf54 <MX_IKS01A3_DataLogTerminal_Init+0x350>)
 800be76:	f44f 7180 	mov.w	r1, #256	; 0x100
 800be7a:	4837      	ldr	r0, [pc, #220]	; (800bf58 <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 800be7c:	f00b fef2 	bl	8017c64 <sniprintf>
    printf("%s", dataOut);
 800be80:	4935      	ldr	r1, [pc, #212]	; (800bf58 <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 800be82:	4836      	ldr	r0, [pc, #216]	; (800bf5c <MX_IKS01A3_DataLogTerminal_Init+0x358>)
 800be84:	f00b fed6 	bl	8017c34 <iprintf>
    floatToInt(EnvCapabilities[i].TempMaxOdr, &out_value_odr, 3);
 800be88:	4a31      	ldr	r2, [pc, #196]	; (800bf50 <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	011b      	lsls	r3, r3, #4
 800be8e:	4413      	add	r3, r2
 800be90:	3308      	adds	r3, #8
 800be92:	edd3 7a00 	vldr	s15, [r3]
 800be96:	463b      	mov	r3, r7
 800be98:	2103      	movs	r1, #3
 800be9a:	4618      	mov	r0, r3
 800be9c:	eeb0 0a67 	vmov.f32	s0, s15
 800bea0:	f000 f876 	bl	800bf90 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 800bea8:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800beaa:	9300      	str	r3, [sp, #0]
 800beac:	4613      	mov	r3, r2
 800beae:	4a2c      	ldr	r2, [pc, #176]	; (800bf60 <MX_IKS01A3_DataLogTerminal_Init+0x35c>)
 800beb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800beb4:	4828      	ldr	r0, [pc, #160]	; (800bf58 <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 800beb6:	f00b fed5 	bl	8017c64 <sniprintf>
    printf("%s", dataOut);
 800beba:	4927      	ldr	r1, [pc, #156]	; (800bf58 <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 800bebc:	4827      	ldr	r0, [pc, #156]	; (800bf5c <MX_IKS01A3_DataLogTerminal_Init+0x358>)
 800bebe:	f00b feb9 	bl	8017c34 <iprintf>
    floatToInt(EnvCapabilities[i].PressMaxOdr, &out_value_odr, 3);
 800bec2:	4a23      	ldr	r2, [pc, #140]	; (800bf50 <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	011b      	lsls	r3, r3, #4
 800bec8:	4413      	add	r3, r2
 800beca:	330c      	adds	r3, #12
 800becc:	edd3 7a00 	vldr	s15, [r3]
 800bed0:	463b      	mov	r3, r7
 800bed2:	2103      	movs	r1, #3
 800bed4:	4618      	mov	r0, r3
 800bed6:	eeb0 0a67 	vmov.f32	s0, s15
 800beda:	f000 f859 	bl	800bf90 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 800bee2:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800bee4:	9300      	str	r3, [sp, #0]
 800bee6:	4613      	mov	r3, r2
 800bee8:	4a1e      	ldr	r2, [pc, #120]	; (800bf64 <MX_IKS01A3_DataLogTerminal_Init+0x360>)
 800beea:	f44f 7180 	mov.w	r1, #256	; 0x100
 800beee:	481a      	ldr	r0, [pc, #104]	; (800bf58 <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 800bef0:	f00b feb8 	bl	8017c64 <sniprintf>
    printf("%s", dataOut);
 800bef4:	4918      	ldr	r1, [pc, #96]	; (800bf58 <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 800bef6:	4819      	ldr	r0, [pc, #100]	; (800bf5c <MX_IKS01A3_DataLogTerminal_Init+0x358>)
 800bef8:	f00b fe9c 	bl	8017c34 <iprintf>
    floatToInt(EnvCapabilities[i].HumMaxOdr, &out_value_odr, 3);
 800befc:	4a14      	ldr	r2, [pc, #80]	; (800bf50 <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	011b      	lsls	r3, r3, #4
 800bf02:	4413      	add	r3, r2
 800bf04:	3304      	adds	r3, #4
 800bf06:	edd3 7a00 	vldr	s15, [r3]
 800bf0a:	463b      	mov	r3, r7
 800bf0c:	2103      	movs	r1, #3
 800bf0e:	4618      	mov	r0, r3
 800bf10:	eeb0 0a67 	vmov.f32	s0, s15
 800bf14:	f000 f83c 	bl	800bf90 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX HUM ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int, (int)out_value_odr.out_dec);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	9300      	str	r3, [sp, #0]
 800bf20:	4613      	mov	r3, r2
 800bf22:	4a11      	ldr	r2, [pc, #68]	; (800bf68 <MX_IKS01A3_DataLogTerminal_Init+0x364>)
 800bf24:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bf28:	480b      	ldr	r0, [pc, #44]	; (800bf58 <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 800bf2a:	f00b fe9b 	bl	8017c64 <sniprintf>
    printf("%s", dataOut);
 800bf2e:	490a      	ldr	r1, [pc, #40]	; (800bf58 <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 800bf30:	480a      	ldr	r0, [pc, #40]	; (800bf5c <MX_IKS01A3_DataLogTerminal_Init+0x358>)
 800bf32:	f00b fe7f 	bl	8017c34 <iprintf>
  for(i = 0; i < IKS01A3_ENV_INSTANCES_NBR; i++)
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	3301      	adds	r3, #1
 800bf3a:	60fb      	str	r3, [r7, #12]
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2b02      	cmp	r3, #2
 800bf40:	f67f af70 	bls.w	800be24 <MX_IKS01A3_DataLogTerminal_Init+0x220>
  }
}
 800bf44:	bf00      	nop
 800bf46:	bf00      	nop
 800bf48:	3710      	adds	r7, #16
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bdb0      	pop	{r4, r5, r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	20002c74 	.word	0x20002c74
 800bf54:	0801c9a8 	.word	0x0801c9a8
 800bf58:	20002ca4 	.word	0x20002ca4
 800bf5c:	0801c91c 	.word	0x0801c91c
 800bf60:	0801ca1c 	.word	0x0801ca1c
 800bf64:	0801ca38 	.word	0x0801ca38
 800bf68:	0801ca58 	.word	0x0801ca58

0800bf6c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b083      	sub	sp, #12
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	4603      	mov	r3, r0
 800bf74:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 800bf76:	4b04      	ldr	r3, [pc, #16]	; (800bf88 <BSP_PB_Callback+0x1c>)
 800bf78:	2201      	movs	r2, #1
 800bf7a:	701a      	strb	r2, [r3, #0]
}
 800bf7c:	bf00      	nop
 800bf7e:	370c      	adds	r7, #12
 800bf80:	46bd      	mov	sp, r7
 800bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf86:	4770      	bx	lr
 800bf88:	20002c1d 	.word	0x20002c1d
 800bf8c:	00000000 	.word	0x00000000

0800bf90 <floatToInt>:
  * @param  out_value the pointer to the output integer structure
  * @param  dec_prec the decimal precision to be used
  * @retval None
  */
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 800bf90:	b5b0      	push	{r4, r5, r7, lr}
 800bf92:	b084      	sub	sp, #16
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	ed87 0a03 	vstr	s0, [r7, #12]
 800bf9a:	60b8      	str	r0, [r7, #8]
 800bf9c:	6079      	str	r1, [r7, #4]
  if(in >= 0.0f)
 800bf9e:	edd7 7a03 	vldr	s15, [r7, #12]
 800bfa2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bfa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfaa:	db03      	blt.n	800bfb4 <floatToInt+0x24>
  {
    out_value->sign = 0;
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	701a      	strb	r2, [r3, #0]
 800bfb2:	e008      	b.n	800bfc6 <floatToInt+0x36>
  }else
  {
    out_value->sign = 1;
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	701a      	strb	r2, [r3, #0]
    in = -in;
 800bfba:	edd7 7a03 	vldr	s15, [r7, #12]
 800bfbe:	eef1 7a67 	vneg.f32	s15, s15
 800bfc2:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  in = in + (0.5f / pow(10, dec_prec));
 800bfc6:	68f8      	ldr	r0, [r7, #12]
 800bfc8:	f7f4 fac6 	bl	8000558 <__aeabi_f2d>
 800bfcc:	4604      	mov	r4, r0
 800bfce:	460d      	mov	r5, r1
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f7f4 faaf 	bl	8000534 <__aeabi_i2d>
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	460b      	mov	r3, r1
 800bfda:	ec43 2b11 	vmov	d1, r2, r3
 800bfde:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 800c098 <floatToInt+0x108>
 800bfe2:	f00e f965 	bl	801a2b0 <pow>
 800bfe6:	ec53 2b10 	vmov	r2, r3, d0
 800bfea:	f04f 0000 	mov.w	r0, #0
 800bfee:	492c      	ldr	r1, [pc, #176]	; (800c0a0 <floatToInt+0x110>)
 800bff0:	f7f4 fc34 	bl	800085c <__aeabi_ddiv>
 800bff4:	4602      	mov	r2, r0
 800bff6:	460b      	mov	r3, r1
 800bff8:	4620      	mov	r0, r4
 800bffa:	4629      	mov	r1, r5
 800bffc:	f7f4 f94e 	bl	800029c <__adddf3>
 800c000:	4602      	mov	r2, r0
 800c002:	460b      	mov	r3, r1
 800c004:	4610      	mov	r0, r2
 800c006:	4619      	mov	r1, r3
 800c008:	f7f4 fdd6 	bl	8000bb8 <__aeabi_d2f>
 800c00c:	4603      	mov	r3, r0
 800c00e:	60fb      	str	r3, [r7, #12]
  out_value->out_int = (int32_t)in;
 800c010:	edd7 7a03 	vldr	s15, [r7, #12]
 800c014:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c018:	ee17 2a90 	vmov	r2, s15
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	ee07 3a90 	vmov	s15, r3
 800c028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c02c:	ed97 7a03 	vldr	s14, [r7, #12]
 800c030:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c034:	edc7 7a03 	vstr	s15, [r7, #12]
  out_value->out_dec = (int32_t)trunc(in * pow(10, dec_prec));
 800c038:	68f8      	ldr	r0, [r7, #12]
 800c03a:	f7f4 fa8d 	bl	8000558 <__aeabi_f2d>
 800c03e:	4604      	mov	r4, r0
 800c040:	460d      	mov	r5, r1
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f7f4 fa76 	bl	8000534 <__aeabi_i2d>
 800c048:	4602      	mov	r2, r0
 800c04a:	460b      	mov	r3, r1
 800c04c:	ec43 2b11 	vmov	d1, r2, r3
 800c050:	ed9f 0b11 	vldr	d0, [pc, #68]	; 800c098 <floatToInt+0x108>
 800c054:	f00e f92c 	bl	801a2b0 <pow>
 800c058:	ec53 2b10 	vmov	r2, r3, d0
 800c05c:	4620      	mov	r0, r4
 800c05e:	4629      	mov	r1, r5
 800c060:	f7f4 fad2 	bl	8000608 <__aeabi_dmul>
 800c064:	4602      	mov	r2, r0
 800c066:	460b      	mov	r3, r1
 800c068:	ec43 2b17 	vmov	d7, r2, r3
 800c06c:	eeb0 0a47 	vmov.f32	s0, s14
 800c070:	eef0 0a67 	vmov.f32	s1, s15
 800c074:	f00e f848 	bl	801a108 <trunc>
 800c078:	ec53 2b10 	vmov	r2, r3, d0
 800c07c:	4610      	mov	r0, r2
 800c07e:	4619      	mov	r1, r3
 800c080:	f7f4 fd72 	bl	8000b68 <__aeabi_d2iz>
 800c084:	4603      	mov	r3, r0
 800c086:	461a      	mov	r2, r3
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	609a      	str	r2, [r3, #8]
}
 800c08c:	bf00      	nop
 800c08e:	3710      	adds	r7, #16
 800c090:	46bd      	mov	sp, r7
 800c092:	bdb0      	pop	{r4, r5, r7, pc}
 800c094:	f3af 8000 	nop.w
 800c098:	00000000 	.word	0x00000000
 800c09c:	40240000 	.word	0x40240000
 800c0a0:	3fe00000 	.word	0x3fe00000

0800c0a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c0a4:	b480      	push	{r7}
 800c0a6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800c0a8:	bf00      	nop
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b0:	4770      	bx	lr
	...

0800c0b4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c0b4:	b480      	push	{r7}
 800c0b6:	b085      	sub	sp, #20
 800c0b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0ba:	f3ef 8305 	mrs	r3, IPSR
 800c0be:	60bb      	str	r3, [r7, #8]
  return(result);
 800c0c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d10f      	bne.n	800c0e6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c0c6:	f3ef 8310 	mrs	r3, PRIMASK
 800c0ca:	607b      	str	r3, [r7, #4]
  return(result);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d105      	bne.n	800c0de <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c0d2:	f3ef 8311 	mrs	r3, BASEPRI
 800c0d6:	603b      	str	r3, [r7, #0]
  return(result);
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d007      	beq.n	800c0ee <osKernelInitialize+0x3a>
 800c0de:	4b0e      	ldr	r3, [pc, #56]	; (800c118 <osKernelInitialize+0x64>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	2b02      	cmp	r3, #2
 800c0e4:	d103      	bne.n	800c0ee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800c0e6:	f06f 0305 	mvn.w	r3, #5
 800c0ea:	60fb      	str	r3, [r7, #12]
 800c0ec:	e00c      	b.n	800c108 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c0ee:	4b0a      	ldr	r3, [pc, #40]	; (800c118 <osKernelInitialize+0x64>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d105      	bne.n	800c102 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c0f6:	4b08      	ldr	r3, [pc, #32]	; (800c118 <osKernelInitialize+0x64>)
 800c0f8:	2201      	movs	r2, #1
 800c0fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	60fb      	str	r3, [r7, #12]
 800c100:	e002      	b.n	800c108 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800c102:	f04f 33ff 	mov.w	r3, #4294967295
 800c106:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800c108:	68fb      	ldr	r3, [r7, #12]
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3714      	adds	r7, #20
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr
 800c116:	bf00      	nop
 800c118:	20002da8 	.word	0x20002da8

0800c11c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c122:	f3ef 8305 	mrs	r3, IPSR
 800c126:	60bb      	str	r3, [r7, #8]
  return(result);
 800c128:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d10f      	bne.n	800c14e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c12e:	f3ef 8310 	mrs	r3, PRIMASK
 800c132:	607b      	str	r3, [r7, #4]
  return(result);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d105      	bne.n	800c146 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c13a:	f3ef 8311 	mrs	r3, BASEPRI
 800c13e:	603b      	str	r3, [r7, #0]
  return(result);
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d007      	beq.n	800c156 <osKernelStart+0x3a>
 800c146:	4b0f      	ldr	r3, [pc, #60]	; (800c184 <osKernelStart+0x68>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	2b02      	cmp	r3, #2
 800c14c:	d103      	bne.n	800c156 <osKernelStart+0x3a>
    stat = osErrorISR;
 800c14e:	f06f 0305 	mvn.w	r3, #5
 800c152:	60fb      	str	r3, [r7, #12]
 800c154:	e010      	b.n	800c178 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c156:	4b0b      	ldr	r3, [pc, #44]	; (800c184 <osKernelStart+0x68>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	2b01      	cmp	r3, #1
 800c15c:	d109      	bne.n	800c172 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c15e:	f7ff ffa1 	bl	800c0a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c162:	4b08      	ldr	r3, [pc, #32]	; (800c184 <osKernelStart+0x68>)
 800c164:	2202      	movs	r2, #2
 800c166:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c168:	f001 fc58 	bl	800da1c <vTaskStartScheduler>
      stat = osOK;
 800c16c:	2300      	movs	r3, #0
 800c16e:	60fb      	str	r3, [r7, #12]
 800c170:	e002      	b.n	800c178 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800c172:	f04f 33ff 	mov.w	r3, #4294967295
 800c176:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800c178:	68fb      	ldr	r3, [r7, #12]
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3710      	adds	r7, #16
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}
 800c182:	bf00      	nop
 800c184:	20002da8 	.word	0x20002da8

0800c188 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c188:	b580      	push	{r7, lr}
 800c18a:	b090      	sub	sp, #64	; 0x40
 800c18c:	af04      	add	r7, sp, #16
 800c18e:	60f8      	str	r0, [r7, #12]
 800c190:	60b9      	str	r1, [r7, #8]
 800c192:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c194:	2300      	movs	r3, #0
 800c196:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c198:	f3ef 8305 	mrs	r3, IPSR
 800c19c:	61fb      	str	r3, [r7, #28]
  return(result);
 800c19e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	f040 808f 	bne.w	800c2c4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c1a6:	f3ef 8310 	mrs	r3, PRIMASK
 800c1aa:	61bb      	str	r3, [r7, #24]
  return(result);
 800c1ac:	69bb      	ldr	r3, [r7, #24]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d105      	bne.n	800c1be <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c1b2:	f3ef 8311 	mrs	r3, BASEPRI
 800c1b6:	617b      	str	r3, [r7, #20]
  return(result);
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d003      	beq.n	800c1c6 <osThreadNew+0x3e>
 800c1be:	4b44      	ldr	r3, [pc, #272]	; (800c2d0 <osThreadNew+0x148>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	2b02      	cmp	r3, #2
 800c1c4:	d07e      	beq.n	800c2c4 <osThreadNew+0x13c>
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d07b      	beq.n	800c2c4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800c1cc:	2380      	movs	r3, #128	; 0x80
 800c1ce:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800c1d0:	2318      	movs	r3, #24
 800c1d2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800c1d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c1dc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d045      	beq.n	800c270 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d002      	beq.n	800c1f2 <osThreadNew+0x6a>
        name = attr->name;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	699b      	ldr	r3, [r3, #24]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d002      	beq.n	800c200 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	699b      	ldr	r3, [r3, #24]
 800c1fe:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c202:	2b00      	cmp	r3, #0
 800c204:	d008      	beq.n	800c218 <osThreadNew+0x90>
 800c206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c208:	2b38      	cmp	r3, #56	; 0x38
 800c20a:	d805      	bhi.n	800c218 <osThreadNew+0x90>
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	f003 0301 	and.w	r3, r3, #1
 800c214:	2b00      	cmp	r3, #0
 800c216:	d001      	beq.n	800c21c <osThreadNew+0x94>
        return (NULL);
 800c218:	2300      	movs	r3, #0
 800c21a:	e054      	b.n	800c2c6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	695b      	ldr	r3, [r3, #20]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d003      	beq.n	800c22c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	695b      	ldr	r3, [r3, #20]
 800c228:	089b      	lsrs	r3, r3, #2
 800c22a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	689b      	ldr	r3, [r3, #8]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d00e      	beq.n	800c252 <osThreadNew+0xca>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	68db      	ldr	r3, [r3, #12]
 800c238:	2b5b      	cmp	r3, #91	; 0x5b
 800c23a:	d90a      	bls.n	800c252 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c240:	2b00      	cmp	r3, #0
 800c242:	d006      	beq.n	800c252 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	695b      	ldr	r3, [r3, #20]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d002      	beq.n	800c252 <osThreadNew+0xca>
        mem = 1;
 800c24c:	2301      	movs	r3, #1
 800c24e:	623b      	str	r3, [r7, #32]
 800c250:	e010      	b.n	800c274 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	689b      	ldr	r3, [r3, #8]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d10c      	bne.n	800c274 <osThreadNew+0xec>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	68db      	ldr	r3, [r3, #12]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d108      	bne.n	800c274 <osThreadNew+0xec>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	691b      	ldr	r3, [r3, #16]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d104      	bne.n	800c274 <osThreadNew+0xec>
          mem = 0;
 800c26a:	2300      	movs	r3, #0
 800c26c:	623b      	str	r3, [r7, #32]
 800c26e:	e001      	b.n	800c274 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800c270:	2300      	movs	r3, #0
 800c272:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800c274:	6a3b      	ldr	r3, [r7, #32]
 800c276:	2b01      	cmp	r3, #1
 800c278:	d110      	bne.n	800c29c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800c27e:	687a      	ldr	r2, [r7, #4]
 800c280:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c282:	9202      	str	r2, [sp, #8]
 800c284:	9301      	str	r3, [sp, #4]
 800c286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c288:	9300      	str	r3, [sp, #0]
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c28e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c290:	68f8      	ldr	r0, [r7, #12]
 800c292:	f001 f9ed 	bl	800d670 <xTaskCreateStatic>
 800c296:	4603      	mov	r3, r0
 800c298:	613b      	str	r3, [r7, #16]
 800c29a:	e013      	b.n	800c2c4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800c29c:	6a3b      	ldr	r3, [r7, #32]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d110      	bne.n	800c2c4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a4:	b29a      	uxth	r2, r3
 800c2a6:	f107 0310 	add.w	r3, r7, #16
 800c2aa:	9301      	str	r3, [sp, #4]
 800c2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ae:	9300      	str	r3, [sp, #0]
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c2b4:	68f8      	ldr	r0, [r7, #12]
 800c2b6:	f001 fa38 	bl	800d72a <xTaskCreate>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	d001      	beq.n	800c2c4 <osThreadNew+0x13c>
          hTask = NULL;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c2c4:	693b      	ldr	r3, [r7, #16]
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3730      	adds	r7, #48	; 0x30
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
 800c2ce:	bf00      	nop
 800c2d0:	20002da8 	.word	0x20002da8

0800c2d4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b086      	sub	sp, #24
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2dc:	f3ef 8305 	mrs	r3, IPSR
 800c2e0:	613b      	str	r3, [r7, #16]
  return(result);
 800c2e2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d10f      	bne.n	800c308 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c2e8:	f3ef 8310 	mrs	r3, PRIMASK
 800c2ec:	60fb      	str	r3, [r7, #12]
  return(result);
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d105      	bne.n	800c300 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c2f4:	f3ef 8311 	mrs	r3, BASEPRI
 800c2f8:	60bb      	str	r3, [r7, #8]
  return(result);
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d007      	beq.n	800c310 <osDelay+0x3c>
 800c300:	4b0a      	ldr	r3, [pc, #40]	; (800c32c <osDelay+0x58>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	2b02      	cmp	r3, #2
 800c306:	d103      	bne.n	800c310 <osDelay+0x3c>
    stat = osErrorISR;
 800c308:	f06f 0305 	mvn.w	r3, #5
 800c30c:	617b      	str	r3, [r7, #20]
 800c30e:	e007      	b.n	800c320 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800c310:	2300      	movs	r3, #0
 800c312:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d002      	beq.n	800c320 <osDelay+0x4c>
      vTaskDelay(ticks);
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f001 fb4a 	bl	800d9b4 <vTaskDelay>
    }
  }

  return (stat);
 800c320:	697b      	ldr	r3, [r7, #20]
}
 800c322:	4618      	mov	r0, r3
 800c324:	3718      	adds	r7, #24
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	20002da8 	.word	0x20002da8

0800c330 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800c330:	b580      	push	{r7, lr}
 800c332:	b088      	sub	sp, #32
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800c338:	2300      	movs	r3, #0
 800c33a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c33c:	f3ef 8305 	mrs	r3, IPSR
 800c340:	617b      	str	r3, [r7, #20]
  return(result);
 800c342:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 800c344:	2b00      	cmp	r3, #0
 800c346:	d13d      	bne.n	800c3c4 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c348:	f3ef 8310 	mrs	r3, PRIMASK
 800c34c:	613b      	str	r3, [r7, #16]
  return(result);
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d105      	bne.n	800c360 <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c354:	f3ef 8311 	mrs	r3, BASEPRI
 800c358:	60fb      	str	r3, [r7, #12]
  return(result);
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d003      	beq.n	800c368 <osEventFlagsNew+0x38>
 800c360:	4b1b      	ldr	r3, [pc, #108]	; (800c3d0 <osEventFlagsNew+0xa0>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	2b02      	cmp	r3, #2
 800c366:	d02d      	beq.n	800c3c4 <osEventFlagsNew+0x94>
    mem = -1;
 800c368:	f04f 33ff 	mov.w	r3, #4294967295
 800c36c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d015      	beq.n	800c3a0 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	689b      	ldr	r3, [r3, #8]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d006      	beq.n	800c38a <osEventFlagsNew+0x5a>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	68db      	ldr	r3, [r3, #12]
 800c380:	2b1f      	cmp	r3, #31
 800c382:	d902      	bls.n	800c38a <osEventFlagsNew+0x5a>
        mem = 1;
 800c384:	2301      	movs	r3, #1
 800c386:	61bb      	str	r3, [r7, #24]
 800c388:	e00c      	b.n	800c3a4 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	689b      	ldr	r3, [r3, #8]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d108      	bne.n	800c3a4 <osEventFlagsNew+0x74>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	68db      	ldr	r3, [r3, #12]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d104      	bne.n	800c3a4 <osEventFlagsNew+0x74>
          mem = 0;
 800c39a:	2300      	movs	r3, #0
 800c39c:	61bb      	str	r3, [r7, #24]
 800c39e:	e001      	b.n	800c3a4 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c3a4:	69bb      	ldr	r3, [r7, #24]
 800c3a6:	2b01      	cmp	r3, #1
 800c3a8:	d106      	bne.n	800c3b8 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	689b      	ldr	r3, [r3, #8]
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f000 f956 	bl	800c660 <xEventGroupCreateStatic>
 800c3b4:	61f8      	str	r0, [r7, #28]
 800c3b6:	e005      	b.n	800c3c4 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 800c3b8:	69bb      	ldr	r3, [r7, #24]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d102      	bne.n	800c3c4 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 800c3be:	f000 f986 	bl	800c6ce <xEventGroupCreate>
 800c3c2:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800c3c4:	69fb      	ldr	r3, [r7, #28]
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3720      	adds	r7, #32
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
 800c3ce:	bf00      	nop
 800c3d0:	20002da8 	.word	0x20002da8

0800c3d4 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b088      	sub	sp, #32
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800c3e2:	69bb      	ldr	r3, [r7, #24]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d004      	beq.n	800c3f2 <osEventFlagsSet+0x1e>
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d003      	beq.n	800c3fa <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800c3f2:	f06f 0303 	mvn.w	r3, #3
 800c3f6:	61fb      	str	r3, [r7, #28]
 800c3f8:	e03a      	b.n	800c470 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3fa:	f3ef 8305 	mrs	r3, IPSR
 800c3fe:	617b      	str	r3, [r7, #20]
  return(result);
 800c400:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800c402:	2b00      	cmp	r3, #0
 800c404:	d10f      	bne.n	800c426 <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c406:	f3ef 8310 	mrs	r3, PRIMASK
 800c40a:	613b      	str	r3, [r7, #16]
  return(result);
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d105      	bne.n	800c41e <osEventFlagsSet+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c412:	f3ef 8311 	mrs	r3, BASEPRI
 800c416:	60fb      	str	r3, [r7, #12]
  return(result);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d021      	beq.n	800c462 <osEventFlagsSet+0x8e>
 800c41e:	4b17      	ldr	r3, [pc, #92]	; (800c47c <osEventFlagsSet+0xa8>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	2b02      	cmp	r3, #2
 800c424:	d11d      	bne.n	800c462 <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 800c426:	2300      	movs	r3, #0
 800c428:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800c42a:	f107 0308 	add.w	r3, r7, #8
 800c42e:	461a      	mov	r2, r3
 800c430:	6839      	ldr	r1, [r7, #0]
 800c432:	69b8      	ldr	r0, [r7, #24]
 800c434:	f000 fb6c 	bl	800cb10 <xEventGroupSetBitsFromISR>
 800c438:	4603      	mov	r3, r0
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d103      	bne.n	800c446 <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 800c43e:	f06f 0302 	mvn.w	r3, #2
 800c442:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800c444:	e013      	b.n	800c46e <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d00e      	beq.n	800c46e <osEventFlagsSet+0x9a>
 800c450:	4b0b      	ldr	r3, [pc, #44]	; (800c480 <osEventFlagsSet+0xac>)
 800c452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c456:	601a      	str	r2, [r3, #0]
 800c458:	f3bf 8f4f 	dsb	sy
 800c45c:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800c460:	e005      	b.n	800c46e <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800c462:	6839      	ldr	r1, [r7, #0]
 800c464:	69b8      	ldr	r0, [r7, #24]
 800c466:	f000 fa8b 	bl	800c980 <xEventGroupSetBits>
 800c46a:	61f8      	str	r0, [r7, #28]
 800c46c:	e000      	b.n	800c470 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800c46e:	bf00      	nop
  }

  return (rflags);
 800c470:	69fb      	ldr	r3, [r7, #28]
}
 800c472:	4618      	mov	r0, r3
 800c474:	3720      	adds	r7, #32
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	bf00      	nop
 800c47c:	20002da8 	.word	0x20002da8
 800c480:	e000ed04 	.word	0xe000ed04

0800c484 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 800c484:	b580      	push	{r7, lr}
 800c486:	b088      	sub	sp, #32
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800c492:	69bb      	ldr	r3, [r7, #24]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d004      	beq.n	800c4a2 <osEventFlagsClear+0x1e>
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d003      	beq.n	800c4aa <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 800c4a2:	f06f 0303 	mvn.w	r3, #3
 800c4a6:	61fb      	str	r3, [r7, #28]
 800c4a8:	e029      	b.n	800c4fe <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4aa:	f3ef 8305 	mrs	r3, IPSR
 800c4ae:	617b      	str	r3, [r7, #20]
  return(result);
 800c4b0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d10f      	bne.n	800c4d6 <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c4b6:	f3ef 8310 	mrs	r3, PRIMASK
 800c4ba:	613b      	str	r3, [r7, #16]
  return(result);
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d105      	bne.n	800c4ce <osEventFlagsClear+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c4c2:	f3ef 8311 	mrs	r3, BASEPRI
 800c4c6:	60fb      	str	r3, [r7, #12]
  return(result);
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d012      	beq.n	800c4f4 <osEventFlagsClear+0x70>
 800c4ce:	4b0e      	ldr	r3, [pc, #56]	; (800c508 <osEventFlagsClear+0x84>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	2b02      	cmp	r3, #2
 800c4d4:	d10e      	bne.n	800c4f4 <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 800c4d6:	69b8      	ldr	r0, [r7, #24]
 800c4d8:	f000 fa2e 	bl	800c938 <xEventGroupGetBitsFromISR>
 800c4dc:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800c4de:	6839      	ldr	r1, [r7, #0]
 800c4e0:	69b8      	ldr	r0, [r7, #24]
 800c4e2:	f000 fa15 	bl	800c910 <xEventGroupClearBitsFromISR>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d108      	bne.n	800c4fe <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 800c4ec:	f06f 0302 	mvn.w	r3, #2
 800c4f0:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800c4f2:	e004      	b.n	800c4fe <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 800c4f4:	6839      	ldr	r1, [r7, #0]
 800c4f6:	69b8      	ldr	r0, [r7, #24]
 800c4f8:	f000 f9d2 	bl	800c8a0 <xEventGroupClearBits>
 800c4fc:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 800c4fe:	69fb      	ldr	r3, [r7, #28]
}
 800c500:	4618      	mov	r0, r3
 800c502:	3720      	adds	r7, #32
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}
 800c508:	20002da8 	.word	0x20002da8

0800c50c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b08e      	sub	sp, #56	; 0x38
 800c510:	af02      	add	r7, sp, #8
 800c512:	60f8      	str	r0, [r7, #12]
 800c514:	60b9      	str	r1, [r7, #8]
 800c516:	607a      	str	r2, [r7, #4]
 800c518:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800c51e:	6a3b      	ldr	r3, [r7, #32]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d004      	beq.n	800c52e <osEventFlagsWait+0x22>
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d003      	beq.n	800c536 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800c52e:	f06f 0303 	mvn.w	r3, #3
 800c532:	627b      	str	r3, [r7, #36]	; 0x24
 800c534:	e059      	b.n	800c5ea <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c536:	f3ef 8305 	mrs	r3, IPSR
 800c53a:	61fb      	str	r3, [r7, #28]
  return(result);
 800c53c:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d10f      	bne.n	800c562 <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c542:	f3ef 8310 	mrs	r3, PRIMASK
 800c546:	61bb      	str	r3, [r7, #24]
  return(result);
 800c548:	69bb      	ldr	r3, [r7, #24]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d105      	bne.n	800c55a <osEventFlagsWait+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c54e:	f3ef 8311 	mrs	r3, BASEPRI
 800c552:	617b      	str	r3, [r7, #20]
  return(result);
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d007      	beq.n	800c56a <osEventFlagsWait+0x5e>
 800c55a:	4b26      	ldr	r3, [pc, #152]	; (800c5f4 <osEventFlagsWait+0xe8>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	2b02      	cmp	r3, #2
 800c560:	d103      	bne.n	800c56a <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 800c562:	f06f 0305 	mvn.w	r3, #5
 800c566:	627b      	str	r3, [r7, #36]	; 0x24
 800c568:	e03f      	b.n	800c5ea <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f003 0301 	and.w	r3, r3, #1
 800c570:	2b00      	cmp	r3, #0
 800c572:	d002      	beq.n	800c57a <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 800c574:	2301      	movs	r3, #1
 800c576:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c578:	e001      	b.n	800c57e <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 800c57a:	2300      	movs	r3, #0
 800c57c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f003 0302 	and.w	r3, r3, #2
 800c584:	2b00      	cmp	r3, #0
 800c586:	d002      	beq.n	800c58e <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 800c588:	2300      	movs	r3, #0
 800c58a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c58c:	e001      	b.n	800c592 <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 800c58e:	2301      	movs	r3, #1
 800c590:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	9300      	str	r3, [sp, #0]
 800c596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c598:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c59a:	68b9      	ldr	r1, [r7, #8]
 800c59c:	6a38      	ldr	r0, [r7, #32]
 800c59e:	f000 f8b1 	bl	800c704 <xEventGroupWaitBits>
 800c5a2:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f003 0301 	and.w	r3, r3, #1
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d00e      	beq.n	800c5cc <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 800c5ae:	68ba      	ldr	r2, [r7, #8]
 800c5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d019      	beq.n	800c5ea <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d003      	beq.n	800c5c4 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 800c5bc:	f06f 0301 	mvn.w	r3, #1
 800c5c0:	627b      	str	r3, [r7, #36]	; 0x24
 800c5c2:	e012      	b.n	800c5ea <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 800c5c4:	f06f 0302 	mvn.w	r3, #2
 800c5c8:	627b      	str	r3, [r7, #36]	; 0x24
 800c5ca:	e00e      	b.n	800c5ea <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800c5cc:	68ba      	ldr	r2, [r7, #8]
 800c5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d0:	4013      	ands	r3, r2
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d109      	bne.n	800c5ea <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d003      	beq.n	800c5e4 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 800c5dc:	f06f 0301 	mvn.w	r3, #1
 800c5e0:	627b      	str	r3, [r7, #36]	; 0x24
 800c5e2:	e002      	b.n	800c5ea <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 800c5e4:	f06f 0302 	mvn.w	r3, #2
 800c5e8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 800c5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3730      	adds	r7, #48	; 0x30
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}
 800c5f4:	20002da8 	.word	0x20002da8

0800c5f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c5f8:	b480      	push	{r7}
 800c5fa:	b085      	sub	sp, #20
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	60f8      	str	r0, [r7, #12]
 800c600:	60b9      	str	r1, [r7, #8]
 800c602:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	4a07      	ldr	r2, [pc, #28]	; (800c624 <vApplicationGetIdleTaskMemory+0x2c>)
 800c608:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	4a06      	ldr	r2, [pc, #24]	; (800c628 <vApplicationGetIdleTaskMemory+0x30>)
 800c60e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2280      	movs	r2, #128	; 0x80
 800c614:	601a      	str	r2, [r3, #0]
}
 800c616:	bf00      	nop
 800c618:	3714      	adds	r7, #20
 800c61a:	46bd      	mov	sp, r7
 800c61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c620:	4770      	bx	lr
 800c622:	bf00      	nop
 800c624:	20002dac 	.word	0x20002dac
 800c628:	20002e08 	.word	0x20002e08

0800c62c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c62c:	b480      	push	{r7}
 800c62e:	b085      	sub	sp, #20
 800c630:	af00      	add	r7, sp, #0
 800c632:	60f8      	str	r0, [r7, #12]
 800c634:	60b9      	str	r1, [r7, #8]
 800c636:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	4a07      	ldr	r2, [pc, #28]	; (800c658 <vApplicationGetTimerTaskMemory+0x2c>)
 800c63c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	4a06      	ldr	r2, [pc, #24]	; (800c65c <vApplicationGetTimerTaskMemory+0x30>)
 800c642:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c64a:	601a      	str	r2, [r3, #0]
}
 800c64c:	bf00      	nop
 800c64e:	3714      	adds	r7, #20
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr
 800c658:	20003008 	.word	0x20003008
 800c65c:	20003064 	.word	0x20003064

0800c660 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800c660:	b580      	push	{r7, lr}
 800c662:	b086      	sub	sp, #24
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d10a      	bne.n	800c684 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c672:	f383 8811 	msr	BASEPRI, r3
 800c676:	f3bf 8f6f 	isb	sy
 800c67a:	f3bf 8f4f 	dsb	sy
 800c67e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c680:	bf00      	nop
 800c682:	e7fe      	b.n	800c682 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800c684:	2320      	movs	r3, #32
 800c686:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	2b20      	cmp	r3, #32
 800c68c:	d00a      	beq.n	800c6a4 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800c68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c692:	f383 8811 	msr	BASEPRI, r3
 800c696:	f3bf 8f6f 	isb	sy
 800c69a:	f3bf 8f4f 	dsb	sy
 800c69e:	60fb      	str	r3, [r7, #12]
}
 800c6a0:	bf00      	nop
 800c6a2:	e7fe      	b.n	800c6a2 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d00a      	beq.n	800c6c4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	3304      	adds	r3, #4
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f000 fa3d 	bl	800cb38 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800c6c4:	697b      	ldr	r3, [r7, #20]
	}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3718      	adds	r7, #24
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}

0800c6ce <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800c6ce:	b580      	push	{r7, lr}
 800c6d0:	b082      	sub	sp, #8
 800c6d2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800c6d4:	2020      	movs	r0, #32
 800c6d6:	f002 fd3f 	bl	800f158 <pvPortMalloc>
 800c6da:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d00a      	beq.n	800c6f8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	3304      	adds	r3, #4
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f000 fa23 	bl	800cb38 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800c6f8:	687b      	ldr	r3, [r7, #4]
	}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3708      	adds	r7, #8
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
	...

0800c704 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b090      	sub	sp, #64	; 0x40
 800c708:	af00      	add	r7, sp, #0
 800c70a:	60f8      	str	r0, [r7, #12]
 800c70c:	60b9      	str	r1, [r7, #8]
 800c70e:	607a      	str	r2, [r7, #4]
 800c710:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800c716:	2300      	movs	r3, #0
 800c718:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800c71a:	2300      	movs	r3, #0
 800c71c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d10a      	bne.n	800c73a <xEventGroupWaitBits+0x36>
	__asm volatile
 800c724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c728:	f383 8811 	msr	BASEPRI, r3
 800c72c:	f3bf 8f6f 	isb	sy
 800c730:	f3bf 8f4f 	dsb	sy
 800c734:	623b      	str	r3, [r7, #32]
}
 800c736:	bf00      	nop
 800c738:	e7fe      	b.n	800c738 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c740:	2b00      	cmp	r3, #0
 800c742:	d00a      	beq.n	800c75a <xEventGroupWaitBits+0x56>
	__asm volatile
 800c744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c748:	f383 8811 	msr	BASEPRI, r3
 800c74c:	f3bf 8f6f 	isb	sy
 800c750:	f3bf 8f4f 	dsb	sy
 800c754:	61fb      	str	r3, [r7, #28]
}
 800c756:	bf00      	nop
 800c758:	e7fe      	b.n	800c758 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d10a      	bne.n	800c776 <xEventGroupWaitBits+0x72>
	__asm volatile
 800c760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c764:	f383 8811 	msr	BASEPRI, r3
 800c768:	f3bf 8f6f 	isb	sy
 800c76c:	f3bf 8f4f 	dsb	sy
 800c770:	61bb      	str	r3, [r7, #24]
}
 800c772:	bf00      	nop
 800c774:	e7fe      	b.n	800c774 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c776:	f001 fe37 	bl	800e3e8 <xTaskGetSchedulerState>
 800c77a:	4603      	mov	r3, r0
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d102      	bne.n	800c786 <xEventGroupWaitBits+0x82>
 800c780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c782:	2b00      	cmp	r3, #0
 800c784:	d101      	bne.n	800c78a <xEventGroupWaitBits+0x86>
 800c786:	2301      	movs	r3, #1
 800c788:	e000      	b.n	800c78c <xEventGroupWaitBits+0x88>
 800c78a:	2300      	movs	r3, #0
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d10a      	bne.n	800c7a6 <xEventGroupWaitBits+0xa2>
	__asm volatile
 800c790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c794:	f383 8811 	msr	BASEPRI, r3
 800c798:	f3bf 8f6f 	isb	sy
 800c79c:	f3bf 8f4f 	dsb	sy
 800c7a0:	617b      	str	r3, [r7, #20]
}
 800c7a2:	bf00      	nop
 800c7a4:	e7fe      	b.n	800c7a4 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800c7a6:	f001 f99f 	bl	800dae8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800c7aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800c7b0:	683a      	ldr	r2, [r7, #0]
 800c7b2:	68b9      	ldr	r1, [r7, #8]
 800c7b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7b6:	f000 f988 	bl	800caca <prvTestWaitCondition>
 800c7ba:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800c7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d00e      	beq.n	800c7e0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800c7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d028      	beq.n	800c822 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c7d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7d2:	681a      	ldr	r2, [r3, #0]
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	43db      	mvns	r3, r3
 800c7d8:	401a      	ands	r2, r3
 800c7da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7dc:	601a      	str	r2, [r3, #0]
 800c7de:	e020      	b.n	800c822 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800c7e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d104      	bne.n	800c7f0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800c7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	633b      	str	r3, [r7, #48]	; 0x30
 800c7ee:	e018      	b.n	800c822 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d003      	beq.n	800c7fe <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800c7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c7fc:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d003      	beq.n	800c80c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800c804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c806:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c80a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800c80c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c80e:	1d18      	adds	r0, r3, #4
 800c810:	68ba      	ldr	r2, [r7, #8]
 800c812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c814:	4313      	orrs	r3, r2
 800c816:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c818:	4619      	mov	r1, r3
 800c81a:	f001 fb5d 	bl	800ded8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800c81e:	2300      	movs	r3, #0
 800c820:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800c822:	f001 f96f 	bl	800db04 <xTaskResumeAll>
 800c826:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800c828:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d031      	beq.n	800c892 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800c82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c830:	2b00      	cmp	r3, #0
 800c832:	d107      	bne.n	800c844 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800c834:	4b19      	ldr	r3, [pc, #100]	; (800c89c <xEventGroupWaitBits+0x198>)
 800c836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c83a:	601a      	str	r2, [r3, #0]
 800c83c:	f3bf 8f4f 	dsb	sy
 800c840:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800c844:	f001 fe5c 	bl	800e500 <uxTaskResetEventItemValue>
 800c848:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800c84a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c84c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c850:	2b00      	cmp	r3, #0
 800c852:	d11a      	bne.n	800c88a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800c854:	f002 fb5e 	bl	800ef14 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800c858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800c85e:	683a      	ldr	r2, [r7, #0]
 800c860:	68b9      	ldr	r1, [r7, #8]
 800c862:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c864:	f000 f931 	bl	800caca <prvTestWaitCondition>
 800c868:	4603      	mov	r3, r0
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d009      	beq.n	800c882 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d006      	beq.n	800c882 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c876:	681a      	ldr	r2, [r3, #0]
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	43db      	mvns	r3, r3
 800c87c:	401a      	ands	r2, r3
 800c87e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c880:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800c882:	2301      	movs	r3, #1
 800c884:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800c886:	f002 fb75 	bl	800ef74 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c88a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c88c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c890:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800c892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c894:	4618      	mov	r0, r3
 800c896:	3740      	adds	r7, #64	; 0x40
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}
 800c89c:	e000ed04 	.word	0xe000ed04

0800c8a0 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b086      	sub	sp, #24
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d10a      	bne.n	800c8ca <xEventGroupClearBits+0x2a>
	__asm volatile
 800c8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b8:	f383 8811 	msr	BASEPRI, r3
 800c8bc:	f3bf 8f6f 	isb	sy
 800c8c0:	f3bf 8f4f 	dsb	sy
 800c8c4:	60fb      	str	r3, [r7, #12]
}
 800c8c6:	bf00      	nop
 800c8c8:	e7fe      	b.n	800c8c8 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d00a      	beq.n	800c8ea <xEventGroupClearBits+0x4a>
	__asm volatile
 800c8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d8:	f383 8811 	msr	BASEPRI, r3
 800c8dc:	f3bf 8f6f 	isb	sy
 800c8e0:	f3bf 8f4f 	dsb	sy
 800c8e4:	60bb      	str	r3, [r7, #8]
}
 800c8e6:	bf00      	nop
 800c8e8:	e7fe      	b.n	800c8e8 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 800c8ea:	f002 fb13 	bl	800ef14 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	681a      	ldr	r2, [r3, #0]
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	43db      	mvns	r3, r3
 800c8fc:	401a      	ands	r2, r3
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800c902:	f002 fb37 	bl	800ef74 <vPortExitCritical>

	return uxReturn;
 800c906:	693b      	ldr	r3, [r7, #16]
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3718      	adds	r7, #24
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 800c910:	b580      	push	{r7, lr}
 800c912:	b084      	sub	sp, #16
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800c91a:	2300      	movs	r3, #0
 800c91c:	683a      	ldr	r2, [r7, #0]
 800c91e:	6879      	ldr	r1, [r7, #4]
 800c920:	4804      	ldr	r0, [pc, #16]	; (800c934 <xEventGroupClearBitsFromISR+0x24>)
 800c922:	f002 f9a7 	bl	800ec74 <xTimerPendFunctionCallFromISR>
 800c926:	60f8      	str	r0, [r7, #12]

		return xReturn;
 800c928:	68fb      	ldr	r3, [r7, #12]
	}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3710      	adds	r7, #16
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
 800c932:	bf00      	nop
 800c934:	0800cab1 	.word	0x0800cab1

0800c938 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 800c938:	b480      	push	{r7}
 800c93a:	b089      	sub	sp, #36	; 0x24
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c944:	f3ef 8211 	mrs	r2, BASEPRI
 800c948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c94c:	f383 8811 	msr	BASEPRI, r3
 800c950:	f3bf 8f6f 	isb	sy
 800c954:	f3bf 8f4f 	dsb	sy
 800c958:	60fa      	str	r2, [r7, #12]
 800c95a:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c95c:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c95e:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 800c960:	69fb      	ldr	r3, [r7, #28]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	617b      	str	r3, [r7, #20]
 800c966:	69bb      	ldr	r3, [r7, #24]
 800c968:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c970:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 800c972:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 800c974:	4618      	mov	r0, r3
 800c976:	3724      	adds	r7, #36	; 0x24
 800c978:	46bd      	mov	sp, r7
 800c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97e:	4770      	bx	lr

0800c980 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b08e      	sub	sp, #56	; 0x38
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800c98a:	2300      	movs	r3, #0
 800c98c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800c992:	2300      	movs	r3, #0
 800c994:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d10a      	bne.n	800c9b2 <xEventGroupSetBits+0x32>
	__asm volatile
 800c99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a0:	f383 8811 	msr	BASEPRI, r3
 800c9a4:	f3bf 8f6f 	isb	sy
 800c9a8:	f3bf 8f4f 	dsb	sy
 800c9ac:	613b      	str	r3, [r7, #16]
}
 800c9ae:	bf00      	nop
 800c9b0:	e7fe      	b.n	800c9b0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d00a      	beq.n	800c9d2 <xEventGroupSetBits+0x52>
	__asm volatile
 800c9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c0:	f383 8811 	msr	BASEPRI, r3
 800c9c4:	f3bf 8f6f 	isb	sy
 800c9c8:	f3bf 8f4f 	dsb	sy
 800c9cc:	60fb      	str	r3, [r7, #12]
}
 800c9ce:	bf00      	nop
 800c9d0:	e7fe      	b.n	800c9d0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800c9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d4:	3304      	adds	r3, #4
 800c9d6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9da:	3308      	adds	r3, #8
 800c9dc:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800c9de:	f001 f883 	bl	800dae8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800c9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e4:	68db      	ldr	r3, [r3, #12]
 800c9e6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800c9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ea:	681a      	ldr	r2, [r3, #0]
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	431a      	orrs	r2, r3
 800c9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800c9f4:	e03c      	b.n	800ca70 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800c9f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9f8:	685b      	ldr	r3, [r3, #4]
 800c9fa:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800c9fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800ca02:	2300      	movs	r3, #0
 800ca04:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800ca06:	69bb      	ldr	r3, [r7, #24]
 800ca08:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ca0c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800ca0e:	69bb      	ldr	r3, [r7, #24]
 800ca10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ca14:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d108      	bne.n	800ca32 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800ca20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca22:	681a      	ldr	r2, [r3, #0]
 800ca24:	69bb      	ldr	r3, [r7, #24]
 800ca26:	4013      	ands	r3, r2
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d00b      	beq.n	800ca44 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca30:	e008      	b.n	800ca44 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800ca32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca34:	681a      	ldr	r2, [r3, #0]
 800ca36:	69bb      	ldr	r3, [r7, #24]
 800ca38:	4013      	ands	r3, r2
 800ca3a:	69ba      	ldr	r2, [r7, #24]
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d101      	bne.n	800ca44 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800ca40:	2301      	movs	r3, #1
 800ca42:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800ca44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d010      	beq.n	800ca6c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800ca4a:	697b      	ldr	r3, [r7, #20]
 800ca4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d003      	beq.n	800ca5c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800ca54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca56:	69bb      	ldr	r3, [r7, #24]
 800ca58:	4313      	orrs	r3, r2
 800ca5a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800ca5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ca64:	4619      	mov	r1, r3
 800ca66:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ca68:	f001 fb02 	bl	800e070 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800ca6c:	69fb      	ldr	r3, [r7, #28]
 800ca6e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800ca70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca72:	6a3b      	ldr	r3, [r7, #32]
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d1be      	bne.n	800c9f6 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800ca78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca7a:	681a      	ldr	r2, [r3, #0]
 800ca7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca7e:	43db      	mvns	r3, r3
 800ca80:	401a      	ands	r2, r3
 800ca82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca84:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800ca86:	f001 f83d 	bl	800db04 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800ca8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8c:	681b      	ldr	r3, [r3, #0]
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	3738      	adds	r7, #56	; 0x38
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}

0800ca96 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800ca96:	b580      	push	{r7, lr}
 800ca98:	b082      	sub	sp, #8
 800ca9a:	af00      	add	r7, sp, #0
 800ca9c:	6078      	str	r0, [r7, #4]
 800ca9e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800caa0:	6839      	ldr	r1, [r7, #0]
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f7ff ff6c 	bl	800c980 <xEventGroupSetBits>
}
 800caa8:	bf00      	nop
 800caaa:	3708      	adds	r7, #8
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b082      	sub	sp, #8
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800caba:	6839      	ldr	r1, [r7, #0]
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f7ff feef 	bl	800c8a0 <xEventGroupClearBits>
}
 800cac2:	bf00      	nop
 800cac4:	3708      	adds	r7, #8
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}

0800caca <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800caca:	b480      	push	{r7}
 800cacc:	b087      	sub	sp, #28
 800cace:	af00      	add	r7, sp, #0
 800cad0:	60f8      	str	r0, [r7, #12]
 800cad2:	60b9      	str	r1, [r7, #8]
 800cad4:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800cad6:	2300      	movs	r3, #0
 800cad8:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d107      	bne.n	800caf0 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800cae0:	68fa      	ldr	r2, [r7, #12]
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	4013      	ands	r3, r2
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d00a      	beq.n	800cb00 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800caea:	2301      	movs	r3, #1
 800caec:	617b      	str	r3, [r7, #20]
 800caee:	e007      	b.n	800cb00 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800caf0:	68fa      	ldr	r2, [r7, #12]
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	4013      	ands	r3, r2
 800caf6:	68ba      	ldr	r2, [r7, #8]
 800caf8:	429a      	cmp	r2, r3
 800cafa:	d101      	bne.n	800cb00 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800cafc:	2301      	movs	r3, #1
 800cafe:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800cb00:	697b      	ldr	r3, [r7, #20]
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	371c      	adds	r7, #28
 800cb06:	46bd      	mov	sp, r7
 800cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0c:	4770      	bx	lr
	...

0800cb10 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b086      	sub	sp, #24
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	60f8      	str	r0, [r7, #12]
 800cb18:	60b9      	str	r1, [r7, #8]
 800cb1a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	68ba      	ldr	r2, [r7, #8]
 800cb20:	68f9      	ldr	r1, [r7, #12]
 800cb22:	4804      	ldr	r0, [pc, #16]	; (800cb34 <xEventGroupSetBitsFromISR+0x24>)
 800cb24:	f002 f8a6 	bl	800ec74 <xTimerPendFunctionCallFromISR>
 800cb28:	6178      	str	r0, [r7, #20]

		return xReturn;
 800cb2a:	697b      	ldr	r3, [r7, #20]
	}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3718      	adds	r7, #24
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}
 800cb34:	0800ca97 	.word	0x0800ca97

0800cb38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b083      	sub	sp, #12
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f103 0208 	add.w	r2, r3, #8
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f103 0208 	add.w	r2, r3, #8
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f103 0208 	add.w	r2, r3, #8
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cb6c:	bf00      	nop
 800cb6e:	370c      	adds	r7, #12
 800cb70:	46bd      	mov	sp, r7
 800cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb76:	4770      	bx	lr

0800cb78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b083      	sub	sp, #12
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2200      	movs	r2, #0
 800cb84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cb86:	bf00      	nop
 800cb88:	370c      	adds	r7, #12
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr

0800cb92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cb92:	b480      	push	{r7}
 800cb94:	b085      	sub	sp, #20
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	6078      	str	r0, [r7, #4]
 800cb9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	685b      	ldr	r3, [r3, #4]
 800cba0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	68fa      	ldr	r2, [r7, #12]
 800cba6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	689a      	ldr	r2, [r3, #8]
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	689b      	ldr	r3, [r3, #8]
 800cbb4:	683a      	ldr	r2, [r7, #0]
 800cbb6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	683a      	ldr	r2, [r7, #0]
 800cbbc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	687a      	ldr	r2, [r7, #4]
 800cbc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	1c5a      	adds	r2, r3, #1
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	601a      	str	r2, [r3, #0]
}
 800cbce:	bf00      	nop
 800cbd0:	3714      	adds	r7, #20
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd8:	4770      	bx	lr

0800cbda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cbda:	b480      	push	{r7}
 800cbdc:	b085      	sub	sp, #20
 800cbde:	af00      	add	r7, sp, #0
 800cbe0:	6078      	str	r0, [r7, #4]
 800cbe2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbf0:	d103      	bne.n	800cbfa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	691b      	ldr	r3, [r3, #16]
 800cbf6:	60fb      	str	r3, [r7, #12]
 800cbf8:	e00c      	b.n	800cc14 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	3308      	adds	r3, #8
 800cbfe:	60fb      	str	r3, [r7, #12]
 800cc00:	e002      	b.n	800cc08 <vListInsert+0x2e>
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	60fb      	str	r3, [r7, #12]
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	685b      	ldr	r3, [r3, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	68ba      	ldr	r2, [r7, #8]
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d2f6      	bcs.n	800cc02 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	685a      	ldr	r2, [r3, #4]
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	685b      	ldr	r3, [r3, #4]
 800cc20:	683a      	ldr	r2, [r7, #0]
 800cc22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	68fa      	ldr	r2, [r7, #12]
 800cc28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	683a      	ldr	r2, [r7, #0]
 800cc2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	687a      	ldr	r2, [r7, #4]
 800cc34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	1c5a      	adds	r2, r3, #1
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	601a      	str	r2, [r3, #0]
}
 800cc40:	bf00      	nop
 800cc42:	3714      	adds	r7, #20
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr

0800cc4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b085      	sub	sp, #20
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	691b      	ldr	r3, [r3, #16]
 800cc58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	6892      	ldr	r2, [r2, #8]
 800cc62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	689b      	ldr	r3, [r3, #8]
 800cc68:	687a      	ldr	r2, [r7, #4]
 800cc6a:	6852      	ldr	r2, [r2, #4]
 800cc6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	685b      	ldr	r3, [r3, #4]
 800cc72:	687a      	ldr	r2, [r7, #4]
 800cc74:	429a      	cmp	r2, r3
 800cc76:	d103      	bne.n	800cc80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	689a      	ldr	r2, [r3, #8]
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2200      	movs	r2, #0
 800cc84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	1e5a      	subs	r2, r3, #1
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	681b      	ldr	r3, [r3, #0]
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3714      	adds	r7, #20
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b084      	sub	sp, #16
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
 800cca8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d10a      	bne.n	800ccca <xQueueGenericReset+0x2a>
	__asm volatile
 800ccb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb8:	f383 8811 	msr	BASEPRI, r3
 800ccbc:	f3bf 8f6f 	isb	sy
 800ccc0:	f3bf 8f4f 	dsb	sy
 800ccc4:	60bb      	str	r3, [r7, #8]
}
 800ccc6:	bf00      	nop
 800ccc8:	e7fe      	b.n	800ccc8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ccca:	f002 f923 	bl	800ef14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	681a      	ldr	r2, [r3, #0]
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccd6:	68f9      	ldr	r1, [r7, #12]
 800ccd8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ccda:	fb01 f303 	mul.w	r3, r1, r3
 800ccde:	441a      	add	r2, r3
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	2200      	movs	r2, #0
 800cce8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	681a      	ldr	r2, [r3, #0]
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	681a      	ldr	r2, [r3, #0]
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccfa:	3b01      	subs	r3, #1
 800ccfc:	68f9      	ldr	r1, [r7, #12]
 800ccfe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cd00:	fb01 f303 	mul.w	r3, r1, r3
 800cd04:	441a      	add	r2, r3
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	22ff      	movs	r2, #255	; 0xff
 800cd0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	22ff      	movs	r2, #255	; 0xff
 800cd16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d114      	bne.n	800cd4a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	691b      	ldr	r3, [r3, #16]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d01a      	beq.n	800cd5e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	3310      	adds	r3, #16
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f001 f93b 	bl	800dfa8 <xTaskRemoveFromEventList>
 800cd32:	4603      	mov	r3, r0
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d012      	beq.n	800cd5e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cd38:	4b0c      	ldr	r3, [pc, #48]	; (800cd6c <xQueueGenericReset+0xcc>)
 800cd3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd3e:	601a      	str	r2, [r3, #0]
 800cd40:	f3bf 8f4f 	dsb	sy
 800cd44:	f3bf 8f6f 	isb	sy
 800cd48:	e009      	b.n	800cd5e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	3310      	adds	r3, #16
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7ff fef2 	bl	800cb38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	3324      	adds	r3, #36	; 0x24
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f7ff feed 	bl	800cb38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cd5e:	f002 f909 	bl	800ef74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cd62:	2301      	movs	r3, #1
}
 800cd64:	4618      	mov	r0, r3
 800cd66:	3710      	adds	r7, #16
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}
 800cd6c:	e000ed04 	.word	0xe000ed04

0800cd70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b08e      	sub	sp, #56	; 0x38
 800cd74:	af02      	add	r7, sp, #8
 800cd76:	60f8      	str	r0, [r7, #12]
 800cd78:	60b9      	str	r1, [r7, #8]
 800cd7a:	607a      	str	r2, [r7, #4]
 800cd7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d10a      	bne.n	800cd9a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cd84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd88:	f383 8811 	msr	BASEPRI, r3
 800cd8c:	f3bf 8f6f 	isb	sy
 800cd90:	f3bf 8f4f 	dsb	sy
 800cd94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cd96:	bf00      	nop
 800cd98:	e7fe      	b.n	800cd98 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d10a      	bne.n	800cdb6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda4:	f383 8811 	msr	BASEPRI, r3
 800cda8:	f3bf 8f6f 	isb	sy
 800cdac:	f3bf 8f4f 	dsb	sy
 800cdb0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cdb2:	bf00      	nop
 800cdb4:	e7fe      	b.n	800cdb4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d002      	beq.n	800cdc2 <xQueueGenericCreateStatic+0x52>
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d001      	beq.n	800cdc6 <xQueueGenericCreateStatic+0x56>
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	e000      	b.n	800cdc8 <xQueueGenericCreateStatic+0x58>
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d10a      	bne.n	800cde2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cdcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd0:	f383 8811 	msr	BASEPRI, r3
 800cdd4:	f3bf 8f6f 	isb	sy
 800cdd8:	f3bf 8f4f 	dsb	sy
 800cddc:	623b      	str	r3, [r7, #32]
}
 800cdde:	bf00      	nop
 800cde0:	e7fe      	b.n	800cde0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d102      	bne.n	800cdee <xQueueGenericCreateStatic+0x7e>
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d101      	bne.n	800cdf2 <xQueueGenericCreateStatic+0x82>
 800cdee:	2301      	movs	r3, #1
 800cdf0:	e000      	b.n	800cdf4 <xQueueGenericCreateStatic+0x84>
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d10a      	bne.n	800ce0e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cdf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdfc:	f383 8811 	msr	BASEPRI, r3
 800ce00:	f3bf 8f6f 	isb	sy
 800ce04:	f3bf 8f4f 	dsb	sy
 800ce08:	61fb      	str	r3, [r7, #28]
}
 800ce0a:	bf00      	nop
 800ce0c:	e7fe      	b.n	800ce0c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ce0e:	2350      	movs	r3, #80	; 0x50
 800ce10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	2b50      	cmp	r3, #80	; 0x50
 800ce16:	d00a      	beq.n	800ce2e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ce18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce1c:	f383 8811 	msr	BASEPRI, r3
 800ce20:	f3bf 8f6f 	isb	sy
 800ce24:	f3bf 8f4f 	dsb	sy
 800ce28:	61bb      	str	r3, [r7, #24]
}
 800ce2a:	bf00      	nop
 800ce2c:	e7fe      	b.n	800ce2c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ce2e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ce34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d00d      	beq.n	800ce56 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ce3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ce42:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ce46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce48:	9300      	str	r3, [sp, #0]
 800ce4a:	4613      	mov	r3, r2
 800ce4c:	687a      	ldr	r2, [r7, #4]
 800ce4e:	68b9      	ldr	r1, [r7, #8]
 800ce50:	68f8      	ldr	r0, [r7, #12]
 800ce52:	f000 f805 	bl	800ce60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ce56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3730      	adds	r7, #48	; 0x30
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}

0800ce60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b084      	sub	sp, #16
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	60f8      	str	r0, [r7, #12]
 800ce68:	60b9      	str	r1, [r7, #8]
 800ce6a:	607a      	str	r2, [r7, #4]
 800ce6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d103      	bne.n	800ce7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ce74:	69bb      	ldr	r3, [r7, #24]
 800ce76:	69ba      	ldr	r2, [r7, #24]
 800ce78:	601a      	str	r2, [r3, #0]
 800ce7a:	e002      	b.n	800ce82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ce7c:	69bb      	ldr	r3, [r7, #24]
 800ce7e:	687a      	ldr	r2, [r7, #4]
 800ce80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ce82:	69bb      	ldr	r3, [r7, #24]
 800ce84:	68fa      	ldr	r2, [r7, #12]
 800ce86:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ce88:	69bb      	ldr	r3, [r7, #24]
 800ce8a:	68ba      	ldr	r2, [r7, #8]
 800ce8c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ce8e:	2101      	movs	r1, #1
 800ce90:	69b8      	ldr	r0, [r7, #24]
 800ce92:	f7ff ff05 	bl	800cca0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ce96:	69bb      	ldr	r3, [r7, #24]
 800ce98:	78fa      	ldrb	r2, [r7, #3]
 800ce9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ce9e:	bf00      	nop
 800cea0:	3710      	adds	r7, #16
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}
	...

0800cea8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b08e      	sub	sp, #56	; 0x38
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	60f8      	str	r0, [r7, #12]
 800ceb0:	60b9      	str	r1, [r7, #8]
 800ceb2:	607a      	str	r2, [r7, #4]
 800ceb4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d10a      	bne.n	800ceda <xQueueGenericSend+0x32>
	__asm volatile
 800cec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec8:	f383 8811 	msr	BASEPRI, r3
 800cecc:	f3bf 8f6f 	isb	sy
 800ced0:	f3bf 8f4f 	dsb	sy
 800ced4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ced6:	bf00      	nop
 800ced8:	e7fe      	b.n	800ced8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d103      	bne.n	800cee8 <xQueueGenericSend+0x40>
 800cee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d101      	bne.n	800ceec <xQueueGenericSend+0x44>
 800cee8:	2301      	movs	r3, #1
 800ceea:	e000      	b.n	800ceee <xQueueGenericSend+0x46>
 800ceec:	2300      	movs	r3, #0
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d10a      	bne.n	800cf08 <xQueueGenericSend+0x60>
	__asm volatile
 800cef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef6:	f383 8811 	msr	BASEPRI, r3
 800cefa:	f3bf 8f6f 	isb	sy
 800cefe:	f3bf 8f4f 	dsb	sy
 800cf02:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cf04:	bf00      	nop
 800cf06:	e7fe      	b.n	800cf06 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	2b02      	cmp	r3, #2
 800cf0c:	d103      	bne.n	800cf16 <xQueueGenericSend+0x6e>
 800cf0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf12:	2b01      	cmp	r3, #1
 800cf14:	d101      	bne.n	800cf1a <xQueueGenericSend+0x72>
 800cf16:	2301      	movs	r3, #1
 800cf18:	e000      	b.n	800cf1c <xQueueGenericSend+0x74>
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d10a      	bne.n	800cf36 <xQueueGenericSend+0x8e>
	__asm volatile
 800cf20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf24:	f383 8811 	msr	BASEPRI, r3
 800cf28:	f3bf 8f6f 	isb	sy
 800cf2c:	f3bf 8f4f 	dsb	sy
 800cf30:	623b      	str	r3, [r7, #32]
}
 800cf32:	bf00      	nop
 800cf34:	e7fe      	b.n	800cf34 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cf36:	f001 fa57 	bl	800e3e8 <xTaskGetSchedulerState>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d102      	bne.n	800cf46 <xQueueGenericSend+0x9e>
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d101      	bne.n	800cf4a <xQueueGenericSend+0xa2>
 800cf46:	2301      	movs	r3, #1
 800cf48:	e000      	b.n	800cf4c <xQueueGenericSend+0xa4>
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d10a      	bne.n	800cf66 <xQueueGenericSend+0xbe>
	__asm volatile
 800cf50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf54:	f383 8811 	msr	BASEPRI, r3
 800cf58:	f3bf 8f6f 	isb	sy
 800cf5c:	f3bf 8f4f 	dsb	sy
 800cf60:	61fb      	str	r3, [r7, #28]
}
 800cf62:	bf00      	nop
 800cf64:	e7fe      	b.n	800cf64 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cf66:	f001 ffd5 	bl	800ef14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cf6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf72:	429a      	cmp	r2, r3
 800cf74:	d302      	bcc.n	800cf7c <xQueueGenericSend+0xd4>
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	2b02      	cmp	r3, #2
 800cf7a:	d129      	bne.n	800cfd0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cf7c:	683a      	ldr	r2, [r7, #0]
 800cf7e:	68b9      	ldr	r1, [r7, #8]
 800cf80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf82:	f000 fa07 	bl	800d394 <prvCopyDataToQueue>
 800cf86:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d010      	beq.n	800cfb2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf92:	3324      	adds	r3, #36	; 0x24
 800cf94:	4618      	mov	r0, r3
 800cf96:	f001 f807 	bl	800dfa8 <xTaskRemoveFromEventList>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d013      	beq.n	800cfc8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cfa0:	4b3f      	ldr	r3, [pc, #252]	; (800d0a0 <xQueueGenericSend+0x1f8>)
 800cfa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfa6:	601a      	str	r2, [r3, #0]
 800cfa8:	f3bf 8f4f 	dsb	sy
 800cfac:	f3bf 8f6f 	isb	sy
 800cfb0:	e00a      	b.n	800cfc8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cfb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d007      	beq.n	800cfc8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cfb8:	4b39      	ldr	r3, [pc, #228]	; (800d0a0 <xQueueGenericSend+0x1f8>)
 800cfba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfbe:	601a      	str	r2, [r3, #0]
 800cfc0:	f3bf 8f4f 	dsb	sy
 800cfc4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cfc8:	f001 ffd4 	bl	800ef74 <vPortExitCritical>
				return pdPASS;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	e063      	b.n	800d098 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d103      	bne.n	800cfde <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cfd6:	f001 ffcd 	bl	800ef74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	e05c      	b.n	800d098 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cfde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d106      	bne.n	800cff2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cfe4:	f107 0314 	add.w	r3, r7, #20
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f001 f8a3 	bl	800e134 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cfee:	2301      	movs	r3, #1
 800cff0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cff2:	f001 ffbf 	bl	800ef74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cff6:	f000 fd77 	bl	800dae8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cffa:	f001 ff8b 	bl	800ef14 <vPortEnterCritical>
 800cffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d000:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d004:	b25b      	sxtb	r3, r3
 800d006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d00a:	d103      	bne.n	800d014 <xQueueGenericSend+0x16c>
 800d00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d00e:	2200      	movs	r2, #0
 800d010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d016:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d01a:	b25b      	sxtb	r3, r3
 800d01c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d020:	d103      	bne.n	800d02a <xQueueGenericSend+0x182>
 800d022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d024:	2200      	movs	r2, #0
 800d026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d02a:	f001 ffa3 	bl	800ef74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d02e:	1d3a      	adds	r2, r7, #4
 800d030:	f107 0314 	add.w	r3, r7, #20
 800d034:	4611      	mov	r1, r2
 800d036:	4618      	mov	r0, r3
 800d038:	f001 f892 	bl	800e160 <xTaskCheckForTimeOut>
 800d03c:	4603      	mov	r3, r0
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d124      	bne.n	800d08c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d042:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d044:	f000 fa9e 	bl	800d584 <prvIsQueueFull>
 800d048:	4603      	mov	r3, r0
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d018      	beq.n	800d080 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d050:	3310      	adds	r3, #16
 800d052:	687a      	ldr	r2, [r7, #4]
 800d054:	4611      	mov	r1, r2
 800d056:	4618      	mov	r0, r3
 800d058:	f000 ff1a 	bl	800de90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d05c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d05e:	f000 fa29 	bl	800d4b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d062:	f000 fd4f 	bl	800db04 <xTaskResumeAll>
 800d066:	4603      	mov	r3, r0
 800d068:	2b00      	cmp	r3, #0
 800d06a:	f47f af7c 	bne.w	800cf66 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d06e:	4b0c      	ldr	r3, [pc, #48]	; (800d0a0 <xQueueGenericSend+0x1f8>)
 800d070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d074:	601a      	str	r2, [r3, #0]
 800d076:	f3bf 8f4f 	dsb	sy
 800d07a:	f3bf 8f6f 	isb	sy
 800d07e:	e772      	b.n	800cf66 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d080:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d082:	f000 fa17 	bl	800d4b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d086:	f000 fd3d 	bl	800db04 <xTaskResumeAll>
 800d08a:	e76c      	b.n	800cf66 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d08c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d08e:	f000 fa11 	bl	800d4b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d092:	f000 fd37 	bl	800db04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d096:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3738      	adds	r7, #56	; 0x38
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}
 800d0a0:	e000ed04 	.word	0xe000ed04

0800d0a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b08e      	sub	sp, #56	; 0x38
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	60f8      	str	r0, [r7, #12]
 800d0ac:	60b9      	str	r1, [r7, #8]
 800d0ae:	607a      	str	r2, [r7, #4]
 800d0b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d10a      	bne.n	800d0d2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c0:	f383 8811 	msr	BASEPRI, r3
 800d0c4:	f3bf 8f6f 	isb	sy
 800d0c8:	f3bf 8f4f 	dsb	sy
 800d0cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d0ce:	bf00      	nop
 800d0d0:	e7fe      	b.n	800d0d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d103      	bne.n	800d0e0 <xQueueGenericSendFromISR+0x3c>
 800d0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d101      	bne.n	800d0e4 <xQueueGenericSendFromISR+0x40>
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	e000      	b.n	800d0e6 <xQueueGenericSendFromISR+0x42>
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d10a      	bne.n	800d100 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ee:	f383 8811 	msr	BASEPRI, r3
 800d0f2:	f3bf 8f6f 	isb	sy
 800d0f6:	f3bf 8f4f 	dsb	sy
 800d0fa:	623b      	str	r3, [r7, #32]
}
 800d0fc:	bf00      	nop
 800d0fe:	e7fe      	b.n	800d0fe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	2b02      	cmp	r3, #2
 800d104:	d103      	bne.n	800d10e <xQueueGenericSendFromISR+0x6a>
 800d106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d10a:	2b01      	cmp	r3, #1
 800d10c:	d101      	bne.n	800d112 <xQueueGenericSendFromISR+0x6e>
 800d10e:	2301      	movs	r3, #1
 800d110:	e000      	b.n	800d114 <xQueueGenericSendFromISR+0x70>
 800d112:	2300      	movs	r3, #0
 800d114:	2b00      	cmp	r3, #0
 800d116:	d10a      	bne.n	800d12e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d11c:	f383 8811 	msr	BASEPRI, r3
 800d120:	f3bf 8f6f 	isb	sy
 800d124:	f3bf 8f4f 	dsb	sy
 800d128:	61fb      	str	r3, [r7, #28]
}
 800d12a:	bf00      	nop
 800d12c:	e7fe      	b.n	800d12c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d12e:	f001 ffd3 	bl	800f0d8 <vPortValidateInterruptPriority>
	__asm volatile
 800d132:	f3ef 8211 	mrs	r2, BASEPRI
 800d136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d13a:	f383 8811 	msr	BASEPRI, r3
 800d13e:	f3bf 8f6f 	isb	sy
 800d142:	f3bf 8f4f 	dsb	sy
 800d146:	61ba      	str	r2, [r7, #24]
 800d148:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d14a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d14c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d156:	429a      	cmp	r2, r3
 800d158:	d302      	bcc.n	800d160 <xQueueGenericSendFromISR+0xbc>
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	2b02      	cmp	r3, #2
 800d15e:	d12c      	bne.n	800d1ba <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d162:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d16a:	683a      	ldr	r2, [r7, #0]
 800d16c:	68b9      	ldr	r1, [r7, #8]
 800d16e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d170:	f000 f910 	bl	800d394 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d174:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d17c:	d112      	bne.n	800d1a4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d182:	2b00      	cmp	r3, #0
 800d184:	d016      	beq.n	800d1b4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d188:	3324      	adds	r3, #36	; 0x24
 800d18a:	4618      	mov	r0, r3
 800d18c:	f000 ff0c 	bl	800dfa8 <xTaskRemoveFromEventList>
 800d190:	4603      	mov	r3, r0
 800d192:	2b00      	cmp	r3, #0
 800d194:	d00e      	beq.n	800d1b4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d00b      	beq.n	800d1b4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2201      	movs	r2, #1
 800d1a0:	601a      	str	r2, [r3, #0]
 800d1a2:	e007      	b.n	800d1b4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d1a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d1a8:	3301      	adds	r3, #1
 800d1aa:	b2db      	uxtb	r3, r3
 800d1ac:	b25a      	sxtb	r2, r3
 800d1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d1b8:	e001      	b.n	800d1be <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	637b      	str	r3, [r7, #52]	; 0x34
 800d1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	f383 8811 	msr	BASEPRI, r3
}
 800d1c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d1ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	3738      	adds	r7, #56	; 0x38
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}

0800d1d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b08c      	sub	sp, #48	; 0x30
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	60f8      	str	r0, [r7, #12]
 800d1dc:	60b9      	str	r1, [r7, #8]
 800d1de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d10a      	bne.n	800d204 <xQueueReceive+0x30>
	__asm volatile
 800d1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f2:	f383 8811 	msr	BASEPRI, r3
 800d1f6:	f3bf 8f6f 	isb	sy
 800d1fa:	f3bf 8f4f 	dsb	sy
 800d1fe:	623b      	str	r3, [r7, #32]
}
 800d200:	bf00      	nop
 800d202:	e7fe      	b.n	800d202 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d103      	bne.n	800d212 <xQueueReceive+0x3e>
 800d20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d101      	bne.n	800d216 <xQueueReceive+0x42>
 800d212:	2301      	movs	r3, #1
 800d214:	e000      	b.n	800d218 <xQueueReceive+0x44>
 800d216:	2300      	movs	r3, #0
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d10a      	bne.n	800d232 <xQueueReceive+0x5e>
	__asm volatile
 800d21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d220:	f383 8811 	msr	BASEPRI, r3
 800d224:	f3bf 8f6f 	isb	sy
 800d228:	f3bf 8f4f 	dsb	sy
 800d22c:	61fb      	str	r3, [r7, #28]
}
 800d22e:	bf00      	nop
 800d230:	e7fe      	b.n	800d230 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d232:	f001 f8d9 	bl	800e3e8 <xTaskGetSchedulerState>
 800d236:	4603      	mov	r3, r0
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d102      	bne.n	800d242 <xQueueReceive+0x6e>
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d101      	bne.n	800d246 <xQueueReceive+0x72>
 800d242:	2301      	movs	r3, #1
 800d244:	e000      	b.n	800d248 <xQueueReceive+0x74>
 800d246:	2300      	movs	r3, #0
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d10a      	bne.n	800d262 <xQueueReceive+0x8e>
	__asm volatile
 800d24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d250:	f383 8811 	msr	BASEPRI, r3
 800d254:	f3bf 8f6f 	isb	sy
 800d258:	f3bf 8f4f 	dsb	sy
 800d25c:	61bb      	str	r3, [r7, #24]
}
 800d25e:	bf00      	nop
 800d260:	e7fe      	b.n	800d260 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d262:	f001 fe57 	bl	800ef14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d26a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d01f      	beq.n	800d2b2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d272:	68b9      	ldr	r1, [r7, #8]
 800d274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d276:	f000 f8f7 	bl	800d468 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d27c:	1e5a      	subs	r2, r3, #1
 800d27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d280:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d284:	691b      	ldr	r3, [r3, #16]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d00f      	beq.n	800d2aa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28c:	3310      	adds	r3, #16
 800d28e:	4618      	mov	r0, r3
 800d290:	f000 fe8a 	bl	800dfa8 <xTaskRemoveFromEventList>
 800d294:	4603      	mov	r3, r0
 800d296:	2b00      	cmp	r3, #0
 800d298:	d007      	beq.n	800d2aa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d29a:	4b3d      	ldr	r3, [pc, #244]	; (800d390 <xQueueReceive+0x1bc>)
 800d29c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2a0:	601a      	str	r2, [r3, #0]
 800d2a2:	f3bf 8f4f 	dsb	sy
 800d2a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d2aa:	f001 fe63 	bl	800ef74 <vPortExitCritical>
				return pdPASS;
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	e069      	b.n	800d386 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d103      	bne.n	800d2c0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d2b8:	f001 fe5c 	bl	800ef74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	e062      	b.n	800d386 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d106      	bne.n	800d2d4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d2c6:	f107 0310 	add.w	r3, r7, #16
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f000 ff32 	bl	800e134 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d2d4:	f001 fe4e 	bl	800ef74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d2d8:	f000 fc06 	bl	800dae8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d2dc:	f001 fe1a 	bl	800ef14 <vPortEnterCritical>
 800d2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d2e6:	b25b      	sxtb	r3, r3
 800d2e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2ec:	d103      	bne.n	800d2f6 <xQueueReceive+0x122>
 800d2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2fc:	b25b      	sxtb	r3, r3
 800d2fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d302:	d103      	bne.n	800d30c <xQueueReceive+0x138>
 800d304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d306:	2200      	movs	r2, #0
 800d308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d30c:	f001 fe32 	bl	800ef74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d310:	1d3a      	adds	r2, r7, #4
 800d312:	f107 0310 	add.w	r3, r7, #16
 800d316:	4611      	mov	r1, r2
 800d318:	4618      	mov	r0, r3
 800d31a:	f000 ff21 	bl	800e160 <xTaskCheckForTimeOut>
 800d31e:	4603      	mov	r3, r0
 800d320:	2b00      	cmp	r3, #0
 800d322:	d123      	bne.n	800d36c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d326:	f000 f917 	bl	800d558 <prvIsQueueEmpty>
 800d32a:	4603      	mov	r3, r0
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d017      	beq.n	800d360 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d332:	3324      	adds	r3, #36	; 0x24
 800d334:	687a      	ldr	r2, [r7, #4]
 800d336:	4611      	mov	r1, r2
 800d338:	4618      	mov	r0, r3
 800d33a:	f000 fda9 	bl	800de90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d33e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d340:	f000 f8b8 	bl	800d4b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d344:	f000 fbde 	bl	800db04 <xTaskResumeAll>
 800d348:	4603      	mov	r3, r0
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d189      	bne.n	800d262 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d34e:	4b10      	ldr	r3, [pc, #64]	; (800d390 <xQueueReceive+0x1bc>)
 800d350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d354:	601a      	str	r2, [r3, #0]
 800d356:	f3bf 8f4f 	dsb	sy
 800d35a:	f3bf 8f6f 	isb	sy
 800d35e:	e780      	b.n	800d262 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d362:	f000 f8a7 	bl	800d4b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d366:	f000 fbcd 	bl	800db04 <xTaskResumeAll>
 800d36a:	e77a      	b.n	800d262 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d36c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d36e:	f000 f8a1 	bl	800d4b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d372:	f000 fbc7 	bl	800db04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d376:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d378:	f000 f8ee 	bl	800d558 <prvIsQueueEmpty>
 800d37c:	4603      	mov	r3, r0
 800d37e:	2b00      	cmp	r3, #0
 800d380:	f43f af6f 	beq.w	800d262 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d384:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d386:	4618      	mov	r0, r3
 800d388:	3730      	adds	r7, #48	; 0x30
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}
 800d38e:	bf00      	nop
 800d390:	e000ed04 	.word	0xe000ed04

0800d394 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b086      	sub	sp, #24
 800d398:	af00      	add	r7, sp, #0
 800d39a:	60f8      	str	r0, [r7, #12]
 800d39c:	60b9      	str	r1, [r7, #8]
 800d39e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d10d      	bne.n	800d3ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d14d      	bne.n	800d456 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	689b      	ldr	r3, [r3, #8]
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f001 f830 	bl	800e424 <xTaskPriorityDisinherit>
 800d3c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	609a      	str	r2, [r3, #8]
 800d3cc:	e043      	b.n	800d456 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d119      	bne.n	800d408 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	6858      	ldr	r0, [r3, #4]
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3dc:	461a      	mov	r2, r3
 800d3de:	68b9      	ldr	r1, [r7, #8]
 800d3e0:	f009 ffa8 	bl	8017334 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	685a      	ldr	r2, [r3, #4]
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ec:	441a      	add	r2, r3
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	685a      	ldr	r2, [r3, #4]
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	689b      	ldr	r3, [r3, #8]
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	d32b      	bcc.n	800d456 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	681a      	ldr	r2, [r3, #0]
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	605a      	str	r2, [r3, #4]
 800d406:	e026      	b.n	800d456 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	68d8      	ldr	r0, [r3, #12]
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d410:	461a      	mov	r2, r3
 800d412:	68b9      	ldr	r1, [r7, #8]
 800d414:	f009 ff8e 	bl	8017334 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	68da      	ldr	r2, [r3, #12]
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d420:	425b      	negs	r3, r3
 800d422:	441a      	add	r2, r3
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	68da      	ldr	r2, [r3, #12]
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	429a      	cmp	r2, r3
 800d432:	d207      	bcs.n	800d444 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	689a      	ldr	r2, [r3, #8]
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d43c:	425b      	negs	r3, r3
 800d43e:	441a      	add	r2, r3
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2b02      	cmp	r3, #2
 800d448:	d105      	bne.n	800d456 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d44a:	693b      	ldr	r3, [r7, #16]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d002      	beq.n	800d456 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	3b01      	subs	r3, #1
 800d454:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	1c5a      	adds	r2, r3, #1
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d45e:	697b      	ldr	r3, [r7, #20]
}
 800d460:	4618      	mov	r0, r3
 800d462:	3718      	adds	r7, #24
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}

0800d468 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d476:	2b00      	cmp	r3, #0
 800d478:	d018      	beq.n	800d4ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	68da      	ldr	r2, [r3, #12]
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d482:	441a      	add	r2, r3
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	68da      	ldr	r2, [r3, #12]
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	689b      	ldr	r3, [r3, #8]
 800d490:	429a      	cmp	r2, r3
 800d492:	d303      	bcc.n	800d49c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681a      	ldr	r2, [r3, #0]
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	68d9      	ldr	r1, [r3, #12]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4a4:	461a      	mov	r2, r3
 800d4a6:	6838      	ldr	r0, [r7, #0]
 800d4a8:	f009 ff44 	bl	8017334 <memcpy>
	}
}
 800d4ac:	bf00      	nop
 800d4ae:	3708      	adds	r7, #8
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}

0800d4b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b084      	sub	sp, #16
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d4bc:	f001 fd2a 	bl	800ef14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d4c8:	e011      	b.n	800d4ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d012      	beq.n	800d4f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	3324      	adds	r3, #36	; 0x24
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f000 fd66 	bl	800dfa8 <xTaskRemoveFromEventList>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d001      	beq.n	800d4e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d4e2:	f000 fe9f 	bl	800e224 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d4e6:	7bfb      	ldrb	r3, [r7, #15]
 800d4e8:	3b01      	subs	r3, #1
 800d4ea:	b2db      	uxtb	r3, r3
 800d4ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d4ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	dce9      	bgt.n	800d4ca <prvUnlockQueue+0x16>
 800d4f6:	e000      	b.n	800d4fa <prvUnlockQueue+0x46>
					break;
 800d4f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	22ff      	movs	r2, #255	; 0xff
 800d4fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d502:	f001 fd37 	bl	800ef74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d506:	f001 fd05 	bl	800ef14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d510:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d512:	e011      	b.n	800d538 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	691b      	ldr	r3, [r3, #16]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d012      	beq.n	800d542 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	3310      	adds	r3, #16
 800d520:	4618      	mov	r0, r3
 800d522:	f000 fd41 	bl	800dfa8 <xTaskRemoveFromEventList>
 800d526:	4603      	mov	r3, r0
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d001      	beq.n	800d530 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d52c:	f000 fe7a 	bl	800e224 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d530:	7bbb      	ldrb	r3, [r7, #14]
 800d532:	3b01      	subs	r3, #1
 800d534:	b2db      	uxtb	r3, r3
 800d536:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d538:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	dce9      	bgt.n	800d514 <prvUnlockQueue+0x60>
 800d540:	e000      	b.n	800d544 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d542:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	22ff      	movs	r2, #255	; 0xff
 800d548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d54c:	f001 fd12 	bl	800ef74 <vPortExitCritical>
}
 800d550:	bf00      	nop
 800d552:	3710      	adds	r7, #16
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}

0800d558 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b084      	sub	sp, #16
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d560:	f001 fcd8 	bl	800ef14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d102      	bne.n	800d572 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d56c:	2301      	movs	r3, #1
 800d56e:	60fb      	str	r3, [r7, #12]
 800d570:	e001      	b.n	800d576 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d572:	2300      	movs	r3, #0
 800d574:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d576:	f001 fcfd 	bl	800ef74 <vPortExitCritical>

	return xReturn;
 800d57a:	68fb      	ldr	r3, [r7, #12]
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3710      	adds	r7, #16
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b084      	sub	sp, #16
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d58c:	f001 fcc2 	bl	800ef14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d598:	429a      	cmp	r2, r3
 800d59a:	d102      	bne.n	800d5a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d59c:	2301      	movs	r3, #1
 800d59e:	60fb      	str	r3, [r7, #12]
 800d5a0:	e001      	b.n	800d5a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d5a6:	f001 fce5 	bl	800ef74 <vPortExitCritical>

	return xReturn;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3710      	adds	r7, #16
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}

0800d5b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b085      	sub	sp, #20
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d5be:	2300      	movs	r3, #0
 800d5c0:	60fb      	str	r3, [r7, #12]
 800d5c2:	e014      	b.n	800d5ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d5c4:	4a0f      	ldr	r2, [pc, #60]	; (800d604 <vQueueAddToRegistry+0x50>)
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d10b      	bne.n	800d5e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d5d0:	490c      	ldr	r1, [pc, #48]	; (800d604 <vQueueAddToRegistry+0x50>)
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	683a      	ldr	r2, [r7, #0]
 800d5d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d5da:	4a0a      	ldr	r2, [pc, #40]	; (800d604 <vQueueAddToRegistry+0x50>)
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	00db      	lsls	r3, r3, #3
 800d5e0:	4413      	add	r3, r2
 800d5e2:	687a      	ldr	r2, [r7, #4]
 800d5e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d5e6:	e006      	b.n	800d5f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	3301      	adds	r3, #1
 800d5ec:	60fb      	str	r3, [r7, #12]
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	2b07      	cmp	r3, #7
 800d5f2:	d9e7      	bls.n	800d5c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d5f4:	bf00      	nop
 800d5f6:	bf00      	nop
 800d5f8:	3714      	adds	r7, #20
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d600:	4770      	bx	lr
 800d602:	bf00      	nop
 800d604:	2000beb8 	.word	0x2000beb8

0800d608 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b086      	sub	sp, #24
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	60f8      	str	r0, [r7, #12]
 800d610:	60b9      	str	r1, [r7, #8]
 800d612:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d618:	f001 fc7c 	bl	800ef14 <vPortEnterCritical>
 800d61c:	697b      	ldr	r3, [r7, #20]
 800d61e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d622:	b25b      	sxtb	r3, r3
 800d624:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d628:	d103      	bne.n	800d632 <vQueueWaitForMessageRestricted+0x2a>
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	2200      	movs	r2, #0
 800d62e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d638:	b25b      	sxtb	r3, r3
 800d63a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d63e:	d103      	bne.n	800d648 <vQueueWaitForMessageRestricted+0x40>
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	2200      	movs	r2, #0
 800d644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d648:	f001 fc94 	bl	800ef74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d650:	2b00      	cmp	r3, #0
 800d652:	d106      	bne.n	800d662 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	3324      	adds	r3, #36	; 0x24
 800d658:	687a      	ldr	r2, [r7, #4]
 800d65a:	68b9      	ldr	r1, [r7, #8]
 800d65c:	4618      	mov	r0, r3
 800d65e:	f000 fc77 	bl	800df50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d662:	6978      	ldr	r0, [r7, #20]
 800d664:	f7ff ff26 	bl	800d4b4 <prvUnlockQueue>
	}
 800d668:	bf00      	nop
 800d66a:	3718      	adds	r7, #24
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d670:	b580      	push	{r7, lr}
 800d672:	b08e      	sub	sp, #56	; 0x38
 800d674:	af04      	add	r7, sp, #16
 800d676:	60f8      	str	r0, [r7, #12]
 800d678:	60b9      	str	r1, [r7, #8]
 800d67a:	607a      	str	r2, [r7, #4]
 800d67c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d67e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d680:	2b00      	cmp	r3, #0
 800d682:	d10a      	bne.n	800d69a <xTaskCreateStatic+0x2a>
	__asm volatile
 800d684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d688:	f383 8811 	msr	BASEPRI, r3
 800d68c:	f3bf 8f6f 	isb	sy
 800d690:	f3bf 8f4f 	dsb	sy
 800d694:	623b      	str	r3, [r7, #32]
}
 800d696:	bf00      	nop
 800d698:	e7fe      	b.n	800d698 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d10a      	bne.n	800d6b6 <xTaskCreateStatic+0x46>
	__asm volatile
 800d6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a4:	f383 8811 	msr	BASEPRI, r3
 800d6a8:	f3bf 8f6f 	isb	sy
 800d6ac:	f3bf 8f4f 	dsb	sy
 800d6b0:	61fb      	str	r3, [r7, #28]
}
 800d6b2:	bf00      	nop
 800d6b4:	e7fe      	b.n	800d6b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d6b6:	235c      	movs	r3, #92	; 0x5c
 800d6b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d6ba:	693b      	ldr	r3, [r7, #16]
 800d6bc:	2b5c      	cmp	r3, #92	; 0x5c
 800d6be:	d00a      	beq.n	800d6d6 <xTaskCreateStatic+0x66>
	__asm volatile
 800d6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c4:	f383 8811 	msr	BASEPRI, r3
 800d6c8:	f3bf 8f6f 	isb	sy
 800d6cc:	f3bf 8f4f 	dsb	sy
 800d6d0:	61bb      	str	r3, [r7, #24]
}
 800d6d2:	bf00      	nop
 800d6d4:	e7fe      	b.n	800d6d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d6d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d01e      	beq.n	800d71c <xTaskCreateStatic+0xac>
 800d6de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d01b      	beq.n	800d71c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d6ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f0:	2202      	movs	r2, #2
 800d6f2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	9303      	str	r3, [sp, #12]
 800d6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6fc:	9302      	str	r3, [sp, #8]
 800d6fe:	f107 0314 	add.w	r3, r7, #20
 800d702:	9301      	str	r3, [sp, #4]
 800d704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d706:	9300      	str	r3, [sp, #0]
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	687a      	ldr	r2, [r7, #4]
 800d70c:	68b9      	ldr	r1, [r7, #8]
 800d70e:	68f8      	ldr	r0, [r7, #12]
 800d710:	f000 f850 	bl	800d7b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d714:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d716:	f000 f8dd 	bl	800d8d4 <prvAddNewTaskToReadyList>
 800d71a:	e001      	b.n	800d720 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d71c:	2300      	movs	r3, #0
 800d71e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d720:	697b      	ldr	r3, [r7, #20]
	}
 800d722:	4618      	mov	r0, r3
 800d724:	3728      	adds	r7, #40	; 0x28
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}

0800d72a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d72a:	b580      	push	{r7, lr}
 800d72c:	b08c      	sub	sp, #48	; 0x30
 800d72e:	af04      	add	r7, sp, #16
 800d730:	60f8      	str	r0, [r7, #12]
 800d732:	60b9      	str	r1, [r7, #8]
 800d734:	603b      	str	r3, [r7, #0]
 800d736:	4613      	mov	r3, r2
 800d738:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d73a:	88fb      	ldrh	r3, [r7, #6]
 800d73c:	009b      	lsls	r3, r3, #2
 800d73e:	4618      	mov	r0, r3
 800d740:	f001 fd0a 	bl	800f158 <pvPortMalloc>
 800d744:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d746:	697b      	ldr	r3, [r7, #20]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d00e      	beq.n	800d76a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d74c:	205c      	movs	r0, #92	; 0x5c
 800d74e:	f001 fd03 	bl	800f158 <pvPortMalloc>
 800d752:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d754:	69fb      	ldr	r3, [r7, #28]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d003      	beq.n	800d762 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d75a:	69fb      	ldr	r3, [r7, #28]
 800d75c:	697a      	ldr	r2, [r7, #20]
 800d75e:	631a      	str	r2, [r3, #48]	; 0x30
 800d760:	e005      	b.n	800d76e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d762:	6978      	ldr	r0, [r7, #20]
 800d764:	f001 fdbc 	bl	800f2e0 <vPortFree>
 800d768:	e001      	b.n	800d76e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d76a:	2300      	movs	r3, #0
 800d76c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d76e:	69fb      	ldr	r3, [r7, #28]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d017      	beq.n	800d7a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d774:	69fb      	ldr	r3, [r7, #28]
 800d776:	2200      	movs	r2, #0
 800d778:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d77c:	88fa      	ldrh	r2, [r7, #6]
 800d77e:	2300      	movs	r3, #0
 800d780:	9303      	str	r3, [sp, #12]
 800d782:	69fb      	ldr	r3, [r7, #28]
 800d784:	9302      	str	r3, [sp, #8]
 800d786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d788:	9301      	str	r3, [sp, #4]
 800d78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d78c:	9300      	str	r3, [sp, #0]
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	68b9      	ldr	r1, [r7, #8]
 800d792:	68f8      	ldr	r0, [r7, #12]
 800d794:	f000 f80e 	bl	800d7b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d798:	69f8      	ldr	r0, [r7, #28]
 800d79a:	f000 f89b 	bl	800d8d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d79e:	2301      	movs	r3, #1
 800d7a0:	61bb      	str	r3, [r7, #24]
 800d7a2:	e002      	b.n	800d7aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d7a4:	f04f 33ff 	mov.w	r3, #4294967295
 800d7a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d7aa:	69bb      	ldr	r3, [r7, #24]
	}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3720      	adds	r7, #32
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b088      	sub	sp, #32
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	60f8      	str	r0, [r7, #12]
 800d7bc:	60b9      	str	r1, [r7, #8]
 800d7be:	607a      	str	r2, [r7, #4]
 800d7c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	009b      	lsls	r3, r3, #2
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	21a5      	movs	r1, #165	; 0xa5
 800d7ce:	f009 fdbf 	bl	8017350 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d7dc:	3b01      	subs	r3, #1
 800d7de:	009b      	lsls	r3, r3, #2
 800d7e0:	4413      	add	r3, r2
 800d7e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d7e4:	69bb      	ldr	r3, [r7, #24]
 800d7e6:	f023 0307 	bic.w	r3, r3, #7
 800d7ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d7ec:	69bb      	ldr	r3, [r7, #24]
 800d7ee:	f003 0307 	and.w	r3, r3, #7
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d00a      	beq.n	800d80c <prvInitialiseNewTask+0x58>
	__asm volatile
 800d7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7fa:	f383 8811 	msr	BASEPRI, r3
 800d7fe:	f3bf 8f6f 	isb	sy
 800d802:	f3bf 8f4f 	dsb	sy
 800d806:	617b      	str	r3, [r7, #20]
}
 800d808:	bf00      	nop
 800d80a:	e7fe      	b.n	800d80a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d01f      	beq.n	800d852 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d812:	2300      	movs	r3, #0
 800d814:	61fb      	str	r3, [r7, #28]
 800d816:	e012      	b.n	800d83e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d818:	68ba      	ldr	r2, [r7, #8]
 800d81a:	69fb      	ldr	r3, [r7, #28]
 800d81c:	4413      	add	r3, r2
 800d81e:	7819      	ldrb	r1, [r3, #0]
 800d820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d822:	69fb      	ldr	r3, [r7, #28]
 800d824:	4413      	add	r3, r2
 800d826:	3334      	adds	r3, #52	; 0x34
 800d828:	460a      	mov	r2, r1
 800d82a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d82c:	68ba      	ldr	r2, [r7, #8]
 800d82e:	69fb      	ldr	r3, [r7, #28]
 800d830:	4413      	add	r3, r2
 800d832:	781b      	ldrb	r3, [r3, #0]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d006      	beq.n	800d846 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d838:	69fb      	ldr	r3, [r7, #28]
 800d83a:	3301      	adds	r3, #1
 800d83c:	61fb      	str	r3, [r7, #28]
 800d83e:	69fb      	ldr	r3, [r7, #28]
 800d840:	2b0f      	cmp	r3, #15
 800d842:	d9e9      	bls.n	800d818 <prvInitialiseNewTask+0x64>
 800d844:	e000      	b.n	800d848 <prvInitialiseNewTask+0x94>
			{
				break;
 800d846:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d84a:	2200      	movs	r2, #0
 800d84c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d850:	e003      	b.n	800d85a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d854:	2200      	movs	r2, #0
 800d856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d85c:	2b37      	cmp	r3, #55	; 0x37
 800d85e:	d901      	bls.n	800d864 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d860:	2337      	movs	r3, #55	; 0x37
 800d862:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d868:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d86c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d86e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d872:	2200      	movs	r2, #0
 800d874:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d878:	3304      	adds	r3, #4
 800d87a:	4618      	mov	r0, r3
 800d87c:	f7ff f97c 	bl	800cb78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d882:	3318      	adds	r3, #24
 800d884:	4618      	mov	r0, r3
 800d886:	f7ff f977 	bl	800cb78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d88c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d88e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d892:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d898:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d89c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d89e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d8ae:	683a      	ldr	r2, [r7, #0]
 800d8b0:	68f9      	ldr	r1, [r7, #12]
 800d8b2:	69b8      	ldr	r0, [r7, #24]
 800d8b4:	f001 f9fe 	bl	800ecb4 <pxPortInitialiseStack>
 800d8b8:	4602      	mov	r2, r0
 800d8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d002      	beq.n	800d8ca <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8ca:	bf00      	nop
 800d8cc:	3720      	adds	r7, #32
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}
	...

0800d8d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b082      	sub	sp, #8
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d8dc:	f001 fb1a 	bl	800ef14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d8e0:	4b2d      	ldr	r3, [pc, #180]	; (800d998 <prvAddNewTaskToReadyList+0xc4>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	4a2c      	ldr	r2, [pc, #176]	; (800d998 <prvAddNewTaskToReadyList+0xc4>)
 800d8e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d8ea:	4b2c      	ldr	r3, [pc, #176]	; (800d99c <prvAddNewTaskToReadyList+0xc8>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d109      	bne.n	800d906 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d8f2:	4a2a      	ldr	r2, [pc, #168]	; (800d99c <prvAddNewTaskToReadyList+0xc8>)
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d8f8:	4b27      	ldr	r3, [pc, #156]	; (800d998 <prvAddNewTaskToReadyList+0xc4>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d110      	bne.n	800d922 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d900:	f000 fcb4 	bl	800e26c <prvInitialiseTaskLists>
 800d904:	e00d      	b.n	800d922 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d906:	4b26      	ldr	r3, [pc, #152]	; (800d9a0 <prvAddNewTaskToReadyList+0xcc>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d109      	bne.n	800d922 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d90e:	4b23      	ldr	r3, [pc, #140]	; (800d99c <prvAddNewTaskToReadyList+0xc8>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d918:	429a      	cmp	r2, r3
 800d91a:	d802      	bhi.n	800d922 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d91c:	4a1f      	ldr	r2, [pc, #124]	; (800d99c <prvAddNewTaskToReadyList+0xc8>)
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d922:	4b20      	ldr	r3, [pc, #128]	; (800d9a4 <prvAddNewTaskToReadyList+0xd0>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	3301      	adds	r3, #1
 800d928:	4a1e      	ldr	r2, [pc, #120]	; (800d9a4 <prvAddNewTaskToReadyList+0xd0>)
 800d92a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d92c:	4b1d      	ldr	r3, [pc, #116]	; (800d9a4 <prvAddNewTaskToReadyList+0xd0>)
 800d92e:	681a      	ldr	r2, [r3, #0]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d938:	4b1b      	ldr	r3, [pc, #108]	; (800d9a8 <prvAddNewTaskToReadyList+0xd4>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d903      	bls.n	800d948 <prvAddNewTaskToReadyList+0x74>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d944:	4a18      	ldr	r2, [pc, #96]	; (800d9a8 <prvAddNewTaskToReadyList+0xd4>)
 800d946:	6013      	str	r3, [r2, #0]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d94c:	4613      	mov	r3, r2
 800d94e:	009b      	lsls	r3, r3, #2
 800d950:	4413      	add	r3, r2
 800d952:	009b      	lsls	r3, r3, #2
 800d954:	4a15      	ldr	r2, [pc, #84]	; (800d9ac <prvAddNewTaskToReadyList+0xd8>)
 800d956:	441a      	add	r2, r3
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	3304      	adds	r3, #4
 800d95c:	4619      	mov	r1, r3
 800d95e:	4610      	mov	r0, r2
 800d960:	f7ff f917 	bl	800cb92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d964:	f001 fb06 	bl	800ef74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d968:	4b0d      	ldr	r3, [pc, #52]	; (800d9a0 <prvAddNewTaskToReadyList+0xcc>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d00e      	beq.n	800d98e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d970:	4b0a      	ldr	r3, [pc, #40]	; (800d99c <prvAddNewTaskToReadyList+0xc8>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d97a:	429a      	cmp	r2, r3
 800d97c:	d207      	bcs.n	800d98e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d97e:	4b0c      	ldr	r3, [pc, #48]	; (800d9b0 <prvAddNewTaskToReadyList+0xdc>)
 800d980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d984:	601a      	str	r2, [r3, #0]
 800d986:	f3bf 8f4f 	dsb	sy
 800d98a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d98e:	bf00      	nop
 800d990:	3708      	adds	r7, #8
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
 800d996:	bf00      	nop
 800d998:	20005538 	.word	0x20005538
 800d99c:	20005064 	.word	0x20005064
 800d9a0:	20005544 	.word	0x20005544
 800d9a4:	20005554 	.word	0x20005554
 800d9a8:	20005540 	.word	0x20005540
 800d9ac:	20005068 	.word	0x20005068
 800d9b0:	e000ed04 	.word	0xe000ed04

0800d9b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b084      	sub	sp, #16
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d017      	beq.n	800d9f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d9c6:	4b13      	ldr	r3, [pc, #76]	; (800da14 <vTaskDelay+0x60>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d00a      	beq.n	800d9e4 <vTaskDelay+0x30>
	__asm volatile
 800d9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d2:	f383 8811 	msr	BASEPRI, r3
 800d9d6:	f3bf 8f6f 	isb	sy
 800d9da:	f3bf 8f4f 	dsb	sy
 800d9de:	60bb      	str	r3, [r7, #8]
}
 800d9e0:	bf00      	nop
 800d9e2:	e7fe      	b.n	800d9e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d9e4:	f000 f880 	bl	800dae8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d9e8:	2100      	movs	r1, #0
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f000 fda0 	bl	800e530 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d9f0:	f000 f888 	bl	800db04 <xTaskResumeAll>
 800d9f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d107      	bne.n	800da0c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d9fc:	4b06      	ldr	r3, [pc, #24]	; (800da18 <vTaskDelay+0x64>)
 800d9fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da02:	601a      	str	r2, [r3, #0]
 800da04:	f3bf 8f4f 	dsb	sy
 800da08:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800da0c:	bf00      	nop
 800da0e:	3710      	adds	r7, #16
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}
 800da14:	20005560 	.word	0x20005560
 800da18:	e000ed04 	.word	0xe000ed04

0800da1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b08a      	sub	sp, #40	; 0x28
 800da20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800da22:	2300      	movs	r3, #0
 800da24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800da26:	2300      	movs	r3, #0
 800da28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800da2a:	463a      	mov	r2, r7
 800da2c:	1d39      	adds	r1, r7, #4
 800da2e:	f107 0308 	add.w	r3, r7, #8
 800da32:	4618      	mov	r0, r3
 800da34:	f7fe fde0 	bl	800c5f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800da38:	6839      	ldr	r1, [r7, #0]
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	68ba      	ldr	r2, [r7, #8]
 800da3e:	9202      	str	r2, [sp, #8]
 800da40:	9301      	str	r3, [sp, #4]
 800da42:	2300      	movs	r3, #0
 800da44:	9300      	str	r3, [sp, #0]
 800da46:	2300      	movs	r3, #0
 800da48:	460a      	mov	r2, r1
 800da4a:	4921      	ldr	r1, [pc, #132]	; (800dad0 <vTaskStartScheduler+0xb4>)
 800da4c:	4821      	ldr	r0, [pc, #132]	; (800dad4 <vTaskStartScheduler+0xb8>)
 800da4e:	f7ff fe0f 	bl	800d670 <xTaskCreateStatic>
 800da52:	4603      	mov	r3, r0
 800da54:	4a20      	ldr	r2, [pc, #128]	; (800dad8 <vTaskStartScheduler+0xbc>)
 800da56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800da58:	4b1f      	ldr	r3, [pc, #124]	; (800dad8 <vTaskStartScheduler+0xbc>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d002      	beq.n	800da66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800da60:	2301      	movs	r3, #1
 800da62:	617b      	str	r3, [r7, #20]
 800da64:	e001      	b.n	800da6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800da66:	2300      	movs	r3, #0
 800da68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d102      	bne.n	800da76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800da70:	f000 fdb2 	bl	800e5d8 <xTimerCreateTimerTask>
 800da74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	2b01      	cmp	r3, #1
 800da7a:	d116      	bne.n	800daaa <vTaskStartScheduler+0x8e>
	__asm volatile
 800da7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da80:	f383 8811 	msr	BASEPRI, r3
 800da84:	f3bf 8f6f 	isb	sy
 800da88:	f3bf 8f4f 	dsb	sy
 800da8c:	613b      	str	r3, [r7, #16]
}
 800da8e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800da90:	4b12      	ldr	r3, [pc, #72]	; (800dadc <vTaskStartScheduler+0xc0>)
 800da92:	f04f 32ff 	mov.w	r2, #4294967295
 800da96:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800da98:	4b11      	ldr	r3, [pc, #68]	; (800dae0 <vTaskStartScheduler+0xc4>)
 800da9a:	2201      	movs	r2, #1
 800da9c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800da9e:	4b11      	ldr	r3, [pc, #68]	; (800dae4 <vTaskStartScheduler+0xc8>)
 800daa0:	2200      	movs	r2, #0
 800daa2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800daa4:	f001 f994 	bl	800edd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800daa8:	e00e      	b.n	800dac8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dab0:	d10a      	bne.n	800dac8 <vTaskStartScheduler+0xac>
	__asm volatile
 800dab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab6:	f383 8811 	msr	BASEPRI, r3
 800daba:	f3bf 8f6f 	isb	sy
 800dabe:	f3bf 8f4f 	dsb	sy
 800dac2:	60fb      	str	r3, [r7, #12]
}
 800dac4:	bf00      	nop
 800dac6:	e7fe      	b.n	800dac6 <vTaskStartScheduler+0xaa>
}
 800dac8:	bf00      	nop
 800daca:	3718      	adds	r7, #24
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}
 800dad0:	0801cc84 	.word	0x0801cc84
 800dad4:	0800e23d 	.word	0x0800e23d
 800dad8:	2000555c 	.word	0x2000555c
 800dadc:	20005558 	.word	0x20005558
 800dae0:	20005544 	.word	0x20005544
 800dae4:	2000553c 	.word	0x2000553c

0800dae8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dae8:	b480      	push	{r7}
 800daea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800daec:	4b04      	ldr	r3, [pc, #16]	; (800db00 <vTaskSuspendAll+0x18>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	3301      	adds	r3, #1
 800daf2:	4a03      	ldr	r2, [pc, #12]	; (800db00 <vTaskSuspendAll+0x18>)
 800daf4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800daf6:	bf00      	nop
 800daf8:	46bd      	mov	sp, r7
 800dafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafe:	4770      	bx	lr
 800db00:	20005560 	.word	0x20005560

0800db04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b084      	sub	sp, #16
 800db08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800db0a:	2300      	movs	r3, #0
 800db0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800db0e:	2300      	movs	r3, #0
 800db10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800db12:	4b42      	ldr	r3, [pc, #264]	; (800dc1c <xTaskResumeAll+0x118>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d10a      	bne.n	800db30 <xTaskResumeAll+0x2c>
	__asm volatile
 800db1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db1e:	f383 8811 	msr	BASEPRI, r3
 800db22:	f3bf 8f6f 	isb	sy
 800db26:	f3bf 8f4f 	dsb	sy
 800db2a:	603b      	str	r3, [r7, #0]
}
 800db2c:	bf00      	nop
 800db2e:	e7fe      	b.n	800db2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800db30:	f001 f9f0 	bl	800ef14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800db34:	4b39      	ldr	r3, [pc, #228]	; (800dc1c <xTaskResumeAll+0x118>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	3b01      	subs	r3, #1
 800db3a:	4a38      	ldr	r2, [pc, #224]	; (800dc1c <xTaskResumeAll+0x118>)
 800db3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db3e:	4b37      	ldr	r3, [pc, #220]	; (800dc1c <xTaskResumeAll+0x118>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d162      	bne.n	800dc0c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800db46:	4b36      	ldr	r3, [pc, #216]	; (800dc20 <xTaskResumeAll+0x11c>)
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d05e      	beq.n	800dc0c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800db4e:	e02f      	b.n	800dbb0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db50:	4b34      	ldr	r3, [pc, #208]	; (800dc24 <xTaskResumeAll+0x120>)
 800db52:	68db      	ldr	r3, [r3, #12]
 800db54:	68db      	ldr	r3, [r3, #12]
 800db56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	3318      	adds	r3, #24
 800db5c:	4618      	mov	r0, r3
 800db5e:	f7ff f875 	bl	800cc4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	3304      	adds	r3, #4
 800db66:	4618      	mov	r0, r3
 800db68:	f7ff f870 	bl	800cc4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db70:	4b2d      	ldr	r3, [pc, #180]	; (800dc28 <xTaskResumeAll+0x124>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	429a      	cmp	r2, r3
 800db76:	d903      	bls.n	800db80 <xTaskResumeAll+0x7c>
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db7c:	4a2a      	ldr	r2, [pc, #168]	; (800dc28 <xTaskResumeAll+0x124>)
 800db7e:	6013      	str	r3, [r2, #0]
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db84:	4613      	mov	r3, r2
 800db86:	009b      	lsls	r3, r3, #2
 800db88:	4413      	add	r3, r2
 800db8a:	009b      	lsls	r3, r3, #2
 800db8c:	4a27      	ldr	r2, [pc, #156]	; (800dc2c <xTaskResumeAll+0x128>)
 800db8e:	441a      	add	r2, r3
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	3304      	adds	r3, #4
 800db94:	4619      	mov	r1, r3
 800db96:	4610      	mov	r0, r2
 800db98:	f7fe fffb 	bl	800cb92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dba0:	4b23      	ldr	r3, [pc, #140]	; (800dc30 <xTaskResumeAll+0x12c>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d302      	bcc.n	800dbb0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800dbaa:	4b22      	ldr	r3, [pc, #136]	; (800dc34 <xTaskResumeAll+0x130>)
 800dbac:	2201      	movs	r2, #1
 800dbae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dbb0:	4b1c      	ldr	r3, [pc, #112]	; (800dc24 <xTaskResumeAll+0x120>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d1cb      	bne.n	800db50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d001      	beq.n	800dbc2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dbbe:	f000 fbf3 	bl	800e3a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800dbc2:	4b1d      	ldr	r3, [pc, #116]	; (800dc38 <xTaskResumeAll+0x134>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d010      	beq.n	800dbf0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dbce:	f000 f847 	bl	800dc60 <xTaskIncrementTick>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d002      	beq.n	800dbde <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dbd8:	4b16      	ldr	r3, [pc, #88]	; (800dc34 <xTaskResumeAll+0x130>)
 800dbda:	2201      	movs	r2, #1
 800dbdc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	3b01      	subs	r3, #1
 800dbe2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d1f1      	bne.n	800dbce <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800dbea:	4b13      	ldr	r3, [pc, #76]	; (800dc38 <xTaskResumeAll+0x134>)
 800dbec:	2200      	movs	r2, #0
 800dbee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dbf0:	4b10      	ldr	r3, [pc, #64]	; (800dc34 <xTaskResumeAll+0x130>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d009      	beq.n	800dc0c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dbfc:	4b0f      	ldr	r3, [pc, #60]	; (800dc3c <xTaskResumeAll+0x138>)
 800dbfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc02:	601a      	str	r2, [r3, #0]
 800dc04:	f3bf 8f4f 	dsb	sy
 800dc08:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dc0c:	f001 f9b2 	bl	800ef74 <vPortExitCritical>

	return xAlreadyYielded;
 800dc10:	68bb      	ldr	r3, [r7, #8]
}
 800dc12:	4618      	mov	r0, r3
 800dc14:	3710      	adds	r7, #16
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}
 800dc1a:	bf00      	nop
 800dc1c:	20005560 	.word	0x20005560
 800dc20:	20005538 	.word	0x20005538
 800dc24:	200054f8 	.word	0x200054f8
 800dc28:	20005540 	.word	0x20005540
 800dc2c:	20005068 	.word	0x20005068
 800dc30:	20005064 	.word	0x20005064
 800dc34:	2000554c 	.word	0x2000554c
 800dc38:	20005548 	.word	0x20005548
 800dc3c:	e000ed04 	.word	0xe000ed04

0800dc40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dc40:	b480      	push	{r7}
 800dc42:	b083      	sub	sp, #12
 800dc44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dc46:	4b05      	ldr	r3, [pc, #20]	; (800dc5c <xTaskGetTickCount+0x1c>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dc4c:	687b      	ldr	r3, [r7, #4]
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	370c      	adds	r7, #12
 800dc52:	46bd      	mov	sp, r7
 800dc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc58:	4770      	bx	lr
 800dc5a:	bf00      	nop
 800dc5c:	2000553c 	.word	0x2000553c

0800dc60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b086      	sub	sp, #24
 800dc64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dc66:	2300      	movs	r3, #0
 800dc68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc6a:	4b4f      	ldr	r3, [pc, #316]	; (800dda8 <xTaskIncrementTick+0x148>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	f040 8089 	bne.w	800dd86 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dc74:	4b4d      	ldr	r3, [pc, #308]	; (800ddac <xTaskIncrementTick+0x14c>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	3301      	adds	r3, #1
 800dc7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dc7c:	4a4b      	ldr	r2, [pc, #300]	; (800ddac <xTaskIncrementTick+0x14c>)
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dc82:	693b      	ldr	r3, [r7, #16]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d120      	bne.n	800dcca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dc88:	4b49      	ldr	r3, [pc, #292]	; (800ddb0 <xTaskIncrementTick+0x150>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d00a      	beq.n	800dca8 <xTaskIncrementTick+0x48>
	__asm volatile
 800dc92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc96:	f383 8811 	msr	BASEPRI, r3
 800dc9a:	f3bf 8f6f 	isb	sy
 800dc9e:	f3bf 8f4f 	dsb	sy
 800dca2:	603b      	str	r3, [r7, #0]
}
 800dca4:	bf00      	nop
 800dca6:	e7fe      	b.n	800dca6 <xTaskIncrementTick+0x46>
 800dca8:	4b41      	ldr	r3, [pc, #260]	; (800ddb0 <xTaskIncrementTick+0x150>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	60fb      	str	r3, [r7, #12]
 800dcae:	4b41      	ldr	r3, [pc, #260]	; (800ddb4 <xTaskIncrementTick+0x154>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	4a3f      	ldr	r2, [pc, #252]	; (800ddb0 <xTaskIncrementTick+0x150>)
 800dcb4:	6013      	str	r3, [r2, #0]
 800dcb6:	4a3f      	ldr	r2, [pc, #252]	; (800ddb4 <xTaskIncrementTick+0x154>)
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	6013      	str	r3, [r2, #0]
 800dcbc:	4b3e      	ldr	r3, [pc, #248]	; (800ddb8 <xTaskIncrementTick+0x158>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	3301      	adds	r3, #1
 800dcc2:	4a3d      	ldr	r2, [pc, #244]	; (800ddb8 <xTaskIncrementTick+0x158>)
 800dcc4:	6013      	str	r3, [r2, #0]
 800dcc6:	f000 fb6f 	bl	800e3a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dcca:	4b3c      	ldr	r3, [pc, #240]	; (800ddbc <xTaskIncrementTick+0x15c>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	693a      	ldr	r2, [r7, #16]
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d349      	bcc.n	800dd68 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dcd4:	4b36      	ldr	r3, [pc, #216]	; (800ddb0 <xTaskIncrementTick+0x150>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d104      	bne.n	800dce8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcde:	4b37      	ldr	r3, [pc, #220]	; (800ddbc <xTaskIncrementTick+0x15c>)
 800dce0:	f04f 32ff 	mov.w	r2, #4294967295
 800dce4:	601a      	str	r2, [r3, #0]
					break;
 800dce6:	e03f      	b.n	800dd68 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dce8:	4b31      	ldr	r3, [pc, #196]	; (800ddb0 <xTaskIncrementTick+0x150>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	68db      	ldr	r3, [r3, #12]
 800dcee:	68db      	ldr	r3, [r3, #12]
 800dcf0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	685b      	ldr	r3, [r3, #4]
 800dcf6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dcf8:	693a      	ldr	r2, [r7, #16]
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	d203      	bcs.n	800dd08 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dd00:	4a2e      	ldr	r2, [pc, #184]	; (800ddbc <xTaskIncrementTick+0x15c>)
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dd06:	e02f      	b.n	800dd68 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	3304      	adds	r3, #4
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f7fe ff9d 	bl	800cc4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d004      	beq.n	800dd24 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	3318      	adds	r3, #24
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7fe ff94 	bl	800cc4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd28:	4b25      	ldr	r3, [pc, #148]	; (800ddc0 <xTaskIncrementTick+0x160>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	d903      	bls.n	800dd38 <xTaskIncrementTick+0xd8>
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd34:	4a22      	ldr	r2, [pc, #136]	; (800ddc0 <xTaskIncrementTick+0x160>)
 800dd36:	6013      	str	r3, [r2, #0]
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd3c:	4613      	mov	r3, r2
 800dd3e:	009b      	lsls	r3, r3, #2
 800dd40:	4413      	add	r3, r2
 800dd42:	009b      	lsls	r3, r3, #2
 800dd44:	4a1f      	ldr	r2, [pc, #124]	; (800ddc4 <xTaskIncrementTick+0x164>)
 800dd46:	441a      	add	r2, r3
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	3304      	adds	r3, #4
 800dd4c:	4619      	mov	r1, r3
 800dd4e:	4610      	mov	r0, r2
 800dd50:	f7fe ff1f 	bl	800cb92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd58:	4b1b      	ldr	r3, [pc, #108]	; (800ddc8 <xTaskIncrementTick+0x168>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd5e:	429a      	cmp	r2, r3
 800dd60:	d3b8      	bcc.n	800dcd4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800dd62:	2301      	movs	r3, #1
 800dd64:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd66:	e7b5      	b.n	800dcd4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dd68:	4b17      	ldr	r3, [pc, #92]	; (800ddc8 <xTaskIncrementTick+0x168>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd6e:	4915      	ldr	r1, [pc, #84]	; (800ddc4 <xTaskIncrementTick+0x164>)
 800dd70:	4613      	mov	r3, r2
 800dd72:	009b      	lsls	r3, r3, #2
 800dd74:	4413      	add	r3, r2
 800dd76:	009b      	lsls	r3, r3, #2
 800dd78:	440b      	add	r3, r1
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	2b01      	cmp	r3, #1
 800dd7e:	d907      	bls.n	800dd90 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800dd80:	2301      	movs	r3, #1
 800dd82:	617b      	str	r3, [r7, #20]
 800dd84:	e004      	b.n	800dd90 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800dd86:	4b11      	ldr	r3, [pc, #68]	; (800ddcc <xTaskIncrementTick+0x16c>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	3301      	adds	r3, #1
 800dd8c:	4a0f      	ldr	r2, [pc, #60]	; (800ddcc <xTaskIncrementTick+0x16c>)
 800dd8e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800dd90:	4b0f      	ldr	r3, [pc, #60]	; (800ddd0 <xTaskIncrementTick+0x170>)
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d001      	beq.n	800dd9c <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800dd98:	2301      	movs	r3, #1
 800dd9a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800dd9c:	697b      	ldr	r3, [r7, #20]
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3718      	adds	r7, #24
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}
 800dda6:	bf00      	nop
 800dda8:	20005560 	.word	0x20005560
 800ddac:	2000553c 	.word	0x2000553c
 800ddb0:	200054f0 	.word	0x200054f0
 800ddb4:	200054f4 	.word	0x200054f4
 800ddb8:	20005550 	.word	0x20005550
 800ddbc:	20005558 	.word	0x20005558
 800ddc0:	20005540 	.word	0x20005540
 800ddc4:	20005068 	.word	0x20005068
 800ddc8:	20005064 	.word	0x20005064
 800ddcc:	20005548 	.word	0x20005548
 800ddd0:	2000554c 	.word	0x2000554c

0800ddd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ddd4:	b480      	push	{r7}
 800ddd6:	b085      	sub	sp, #20
 800ddd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ddda:	4b28      	ldr	r3, [pc, #160]	; (800de7c <vTaskSwitchContext+0xa8>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d003      	beq.n	800ddea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dde2:	4b27      	ldr	r3, [pc, #156]	; (800de80 <vTaskSwitchContext+0xac>)
 800dde4:	2201      	movs	r2, #1
 800dde6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dde8:	e041      	b.n	800de6e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800ddea:	4b25      	ldr	r3, [pc, #148]	; (800de80 <vTaskSwitchContext+0xac>)
 800ddec:	2200      	movs	r2, #0
 800ddee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddf0:	4b24      	ldr	r3, [pc, #144]	; (800de84 <vTaskSwitchContext+0xb0>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	60fb      	str	r3, [r7, #12]
 800ddf6:	e010      	b.n	800de1a <vTaskSwitchContext+0x46>
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d10a      	bne.n	800de14 <vTaskSwitchContext+0x40>
	__asm volatile
 800ddfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de02:	f383 8811 	msr	BASEPRI, r3
 800de06:	f3bf 8f6f 	isb	sy
 800de0a:	f3bf 8f4f 	dsb	sy
 800de0e:	607b      	str	r3, [r7, #4]
}
 800de10:	bf00      	nop
 800de12:	e7fe      	b.n	800de12 <vTaskSwitchContext+0x3e>
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	3b01      	subs	r3, #1
 800de18:	60fb      	str	r3, [r7, #12]
 800de1a:	491b      	ldr	r1, [pc, #108]	; (800de88 <vTaskSwitchContext+0xb4>)
 800de1c:	68fa      	ldr	r2, [r7, #12]
 800de1e:	4613      	mov	r3, r2
 800de20:	009b      	lsls	r3, r3, #2
 800de22:	4413      	add	r3, r2
 800de24:	009b      	lsls	r3, r3, #2
 800de26:	440b      	add	r3, r1
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d0e4      	beq.n	800ddf8 <vTaskSwitchContext+0x24>
 800de2e:	68fa      	ldr	r2, [r7, #12]
 800de30:	4613      	mov	r3, r2
 800de32:	009b      	lsls	r3, r3, #2
 800de34:	4413      	add	r3, r2
 800de36:	009b      	lsls	r3, r3, #2
 800de38:	4a13      	ldr	r2, [pc, #76]	; (800de88 <vTaskSwitchContext+0xb4>)
 800de3a:	4413      	add	r3, r2
 800de3c:	60bb      	str	r3, [r7, #8]
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	685b      	ldr	r3, [r3, #4]
 800de42:	685a      	ldr	r2, [r3, #4]
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	605a      	str	r2, [r3, #4]
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	685a      	ldr	r2, [r3, #4]
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	3308      	adds	r3, #8
 800de50:	429a      	cmp	r2, r3
 800de52:	d104      	bne.n	800de5e <vTaskSwitchContext+0x8a>
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	685b      	ldr	r3, [r3, #4]
 800de58:	685a      	ldr	r2, [r3, #4]
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	605a      	str	r2, [r3, #4]
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	685b      	ldr	r3, [r3, #4]
 800de62:	68db      	ldr	r3, [r3, #12]
 800de64:	4a09      	ldr	r2, [pc, #36]	; (800de8c <vTaskSwitchContext+0xb8>)
 800de66:	6013      	str	r3, [r2, #0]
 800de68:	4a06      	ldr	r2, [pc, #24]	; (800de84 <vTaskSwitchContext+0xb0>)
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	6013      	str	r3, [r2, #0]
}
 800de6e:	bf00      	nop
 800de70:	3714      	adds	r7, #20
 800de72:	46bd      	mov	sp, r7
 800de74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de78:	4770      	bx	lr
 800de7a:	bf00      	nop
 800de7c:	20005560 	.word	0x20005560
 800de80:	2000554c 	.word	0x2000554c
 800de84:	20005540 	.word	0x20005540
 800de88:	20005068 	.word	0x20005068
 800de8c:	20005064 	.word	0x20005064

0800de90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b084      	sub	sp, #16
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
 800de98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d10a      	bne.n	800deb6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800dea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dea4:	f383 8811 	msr	BASEPRI, r3
 800dea8:	f3bf 8f6f 	isb	sy
 800deac:	f3bf 8f4f 	dsb	sy
 800deb0:	60fb      	str	r3, [r7, #12]
}
 800deb2:	bf00      	nop
 800deb4:	e7fe      	b.n	800deb4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800deb6:	4b07      	ldr	r3, [pc, #28]	; (800ded4 <vTaskPlaceOnEventList+0x44>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	3318      	adds	r3, #24
 800debc:	4619      	mov	r1, r3
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f7fe fe8b 	bl	800cbda <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dec4:	2101      	movs	r1, #1
 800dec6:	6838      	ldr	r0, [r7, #0]
 800dec8:	f000 fb32 	bl	800e530 <prvAddCurrentTaskToDelayedList>
}
 800decc:	bf00      	nop
 800dece:	3710      	adds	r7, #16
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}
 800ded4:	20005064 	.word	0x20005064

0800ded8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b086      	sub	sp, #24
 800dedc:	af00      	add	r7, sp, #0
 800dede:	60f8      	str	r0, [r7, #12]
 800dee0:	60b9      	str	r1, [r7, #8]
 800dee2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d10a      	bne.n	800df00 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800deea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deee:	f383 8811 	msr	BASEPRI, r3
 800def2:	f3bf 8f6f 	isb	sy
 800def6:	f3bf 8f4f 	dsb	sy
 800defa:	617b      	str	r3, [r7, #20]
}
 800defc:	bf00      	nop
 800defe:	e7fe      	b.n	800defe <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800df00:	4b11      	ldr	r3, [pc, #68]	; (800df48 <vTaskPlaceOnUnorderedEventList+0x70>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d10a      	bne.n	800df1e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800df08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df0c:	f383 8811 	msr	BASEPRI, r3
 800df10:	f3bf 8f6f 	isb	sy
 800df14:	f3bf 8f4f 	dsb	sy
 800df18:	613b      	str	r3, [r7, #16]
}
 800df1a:	bf00      	nop
 800df1c:	e7fe      	b.n	800df1c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800df1e:	4b0b      	ldr	r3, [pc, #44]	; (800df4c <vTaskPlaceOnUnorderedEventList+0x74>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	68ba      	ldr	r2, [r7, #8]
 800df24:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800df28:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800df2a:	4b08      	ldr	r3, [pc, #32]	; (800df4c <vTaskPlaceOnUnorderedEventList+0x74>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	3318      	adds	r3, #24
 800df30:	4619      	mov	r1, r3
 800df32:	68f8      	ldr	r0, [r7, #12]
 800df34:	f7fe fe2d 	bl	800cb92 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800df38:	2101      	movs	r1, #1
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f000 faf8 	bl	800e530 <prvAddCurrentTaskToDelayedList>
}
 800df40:	bf00      	nop
 800df42:	3718      	adds	r7, #24
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}
 800df48:	20005560 	.word	0x20005560
 800df4c:	20005064 	.word	0x20005064

0800df50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800df50:	b580      	push	{r7, lr}
 800df52:	b086      	sub	sp, #24
 800df54:	af00      	add	r7, sp, #0
 800df56:	60f8      	str	r0, [r7, #12]
 800df58:	60b9      	str	r1, [r7, #8]
 800df5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d10a      	bne.n	800df78 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800df62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df66:	f383 8811 	msr	BASEPRI, r3
 800df6a:	f3bf 8f6f 	isb	sy
 800df6e:	f3bf 8f4f 	dsb	sy
 800df72:	617b      	str	r3, [r7, #20]
}
 800df74:	bf00      	nop
 800df76:	e7fe      	b.n	800df76 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800df78:	4b0a      	ldr	r3, [pc, #40]	; (800dfa4 <vTaskPlaceOnEventListRestricted+0x54>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	3318      	adds	r3, #24
 800df7e:	4619      	mov	r1, r3
 800df80:	68f8      	ldr	r0, [r7, #12]
 800df82:	f7fe fe06 	bl	800cb92 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d002      	beq.n	800df92 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800df8c:	f04f 33ff 	mov.w	r3, #4294967295
 800df90:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800df92:	6879      	ldr	r1, [r7, #4]
 800df94:	68b8      	ldr	r0, [r7, #8]
 800df96:	f000 facb 	bl	800e530 <prvAddCurrentTaskToDelayedList>
	}
 800df9a:	bf00      	nop
 800df9c:	3718      	adds	r7, #24
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}
 800dfa2:	bf00      	nop
 800dfa4:	20005064 	.word	0x20005064

0800dfa8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b086      	sub	sp, #24
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	68db      	ldr	r3, [r3, #12]
 800dfb4:	68db      	ldr	r3, [r3, #12]
 800dfb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d10a      	bne.n	800dfd4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800dfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfc2:	f383 8811 	msr	BASEPRI, r3
 800dfc6:	f3bf 8f6f 	isb	sy
 800dfca:	f3bf 8f4f 	dsb	sy
 800dfce:	60fb      	str	r3, [r7, #12]
}
 800dfd0:	bf00      	nop
 800dfd2:	e7fe      	b.n	800dfd2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dfd4:	693b      	ldr	r3, [r7, #16]
 800dfd6:	3318      	adds	r3, #24
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f7fe fe37 	bl	800cc4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dfde:	4b1e      	ldr	r3, [pc, #120]	; (800e058 <xTaskRemoveFromEventList+0xb0>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d11d      	bne.n	800e022 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dfe6:	693b      	ldr	r3, [r7, #16]
 800dfe8:	3304      	adds	r3, #4
 800dfea:	4618      	mov	r0, r3
 800dfec:	f7fe fe2e 	bl	800cc4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dff4:	4b19      	ldr	r3, [pc, #100]	; (800e05c <xTaskRemoveFromEventList+0xb4>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	429a      	cmp	r2, r3
 800dffa:	d903      	bls.n	800e004 <xTaskRemoveFromEventList+0x5c>
 800dffc:	693b      	ldr	r3, [r7, #16]
 800dffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e000:	4a16      	ldr	r2, [pc, #88]	; (800e05c <xTaskRemoveFromEventList+0xb4>)
 800e002:	6013      	str	r3, [r2, #0]
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e008:	4613      	mov	r3, r2
 800e00a:	009b      	lsls	r3, r3, #2
 800e00c:	4413      	add	r3, r2
 800e00e:	009b      	lsls	r3, r3, #2
 800e010:	4a13      	ldr	r2, [pc, #76]	; (800e060 <xTaskRemoveFromEventList+0xb8>)
 800e012:	441a      	add	r2, r3
 800e014:	693b      	ldr	r3, [r7, #16]
 800e016:	3304      	adds	r3, #4
 800e018:	4619      	mov	r1, r3
 800e01a:	4610      	mov	r0, r2
 800e01c:	f7fe fdb9 	bl	800cb92 <vListInsertEnd>
 800e020:	e005      	b.n	800e02e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	3318      	adds	r3, #24
 800e026:	4619      	mov	r1, r3
 800e028:	480e      	ldr	r0, [pc, #56]	; (800e064 <xTaskRemoveFromEventList+0xbc>)
 800e02a:	f7fe fdb2 	bl	800cb92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e02e:	693b      	ldr	r3, [r7, #16]
 800e030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e032:	4b0d      	ldr	r3, [pc, #52]	; (800e068 <xTaskRemoveFromEventList+0xc0>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e038:	429a      	cmp	r2, r3
 800e03a:	d905      	bls.n	800e048 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e03c:	2301      	movs	r3, #1
 800e03e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e040:	4b0a      	ldr	r3, [pc, #40]	; (800e06c <xTaskRemoveFromEventList+0xc4>)
 800e042:	2201      	movs	r2, #1
 800e044:	601a      	str	r2, [r3, #0]
 800e046:	e001      	b.n	800e04c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e048:	2300      	movs	r3, #0
 800e04a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e04c:	697b      	ldr	r3, [r7, #20]
}
 800e04e:	4618      	mov	r0, r3
 800e050:	3718      	adds	r7, #24
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}
 800e056:	bf00      	nop
 800e058:	20005560 	.word	0x20005560
 800e05c:	20005540 	.word	0x20005540
 800e060:	20005068 	.word	0x20005068
 800e064:	200054f8 	.word	0x200054f8
 800e068:	20005064 	.word	0x20005064
 800e06c:	2000554c 	.word	0x2000554c

0800e070 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b086      	sub	sp, #24
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
 800e078:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800e07a:	4b29      	ldr	r3, [pc, #164]	; (800e120 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d10a      	bne.n	800e098 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800e082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e086:	f383 8811 	msr	BASEPRI, r3
 800e08a:	f3bf 8f6f 	isb	sy
 800e08e:	f3bf 8f4f 	dsb	sy
 800e092:	613b      	str	r3, [r7, #16]
}
 800e094:	bf00      	nop
 800e096:	e7fe      	b.n	800e096 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	68db      	ldr	r3, [r3, #12]
 800e0a6:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d10a      	bne.n	800e0c4 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800e0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b2:	f383 8811 	msr	BASEPRI, r3
 800e0b6:	f3bf 8f6f 	isb	sy
 800e0ba:	f3bf 8f4f 	dsb	sy
 800e0be:	60fb      	str	r3, [r7, #12]
}
 800e0c0:	bf00      	nop
 800e0c2:	e7fe      	b.n	800e0c2 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f7fe fdc1 	bl	800cc4c <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	3304      	adds	r3, #4
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f7fe fdbc 	bl	800cc4c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800e0d4:	697b      	ldr	r3, [r7, #20]
 800e0d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0d8:	4b12      	ldr	r3, [pc, #72]	; (800e124 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	d903      	bls.n	800e0e8 <vTaskRemoveFromUnorderedEventList+0x78>
 800e0e0:	697b      	ldr	r3, [r7, #20]
 800e0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0e4:	4a0f      	ldr	r2, [pc, #60]	; (800e124 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800e0e6:	6013      	str	r3, [r2, #0]
 800e0e8:	697b      	ldr	r3, [r7, #20]
 800e0ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0ec:	4613      	mov	r3, r2
 800e0ee:	009b      	lsls	r3, r3, #2
 800e0f0:	4413      	add	r3, r2
 800e0f2:	009b      	lsls	r3, r3, #2
 800e0f4:	4a0c      	ldr	r2, [pc, #48]	; (800e128 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e0f6:	441a      	add	r2, r3
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	3304      	adds	r3, #4
 800e0fc:	4619      	mov	r1, r3
 800e0fe:	4610      	mov	r0, r2
 800e100:	f7fe fd47 	bl	800cb92 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e104:	697b      	ldr	r3, [r7, #20]
 800e106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e108:	4b08      	ldr	r3, [pc, #32]	; (800e12c <vTaskRemoveFromUnorderedEventList+0xbc>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e10e:	429a      	cmp	r2, r3
 800e110:	d902      	bls.n	800e118 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800e112:	4b07      	ldr	r3, [pc, #28]	; (800e130 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800e114:	2201      	movs	r2, #1
 800e116:	601a      	str	r2, [r3, #0]
	}
}
 800e118:	bf00      	nop
 800e11a:	3718      	adds	r7, #24
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}
 800e120:	20005560 	.word	0x20005560
 800e124:	20005540 	.word	0x20005540
 800e128:	20005068 	.word	0x20005068
 800e12c:	20005064 	.word	0x20005064
 800e130:	2000554c 	.word	0x2000554c

0800e134 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e134:	b480      	push	{r7}
 800e136:	b083      	sub	sp, #12
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e13c:	4b06      	ldr	r3, [pc, #24]	; (800e158 <vTaskInternalSetTimeOutState+0x24>)
 800e13e:	681a      	ldr	r2, [r3, #0]
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e144:	4b05      	ldr	r3, [pc, #20]	; (800e15c <vTaskInternalSetTimeOutState+0x28>)
 800e146:	681a      	ldr	r2, [r3, #0]
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	605a      	str	r2, [r3, #4]
}
 800e14c:	bf00      	nop
 800e14e:	370c      	adds	r7, #12
 800e150:	46bd      	mov	sp, r7
 800e152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e156:	4770      	bx	lr
 800e158:	20005550 	.word	0x20005550
 800e15c:	2000553c 	.word	0x2000553c

0800e160 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b088      	sub	sp, #32
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
 800e168:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d10a      	bne.n	800e186 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e174:	f383 8811 	msr	BASEPRI, r3
 800e178:	f3bf 8f6f 	isb	sy
 800e17c:	f3bf 8f4f 	dsb	sy
 800e180:	613b      	str	r3, [r7, #16]
}
 800e182:	bf00      	nop
 800e184:	e7fe      	b.n	800e184 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d10a      	bne.n	800e1a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e190:	f383 8811 	msr	BASEPRI, r3
 800e194:	f3bf 8f6f 	isb	sy
 800e198:	f3bf 8f4f 	dsb	sy
 800e19c:	60fb      	str	r3, [r7, #12]
}
 800e19e:	bf00      	nop
 800e1a0:	e7fe      	b.n	800e1a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e1a2:	f000 feb7 	bl	800ef14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e1a6:	4b1d      	ldr	r3, [pc, #116]	; (800e21c <xTaskCheckForTimeOut+0xbc>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	69ba      	ldr	r2, [r7, #24]
 800e1b2:	1ad3      	subs	r3, r2, r3
 800e1b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1be:	d102      	bne.n	800e1c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	61fb      	str	r3, [r7, #28]
 800e1c4:	e023      	b.n	800e20e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681a      	ldr	r2, [r3, #0]
 800e1ca:	4b15      	ldr	r3, [pc, #84]	; (800e220 <xTaskCheckForTimeOut+0xc0>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	429a      	cmp	r2, r3
 800e1d0:	d007      	beq.n	800e1e2 <xTaskCheckForTimeOut+0x82>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	685b      	ldr	r3, [r3, #4]
 800e1d6:	69ba      	ldr	r2, [r7, #24]
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d302      	bcc.n	800e1e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e1dc:	2301      	movs	r3, #1
 800e1de:	61fb      	str	r3, [r7, #28]
 800e1e0:	e015      	b.n	800e20e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	697a      	ldr	r2, [r7, #20]
 800e1e8:	429a      	cmp	r2, r3
 800e1ea:	d20b      	bcs.n	800e204 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	681a      	ldr	r2, [r3, #0]
 800e1f0:	697b      	ldr	r3, [r7, #20]
 800e1f2:	1ad2      	subs	r2, r2, r3
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f7ff ff9b 	bl	800e134 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e1fe:	2300      	movs	r3, #0
 800e200:	61fb      	str	r3, [r7, #28]
 800e202:	e004      	b.n	800e20e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	2200      	movs	r2, #0
 800e208:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e20a:	2301      	movs	r3, #1
 800e20c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e20e:	f000 feb1 	bl	800ef74 <vPortExitCritical>

	return xReturn;
 800e212:	69fb      	ldr	r3, [r7, #28]
}
 800e214:	4618      	mov	r0, r3
 800e216:	3720      	adds	r7, #32
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}
 800e21c:	2000553c 	.word	0x2000553c
 800e220:	20005550 	.word	0x20005550

0800e224 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e224:	b480      	push	{r7}
 800e226:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e228:	4b03      	ldr	r3, [pc, #12]	; (800e238 <vTaskMissedYield+0x14>)
 800e22a:	2201      	movs	r2, #1
 800e22c:	601a      	str	r2, [r3, #0]
}
 800e22e:	bf00      	nop
 800e230:	46bd      	mov	sp, r7
 800e232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e236:	4770      	bx	lr
 800e238:	2000554c 	.word	0x2000554c

0800e23c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b082      	sub	sp, #8
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e244:	f000 f852 	bl	800e2ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e248:	4b06      	ldr	r3, [pc, #24]	; (800e264 <prvIdleTask+0x28>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	2b01      	cmp	r3, #1
 800e24e:	d9f9      	bls.n	800e244 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e250:	4b05      	ldr	r3, [pc, #20]	; (800e268 <prvIdleTask+0x2c>)
 800e252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e256:	601a      	str	r2, [r3, #0]
 800e258:	f3bf 8f4f 	dsb	sy
 800e25c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e260:	e7f0      	b.n	800e244 <prvIdleTask+0x8>
 800e262:	bf00      	nop
 800e264:	20005068 	.word	0x20005068
 800e268:	e000ed04 	.word	0xe000ed04

0800e26c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b082      	sub	sp, #8
 800e270:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e272:	2300      	movs	r3, #0
 800e274:	607b      	str	r3, [r7, #4]
 800e276:	e00c      	b.n	800e292 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e278:	687a      	ldr	r2, [r7, #4]
 800e27a:	4613      	mov	r3, r2
 800e27c:	009b      	lsls	r3, r3, #2
 800e27e:	4413      	add	r3, r2
 800e280:	009b      	lsls	r3, r3, #2
 800e282:	4a12      	ldr	r2, [pc, #72]	; (800e2cc <prvInitialiseTaskLists+0x60>)
 800e284:	4413      	add	r3, r2
 800e286:	4618      	mov	r0, r3
 800e288:	f7fe fc56 	bl	800cb38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	3301      	adds	r3, #1
 800e290:	607b      	str	r3, [r7, #4]
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2b37      	cmp	r3, #55	; 0x37
 800e296:	d9ef      	bls.n	800e278 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e298:	480d      	ldr	r0, [pc, #52]	; (800e2d0 <prvInitialiseTaskLists+0x64>)
 800e29a:	f7fe fc4d 	bl	800cb38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e29e:	480d      	ldr	r0, [pc, #52]	; (800e2d4 <prvInitialiseTaskLists+0x68>)
 800e2a0:	f7fe fc4a 	bl	800cb38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e2a4:	480c      	ldr	r0, [pc, #48]	; (800e2d8 <prvInitialiseTaskLists+0x6c>)
 800e2a6:	f7fe fc47 	bl	800cb38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e2aa:	480c      	ldr	r0, [pc, #48]	; (800e2dc <prvInitialiseTaskLists+0x70>)
 800e2ac:	f7fe fc44 	bl	800cb38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e2b0:	480b      	ldr	r0, [pc, #44]	; (800e2e0 <prvInitialiseTaskLists+0x74>)
 800e2b2:	f7fe fc41 	bl	800cb38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e2b6:	4b0b      	ldr	r3, [pc, #44]	; (800e2e4 <prvInitialiseTaskLists+0x78>)
 800e2b8:	4a05      	ldr	r2, [pc, #20]	; (800e2d0 <prvInitialiseTaskLists+0x64>)
 800e2ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e2bc:	4b0a      	ldr	r3, [pc, #40]	; (800e2e8 <prvInitialiseTaskLists+0x7c>)
 800e2be:	4a05      	ldr	r2, [pc, #20]	; (800e2d4 <prvInitialiseTaskLists+0x68>)
 800e2c0:	601a      	str	r2, [r3, #0]
}
 800e2c2:	bf00      	nop
 800e2c4:	3708      	adds	r7, #8
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}
 800e2ca:	bf00      	nop
 800e2cc:	20005068 	.word	0x20005068
 800e2d0:	200054c8 	.word	0x200054c8
 800e2d4:	200054dc 	.word	0x200054dc
 800e2d8:	200054f8 	.word	0x200054f8
 800e2dc:	2000550c 	.word	0x2000550c
 800e2e0:	20005524 	.word	0x20005524
 800e2e4:	200054f0 	.word	0x200054f0
 800e2e8:	200054f4 	.word	0x200054f4

0800e2ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b082      	sub	sp, #8
 800e2f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e2f2:	e019      	b.n	800e328 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e2f4:	f000 fe0e 	bl	800ef14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2f8:	4b10      	ldr	r3, [pc, #64]	; (800e33c <prvCheckTasksWaitingTermination+0x50>)
 800e2fa:	68db      	ldr	r3, [r3, #12]
 800e2fc:	68db      	ldr	r3, [r3, #12]
 800e2fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	3304      	adds	r3, #4
 800e304:	4618      	mov	r0, r3
 800e306:	f7fe fca1 	bl	800cc4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e30a:	4b0d      	ldr	r3, [pc, #52]	; (800e340 <prvCheckTasksWaitingTermination+0x54>)
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	3b01      	subs	r3, #1
 800e310:	4a0b      	ldr	r2, [pc, #44]	; (800e340 <prvCheckTasksWaitingTermination+0x54>)
 800e312:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e314:	4b0b      	ldr	r3, [pc, #44]	; (800e344 <prvCheckTasksWaitingTermination+0x58>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	3b01      	subs	r3, #1
 800e31a:	4a0a      	ldr	r2, [pc, #40]	; (800e344 <prvCheckTasksWaitingTermination+0x58>)
 800e31c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e31e:	f000 fe29 	bl	800ef74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	f000 f810 	bl	800e348 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e328:	4b06      	ldr	r3, [pc, #24]	; (800e344 <prvCheckTasksWaitingTermination+0x58>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d1e1      	bne.n	800e2f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e330:	bf00      	nop
 800e332:	bf00      	nop
 800e334:	3708      	adds	r7, #8
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}
 800e33a:	bf00      	nop
 800e33c:	2000550c 	.word	0x2000550c
 800e340:	20005538 	.word	0x20005538
 800e344:	20005520 	.word	0x20005520

0800e348 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b084      	sub	sp, #16
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e356:	2b00      	cmp	r3, #0
 800e358:	d108      	bne.n	800e36c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e35e:	4618      	mov	r0, r3
 800e360:	f000 ffbe 	bl	800f2e0 <vPortFree>
				vPortFree( pxTCB );
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f000 ffbb 	bl	800f2e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e36a:	e018      	b.n	800e39e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e372:	2b01      	cmp	r3, #1
 800e374:	d103      	bne.n	800e37e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f000 ffb2 	bl	800f2e0 <vPortFree>
	}
 800e37c:	e00f      	b.n	800e39e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e384:	2b02      	cmp	r3, #2
 800e386:	d00a      	beq.n	800e39e <prvDeleteTCB+0x56>
	__asm volatile
 800e388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e38c:	f383 8811 	msr	BASEPRI, r3
 800e390:	f3bf 8f6f 	isb	sy
 800e394:	f3bf 8f4f 	dsb	sy
 800e398:	60fb      	str	r3, [r7, #12]
}
 800e39a:	bf00      	nop
 800e39c:	e7fe      	b.n	800e39c <prvDeleteTCB+0x54>
	}
 800e39e:	bf00      	nop
 800e3a0:	3710      	adds	r7, #16
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	bd80      	pop	{r7, pc}
	...

0800e3a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b083      	sub	sp, #12
 800e3ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e3ae:	4b0c      	ldr	r3, [pc, #48]	; (800e3e0 <prvResetNextTaskUnblockTime+0x38>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d104      	bne.n	800e3c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e3b8:	4b0a      	ldr	r3, [pc, #40]	; (800e3e4 <prvResetNextTaskUnblockTime+0x3c>)
 800e3ba:	f04f 32ff 	mov.w	r2, #4294967295
 800e3be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e3c0:	e008      	b.n	800e3d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3c2:	4b07      	ldr	r3, [pc, #28]	; (800e3e0 <prvResetNextTaskUnblockTime+0x38>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	68db      	ldr	r3, [r3, #12]
 800e3c8:	68db      	ldr	r3, [r3, #12]
 800e3ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	685b      	ldr	r3, [r3, #4]
 800e3d0:	4a04      	ldr	r2, [pc, #16]	; (800e3e4 <prvResetNextTaskUnblockTime+0x3c>)
 800e3d2:	6013      	str	r3, [r2, #0]
}
 800e3d4:	bf00      	nop
 800e3d6:	370c      	adds	r7, #12
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3de:	4770      	bx	lr
 800e3e0:	200054f0 	.word	0x200054f0
 800e3e4:	20005558 	.word	0x20005558

0800e3e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e3e8:	b480      	push	{r7}
 800e3ea:	b083      	sub	sp, #12
 800e3ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e3ee:	4b0b      	ldr	r3, [pc, #44]	; (800e41c <xTaskGetSchedulerState+0x34>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d102      	bne.n	800e3fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	607b      	str	r3, [r7, #4]
 800e3fa:	e008      	b.n	800e40e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3fc:	4b08      	ldr	r3, [pc, #32]	; (800e420 <xTaskGetSchedulerState+0x38>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d102      	bne.n	800e40a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e404:	2302      	movs	r3, #2
 800e406:	607b      	str	r3, [r7, #4]
 800e408:	e001      	b.n	800e40e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e40a:	2300      	movs	r3, #0
 800e40c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e40e:	687b      	ldr	r3, [r7, #4]
	}
 800e410:	4618      	mov	r0, r3
 800e412:	370c      	adds	r7, #12
 800e414:	46bd      	mov	sp, r7
 800e416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41a:	4770      	bx	lr
 800e41c:	20005544 	.word	0x20005544
 800e420:	20005560 	.word	0x20005560

0800e424 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e424:	b580      	push	{r7, lr}
 800e426:	b086      	sub	sp, #24
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e430:	2300      	movs	r3, #0
 800e432:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d056      	beq.n	800e4e8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e43a:	4b2e      	ldr	r3, [pc, #184]	; (800e4f4 <xTaskPriorityDisinherit+0xd0>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	693a      	ldr	r2, [r7, #16]
 800e440:	429a      	cmp	r2, r3
 800e442:	d00a      	beq.n	800e45a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e448:	f383 8811 	msr	BASEPRI, r3
 800e44c:	f3bf 8f6f 	isb	sy
 800e450:	f3bf 8f4f 	dsb	sy
 800e454:	60fb      	str	r3, [r7, #12]
}
 800e456:	bf00      	nop
 800e458:	e7fe      	b.n	800e458 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e45a:	693b      	ldr	r3, [r7, #16]
 800e45c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d10a      	bne.n	800e478 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e466:	f383 8811 	msr	BASEPRI, r3
 800e46a:	f3bf 8f6f 	isb	sy
 800e46e:	f3bf 8f4f 	dsb	sy
 800e472:	60bb      	str	r3, [r7, #8]
}
 800e474:	bf00      	nop
 800e476:	e7fe      	b.n	800e476 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e478:	693b      	ldr	r3, [r7, #16]
 800e47a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e47c:	1e5a      	subs	r2, r3, #1
 800e47e:	693b      	ldr	r3, [r7, #16]
 800e480:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e486:	693b      	ldr	r3, [r7, #16]
 800e488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e48a:	429a      	cmp	r2, r3
 800e48c:	d02c      	beq.n	800e4e8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e48e:	693b      	ldr	r3, [r7, #16]
 800e490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e492:	2b00      	cmp	r3, #0
 800e494:	d128      	bne.n	800e4e8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e496:	693b      	ldr	r3, [r7, #16]
 800e498:	3304      	adds	r3, #4
 800e49a:	4618      	mov	r0, r3
 800e49c:	f7fe fbd6 	bl	800cc4c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e4a0:	693b      	ldr	r3, [r7, #16]
 800e4a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e4a4:	693b      	ldr	r3, [r7, #16]
 800e4a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e4b0:	693b      	ldr	r3, [r7, #16]
 800e4b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e4b4:	693b      	ldr	r3, [r7, #16]
 800e4b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4b8:	4b0f      	ldr	r3, [pc, #60]	; (800e4f8 <xTaskPriorityDisinherit+0xd4>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d903      	bls.n	800e4c8 <xTaskPriorityDisinherit+0xa4>
 800e4c0:	693b      	ldr	r3, [r7, #16]
 800e4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4c4:	4a0c      	ldr	r2, [pc, #48]	; (800e4f8 <xTaskPriorityDisinherit+0xd4>)
 800e4c6:	6013      	str	r3, [r2, #0]
 800e4c8:	693b      	ldr	r3, [r7, #16]
 800e4ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4cc:	4613      	mov	r3, r2
 800e4ce:	009b      	lsls	r3, r3, #2
 800e4d0:	4413      	add	r3, r2
 800e4d2:	009b      	lsls	r3, r3, #2
 800e4d4:	4a09      	ldr	r2, [pc, #36]	; (800e4fc <xTaskPriorityDisinherit+0xd8>)
 800e4d6:	441a      	add	r2, r3
 800e4d8:	693b      	ldr	r3, [r7, #16]
 800e4da:	3304      	adds	r3, #4
 800e4dc:	4619      	mov	r1, r3
 800e4de:	4610      	mov	r0, r2
 800e4e0:	f7fe fb57 	bl	800cb92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e4e8:	697b      	ldr	r3, [r7, #20]
	}
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	3718      	adds	r7, #24
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd80      	pop	{r7, pc}
 800e4f2:	bf00      	nop
 800e4f4:	20005064 	.word	0x20005064
 800e4f8:	20005540 	.word	0x20005540
 800e4fc:	20005068 	.word	0x20005068

0800e500 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800e500:	b480      	push	{r7}
 800e502:	b083      	sub	sp, #12
 800e504:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800e506:	4b09      	ldr	r3, [pc, #36]	; (800e52c <uxTaskResetEventItemValue+0x2c>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	699b      	ldr	r3, [r3, #24]
 800e50c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e50e:	4b07      	ldr	r3, [pc, #28]	; (800e52c <uxTaskResetEventItemValue+0x2c>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e514:	4b05      	ldr	r3, [pc, #20]	; (800e52c <uxTaskResetEventItemValue+0x2c>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800e51c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800e51e:	687b      	ldr	r3, [r7, #4]
}
 800e520:	4618      	mov	r0, r3
 800e522:	370c      	adds	r7, #12
 800e524:	46bd      	mov	sp, r7
 800e526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52a:	4770      	bx	lr
 800e52c:	20005064 	.word	0x20005064

0800e530 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b084      	sub	sp, #16
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e53a:	4b21      	ldr	r3, [pc, #132]	; (800e5c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e540:	4b20      	ldr	r3, [pc, #128]	; (800e5c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	3304      	adds	r3, #4
 800e546:	4618      	mov	r0, r3
 800e548:	f7fe fb80 	bl	800cc4c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e552:	d10a      	bne.n	800e56a <prvAddCurrentTaskToDelayedList+0x3a>
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d007      	beq.n	800e56a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e55a:	4b1a      	ldr	r3, [pc, #104]	; (800e5c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	3304      	adds	r3, #4
 800e560:	4619      	mov	r1, r3
 800e562:	4819      	ldr	r0, [pc, #100]	; (800e5c8 <prvAddCurrentTaskToDelayedList+0x98>)
 800e564:	f7fe fb15 	bl	800cb92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e568:	e026      	b.n	800e5b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e56a:	68fa      	ldr	r2, [r7, #12]
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	4413      	add	r3, r2
 800e570:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e572:	4b14      	ldr	r3, [pc, #80]	; (800e5c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	68ba      	ldr	r2, [r7, #8]
 800e578:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e57a:	68ba      	ldr	r2, [r7, #8]
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	429a      	cmp	r2, r3
 800e580:	d209      	bcs.n	800e596 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e582:	4b12      	ldr	r3, [pc, #72]	; (800e5cc <prvAddCurrentTaskToDelayedList+0x9c>)
 800e584:	681a      	ldr	r2, [r3, #0]
 800e586:	4b0f      	ldr	r3, [pc, #60]	; (800e5c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	3304      	adds	r3, #4
 800e58c:	4619      	mov	r1, r3
 800e58e:	4610      	mov	r0, r2
 800e590:	f7fe fb23 	bl	800cbda <vListInsert>
}
 800e594:	e010      	b.n	800e5b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e596:	4b0e      	ldr	r3, [pc, #56]	; (800e5d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e598:	681a      	ldr	r2, [r3, #0]
 800e59a:	4b0a      	ldr	r3, [pc, #40]	; (800e5c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	3304      	adds	r3, #4
 800e5a0:	4619      	mov	r1, r3
 800e5a2:	4610      	mov	r0, r2
 800e5a4:	f7fe fb19 	bl	800cbda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e5a8:	4b0a      	ldr	r3, [pc, #40]	; (800e5d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	68ba      	ldr	r2, [r7, #8]
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	d202      	bcs.n	800e5b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e5b2:	4a08      	ldr	r2, [pc, #32]	; (800e5d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	6013      	str	r3, [r2, #0]
}
 800e5b8:	bf00      	nop
 800e5ba:	3710      	adds	r7, #16
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}
 800e5c0:	2000553c 	.word	0x2000553c
 800e5c4:	20005064 	.word	0x20005064
 800e5c8:	20005524 	.word	0x20005524
 800e5cc:	200054f4 	.word	0x200054f4
 800e5d0:	200054f0 	.word	0x200054f0
 800e5d4:	20005558 	.word	0x20005558

0800e5d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b08a      	sub	sp, #40	; 0x28
 800e5dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e5de:	2300      	movs	r3, #0
 800e5e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e5e2:	f000 fb07 	bl	800ebf4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e5e6:	4b1c      	ldr	r3, [pc, #112]	; (800e658 <xTimerCreateTimerTask+0x80>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d021      	beq.n	800e632 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e5f6:	1d3a      	adds	r2, r7, #4
 800e5f8:	f107 0108 	add.w	r1, r7, #8
 800e5fc:	f107 030c 	add.w	r3, r7, #12
 800e600:	4618      	mov	r0, r3
 800e602:	f7fe f813 	bl	800c62c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e606:	6879      	ldr	r1, [r7, #4]
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	68fa      	ldr	r2, [r7, #12]
 800e60c:	9202      	str	r2, [sp, #8]
 800e60e:	9301      	str	r3, [sp, #4]
 800e610:	2302      	movs	r3, #2
 800e612:	9300      	str	r3, [sp, #0]
 800e614:	2300      	movs	r3, #0
 800e616:	460a      	mov	r2, r1
 800e618:	4910      	ldr	r1, [pc, #64]	; (800e65c <xTimerCreateTimerTask+0x84>)
 800e61a:	4811      	ldr	r0, [pc, #68]	; (800e660 <xTimerCreateTimerTask+0x88>)
 800e61c:	f7ff f828 	bl	800d670 <xTaskCreateStatic>
 800e620:	4603      	mov	r3, r0
 800e622:	4a10      	ldr	r2, [pc, #64]	; (800e664 <xTimerCreateTimerTask+0x8c>)
 800e624:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e626:	4b0f      	ldr	r3, [pc, #60]	; (800e664 <xTimerCreateTimerTask+0x8c>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d001      	beq.n	800e632 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e62e:	2301      	movs	r3, #1
 800e630:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d10a      	bne.n	800e64e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e63c:	f383 8811 	msr	BASEPRI, r3
 800e640:	f3bf 8f6f 	isb	sy
 800e644:	f3bf 8f4f 	dsb	sy
 800e648:	613b      	str	r3, [r7, #16]
}
 800e64a:	bf00      	nop
 800e64c:	e7fe      	b.n	800e64c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e64e:	697b      	ldr	r3, [r7, #20]
}
 800e650:	4618      	mov	r0, r3
 800e652:	3718      	adds	r7, #24
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}
 800e658:	20005594 	.word	0x20005594
 800e65c:	0801cc8c 	.word	0x0801cc8c
 800e660:	0800e79d 	.word	0x0800e79d
 800e664:	20005598 	.word	0x20005598

0800e668 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b08a      	sub	sp, #40	; 0x28
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	60f8      	str	r0, [r7, #12]
 800e670:	60b9      	str	r1, [r7, #8]
 800e672:	607a      	str	r2, [r7, #4]
 800e674:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e676:	2300      	movs	r3, #0
 800e678:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d10a      	bne.n	800e696 <xTimerGenericCommand+0x2e>
	__asm volatile
 800e680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e684:	f383 8811 	msr	BASEPRI, r3
 800e688:	f3bf 8f6f 	isb	sy
 800e68c:	f3bf 8f4f 	dsb	sy
 800e690:	623b      	str	r3, [r7, #32]
}
 800e692:	bf00      	nop
 800e694:	e7fe      	b.n	800e694 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e696:	4b1a      	ldr	r3, [pc, #104]	; (800e700 <xTimerGenericCommand+0x98>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d02a      	beq.n	800e6f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e69e:	68bb      	ldr	r3, [r7, #8]
 800e6a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	2b05      	cmp	r3, #5
 800e6ae:	dc18      	bgt.n	800e6e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e6b0:	f7ff fe9a 	bl	800e3e8 <xTaskGetSchedulerState>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	2b02      	cmp	r3, #2
 800e6b8:	d109      	bne.n	800e6ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e6ba:	4b11      	ldr	r3, [pc, #68]	; (800e700 <xTimerGenericCommand+0x98>)
 800e6bc:	6818      	ldr	r0, [r3, #0]
 800e6be:	f107 0110 	add.w	r1, r7, #16
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6c6:	f7fe fbef 	bl	800cea8 <xQueueGenericSend>
 800e6ca:	6278      	str	r0, [r7, #36]	; 0x24
 800e6cc:	e012      	b.n	800e6f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e6ce:	4b0c      	ldr	r3, [pc, #48]	; (800e700 <xTimerGenericCommand+0x98>)
 800e6d0:	6818      	ldr	r0, [r3, #0]
 800e6d2:	f107 0110 	add.w	r1, r7, #16
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	2200      	movs	r2, #0
 800e6da:	f7fe fbe5 	bl	800cea8 <xQueueGenericSend>
 800e6de:	6278      	str	r0, [r7, #36]	; 0x24
 800e6e0:	e008      	b.n	800e6f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e6e2:	4b07      	ldr	r3, [pc, #28]	; (800e700 <xTimerGenericCommand+0x98>)
 800e6e4:	6818      	ldr	r0, [r3, #0]
 800e6e6:	f107 0110 	add.w	r1, r7, #16
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	683a      	ldr	r2, [r7, #0]
 800e6ee:	f7fe fcd9 	bl	800d0a4 <xQueueGenericSendFromISR>
 800e6f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3728      	adds	r7, #40	; 0x28
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}
 800e6fe:	bf00      	nop
 800e700:	20005594 	.word	0x20005594

0800e704 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b088      	sub	sp, #32
 800e708:	af02      	add	r7, sp, #8
 800e70a:	6078      	str	r0, [r7, #4]
 800e70c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e70e:	4b22      	ldr	r3, [pc, #136]	; (800e798 <prvProcessExpiredTimer+0x94>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	68db      	ldr	r3, [r3, #12]
 800e714:	68db      	ldr	r3, [r3, #12]
 800e716:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	3304      	adds	r3, #4
 800e71c:	4618      	mov	r0, r3
 800e71e:	f7fe fa95 	bl	800cc4c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e728:	f003 0304 	and.w	r3, r3, #4
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d022      	beq.n	800e776 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e730:	697b      	ldr	r3, [r7, #20]
 800e732:	699a      	ldr	r2, [r3, #24]
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	18d1      	adds	r1, r2, r3
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	683a      	ldr	r2, [r7, #0]
 800e73c:	6978      	ldr	r0, [r7, #20]
 800e73e:	f000 f8d1 	bl	800e8e4 <prvInsertTimerInActiveList>
 800e742:	4603      	mov	r3, r0
 800e744:	2b00      	cmp	r3, #0
 800e746:	d01f      	beq.n	800e788 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e748:	2300      	movs	r3, #0
 800e74a:	9300      	str	r3, [sp, #0]
 800e74c:	2300      	movs	r3, #0
 800e74e:	687a      	ldr	r2, [r7, #4]
 800e750:	2100      	movs	r1, #0
 800e752:	6978      	ldr	r0, [r7, #20]
 800e754:	f7ff ff88 	bl	800e668 <xTimerGenericCommand>
 800e758:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d113      	bne.n	800e788 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e764:	f383 8811 	msr	BASEPRI, r3
 800e768:	f3bf 8f6f 	isb	sy
 800e76c:	f3bf 8f4f 	dsb	sy
 800e770:	60fb      	str	r3, [r7, #12]
}
 800e772:	bf00      	nop
 800e774:	e7fe      	b.n	800e774 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e77c:	f023 0301 	bic.w	r3, r3, #1
 800e780:	b2da      	uxtb	r2, r3
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e788:	697b      	ldr	r3, [r7, #20]
 800e78a:	6a1b      	ldr	r3, [r3, #32]
 800e78c:	6978      	ldr	r0, [r7, #20]
 800e78e:	4798      	blx	r3
}
 800e790:	bf00      	nop
 800e792:	3718      	adds	r7, #24
 800e794:	46bd      	mov	sp, r7
 800e796:	bd80      	pop	{r7, pc}
 800e798:	2000558c 	.word	0x2000558c

0800e79c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b084      	sub	sp, #16
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e7a4:	f107 0308 	add.w	r3, r7, #8
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f000 f857 	bl	800e85c <prvGetNextExpireTime>
 800e7ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	4619      	mov	r1, r3
 800e7b4:	68f8      	ldr	r0, [r7, #12]
 800e7b6:	f000 f803 	bl	800e7c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e7ba:	f000 f8d5 	bl	800e968 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e7be:	e7f1      	b.n	800e7a4 <prvTimerTask+0x8>

0800e7c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b084      	sub	sp, #16
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
 800e7c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e7ca:	f7ff f98d 	bl	800dae8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e7ce:	f107 0308 	add.w	r3, r7, #8
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f000 f866 	bl	800e8a4 <prvSampleTimeNow>
 800e7d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d130      	bne.n	800e842 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d10a      	bne.n	800e7fc <prvProcessTimerOrBlockTask+0x3c>
 800e7e6:	687a      	ldr	r2, [r7, #4]
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	429a      	cmp	r2, r3
 800e7ec:	d806      	bhi.n	800e7fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e7ee:	f7ff f989 	bl	800db04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e7f2:	68f9      	ldr	r1, [r7, #12]
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	f7ff ff85 	bl	800e704 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e7fa:	e024      	b.n	800e846 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d008      	beq.n	800e814 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e802:	4b13      	ldr	r3, [pc, #76]	; (800e850 <prvProcessTimerOrBlockTask+0x90>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d101      	bne.n	800e810 <prvProcessTimerOrBlockTask+0x50>
 800e80c:	2301      	movs	r3, #1
 800e80e:	e000      	b.n	800e812 <prvProcessTimerOrBlockTask+0x52>
 800e810:	2300      	movs	r3, #0
 800e812:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e814:	4b0f      	ldr	r3, [pc, #60]	; (800e854 <prvProcessTimerOrBlockTask+0x94>)
 800e816:	6818      	ldr	r0, [r3, #0]
 800e818:	687a      	ldr	r2, [r7, #4]
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	1ad3      	subs	r3, r2, r3
 800e81e:	683a      	ldr	r2, [r7, #0]
 800e820:	4619      	mov	r1, r3
 800e822:	f7fe fef1 	bl	800d608 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e826:	f7ff f96d 	bl	800db04 <xTaskResumeAll>
 800e82a:	4603      	mov	r3, r0
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d10a      	bne.n	800e846 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e830:	4b09      	ldr	r3, [pc, #36]	; (800e858 <prvProcessTimerOrBlockTask+0x98>)
 800e832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e836:	601a      	str	r2, [r3, #0]
 800e838:	f3bf 8f4f 	dsb	sy
 800e83c:	f3bf 8f6f 	isb	sy
}
 800e840:	e001      	b.n	800e846 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e842:	f7ff f95f 	bl	800db04 <xTaskResumeAll>
}
 800e846:	bf00      	nop
 800e848:	3710      	adds	r7, #16
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}
 800e84e:	bf00      	nop
 800e850:	20005590 	.word	0x20005590
 800e854:	20005594 	.word	0x20005594
 800e858:	e000ed04 	.word	0xe000ed04

0800e85c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e85c:	b480      	push	{r7}
 800e85e:	b085      	sub	sp, #20
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e864:	4b0e      	ldr	r3, [pc, #56]	; (800e8a0 <prvGetNextExpireTime+0x44>)
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d101      	bne.n	800e872 <prvGetNextExpireTime+0x16>
 800e86e:	2201      	movs	r2, #1
 800e870:	e000      	b.n	800e874 <prvGetNextExpireTime+0x18>
 800e872:	2200      	movs	r2, #0
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d105      	bne.n	800e88c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e880:	4b07      	ldr	r3, [pc, #28]	; (800e8a0 <prvGetNextExpireTime+0x44>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	68db      	ldr	r3, [r3, #12]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	60fb      	str	r3, [r7, #12]
 800e88a:	e001      	b.n	800e890 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e88c:	2300      	movs	r3, #0
 800e88e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e890:	68fb      	ldr	r3, [r7, #12]
}
 800e892:	4618      	mov	r0, r3
 800e894:	3714      	adds	r7, #20
 800e896:	46bd      	mov	sp, r7
 800e898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89c:	4770      	bx	lr
 800e89e:	bf00      	nop
 800e8a0:	2000558c 	.word	0x2000558c

0800e8a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b084      	sub	sp, #16
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e8ac:	f7ff f9c8 	bl	800dc40 <xTaskGetTickCount>
 800e8b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e8b2:	4b0b      	ldr	r3, [pc, #44]	; (800e8e0 <prvSampleTimeNow+0x3c>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	68fa      	ldr	r2, [r7, #12]
 800e8b8:	429a      	cmp	r2, r3
 800e8ba:	d205      	bcs.n	800e8c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e8bc:	f000 f936 	bl	800eb2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2201      	movs	r2, #1
 800e8c4:	601a      	str	r2, [r3, #0]
 800e8c6:	e002      	b.n	800e8ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e8ce:	4a04      	ldr	r2, [pc, #16]	; (800e8e0 <prvSampleTimeNow+0x3c>)
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3710      	adds	r7, #16
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}
 800e8de:	bf00      	nop
 800e8e0:	2000559c 	.word	0x2000559c

0800e8e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b086      	sub	sp, #24
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	60f8      	str	r0, [r7, #12]
 800e8ec:	60b9      	str	r1, [r7, #8]
 800e8ee:	607a      	str	r2, [r7, #4]
 800e8f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	68ba      	ldr	r2, [r7, #8]
 800e8fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	68fa      	ldr	r2, [r7, #12]
 800e900:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e902:	68ba      	ldr	r2, [r7, #8]
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	429a      	cmp	r2, r3
 800e908:	d812      	bhi.n	800e930 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e90a:	687a      	ldr	r2, [r7, #4]
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	1ad2      	subs	r2, r2, r3
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	699b      	ldr	r3, [r3, #24]
 800e914:	429a      	cmp	r2, r3
 800e916:	d302      	bcc.n	800e91e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e918:	2301      	movs	r3, #1
 800e91a:	617b      	str	r3, [r7, #20]
 800e91c:	e01b      	b.n	800e956 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e91e:	4b10      	ldr	r3, [pc, #64]	; (800e960 <prvInsertTimerInActiveList+0x7c>)
 800e920:	681a      	ldr	r2, [r3, #0]
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	3304      	adds	r3, #4
 800e926:	4619      	mov	r1, r3
 800e928:	4610      	mov	r0, r2
 800e92a:	f7fe f956 	bl	800cbda <vListInsert>
 800e92e:	e012      	b.n	800e956 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e930:	687a      	ldr	r2, [r7, #4]
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	429a      	cmp	r2, r3
 800e936:	d206      	bcs.n	800e946 <prvInsertTimerInActiveList+0x62>
 800e938:	68ba      	ldr	r2, [r7, #8]
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	429a      	cmp	r2, r3
 800e93e:	d302      	bcc.n	800e946 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e940:	2301      	movs	r3, #1
 800e942:	617b      	str	r3, [r7, #20]
 800e944:	e007      	b.n	800e956 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e946:	4b07      	ldr	r3, [pc, #28]	; (800e964 <prvInsertTimerInActiveList+0x80>)
 800e948:	681a      	ldr	r2, [r3, #0]
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	3304      	adds	r3, #4
 800e94e:	4619      	mov	r1, r3
 800e950:	4610      	mov	r0, r2
 800e952:	f7fe f942 	bl	800cbda <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e956:	697b      	ldr	r3, [r7, #20]
}
 800e958:	4618      	mov	r0, r3
 800e95a:	3718      	adds	r7, #24
 800e95c:	46bd      	mov	sp, r7
 800e95e:	bd80      	pop	{r7, pc}
 800e960:	20005590 	.word	0x20005590
 800e964:	2000558c 	.word	0x2000558c

0800e968 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b08e      	sub	sp, #56	; 0x38
 800e96c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e96e:	e0ca      	b.n	800eb06 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	2b00      	cmp	r3, #0
 800e974:	da18      	bge.n	800e9a8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e976:	1d3b      	adds	r3, r7, #4
 800e978:	3304      	adds	r3, #4
 800e97a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d10a      	bne.n	800e998 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e986:	f383 8811 	msr	BASEPRI, r3
 800e98a:	f3bf 8f6f 	isb	sy
 800e98e:	f3bf 8f4f 	dsb	sy
 800e992:	61fb      	str	r3, [r7, #28]
}
 800e994:	bf00      	nop
 800e996:	e7fe      	b.n	800e996 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e99e:	6850      	ldr	r0, [r2, #4]
 800e9a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9a2:	6892      	ldr	r2, [r2, #8]
 800e9a4:	4611      	mov	r1, r2
 800e9a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	f2c0 80aa 	blt.w	800eb04 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9b6:	695b      	ldr	r3, [r3, #20]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d004      	beq.n	800e9c6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9be:	3304      	adds	r3, #4
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	f7fe f943 	bl	800cc4c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e9c6:	463b      	mov	r3, r7
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f7ff ff6b 	bl	800e8a4 <prvSampleTimeNow>
 800e9ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2b09      	cmp	r3, #9
 800e9d4:	f200 8097 	bhi.w	800eb06 <prvProcessReceivedCommands+0x19e>
 800e9d8:	a201      	add	r2, pc, #4	; (adr r2, 800e9e0 <prvProcessReceivedCommands+0x78>)
 800e9da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9de:	bf00      	nop
 800e9e0:	0800ea09 	.word	0x0800ea09
 800e9e4:	0800ea09 	.word	0x0800ea09
 800e9e8:	0800ea09 	.word	0x0800ea09
 800e9ec:	0800ea7d 	.word	0x0800ea7d
 800e9f0:	0800ea91 	.word	0x0800ea91
 800e9f4:	0800eadb 	.word	0x0800eadb
 800e9f8:	0800ea09 	.word	0x0800ea09
 800e9fc:	0800ea09 	.word	0x0800ea09
 800ea00:	0800ea7d 	.word	0x0800ea7d
 800ea04:	0800ea91 	.word	0x0800ea91
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ea08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea0e:	f043 0301 	orr.w	r3, r3, #1
 800ea12:	b2da      	uxtb	r2, r3
 800ea14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ea1a:	68ba      	ldr	r2, [r7, #8]
 800ea1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea1e:	699b      	ldr	r3, [r3, #24]
 800ea20:	18d1      	adds	r1, r2, r3
 800ea22:	68bb      	ldr	r3, [r7, #8]
 800ea24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea28:	f7ff ff5c 	bl	800e8e4 <prvInsertTimerInActiveList>
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d069      	beq.n	800eb06 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ea32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea34:	6a1b      	ldr	r3, [r3, #32]
 800ea36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ea3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea40:	f003 0304 	and.w	r3, r3, #4
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d05e      	beq.n	800eb06 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ea48:	68ba      	ldr	r2, [r7, #8]
 800ea4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea4c:	699b      	ldr	r3, [r3, #24]
 800ea4e:	441a      	add	r2, r3
 800ea50:	2300      	movs	r3, #0
 800ea52:	9300      	str	r3, [sp, #0]
 800ea54:	2300      	movs	r3, #0
 800ea56:	2100      	movs	r1, #0
 800ea58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea5a:	f7ff fe05 	bl	800e668 <xTimerGenericCommand>
 800ea5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ea60:	6a3b      	ldr	r3, [r7, #32]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d14f      	bne.n	800eb06 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ea66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea6a:	f383 8811 	msr	BASEPRI, r3
 800ea6e:	f3bf 8f6f 	isb	sy
 800ea72:	f3bf 8f4f 	dsb	sy
 800ea76:	61bb      	str	r3, [r7, #24]
}
 800ea78:	bf00      	nop
 800ea7a:	e7fe      	b.n	800ea7a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea82:	f023 0301 	bic.w	r3, r3, #1
 800ea86:	b2da      	uxtb	r2, r3
 800ea88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ea8e:	e03a      	b.n	800eb06 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ea90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea96:	f043 0301 	orr.w	r3, r3, #1
 800ea9a:	b2da      	uxtb	r2, r3
 800ea9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800eaa2:	68ba      	ldr	r2, [r7, #8]
 800eaa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaa6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800eaa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaaa:	699b      	ldr	r3, [r3, #24]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d10a      	bne.n	800eac6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800eab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab4:	f383 8811 	msr	BASEPRI, r3
 800eab8:	f3bf 8f6f 	isb	sy
 800eabc:	f3bf 8f4f 	dsb	sy
 800eac0:	617b      	str	r3, [r7, #20]
}
 800eac2:	bf00      	nop
 800eac4:	e7fe      	b.n	800eac4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800eac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eac8:	699a      	ldr	r2, [r3, #24]
 800eaca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eacc:	18d1      	adds	r1, r2, r3
 800eace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ead2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ead4:	f7ff ff06 	bl	800e8e4 <prvInsertTimerInActiveList>
					break;
 800ead8:	e015      	b.n	800eb06 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800eada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eadc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eae0:	f003 0302 	and.w	r3, r3, #2
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d103      	bne.n	800eaf0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800eae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eaea:	f000 fbf9 	bl	800f2e0 <vPortFree>
 800eaee:	e00a      	b.n	800eb06 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eaf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eaf6:	f023 0301 	bic.w	r3, r3, #1
 800eafa:	b2da      	uxtb	r2, r3
 800eafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eafe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800eb02:	e000      	b.n	800eb06 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800eb04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eb06:	4b08      	ldr	r3, [pc, #32]	; (800eb28 <prvProcessReceivedCommands+0x1c0>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	1d39      	adds	r1, r7, #4
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f7fe fb60 	bl	800d1d4 <xQueueReceive>
 800eb14:	4603      	mov	r3, r0
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	f47f af2a 	bne.w	800e970 <prvProcessReceivedCommands+0x8>
	}
}
 800eb1c:	bf00      	nop
 800eb1e:	bf00      	nop
 800eb20:	3730      	adds	r7, #48	; 0x30
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}
 800eb26:	bf00      	nop
 800eb28:	20005594 	.word	0x20005594

0800eb2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b088      	sub	sp, #32
 800eb30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eb32:	e048      	b.n	800ebc6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eb34:	4b2d      	ldr	r3, [pc, #180]	; (800ebec <prvSwitchTimerLists+0xc0>)
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	68db      	ldr	r3, [r3, #12]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb3e:	4b2b      	ldr	r3, [pc, #172]	; (800ebec <prvSwitchTimerLists+0xc0>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	68db      	ldr	r3, [r3, #12]
 800eb44:	68db      	ldr	r3, [r3, #12]
 800eb46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	3304      	adds	r3, #4
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f7fe f87d 	bl	800cc4c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	6a1b      	ldr	r3, [r3, #32]
 800eb56:	68f8      	ldr	r0, [r7, #12]
 800eb58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb60:	f003 0304 	and.w	r3, r3, #4
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d02e      	beq.n	800ebc6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	699b      	ldr	r3, [r3, #24]
 800eb6c:	693a      	ldr	r2, [r7, #16]
 800eb6e:	4413      	add	r3, r2
 800eb70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800eb72:	68ba      	ldr	r2, [r7, #8]
 800eb74:	693b      	ldr	r3, [r7, #16]
 800eb76:	429a      	cmp	r2, r3
 800eb78:	d90e      	bls.n	800eb98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	68ba      	ldr	r2, [r7, #8]
 800eb7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	68fa      	ldr	r2, [r7, #12]
 800eb84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eb86:	4b19      	ldr	r3, [pc, #100]	; (800ebec <prvSwitchTimerLists+0xc0>)
 800eb88:	681a      	ldr	r2, [r3, #0]
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	3304      	adds	r3, #4
 800eb8e:	4619      	mov	r1, r3
 800eb90:	4610      	mov	r0, r2
 800eb92:	f7fe f822 	bl	800cbda <vListInsert>
 800eb96:	e016      	b.n	800ebc6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eb98:	2300      	movs	r3, #0
 800eb9a:	9300      	str	r3, [sp, #0]
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	693a      	ldr	r2, [r7, #16]
 800eba0:	2100      	movs	r1, #0
 800eba2:	68f8      	ldr	r0, [r7, #12]
 800eba4:	f7ff fd60 	bl	800e668 <xTimerGenericCommand>
 800eba8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d10a      	bne.n	800ebc6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ebb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb4:	f383 8811 	msr	BASEPRI, r3
 800ebb8:	f3bf 8f6f 	isb	sy
 800ebbc:	f3bf 8f4f 	dsb	sy
 800ebc0:	603b      	str	r3, [r7, #0]
}
 800ebc2:	bf00      	nop
 800ebc4:	e7fe      	b.n	800ebc4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ebc6:	4b09      	ldr	r3, [pc, #36]	; (800ebec <prvSwitchTimerLists+0xc0>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d1b1      	bne.n	800eb34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ebd0:	4b06      	ldr	r3, [pc, #24]	; (800ebec <prvSwitchTimerLists+0xc0>)
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ebd6:	4b06      	ldr	r3, [pc, #24]	; (800ebf0 <prvSwitchTimerLists+0xc4>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	4a04      	ldr	r2, [pc, #16]	; (800ebec <prvSwitchTimerLists+0xc0>)
 800ebdc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ebde:	4a04      	ldr	r2, [pc, #16]	; (800ebf0 <prvSwitchTimerLists+0xc4>)
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	6013      	str	r3, [r2, #0]
}
 800ebe4:	bf00      	nop
 800ebe6:	3718      	adds	r7, #24
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bd80      	pop	{r7, pc}
 800ebec:	2000558c 	.word	0x2000558c
 800ebf0:	20005590 	.word	0x20005590

0800ebf4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b082      	sub	sp, #8
 800ebf8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ebfa:	f000 f98b 	bl	800ef14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ebfe:	4b15      	ldr	r3, [pc, #84]	; (800ec54 <prvCheckForValidListAndQueue+0x60>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d120      	bne.n	800ec48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ec06:	4814      	ldr	r0, [pc, #80]	; (800ec58 <prvCheckForValidListAndQueue+0x64>)
 800ec08:	f7fd ff96 	bl	800cb38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ec0c:	4813      	ldr	r0, [pc, #76]	; (800ec5c <prvCheckForValidListAndQueue+0x68>)
 800ec0e:	f7fd ff93 	bl	800cb38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ec12:	4b13      	ldr	r3, [pc, #76]	; (800ec60 <prvCheckForValidListAndQueue+0x6c>)
 800ec14:	4a10      	ldr	r2, [pc, #64]	; (800ec58 <prvCheckForValidListAndQueue+0x64>)
 800ec16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ec18:	4b12      	ldr	r3, [pc, #72]	; (800ec64 <prvCheckForValidListAndQueue+0x70>)
 800ec1a:	4a10      	ldr	r2, [pc, #64]	; (800ec5c <prvCheckForValidListAndQueue+0x68>)
 800ec1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ec1e:	2300      	movs	r3, #0
 800ec20:	9300      	str	r3, [sp, #0]
 800ec22:	4b11      	ldr	r3, [pc, #68]	; (800ec68 <prvCheckForValidListAndQueue+0x74>)
 800ec24:	4a11      	ldr	r2, [pc, #68]	; (800ec6c <prvCheckForValidListAndQueue+0x78>)
 800ec26:	2110      	movs	r1, #16
 800ec28:	200a      	movs	r0, #10
 800ec2a:	f7fe f8a1 	bl	800cd70 <xQueueGenericCreateStatic>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	4a08      	ldr	r2, [pc, #32]	; (800ec54 <prvCheckForValidListAndQueue+0x60>)
 800ec32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ec34:	4b07      	ldr	r3, [pc, #28]	; (800ec54 <prvCheckForValidListAndQueue+0x60>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d005      	beq.n	800ec48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ec3c:	4b05      	ldr	r3, [pc, #20]	; (800ec54 <prvCheckForValidListAndQueue+0x60>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	490b      	ldr	r1, [pc, #44]	; (800ec70 <prvCheckForValidListAndQueue+0x7c>)
 800ec42:	4618      	mov	r0, r3
 800ec44:	f7fe fcb6 	bl	800d5b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ec48:	f000 f994 	bl	800ef74 <vPortExitCritical>
}
 800ec4c:	bf00      	nop
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}
 800ec52:	bf00      	nop
 800ec54:	20005594 	.word	0x20005594
 800ec58:	20005564 	.word	0x20005564
 800ec5c:	20005578 	.word	0x20005578
 800ec60:	2000558c 	.word	0x2000558c
 800ec64:	20005590 	.word	0x20005590
 800ec68:	20005640 	.word	0x20005640
 800ec6c:	200055a0 	.word	0x200055a0
 800ec70:	0801cc94 	.word	0x0801cc94

0800ec74 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b08a      	sub	sp, #40	; 0x28
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	60f8      	str	r0, [r7, #12]
 800ec7c:	60b9      	str	r1, [r7, #8]
 800ec7e:	607a      	str	r2, [r7, #4]
 800ec80:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800ec82:	f06f 0301 	mvn.w	r3, #1
 800ec86:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ec94:	4b06      	ldr	r3, [pc, #24]	; (800ecb0 <xTimerPendFunctionCallFromISR+0x3c>)
 800ec96:	6818      	ldr	r0, [r3, #0]
 800ec98:	f107 0114 	add.w	r1, r7, #20
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	683a      	ldr	r2, [r7, #0]
 800eca0:	f7fe fa00 	bl	800d0a4 <xQueueGenericSendFromISR>
 800eca4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800eca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800eca8:	4618      	mov	r0, r3
 800ecaa:	3728      	adds	r7, #40	; 0x28
 800ecac:	46bd      	mov	sp, r7
 800ecae:	bd80      	pop	{r7, pc}
 800ecb0:	20005594 	.word	0x20005594

0800ecb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b085      	sub	sp, #20
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	60f8      	str	r0, [r7, #12]
 800ecbc:	60b9      	str	r1, [r7, #8]
 800ecbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	3b04      	subs	r3, #4
 800ecc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800eccc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	3b04      	subs	r3, #4
 800ecd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	f023 0201 	bic.w	r2, r3, #1
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	3b04      	subs	r3, #4
 800ece2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ece4:	4a0c      	ldr	r2, [pc, #48]	; (800ed18 <pxPortInitialiseStack+0x64>)
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	3b14      	subs	r3, #20
 800ecee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ecf0:	687a      	ldr	r2, [r7, #4]
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	3b04      	subs	r3, #4
 800ecfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	f06f 0202 	mvn.w	r2, #2
 800ed02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	3b20      	subs	r3, #32
 800ed08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	3714      	adds	r7, #20
 800ed10:	46bd      	mov	sp, r7
 800ed12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed16:	4770      	bx	lr
 800ed18:	0800ed1d 	.word	0x0800ed1d

0800ed1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ed1c:	b480      	push	{r7}
 800ed1e:	b085      	sub	sp, #20
 800ed20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ed22:	2300      	movs	r3, #0
 800ed24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ed26:	4b12      	ldr	r3, [pc, #72]	; (800ed70 <prvTaskExitError+0x54>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed2e:	d00a      	beq.n	800ed46 <prvTaskExitError+0x2a>
	__asm volatile
 800ed30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed34:	f383 8811 	msr	BASEPRI, r3
 800ed38:	f3bf 8f6f 	isb	sy
 800ed3c:	f3bf 8f4f 	dsb	sy
 800ed40:	60fb      	str	r3, [r7, #12]
}
 800ed42:	bf00      	nop
 800ed44:	e7fe      	b.n	800ed44 <prvTaskExitError+0x28>
	__asm volatile
 800ed46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed4a:	f383 8811 	msr	BASEPRI, r3
 800ed4e:	f3bf 8f6f 	isb	sy
 800ed52:	f3bf 8f4f 	dsb	sy
 800ed56:	60bb      	str	r3, [r7, #8]
}
 800ed58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ed5a:	bf00      	nop
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d0fc      	beq.n	800ed5c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ed62:	bf00      	nop
 800ed64:	bf00      	nop
 800ed66:	3714      	adds	r7, #20
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6e:	4770      	bx	lr
 800ed70:	200013c4 	.word	0x200013c4
	...

0800ed80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ed80:	4b07      	ldr	r3, [pc, #28]	; (800eda0 <pxCurrentTCBConst2>)
 800ed82:	6819      	ldr	r1, [r3, #0]
 800ed84:	6808      	ldr	r0, [r1, #0]
 800ed86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed8a:	f380 8809 	msr	PSP, r0
 800ed8e:	f3bf 8f6f 	isb	sy
 800ed92:	f04f 0000 	mov.w	r0, #0
 800ed96:	f380 8811 	msr	BASEPRI, r0
 800ed9a:	4770      	bx	lr
 800ed9c:	f3af 8000 	nop.w

0800eda0 <pxCurrentTCBConst2>:
 800eda0:	20005064 	.word	0x20005064
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800eda4:	bf00      	nop
 800eda6:	bf00      	nop

0800eda8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800eda8:	4808      	ldr	r0, [pc, #32]	; (800edcc <prvPortStartFirstTask+0x24>)
 800edaa:	6800      	ldr	r0, [r0, #0]
 800edac:	6800      	ldr	r0, [r0, #0]
 800edae:	f380 8808 	msr	MSP, r0
 800edb2:	f04f 0000 	mov.w	r0, #0
 800edb6:	f380 8814 	msr	CONTROL, r0
 800edba:	b662      	cpsie	i
 800edbc:	b661      	cpsie	f
 800edbe:	f3bf 8f4f 	dsb	sy
 800edc2:	f3bf 8f6f 	isb	sy
 800edc6:	df00      	svc	0
 800edc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800edca:	bf00      	nop
 800edcc:	e000ed08 	.word	0xe000ed08

0800edd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b086      	sub	sp, #24
 800edd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800edd6:	4b46      	ldr	r3, [pc, #280]	; (800eef0 <xPortStartScheduler+0x120>)
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	4a46      	ldr	r2, [pc, #280]	; (800eef4 <xPortStartScheduler+0x124>)
 800eddc:	4293      	cmp	r3, r2
 800edde:	d10a      	bne.n	800edf6 <xPortStartScheduler+0x26>
	__asm volatile
 800ede0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ede4:	f383 8811 	msr	BASEPRI, r3
 800ede8:	f3bf 8f6f 	isb	sy
 800edec:	f3bf 8f4f 	dsb	sy
 800edf0:	613b      	str	r3, [r7, #16]
}
 800edf2:	bf00      	nop
 800edf4:	e7fe      	b.n	800edf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800edf6:	4b3e      	ldr	r3, [pc, #248]	; (800eef0 <xPortStartScheduler+0x120>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	4a3f      	ldr	r2, [pc, #252]	; (800eef8 <xPortStartScheduler+0x128>)
 800edfc:	4293      	cmp	r3, r2
 800edfe:	d10a      	bne.n	800ee16 <xPortStartScheduler+0x46>
	__asm volatile
 800ee00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee04:	f383 8811 	msr	BASEPRI, r3
 800ee08:	f3bf 8f6f 	isb	sy
 800ee0c:	f3bf 8f4f 	dsb	sy
 800ee10:	60fb      	str	r3, [r7, #12]
}
 800ee12:	bf00      	nop
 800ee14:	e7fe      	b.n	800ee14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ee16:	4b39      	ldr	r3, [pc, #228]	; (800eefc <xPortStartScheduler+0x12c>)
 800ee18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ee1a:	697b      	ldr	r3, [r7, #20]
 800ee1c:	781b      	ldrb	r3, [r3, #0]
 800ee1e:	b2db      	uxtb	r3, r3
 800ee20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ee22:	697b      	ldr	r3, [r7, #20]
 800ee24:	22ff      	movs	r2, #255	; 0xff
 800ee26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	b2db      	uxtb	r3, r3
 800ee2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ee30:	78fb      	ldrb	r3, [r7, #3]
 800ee32:	b2db      	uxtb	r3, r3
 800ee34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ee38:	b2da      	uxtb	r2, r3
 800ee3a:	4b31      	ldr	r3, [pc, #196]	; (800ef00 <xPortStartScheduler+0x130>)
 800ee3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ee3e:	4b31      	ldr	r3, [pc, #196]	; (800ef04 <xPortStartScheduler+0x134>)
 800ee40:	2207      	movs	r2, #7
 800ee42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ee44:	e009      	b.n	800ee5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ee46:	4b2f      	ldr	r3, [pc, #188]	; (800ef04 <xPortStartScheduler+0x134>)
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	3b01      	subs	r3, #1
 800ee4c:	4a2d      	ldr	r2, [pc, #180]	; (800ef04 <xPortStartScheduler+0x134>)
 800ee4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ee50:	78fb      	ldrb	r3, [r7, #3]
 800ee52:	b2db      	uxtb	r3, r3
 800ee54:	005b      	lsls	r3, r3, #1
 800ee56:	b2db      	uxtb	r3, r3
 800ee58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ee5a:	78fb      	ldrb	r3, [r7, #3]
 800ee5c:	b2db      	uxtb	r3, r3
 800ee5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee62:	2b80      	cmp	r3, #128	; 0x80
 800ee64:	d0ef      	beq.n	800ee46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ee66:	4b27      	ldr	r3, [pc, #156]	; (800ef04 <xPortStartScheduler+0x134>)
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	f1c3 0307 	rsb	r3, r3, #7
 800ee6e:	2b04      	cmp	r3, #4
 800ee70:	d00a      	beq.n	800ee88 <xPortStartScheduler+0xb8>
	__asm volatile
 800ee72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee76:	f383 8811 	msr	BASEPRI, r3
 800ee7a:	f3bf 8f6f 	isb	sy
 800ee7e:	f3bf 8f4f 	dsb	sy
 800ee82:	60bb      	str	r3, [r7, #8]
}
 800ee84:	bf00      	nop
 800ee86:	e7fe      	b.n	800ee86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ee88:	4b1e      	ldr	r3, [pc, #120]	; (800ef04 <xPortStartScheduler+0x134>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	021b      	lsls	r3, r3, #8
 800ee8e:	4a1d      	ldr	r2, [pc, #116]	; (800ef04 <xPortStartScheduler+0x134>)
 800ee90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ee92:	4b1c      	ldr	r3, [pc, #112]	; (800ef04 <xPortStartScheduler+0x134>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ee9a:	4a1a      	ldr	r2, [pc, #104]	; (800ef04 <xPortStartScheduler+0x134>)
 800ee9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	b2da      	uxtb	r2, r3
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800eea6:	4b18      	ldr	r3, [pc, #96]	; (800ef08 <xPortStartScheduler+0x138>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	4a17      	ldr	r2, [pc, #92]	; (800ef08 <xPortStartScheduler+0x138>)
 800eeac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800eeb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800eeb2:	4b15      	ldr	r3, [pc, #84]	; (800ef08 <xPortStartScheduler+0x138>)
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	4a14      	ldr	r2, [pc, #80]	; (800ef08 <xPortStartScheduler+0x138>)
 800eeb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800eebc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800eebe:	f000 f8dd 	bl	800f07c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800eec2:	4b12      	ldr	r3, [pc, #72]	; (800ef0c <xPortStartScheduler+0x13c>)
 800eec4:	2200      	movs	r2, #0
 800eec6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800eec8:	f000 f8fc 	bl	800f0c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800eecc:	4b10      	ldr	r3, [pc, #64]	; (800ef10 <xPortStartScheduler+0x140>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	4a0f      	ldr	r2, [pc, #60]	; (800ef10 <xPortStartScheduler+0x140>)
 800eed2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800eed6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800eed8:	f7ff ff66 	bl	800eda8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800eedc:	f7fe ff7a 	bl	800ddd4 <vTaskSwitchContext>
	prvTaskExitError();
 800eee0:	f7ff ff1c 	bl	800ed1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800eee4:	2300      	movs	r3, #0
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	3718      	adds	r7, #24
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}
 800eeee:	bf00      	nop
 800eef0:	e000ed00 	.word	0xe000ed00
 800eef4:	410fc271 	.word	0x410fc271
 800eef8:	410fc270 	.word	0x410fc270
 800eefc:	e000e400 	.word	0xe000e400
 800ef00:	20005690 	.word	0x20005690
 800ef04:	20005694 	.word	0x20005694
 800ef08:	e000ed20 	.word	0xe000ed20
 800ef0c:	200013c4 	.word	0x200013c4
 800ef10:	e000ef34 	.word	0xe000ef34

0800ef14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ef14:	b480      	push	{r7}
 800ef16:	b083      	sub	sp, #12
 800ef18:	af00      	add	r7, sp, #0
	__asm volatile
 800ef1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef1e:	f383 8811 	msr	BASEPRI, r3
 800ef22:	f3bf 8f6f 	isb	sy
 800ef26:	f3bf 8f4f 	dsb	sy
 800ef2a:	607b      	str	r3, [r7, #4]
}
 800ef2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ef2e:	4b0f      	ldr	r3, [pc, #60]	; (800ef6c <vPortEnterCritical+0x58>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	3301      	adds	r3, #1
 800ef34:	4a0d      	ldr	r2, [pc, #52]	; (800ef6c <vPortEnterCritical+0x58>)
 800ef36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ef38:	4b0c      	ldr	r3, [pc, #48]	; (800ef6c <vPortEnterCritical+0x58>)
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	2b01      	cmp	r3, #1
 800ef3e:	d10f      	bne.n	800ef60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ef40:	4b0b      	ldr	r3, [pc, #44]	; (800ef70 <vPortEnterCritical+0x5c>)
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	b2db      	uxtb	r3, r3
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d00a      	beq.n	800ef60 <vPortEnterCritical+0x4c>
	__asm volatile
 800ef4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef4e:	f383 8811 	msr	BASEPRI, r3
 800ef52:	f3bf 8f6f 	isb	sy
 800ef56:	f3bf 8f4f 	dsb	sy
 800ef5a:	603b      	str	r3, [r7, #0]
}
 800ef5c:	bf00      	nop
 800ef5e:	e7fe      	b.n	800ef5e <vPortEnterCritical+0x4a>
	}
}
 800ef60:	bf00      	nop
 800ef62:	370c      	adds	r7, #12
 800ef64:	46bd      	mov	sp, r7
 800ef66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6a:	4770      	bx	lr
 800ef6c:	200013c4 	.word	0x200013c4
 800ef70:	e000ed04 	.word	0xe000ed04

0800ef74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ef74:	b480      	push	{r7}
 800ef76:	b083      	sub	sp, #12
 800ef78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ef7a:	4b12      	ldr	r3, [pc, #72]	; (800efc4 <vPortExitCritical+0x50>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d10a      	bne.n	800ef98 <vPortExitCritical+0x24>
	__asm volatile
 800ef82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef86:	f383 8811 	msr	BASEPRI, r3
 800ef8a:	f3bf 8f6f 	isb	sy
 800ef8e:	f3bf 8f4f 	dsb	sy
 800ef92:	607b      	str	r3, [r7, #4]
}
 800ef94:	bf00      	nop
 800ef96:	e7fe      	b.n	800ef96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ef98:	4b0a      	ldr	r3, [pc, #40]	; (800efc4 <vPortExitCritical+0x50>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	3b01      	subs	r3, #1
 800ef9e:	4a09      	ldr	r2, [pc, #36]	; (800efc4 <vPortExitCritical+0x50>)
 800efa0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800efa2:	4b08      	ldr	r3, [pc, #32]	; (800efc4 <vPortExitCritical+0x50>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d105      	bne.n	800efb6 <vPortExitCritical+0x42>
 800efaa:	2300      	movs	r3, #0
 800efac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	f383 8811 	msr	BASEPRI, r3
}
 800efb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800efb6:	bf00      	nop
 800efb8:	370c      	adds	r7, #12
 800efba:	46bd      	mov	sp, r7
 800efbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc0:	4770      	bx	lr
 800efc2:	bf00      	nop
 800efc4:	200013c4 	.word	0x200013c4
	...

0800efd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800efd0:	f3ef 8009 	mrs	r0, PSP
 800efd4:	f3bf 8f6f 	isb	sy
 800efd8:	4b15      	ldr	r3, [pc, #84]	; (800f030 <pxCurrentTCBConst>)
 800efda:	681a      	ldr	r2, [r3, #0]
 800efdc:	f01e 0f10 	tst.w	lr, #16
 800efe0:	bf08      	it	eq
 800efe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800efe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efea:	6010      	str	r0, [r2, #0]
 800efec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800eff0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800eff4:	f380 8811 	msr	BASEPRI, r0
 800eff8:	f3bf 8f4f 	dsb	sy
 800effc:	f3bf 8f6f 	isb	sy
 800f000:	f7fe fee8 	bl	800ddd4 <vTaskSwitchContext>
 800f004:	f04f 0000 	mov.w	r0, #0
 800f008:	f380 8811 	msr	BASEPRI, r0
 800f00c:	bc09      	pop	{r0, r3}
 800f00e:	6819      	ldr	r1, [r3, #0]
 800f010:	6808      	ldr	r0, [r1, #0]
 800f012:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f016:	f01e 0f10 	tst.w	lr, #16
 800f01a:	bf08      	it	eq
 800f01c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f020:	f380 8809 	msr	PSP, r0
 800f024:	f3bf 8f6f 	isb	sy
 800f028:	4770      	bx	lr
 800f02a:	bf00      	nop
 800f02c:	f3af 8000 	nop.w

0800f030 <pxCurrentTCBConst>:
 800f030:	20005064 	.word	0x20005064
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f034:	bf00      	nop
 800f036:	bf00      	nop

0800f038 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b082      	sub	sp, #8
 800f03c:	af00      	add	r7, sp, #0
	__asm volatile
 800f03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f042:	f383 8811 	msr	BASEPRI, r3
 800f046:	f3bf 8f6f 	isb	sy
 800f04a:	f3bf 8f4f 	dsb	sy
 800f04e:	607b      	str	r3, [r7, #4]
}
 800f050:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f052:	f7fe fe05 	bl	800dc60 <xTaskIncrementTick>
 800f056:	4603      	mov	r3, r0
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d003      	beq.n	800f064 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f05c:	4b06      	ldr	r3, [pc, #24]	; (800f078 <SysTick_Handler+0x40>)
 800f05e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f062:	601a      	str	r2, [r3, #0]
 800f064:	2300      	movs	r3, #0
 800f066:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f068:	683b      	ldr	r3, [r7, #0]
 800f06a:	f383 8811 	msr	BASEPRI, r3
}
 800f06e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f070:	bf00      	nop
 800f072:	3708      	adds	r7, #8
 800f074:	46bd      	mov	sp, r7
 800f076:	bd80      	pop	{r7, pc}
 800f078:	e000ed04 	.word	0xe000ed04

0800f07c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f07c:	b480      	push	{r7}
 800f07e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f080:	4b0b      	ldr	r3, [pc, #44]	; (800f0b0 <vPortSetupTimerInterrupt+0x34>)
 800f082:	2200      	movs	r2, #0
 800f084:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f086:	4b0b      	ldr	r3, [pc, #44]	; (800f0b4 <vPortSetupTimerInterrupt+0x38>)
 800f088:	2200      	movs	r2, #0
 800f08a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f08c:	4b0a      	ldr	r3, [pc, #40]	; (800f0b8 <vPortSetupTimerInterrupt+0x3c>)
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	4a0a      	ldr	r2, [pc, #40]	; (800f0bc <vPortSetupTimerInterrupt+0x40>)
 800f092:	fba2 2303 	umull	r2, r3, r2, r3
 800f096:	099b      	lsrs	r3, r3, #6
 800f098:	4a09      	ldr	r2, [pc, #36]	; (800f0c0 <vPortSetupTimerInterrupt+0x44>)
 800f09a:	3b01      	subs	r3, #1
 800f09c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f09e:	4b04      	ldr	r3, [pc, #16]	; (800f0b0 <vPortSetupTimerInterrupt+0x34>)
 800f0a0:	2207      	movs	r2, #7
 800f0a2:	601a      	str	r2, [r3, #0]
}
 800f0a4:	bf00      	nop
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ac:	4770      	bx	lr
 800f0ae:	bf00      	nop
 800f0b0:	e000e010 	.word	0xe000e010
 800f0b4:	e000e018 	.word	0xe000e018
 800f0b8:	20001228 	.word	0x20001228
 800f0bc:	10624dd3 	.word	0x10624dd3
 800f0c0:	e000e014 	.word	0xe000e014

0800f0c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f0c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f0d4 <vPortEnableVFP+0x10>
 800f0c8:	6801      	ldr	r1, [r0, #0]
 800f0ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f0ce:	6001      	str	r1, [r0, #0]
 800f0d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f0d2:	bf00      	nop
 800f0d4:	e000ed88 	.word	0xe000ed88

0800f0d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f0d8:	b480      	push	{r7}
 800f0da:	b085      	sub	sp, #20
 800f0dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f0de:	f3ef 8305 	mrs	r3, IPSR
 800f0e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	2b0f      	cmp	r3, #15
 800f0e8:	d914      	bls.n	800f114 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f0ea:	4a17      	ldr	r2, [pc, #92]	; (800f148 <vPortValidateInterruptPriority+0x70>)
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	4413      	add	r3, r2
 800f0f0:	781b      	ldrb	r3, [r3, #0]
 800f0f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f0f4:	4b15      	ldr	r3, [pc, #84]	; (800f14c <vPortValidateInterruptPriority+0x74>)
 800f0f6:	781b      	ldrb	r3, [r3, #0]
 800f0f8:	7afa      	ldrb	r2, [r7, #11]
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	d20a      	bcs.n	800f114 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f102:	f383 8811 	msr	BASEPRI, r3
 800f106:	f3bf 8f6f 	isb	sy
 800f10a:	f3bf 8f4f 	dsb	sy
 800f10e:	607b      	str	r3, [r7, #4]
}
 800f110:	bf00      	nop
 800f112:	e7fe      	b.n	800f112 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f114:	4b0e      	ldr	r3, [pc, #56]	; (800f150 <vPortValidateInterruptPriority+0x78>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f11c:	4b0d      	ldr	r3, [pc, #52]	; (800f154 <vPortValidateInterruptPriority+0x7c>)
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	429a      	cmp	r2, r3
 800f122:	d90a      	bls.n	800f13a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f128:	f383 8811 	msr	BASEPRI, r3
 800f12c:	f3bf 8f6f 	isb	sy
 800f130:	f3bf 8f4f 	dsb	sy
 800f134:	603b      	str	r3, [r7, #0]
}
 800f136:	bf00      	nop
 800f138:	e7fe      	b.n	800f138 <vPortValidateInterruptPriority+0x60>
	}
 800f13a:	bf00      	nop
 800f13c:	3714      	adds	r7, #20
 800f13e:	46bd      	mov	sp, r7
 800f140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f144:	4770      	bx	lr
 800f146:	bf00      	nop
 800f148:	e000e3f0 	.word	0xe000e3f0
 800f14c:	20005690 	.word	0x20005690
 800f150:	e000ed0c 	.word	0xe000ed0c
 800f154:	20005694 	.word	0x20005694

0800f158 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b08a      	sub	sp, #40	; 0x28
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f160:	2300      	movs	r3, #0
 800f162:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f164:	f7fe fcc0 	bl	800dae8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f168:	4b58      	ldr	r3, [pc, #352]	; (800f2cc <pvPortMalloc+0x174>)
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d101      	bne.n	800f174 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f170:	f000 f910 	bl	800f394 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f174:	4b56      	ldr	r3, [pc, #344]	; (800f2d0 <pvPortMalloc+0x178>)
 800f176:	681a      	ldr	r2, [r3, #0]
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	4013      	ands	r3, r2
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	f040 808e 	bne.w	800f29e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d01d      	beq.n	800f1c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f188:	2208      	movs	r2, #8
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	4413      	add	r3, r2
 800f18e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	f003 0307 	and.w	r3, r3, #7
 800f196:	2b00      	cmp	r3, #0
 800f198:	d014      	beq.n	800f1c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	f023 0307 	bic.w	r3, r3, #7
 800f1a0:	3308      	adds	r3, #8
 800f1a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	f003 0307 	and.w	r3, r3, #7
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d00a      	beq.n	800f1c4 <pvPortMalloc+0x6c>
	__asm volatile
 800f1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1b2:	f383 8811 	msr	BASEPRI, r3
 800f1b6:	f3bf 8f6f 	isb	sy
 800f1ba:	f3bf 8f4f 	dsb	sy
 800f1be:	617b      	str	r3, [r7, #20]
}
 800f1c0:	bf00      	nop
 800f1c2:	e7fe      	b.n	800f1c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d069      	beq.n	800f29e <pvPortMalloc+0x146>
 800f1ca:	4b42      	ldr	r3, [pc, #264]	; (800f2d4 <pvPortMalloc+0x17c>)
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	687a      	ldr	r2, [r7, #4]
 800f1d0:	429a      	cmp	r2, r3
 800f1d2:	d864      	bhi.n	800f29e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f1d4:	4b40      	ldr	r3, [pc, #256]	; (800f2d8 <pvPortMalloc+0x180>)
 800f1d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f1d8:	4b3f      	ldr	r3, [pc, #252]	; (800f2d8 <pvPortMalloc+0x180>)
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f1de:	e004      	b.n	800f1ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ec:	685b      	ldr	r3, [r3, #4]
 800f1ee:	687a      	ldr	r2, [r7, #4]
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	d903      	bls.n	800f1fc <pvPortMalloc+0xa4>
 800f1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d1f1      	bne.n	800f1e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f1fc:	4b33      	ldr	r3, [pc, #204]	; (800f2cc <pvPortMalloc+0x174>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f202:	429a      	cmp	r2, r3
 800f204:	d04b      	beq.n	800f29e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f206:	6a3b      	ldr	r3, [r7, #32]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	2208      	movs	r2, #8
 800f20c:	4413      	add	r3, r2
 800f20e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f212:	681a      	ldr	r2, [r3, #0]
 800f214:	6a3b      	ldr	r3, [r7, #32]
 800f216:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f21a:	685a      	ldr	r2, [r3, #4]
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	1ad2      	subs	r2, r2, r3
 800f220:	2308      	movs	r3, #8
 800f222:	005b      	lsls	r3, r3, #1
 800f224:	429a      	cmp	r2, r3
 800f226:	d91f      	bls.n	800f268 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	4413      	add	r3, r2
 800f22e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f230:	69bb      	ldr	r3, [r7, #24]
 800f232:	f003 0307 	and.w	r3, r3, #7
 800f236:	2b00      	cmp	r3, #0
 800f238:	d00a      	beq.n	800f250 <pvPortMalloc+0xf8>
	__asm volatile
 800f23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f23e:	f383 8811 	msr	BASEPRI, r3
 800f242:	f3bf 8f6f 	isb	sy
 800f246:	f3bf 8f4f 	dsb	sy
 800f24a:	613b      	str	r3, [r7, #16]
}
 800f24c:	bf00      	nop
 800f24e:	e7fe      	b.n	800f24e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f252:	685a      	ldr	r2, [r3, #4]
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	1ad2      	subs	r2, r2, r3
 800f258:	69bb      	ldr	r3, [r7, #24]
 800f25a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f25e:	687a      	ldr	r2, [r7, #4]
 800f260:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f262:	69b8      	ldr	r0, [r7, #24]
 800f264:	f000 f8f8 	bl	800f458 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f268:	4b1a      	ldr	r3, [pc, #104]	; (800f2d4 <pvPortMalloc+0x17c>)
 800f26a:	681a      	ldr	r2, [r3, #0]
 800f26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f26e:	685b      	ldr	r3, [r3, #4]
 800f270:	1ad3      	subs	r3, r2, r3
 800f272:	4a18      	ldr	r2, [pc, #96]	; (800f2d4 <pvPortMalloc+0x17c>)
 800f274:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f276:	4b17      	ldr	r3, [pc, #92]	; (800f2d4 <pvPortMalloc+0x17c>)
 800f278:	681a      	ldr	r2, [r3, #0]
 800f27a:	4b18      	ldr	r3, [pc, #96]	; (800f2dc <pvPortMalloc+0x184>)
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	429a      	cmp	r2, r3
 800f280:	d203      	bcs.n	800f28a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f282:	4b14      	ldr	r3, [pc, #80]	; (800f2d4 <pvPortMalloc+0x17c>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	4a15      	ldr	r2, [pc, #84]	; (800f2dc <pvPortMalloc+0x184>)
 800f288:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f28c:	685a      	ldr	r2, [r3, #4]
 800f28e:	4b10      	ldr	r3, [pc, #64]	; (800f2d0 <pvPortMalloc+0x178>)
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	431a      	orrs	r2, r3
 800f294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f296:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f29a:	2200      	movs	r2, #0
 800f29c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f29e:	f7fe fc31 	bl	800db04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f2a2:	69fb      	ldr	r3, [r7, #28]
 800f2a4:	f003 0307 	and.w	r3, r3, #7
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d00a      	beq.n	800f2c2 <pvPortMalloc+0x16a>
	__asm volatile
 800f2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2b0:	f383 8811 	msr	BASEPRI, r3
 800f2b4:	f3bf 8f6f 	isb	sy
 800f2b8:	f3bf 8f4f 	dsb	sy
 800f2bc:	60fb      	str	r3, [r7, #12]
}
 800f2be:	bf00      	nop
 800f2c0:	e7fe      	b.n	800f2c0 <pvPortMalloc+0x168>
	return pvReturn;
 800f2c2:	69fb      	ldr	r3, [r7, #28]
}
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	3728      	adds	r7, #40	; 0x28
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}
 800f2cc:	200092a0 	.word	0x200092a0
 800f2d0:	200092ac 	.word	0x200092ac
 800f2d4:	200092a4 	.word	0x200092a4
 800f2d8:	20009298 	.word	0x20009298
 800f2dc:	200092a8 	.word	0x200092a8

0800f2e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b086      	sub	sp, #24
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d048      	beq.n	800f384 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f2f2:	2308      	movs	r3, #8
 800f2f4:	425b      	negs	r3, r3
 800f2f6:	697a      	ldr	r2, [r7, #20]
 800f2f8:	4413      	add	r3, r2
 800f2fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f300:	693b      	ldr	r3, [r7, #16]
 800f302:	685a      	ldr	r2, [r3, #4]
 800f304:	4b21      	ldr	r3, [pc, #132]	; (800f38c <vPortFree+0xac>)
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	4013      	ands	r3, r2
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d10a      	bne.n	800f324 <vPortFree+0x44>
	__asm volatile
 800f30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f312:	f383 8811 	msr	BASEPRI, r3
 800f316:	f3bf 8f6f 	isb	sy
 800f31a:	f3bf 8f4f 	dsb	sy
 800f31e:	60fb      	str	r3, [r7, #12]
}
 800f320:	bf00      	nop
 800f322:	e7fe      	b.n	800f322 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f324:	693b      	ldr	r3, [r7, #16]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d00a      	beq.n	800f342 <vPortFree+0x62>
	__asm volatile
 800f32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f330:	f383 8811 	msr	BASEPRI, r3
 800f334:	f3bf 8f6f 	isb	sy
 800f338:	f3bf 8f4f 	dsb	sy
 800f33c:	60bb      	str	r3, [r7, #8]
}
 800f33e:	bf00      	nop
 800f340:	e7fe      	b.n	800f340 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f342:	693b      	ldr	r3, [r7, #16]
 800f344:	685a      	ldr	r2, [r3, #4]
 800f346:	4b11      	ldr	r3, [pc, #68]	; (800f38c <vPortFree+0xac>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	4013      	ands	r3, r2
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d019      	beq.n	800f384 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f350:	693b      	ldr	r3, [r7, #16]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d115      	bne.n	800f384 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f358:	693b      	ldr	r3, [r7, #16]
 800f35a:	685a      	ldr	r2, [r3, #4]
 800f35c:	4b0b      	ldr	r3, [pc, #44]	; (800f38c <vPortFree+0xac>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	43db      	mvns	r3, r3
 800f362:	401a      	ands	r2, r3
 800f364:	693b      	ldr	r3, [r7, #16]
 800f366:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f368:	f7fe fbbe 	bl	800dae8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f36c:	693b      	ldr	r3, [r7, #16]
 800f36e:	685a      	ldr	r2, [r3, #4]
 800f370:	4b07      	ldr	r3, [pc, #28]	; (800f390 <vPortFree+0xb0>)
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	4413      	add	r3, r2
 800f376:	4a06      	ldr	r2, [pc, #24]	; (800f390 <vPortFree+0xb0>)
 800f378:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f37a:	6938      	ldr	r0, [r7, #16]
 800f37c:	f000 f86c 	bl	800f458 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f380:	f7fe fbc0 	bl	800db04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f384:	bf00      	nop
 800f386:	3718      	adds	r7, #24
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd80      	pop	{r7, pc}
 800f38c:	200092ac 	.word	0x200092ac
 800f390:	200092a4 	.word	0x200092a4

0800f394 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f394:	b480      	push	{r7}
 800f396:	b085      	sub	sp, #20
 800f398:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f39a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f39e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f3a0:	4b27      	ldr	r3, [pc, #156]	; (800f440 <prvHeapInit+0xac>)
 800f3a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	f003 0307 	and.w	r3, r3, #7
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d00c      	beq.n	800f3c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	3307      	adds	r3, #7
 800f3b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	f023 0307 	bic.w	r3, r3, #7
 800f3ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f3bc:	68ba      	ldr	r2, [r7, #8]
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	1ad3      	subs	r3, r2, r3
 800f3c2:	4a1f      	ldr	r2, [pc, #124]	; (800f440 <prvHeapInit+0xac>)
 800f3c4:	4413      	add	r3, r2
 800f3c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f3cc:	4a1d      	ldr	r2, [pc, #116]	; (800f444 <prvHeapInit+0xb0>)
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f3d2:	4b1c      	ldr	r3, [pc, #112]	; (800f444 <prvHeapInit+0xb0>)
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	68ba      	ldr	r2, [r7, #8]
 800f3dc:	4413      	add	r3, r2
 800f3de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f3e0:	2208      	movs	r2, #8
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	1a9b      	subs	r3, r3, r2
 800f3e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	f023 0307 	bic.w	r3, r3, #7
 800f3ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	4a15      	ldr	r2, [pc, #84]	; (800f448 <prvHeapInit+0xb4>)
 800f3f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f3f6:	4b14      	ldr	r3, [pc, #80]	; (800f448 <prvHeapInit+0xb4>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f3fe:	4b12      	ldr	r3, [pc, #72]	; (800f448 <prvHeapInit+0xb4>)
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	2200      	movs	r2, #0
 800f404:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	68fa      	ldr	r2, [r7, #12]
 800f40e:	1ad2      	subs	r2, r2, r3
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f414:	4b0c      	ldr	r3, [pc, #48]	; (800f448 <prvHeapInit+0xb4>)
 800f416:	681a      	ldr	r2, [r3, #0]
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	685b      	ldr	r3, [r3, #4]
 800f420:	4a0a      	ldr	r2, [pc, #40]	; (800f44c <prvHeapInit+0xb8>)
 800f422:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	685b      	ldr	r3, [r3, #4]
 800f428:	4a09      	ldr	r2, [pc, #36]	; (800f450 <prvHeapInit+0xbc>)
 800f42a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f42c:	4b09      	ldr	r3, [pc, #36]	; (800f454 <prvHeapInit+0xc0>)
 800f42e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f432:	601a      	str	r2, [r3, #0]
}
 800f434:	bf00      	nop
 800f436:	3714      	adds	r7, #20
 800f438:	46bd      	mov	sp, r7
 800f43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43e:	4770      	bx	lr
 800f440:	20005698 	.word	0x20005698
 800f444:	20009298 	.word	0x20009298
 800f448:	200092a0 	.word	0x200092a0
 800f44c:	200092a8 	.word	0x200092a8
 800f450:	200092a4 	.word	0x200092a4
 800f454:	200092ac 	.word	0x200092ac

0800f458 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f458:	b480      	push	{r7}
 800f45a:	b085      	sub	sp, #20
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f460:	4b28      	ldr	r3, [pc, #160]	; (800f504 <prvInsertBlockIntoFreeList+0xac>)
 800f462:	60fb      	str	r3, [r7, #12]
 800f464:	e002      	b.n	800f46c <prvInsertBlockIntoFreeList+0x14>
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	60fb      	str	r3, [r7, #12]
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	687a      	ldr	r2, [r7, #4]
 800f472:	429a      	cmp	r2, r3
 800f474:	d8f7      	bhi.n	800f466 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	685b      	ldr	r3, [r3, #4]
 800f47e:	68ba      	ldr	r2, [r7, #8]
 800f480:	4413      	add	r3, r2
 800f482:	687a      	ldr	r2, [r7, #4]
 800f484:	429a      	cmp	r2, r3
 800f486:	d108      	bne.n	800f49a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	685a      	ldr	r2, [r3, #4]
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	685b      	ldr	r3, [r3, #4]
 800f490:	441a      	add	r2, r3
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	685b      	ldr	r3, [r3, #4]
 800f4a2:	68ba      	ldr	r2, [r7, #8]
 800f4a4:	441a      	add	r2, r3
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	429a      	cmp	r2, r3
 800f4ac:	d118      	bne.n	800f4e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	681a      	ldr	r2, [r3, #0]
 800f4b2:	4b15      	ldr	r3, [pc, #84]	; (800f508 <prvInsertBlockIntoFreeList+0xb0>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	429a      	cmp	r2, r3
 800f4b8:	d00d      	beq.n	800f4d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	685a      	ldr	r2, [r3, #4]
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	685b      	ldr	r3, [r3, #4]
 800f4c4:	441a      	add	r2, r3
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	681a      	ldr	r2, [r3, #0]
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	601a      	str	r2, [r3, #0]
 800f4d4:	e008      	b.n	800f4e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f4d6:	4b0c      	ldr	r3, [pc, #48]	; (800f508 <prvInsertBlockIntoFreeList+0xb0>)
 800f4d8:	681a      	ldr	r2, [r3, #0]
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	601a      	str	r2, [r3, #0]
 800f4de:	e003      	b.n	800f4e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	681a      	ldr	r2, [r3, #0]
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f4e8:	68fa      	ldr	r2, [r7, #12]
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	429a      	cmp	r2, r3
 800f4ee:	d002      	beq.n	800f4f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	687a      	ldr	r2, [r7, #4]
 800f4f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f4f6:	bf00      	nop
 800f4f8:	3714      	adds	r7, #20
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f500:	4770      	bx	lr
 800f502:	bf00      	nop
 800f504:	20009298 	.word	0x20009298
 800f508:	200092a0 	.word	0x200092a0

0800f50c <compass_init>:
static MMC_Output_t data_out;



void compass_init(void)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b082      	sub	sp, #8
 800f510:	af00      	add	r7, sp, #0
	float_t freq = SAMPLE_FREQ;
 800f512:	4b2b      	ldr	r3, [pc, #172]	; (800f5c0 <compass_init+0xb4>)
 800f514:	603b      	str	r3, [r7, #0]

	MEC_state_t orientation = MEC_ENABLE;
 800f516:	2301      	movs	r3, #1
 800f518:	71fb      	strb	r3, [r7, #7]
	MEC_state_t virtGyro = MEC_DISABLE;
 800f51a:	2300      	movs	r3, #0
 800f51c:	71bb      	strb	r3, [r7, #6]
	MEC_state_t gravity = MEC_DISABLE;
 800f51e:	2300      	movs	r3, #0
 800f520:	717b      	strb	r3, [r7, #5]
	MEC_state_t linearAcc = MEC_ENABLE;
 800f522:	2301      	movs	r3, #1
 800f524:	713b      	strb	r3, [r7, #4]


	/* E-Compass API initialization function */
	MotionEC_Initialize(&freq);
 800f526:	463b      	mov	r3, r7
 800f528:	4618      	mov	r0, r3
 800f52a:	f000 fdb9 	bl	80100a0 <MotionEC_Initialize>
	MotionGC_Initialize(&freq);
 800f52e:	463b      	mov	r3, r7
 800f530:	4618      	mov	r0, r3
 800f532:	f001 fb5b 	bl	8010bec <MotionGC_Initialize>
	MotionAC_Initialize(1);
 800f536:	2001      	movs	r0, #1
 800f538:	f001 fa62 	bl	8010a00 <MotionAC_Initialize>

	MotionMC_Initialize(100,1);
 800f53c:	2101      	movs	r1, #1
 800f53e:	2064      	movs	r0, #100	; 0x64
 800f540:	f006 fdd2 	bl	80160e8 <MotionMC_Initialize>
	MotionFX_initialize();
 800f544:	f007 fc44 	bl	8016dd0 <MotionFX_initialize>
	/* Optional: Get version */
	MotionEC_GetLibVersion(lib_version_ec);
 800f548:	481e      	ldr	r0, [pc, #120]	; (800f5c4 <compass_init+0xb8>)
 800f54a:	f001 fa35 	bl	80109b8 <MotionEC_GetLibVersion>
	MotionAC_GetLibVersion(lib_version_ac);
 800f54e:	481e      	ldr	r0, [pc, #120]	; (800f5c8 <compass_init+0xbc>)
 800f550:	f001 fb28 	bl	8010ba4 <MotionAC_GetLibVersion>
	MotionGC_GetLibVersion(lib_version_gc);
 800f554:	481d      	ldr	r0, [pc, #116]	; (800f5cc <compass_init+0xc0>)
 800f556:	f001 fbd7 	bl	8010d08 <MotionGC_GetLibVersion>
	MotionMC_GetLibVersion(lib_version_mc);
 800f55a:	481d      	ldr	r0, [pc, #116]	; (800f5d0 <compass_init+0xc4>)
 800f55c:	f007 f852 	bl	8016604 <MotionMC_GetLibVersion>
	MotionFX_GetLibVersion(lib_version_fx);
 800f560:	481c      	ldr	r0, [pc, #112]	; (800f5d4 <compass_init+0xc8>)
 800f562:	f007 fe97 	bl	8017294 <MotionFX_GetLibVersion>

	printf("\n\r%s",lib_version_ec);
 800f566:	4917      	ldr	r1, [pc, #92]	; (800f5c4 <compass_init+0xb8>)
 800f568:	481b      	ldr	r0, [pc, #108]	; (800f5d8 <compass_init+0xcc>)
 800f56a:	f008 fb63 	bl	8017c34 <iprintf>
	printf("\n\r%s",lib_version_ac);
 800f56e:	4916      	ldr	r1, [pc, #88]	; (800f5c8 <compass_init+0xbc>)
 800f570:	4819      	ldr	r0, [pc, #100]	; (800f5d8 <compass_init+0xcc>)
 800f572:	f008 fb5f 	bl	8017c34 <iprintf>
	printf("\n\r%s",lib_version_gc);
 800f576:	4915      	ldr	r1, [pc, #84]	; (800f5cc <compass_init+0xc0>)
 800f578:	4817      	ldr	r0, [pc, #92]	; (800f5d8 <compass_init+0xcc>)
 800f57a:	f008 fb5b 	bl	8017c34 <iprintf>
	printf("\n\r%s",lib_version_mc);
 800f57e:	4914      	ldr	r1, [pc, #80]	; (800f5d0 <compass_init+0xc4>)
 800f580:	4815      	ldr	r0, [pc, #84]	; (800f5d8 <compass_init+0xcc>)
 800f582:	f008 fb57 	bl	8017c34 <iprintf>
	printf("\n\r%s",lib_version_fx);
 800f586:	4913      	ldr	r1, [pc, #76]	; (800f5d4 <compass_init+0xc8>)
 800f588:	4813      	ldr	r0, [pc, #76]	; (800f5d8 <compass_init+0xcc>)
 800f58a:	f008 fb53 	bl	8017c34 <iprintf>

	MotionEC_SetOrientationEnable(orientation);
 800f58e:	79fb      	ldrb	r3, [r7, #7]
 800f590:	4618      	mov	r0, r3
 800f592:	f001 f9d9 	bl	8010948 <MotionEC_SetOrientationEnable>
	MotionEC_SetVirtualGyroEnable(virtGyro);
 800f596:	79bb      	ldrb	r3, [r7, #6]
 800f598:	4618      	mov	r0, r3
 800f59a:	f001 f9e5 	bl	8010968 <MotionEC_SetVirtualGyroEnable>
	MotionEC_SetGravityEnable(gravity);
 800f59e:	797b      	ldrb	r3, [r7, #5]
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	f001 f9f1 	bl	8010988 <MotionEC_SetGravityEnable>
	MotionEC_SetLinearAccEnable(linearAcc);
 800f5a6:	793b      	ldrb	r3, [r7, #4]
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f001 f9fd 	bl	80109a8 <MotionEC_SetLinearAccEnable>

	data_out.CalQuality = MMC_CALQSTATUSGOOD;
 800f5ae:	4b0b      	ldr	r3, [pc, #44]	; (800f5dc <compass_init+0xd0>)
 800f5b0:	2203      	movs	r2, #3
 800f5b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

}
 800f5b6:	bf00      	nop
 800f5b8:	3708      	adds	r7, #8
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}
 800f5be:	bf00      	nop
 800f5c0:	41200000 	.word	0x41200000
 800f5c4:	200092b0 	.word	0x200092b0
 800f5c8:	200092d4 	.word	0x200092d4
 800f5cc:	2000931c 	.word	0x2000931c
 800f5d0:	20009340 	.word	0x20009340
 800f5d4:	200092f8 	.word	0x200092f8
 800f5d8:	0801cc9c 	.word	0x0801cc9c
 800f5dc:	20009364 	.word	0x20009364

0800f5e0 <setEcParameter>:

static void setEcParameter(POS_MOTION_SENSOR_Axes_t *acc, POS_MOTION_SENSOR_Axes_t *mag, MEC_input_t *in, float timeS)
{
 800f5e0:	b480      	push	{r7}
 800f5e2:	b085      	sub	sp, #20
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	60f8      	str	r0, [r7, #12]
 800f5e8:	60b9      	str	r1, [r7, #8]
 800f5ea:	607a      	str	r2, [r7, #4]
 800f5ec:	ed87 0a00 	vstr	s0, [r7]
	in->acc[0] = (float)((float)acc->x) / 1000;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	ee07 3a90 	vmov	s15, r3
 800f5f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f5fc:	eddf 6a28 	vldr	s13, [pc, #160]	; 800f6a0 <setEcParameter+0xc0>
 800f600:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	edc3 7a00 	vstr	s15, [r3]
	in->acc[1] = (float)acc->y / 1000;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	685b      	ldr	r3, [r3, #4]
 800f60e:	ee07 3a90 	vmov	s15, r3
 800f612:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f616:	eddf 6a22 	vldr	s13, [pc, #136]	; 800f6a0 <setEcParameter+0xc0>
 800f61a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	edc3 7a01 	vstr	s15, [r3, #4]
	in->acc[2] = (float)acc->z / 1000;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	689b      	ldr	r3, [r3, #8]
 800f628:	ee07 3a90 	vmov	s15, r3
 800f62c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f630:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800f6a0 <setEcParameter+0xc0>
 800f634:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	edc3 7a02 	vstr	s15, [r3, #8]

	in->mag[0] = (float)mag->x / 50;
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	ee07 3a90 	vmov	s15, r3
 800f646:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f64a:	eddf 6a16 	vldr	s13, [pc, #88]	; 800f6a4 <setEcParameter+0xc4>
 800f64e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	edc3 7a03 	vstr	s15, [r3, #12]
	in->mag[1] = (float)mag->y / 50;
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	685b      	ldr	r3, [r3, #4]
 800f65c:	ee07 3a90 	vmov	s15, r3
 800f660:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f664:	eddf 6a0f 	vldr	s13, [pc, #60]	; 800f6a4 <setEcParameter+0xc4>
 800f668:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	edc3 7a04 	vstr	s15, [r3, #16]
	in->mag[2] = (float)mag->z / 50;
 800f672:	68bb      	ldr	r3, [r7, #8]
 800f674:	689b      	ldr	r3, [r3, #8]
 800f676:	ee07 3a90 	vmov	s15, r3
 800f67a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f67e:	eddf 6a09 	vldr	s13, [pc, #36]	; 800f6a4 <setEcParameter+0xc4>
 800f682:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	edc3 7a05 	vstr	s15, [r3, #20]

	in->deltatime_s = timeS;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	683a      	ldr	r2, [r7, #0]
 800f690:	619a      	str	r2, [r3, #24]
}
 800f692:	bf00      	nop
 800f694:	3714      	adds	r7, #20
 800f696:	46bd      	mov	sp, r7
 800f698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69c:	4770      	bx	lr
 800f69e:	bf00      	nop
 800f6a0:	447a0000 	.word	0x447a0000
 800f6a4:	42480000 	.word	0x42480000

0800f6a8 <sensorCompensation>:

//	POS_MOTION_SENSOR_GetAxes(MAG_LIS2MDL, &MagAxes);


static void sensorCompensation(POS_MOTION_SENSORS no,POS_MOTION_SENSOR_Axes_t *ax)
{
 800f6a8:	b4b0      	push	{r4, r5, r7}
 800f6aa:	b09f      	sub	sp, #124	; 0x7c
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	6039      	str	r1, [r7, #0]
 800f6b2:	71fb      	strb	r3, [r7, #7]
	const POS_MOTION_SENSOR_Axes_t max[POS_MOTION_SENSORS_MAX] = {
 800f6b4:	4b3c      	ldr	r3, [pc, #240]	; (800f7a8 <sensorCompensation+0x100>)
 800f6b6:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800f6ba:	461d      	mov	r5, r3
 800f6bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f6be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f6c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f6c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f6c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f6c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{992	,995	,1018},	//ACC_LSM6DSO = 0,
	{0	,0	,0},	//GYR_LSM6DSO,
	{0	,0	,0},	//MAG_LIS2MDL,
	{1008	,942	,1012}	//ACC_LIS2DW12,
	};
	const POS_MOTION_SENSOR_Axes_t min[POS_MOTION_SENSORS_MAX] = {
 800f6cc:	4b37      	ldr	r3, [pc, #220]	; (800f7ac <sensorCompensation+0x104>)
 800f6ce:	f107 0418 	add.w	r4, r7, #24
 800f6d2:	461d      	mov	r5, r3
 800f6d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f6d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f6d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f6da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f6dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f6e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{0	,0	,0},	//MAG_LIS2MDL,
	{-1005	,-1042	,-995}	//ACC_LIS2DW12,
	};
	POS_MOTION_SENSOR_Axes_t offset;

	offset.x = (max[no].x + min[no].x) / 2;
 800f6e4:	79fa      	ldrb	r2, [r7, #7]
 800f6e6:	4613      	mov	r3, r2
 800f6e8:	005b      	lsls	r3, r3, #1
 800f6ea:	4413      	add	r3, r2
 800f6ec:	009b      	lsls	r3, r3, #2
 800f6ee:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800f6f2:	4413      	add	r3, r2
 800f6f4:	3b30      	subs	r3, #48	; 0x30
 800f6f6:	6819      	ldr	r1, [r3, #0]
 800f6f8:	79fa      	ldrb	r2, [r7, #7]
 800f6fa:	4613      	mov	r3, r2
 800f6fc:	005b      	lsls	r3, r3, #1
 800f6fe:	4413      	add	r3, r2
 800f700:	009b      	lsls	r3, r3, #2
 800f702:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800f706:	4413      	add	r3, r2
 800f708:	3b60      	subs	r3, #96	; 0x60
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	440b      	add	r3, r1
 800f70e:	0fda      	lsrs	r2, r3, #31
 800f710:	4413      	add	r3, r2
 800f712:	105b      	asrs	r3, r3, #1
 800f714:	60fb      	str	r3, [r7, #12]
	offset.y = (max[no].y + min[no].y) / 2;
 800f716:	79fa      	ldrb	r2, [r7, #7]
 800f718:	4613      	mov	r3, r2
 800f71a:	005b      	lsls	r3, r3, #1
 800f71c:	4413      	add	r3, r2
 800f71e:	009b      	lsls	r3, r3, #2
 800f720:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800f724:	4413      	add	r3, r2
 800f726:	3b2c      	subs	r3, #44	; 0x2c
 800f728:	6819      	ldr	r1, [r3, #0]
 800f72a:	79fa      	ldrb	r2, [r7, #7]
 800f72c:	4613      	mov	r3, r2
 800f72e:	005b      	lsls	r3, r3, #1
 800f730:	4413      	add	r3, r2
 800f732:	009b      	lsls	r3, r3, #2
 800f734:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800f738:	4413      	add	r3, r2
 800f73a:	3b5c      	subs	r3, #92	; 0x5c
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	440b      	add	r3, r1
 800f740:	0fda      	lsrs	r2, r3, #31
 800f742:	4413      	add	r3, r2
 800f744:	105b      	asrs	r3, r3, #1
 800f746:	613b      	str	r3, [r7, #16]
	offset.z = (max[no].z + min[no].z) / 2;
 800f748:	79fa      	ldrb	r2, [r7, #7]
 800f74a:	4613      	mov	r3, r2
 800f74c:	005b      	lsls	r3, r3, #1
 800f74e:	4413      	add	r3, r2
 800f750:	009b      	lsls	r3, r3, #2
 800f752:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800f756:	4413      	add	r3, r2
 800f758:	3b28      	subs	r3, #40	; 0x28
 800f75a:	6819      	ldr	r1, [r3, #0]
 800f75c:	79fa      	ldrb	r2, [r7, #7]
 800f75e:	4613      	mov	r3, r2
 800f760:	005b      	lsls	r3, r3, #1
 800f762:	4413      	add	r3, r2
 800f764:	009b      	lsls	r3, r3, #2
 800f766:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800f76a:	4413      	add	r3, r2
 800f76c:	3b58      	subs	r3, #88	; 0x58
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	440b      	add	r3, r1
 800f772:	0fda      	lsrs	r2, r3, #31
 800f774:	4413      	add	r3, r2
 800f776:	105b      	asrs	r3, r3, #1
 800f778:	617b      	str	r3, [r7, #20]
	ax->x -= offset.x;
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	681a      	ldr	r2, [r3, #0]
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	1ad2      	subs	r2, r2, r3
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	601a      	str	r2, [r3, #0]
	ax->y -= offset.y;
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	685a      	ldr	r2, [r3, #4]
 800f78a:	693b      	ldr	r3, [r7, #16]
 800f78c:	1ad2      	subs	r2, r2, r3
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	605a      	str	r2, [r3, #4]
	ax->z -= offset.z;
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	689a      	ldr	r2, [r3, #8]
 800f796:	697b      	ldr	r3, [r7, #20]
 800f798:	1ad2      	subs	r2, r2, r3
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	609a      	str	r2, [r3, #8]
}
 800f79e:	bf00      	nop
 800f7a0:	377c      	adds	r7, #124	; 0x7c
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bcb0      	pop	{r4, r5, r7}
 800f7a6:	4770      	bx	lr
 800f7a8:	0801cca4 	.word	0x0801cca4
 800f7ac:	0801ccd4 	.word	0x0801ccd4

0800f7b0 <GetCalibratedMagAxses>:

static int32_t GetCalibratedMagAxses(POS_MOTION_SENSORS sensor, POS_MOTION_SENSOR_Axes_t *Axes, int timeMs)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b08c      	sub	sp, #48	; 0x30
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	60b9      	str	r1, [r7, #8]
 800f7ba:	607a      	str	r2, [r7, #4]
 800f7bc:	73fb      	strb	r3, [r7, #15]
	float mag_cal_x, mag_cal_y, mag_cal_z;

	static int32_t test = 0;

	/* Get magnetic field X/Y/Z in [uT] */
	ret = POS_MOTION_SENSOR_GetAxes(sensor, Axes);
 800f7be:	7bfb      	ldrb	r3, [r7, #15]
 800f7c0:	68b9      	ldr	r1, [r7, #8]
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f000 fa48 	bl	800fc58 <POS_MOTION_SENSOR_GetAxes>
 800f7c8:	62f8      	str	r0, [r7, #44]	; 0x2c

	//MEMS_Read_MagValue(&data_in.Mag[0], &data_in.Mag[1], &data_in.Mag[2]);
	data_in.Mag[0] = Axes->x;
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	ee07 3a90 	vmov	s15, r3
 800f7d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f7d6:	edc7 7a04 	vstr	s15, [r7, #16]
	data_in.Mag[1] = Axes->y;
 800f7da:	68bb      	ldr	r3, [r7, #8]
 800f7dc:	685b      	ldr	r3, [r3, #4]
 800f7de:	ee07 3a90 	vmov	s15, r3
 800f7e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f7e6:	edc7 7a05 	vstr	s15, [r7, #20]
	data_in.Mag[2] = Axes->z;
 800f7ea:	68bb      	ldr	r3, [r7, #8]
 800f7ec:	689b      	ldr	r3, [r3, #8]
 800f7ee:	ee07 3a90 	vmov	s15, r3
 800f7f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f7f6:	edc7 7a06 	vstr	s15, [r7, #24]
	/* Get current sample time in [ms] */
	data_in.TimeStamp = timeMs;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	61fb      	str	r3, [r7, #28]
	/* Magnetometer calibration algorithm update */
	MotionMC_Update(&data_in);
 800f7fe:	f107 0310 	add.w	r3, r7, #16
 800f802:	4618      	mov	r0, r3
 800f804:	f006 fdba 	bl	801637c <MotionMC_Update>
	/* Get the magnetometer calibration coefficients */
	MotionMC_GetCalParams(&data_out);
 800f808:	484d      	ldr	r0, [pc, #308]	; (800f940 <GetCalibratedMagAxses+0x190>)
 800f80a:	f006 fea9 	bl	8016560 <MotionMC_GetCalParams>
	/* Apply calibration coefficients */
	mag_cal_x = (int)((data_in.Mag[0] - data_out.HI_Bias[0]) * data_out.SF_Matrix[0][0]
 800f80e:	ed97 7a04 	vldr	s14, [r7, #16]
 800f812:	4b4b      	ldr	r3, [pc, #300]	; (800f940 <GetCalibratedMagAxses+0x190>)
 800f814:	edd3 7a00 	vldr	s15, [r3]
 800f818:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f81c:	4b48      	ldr	r3, [pc, #288]	; (800f940 <GetCalibratedMagAxses+0x190>)
 800f81e:	edd3 7a03 	vldr	s15, [r3, #12]
 800f822:	ee27 7a27 	vmul.f32	s14, s14, s15
	 + (data_in.Mag[1] - data_out.HI_Bias[1]) * data_out.SF_Matrix[0][1]
 800f826:	edd7 6a05 	vldr	s13, [r7, #20]
 800f82a:	4b45      	ldr	r3, [pc, #276]	; (800f940 <GetCalibratedMagAxses+0x190>)
 800f82c:	edd3 7a01 	vldr	s15, [r3, #4]
 800f830:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f834:	4b42      	ldr	r3, [pc, #264]	; (800f940 <GetCalibratedMagAxses+0x190>)
 800f836:	edd3 7a04 	vldr	s15, [r3, #16]
 800f83a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f83e:	ee37 7a27 	vadd.f32	s14, s14, s15
	 + (data_in.Mag[2] - data_out.HI_Bias[2]) * data_out.SF_Matrix[0][2]);
 800f842:	edd7 6a06 	vldr	s13, [r7, #24]
 800f846:	4b3e      	ldr	r3, [pc, #248]	; (800f940 <GetCalibratedMagAxses+0x190>)
 800f848:	edd3 7a02 	vldr	s15, [r3, #8]
 800f84c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f850:	4b3b      	ldr	r3, [pc, #236]	; (800f940 <GetCalibratedMagAxses+0x190>)
 800f852:	edd3 7a05 	vldr	s15, [r3, #20]
 800f856:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f85a:	ee77 7a27 	vadd.f32	s15, s14, s15
	mag_cal_x = (int)((data_in.Mag[0] - data_out.HI_Bias[0]) * data_out.SF_Matrix[0][0]
 800f85e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f866:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	mag_cal_y = (int)((data_in.Mag[0] - data_out.HI_Bias[0]) * data_out.SF_Matrix[1][0]
 800f86a:	ed97 7a04 	vldr	s14, [r7, #16]
 800f86e:	4b34      	ldr	r3, [pc, #208]	; (800f940 <GetCalibratedMagAxses+0x190>)
 800f870:	edd3 7a00 	vldr	s15, [r3]
 800f874:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f878:	4b31      	ldr	r3, [pc, #196]	; (800f940 <GetCalibratedMagAxses+0x190>)
 800f87a:	edd3 7a06 	vldr	s15, [r3, #24]
 800f87e:	ee27 7a27 	vmul.f32	s14, s14, s15
	 + (data_in.Mag[1] - data_out.HI_Bias[1]) * data_out.SF_Matrix[1][1]
 800f882:	edd7 6a05 	vldr	s13, [r7, #20]
 800f886:	4b2e      	ldr	r3, [pc, #184]	; (800f940 <GetCalibratedMagAxses+0x190>)
 800f888:	edd3 7a01 	vldr	s15, [r3, #4]
 800f88c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f890:	4b2b      	ldr	r3, [pc, #172]	; (800f940 <GetCalibratedMagAxses+0x190>)
 800f892:	edd3 7a07 	vldr	s15, [r3, #28]
 800f896:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f89a:	ee37 7a27 	vadd.f32	s14, s14, s15
	 + (data_in.Mag[2] - data_out.HI_Bias[2]) * data_out.SF_Matrix[1][2]);
 800f89e:	edd7 6a06 	vldr	s13, [r7, #24]
 800f8a2:	4b27      	ldr	r3, [pc, #156]	; (800f940 <GetCalibratedMagAxses+0x190>)
 800f8a4:	edd3 7a02 	vldr	s15, [r3, #8]
 800f8a8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f8ac:	4b24      	ldr	r3, [pc, #144]	; (800f940 <GetCalibratedMagAxses+0x190>)
 800f8ae:	edd3 7a08 	vldr	s15, [r3, #32]
 800f8b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f8b6:	ee77 7a27 	vadd.f32	s15, s14, s15
	mag_cal_y = (int)((data_in.Mag[0] - data_out.HI_Bias[0]) * data_out.SF_Matrix[1][0]
 800f8ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f8be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f8c2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	mag_cal_z = (int)((data_in.Mag[0] - data_out.HI_Bias[0]) * data_out.SF_Matrix[2][0]
 800f8c6:	ed97 7a04 	vldr	s14, [r7, #16]
 800f8ca:	4b1d      	ldr	r3, [pc, #116]	; (800f940 <GetCalibratedMagAxses+0x190>)
 800f8cc:	edd3 7a00 	vldr	s15, [r3]
 800f8d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f8d4:	4b1a      	ldr	r3, [pc, #104]	; (800f940 <GetCalibratedMagAxses+0x190>)
 800f8d6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800f8da:	ee27 7a27 	vmul.f32	s14, s14, s15
	 + (data_in.Mag[1] - data_out.HI_Bias[1]) * data_out.SF_Matrix[2][1]
 800f8de:	edd7 6a05 	vldr	s13, [r7, #20]
 800f8e2:	4b17      	ldr	r3, [pc, #92]	; (800f940 <GetCalibratedMagAxses+0x190>)
 800f8e4:	edd3 7a01 	vldr	s15, [r3, #4]
 800f8e8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f8ec:	4b14      	ldr	r3, [pc, #80]	; (800f940 <GetCalibratedMagAxses+0x190>)
 800f8ee:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800f8f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f8f6:	ee37 7a27 	vadd.f32	s14, s14, s15
	 + (data_in.Mag[2] - data_out.HI_Bias[2]) * data_out.SF_Matrix[2][2]);
 800f8fa:	edd7 6a06 	vldr	s13, [r7, #24]
 800f8fe:	4b10      	ldr	r3, [pc, #64]	; (800f940 <GetCalibratedMagAxses+0x190>)
 800f900:	edd3 7a02 	vldr	s15, [r3, #8]
 800f904:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f908:	4b0d      	ldr	r3, [pc, #52]	; (800f940 <GetCalibratedMagAxses+0x190>)
 800f90a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800f90e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f912:	ee77 7a27 	vadd.f32	s15, s14, s15
	mag_cal_z = (int)((data_in.Mag[0] - data_out.HI_Bias[0]) * data_out.SF_Matrix[2][0]
 800f916:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f91a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f91e:	edc7 7a08 	vstr	s15, [r7, #32]

	if (MMC_CALQSTATUSUNKNOWN != data_out.CalQuality)
 800f922:	4b07      	ldr	r3, [pc, #28]	; (800f940 <GetCalibratedMagAxses+0x190>)
 800f924:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d004      	beq.n	800f936 <GetCalibratedMagAxses+0x186>
	{
		test++;
 800f92c:	4b05      	ldr	r3, [pc, #20]	; (800f944 <GetCalibratedMagAxses+0x194>)
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	3301      	adds	r3, #1
 800f932:	4a04      	ldr	r2, [pc, #16]	; (800f944 <GetCalibratedMagAxses+0x194>)
 800f934:	6013      	str	r3, [r2, #0]
	}
}
 800f936:	bf00      	nop
 800f938:	4618      	mov	r0, r3
 800f93a:	3730      	adds	r7, #48	; 0x30
 800f93c:	46bd      	mov	sp, r7
 800f93e:	bd80      	pop	{r7, pc}
 800f940:	20009364 	.word	0x20009364
 800f944:	20009398 	.word	0x20009398

0800f948 <GetCompassData>:

void GetCompassData()
{
 800f948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f94c:	b0d3      	sub	sp, #332	; 0x14c
 800f94e:	af06      	add	r7, sp, #24
	MEC_input_t in;
	MEC_output_t out;

	char printOut[150];

	MEC_state_t orientation = MEC_ENABLE;
 800f950:	2301      	movs	r3, #1
 800f952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	MEC_state_t virtGyro = MEC_DISABLE;
 800f956:	2300      	movs	r3, #0
 800f958:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	MEC_state_t gravity = MEC_DISABLE;
 800f95c:	2300      	movs	r3, #0
 800f95e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	MEC_state_t linearAcc = MEC_ENABLE;
 800f962:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f966:	2201      	movs	r2, #1
 800f968:	701a      	strb	r2, [r3, #0]
	POS_MOTION_SENSOR_Axes_t AccAxesLsm6dso;
	POS_MOTION_SENSOR_Axes_t GyrAxesLsm6dso;
	POS_MOTION_SENSOR_Axes_t MagAxes;
	POS_MOTION_SENSOR_Axes_t AccAxesLis2dw12;

	GetCalibratedMagAxses(MAG_LIS2MDL, &MagAxes, 100);
 800f96a:	f107 030c 	add.w	r3, r7, #12
 800f96e:	2264      	movs	r2, #100	; 0x64
 800f970:	4619      	mov	r1, r3
 800f972:	2002      	movs	r0, #2
 800f974:	f7ff ff1c 	bl	800f7b0 <GetCalibratedMagAxses>

//	POS_MOTION_SENSOR_GetAxes(MAG_LIS2MDL, &MagAxes);
	POS_MOTION_SENSOR_GetAxes(ACC_LSM6DSO, &AccAxesLsm6dso);
 800f978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f97c:	4619      	mov	r1, r3
 800f97e:	2000      	movs	r0, #0
 800f980:	f000 f96a 	bl	800fc58 <POS_MOTION_SENSOR_GetAxes>
	POS_MOTION_SENSOR_GetAxes(GYR_LSM6DSO, &GyrAxesLsm6dso);
 800f984:	f107 0318 	add.w	r3, r7, #24
 800f988:	4619      	mov	r1, r3
 800f98a:	2001      	movs	r0, #1
 800f98c:	f000 f964 	bl	800fc58 <POS_MOTION_SENSOR_GetAxes>
	POS_MOTION_SENSOR_GetAxes(ACC_LIS2DW12, &AccAxesLis2dw12);
 800f990:	463b      	mov	r3, r7
 800f992:	4619      	mov	r1, r3
 800f994:	2003      	movs	r0, #3
 800f996:	f000 f95f 	bl	800fc58 <POS_MOTION_SENSOR_GetAxes>

	// LIS2DW12 like LSM6DSO
	int32_t h = AccAxesLis2dw12.x;
 800f99a:	463b      	mov	r3, r7
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	AccAxesLis2dw12.x = -AccAxesLis2dw12.y;
 800f9a2:	463b      	mov	r3, r7
 800f9a4:	685b      	ldr	r3, [r3, #4]
 800f9a6:	425a      	negs	r2, r3
 800f9a8:	463b      	mov	r3, r7
 800f9aa:	601a      	str	r2, [r3, #0]
	AccAxesLis2dw12.y = h;
 800f9ac:	463b      	mov	r3, r7
 800f9ae:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800f9b2:	605a      	str	r2, [r3, #4]


	sensorCompensation(ACC_LSM6DSO, &AccAxesLsm6dso);
 800f9b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f9b8:	4619      	mov	r1, r3
 800f9ba:	2000      	movs	r0, #0
 800f9bc:	f7ff fe74 	bl	800f6a8 <sensorCompensation>
	sensorCompensation(ACC_LSM6DSO, &AccAxesLis2dw12);
 800f9c0:	463b      	mov	r3, r7
 800f9c2:	4619      	mov	r1, r3
 800f9c4:	2000      	movs	r0, #0
 800f9c6:	f7ff fe6f 	bl	800f6a8 <sensorCompensation>

	setEcParameter(&AccAxesLsm6dso, &MagAxes, &in, 0.1);
 800f9ca:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800f9ce:	f107 010c 	add.w	r1, r7, #12
 800f9d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f9d6:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800fb70 <GetCompassData+0x228>
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f7ff fe00 	bl	800f5e0 <setEcParameter>
	MotionEC_Run(&in, &out);
 800f9e0:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800f9e4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800f9e8:	4611      	mov	r1, r2
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f000 fbe6 	bl	80101bc <MotionEC_Run>

	MotionEC_GetOrientationEnable(&orientation);
 800f9f0:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f000 ff9f 	bl	8010938 <MotionEC_GetOrientationEnable>
	MotionEC_GetVirtualGyroEnable(&virtGyro);
 800f9fa:	f107 0332 	add.w	r3, r7, #50	; 0x32
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f000 ffaa 	bl	8010958 <MotionEC_GetVirtualGyroEnable>
	MotionEC_GetGravityEnable(&gravity);
 800fa04:	f107 0331 	add.w	r3, r7, #49	; 0x31
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f000 ffb5 	bl	8010978 <MotionEC_GetGravityEnable>
	MotionEC_GetLinearAccEnable(&linearAcc);
 800fa0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fa12:	4618      	mov	r0, r3
 800fa14:	f000 ffc0 	bl	8010998 <MotionEC_GetLinearAccEnable>

	printOut[0] = 0;
 800fa18:	2300      	movs	r3, #0
 800fa1a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	size_t len = strlen(printOut);
 800fa1e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800fa22:	4618      	mov	r0, r3
 800fa24:	f7f0 fbdc 	bl	80001e0 <strlen>
 800fa28:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
	if(prAllow & 1)
 800fa2c:	4b51      	ldr	r3, [pc, #324]	; (800fb74 <GetCompassData+0x22c>)
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	f003 0301 	and.w	r3, r3, #1
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d023      	beq.n	800fa80 <GetCompassData+0x138>
	{
		sprintf(printOut + len,"euler %2.2f %2.2f %2.2f ",out.euler[0],out.euler[1],out.euler[2]);
 800fa38:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800fa3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fa40:	18d6      	adds	r6, r2, r3
 800fa42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fa46:	4618      	mov	r0, r3
 800fa48:	f7f0 fd86 	bl	8000558 <__aeabi_f2d>
 800fa4c:	4680      	mov	r8, r0
 800fa4e:	4689      	mov	r9, r1
 800fa50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa54:	4618      	mov	r0, r3
 800fa56:	f7f0 fd7f 	bl	8000558 <__aeabi_f2d>
 800fa5a:	4604      	mov	r4, r0
 800fa5c:	460d      	mov	r5, r1
 800fa5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa62:	4618      	mov	r0, r3
 800fa64:	f7f0 fd78 	bl	8000558 <__aeabi_f2d>
 800fa68:	4602      	mov	r2, r0
 800fa6a:	460b      	mov	r3, r1
 800fa6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fa70:	e9cd 4500 	strd	r4, r5, [sp]
 800fa74:	4642      	mov	r2, r8
 800fa76:	464b      	mov	r3, r9
 800fa78:	493f      	ldr	r1, [pc, #252]	; (800fb78 <GetCompassData+0x230>)
 800fa7a:	4630      	mov	r0, r6
 800fa7c:	f008 f926 	bl	8017ccc <siprintf>
	}
	if(prAllow & 2)
 800fa80:	4b3c      	ldr	r3, [pc, #240]	; (800fb74 <GetCompassData+0x22c>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	f003 0302 	and.w	r3, r3, #2
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d033      	beq.n	800faf4 <GetCompassData+0x1ac>
	{
		len = strlen(printOut);
 800fa8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800fa90:	4618      	mov	r0, r3
 800fa92:	f7f0 fba5 	bl	80001e0 <strlen>
 800fa96:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
		sprintf(printOut + len,"Q %2.2f %2.2f %2.2f %2.2f ",out.quaternion[0],out.quaternion[1],out.quaternion[2],out.quaternion[3]);
 800fa9a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800fa9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800faa2:	18d6      	adds	r6, r2, r3
 800faa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800faa8:	4618      	mov	r0, r3
 800faaa:	f7f0 fd55 	bl	8000558 <__aeabi_f2d>
 800faae:	4682      	mov	sl, r0
 800fab0:	468b      	mov	fp, r1
 800fab2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800fab6:	4618      	mov	r0, r3
 800fab8:	f7f0 fd4e 	bl	8000558 <__aeabi_f2d>
 800fabc:	4604      	mov	r4, r0
 800fabe:	460d      	mov	r5, r1
 800fac0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800fac4:	4618      	mov	r0, r3
 800fac6:	f7f0 fd47 	bl	8000558 <__aeabi_f2d>
 800faca:	4680      	mov	r8, r0
 800facc:	4689      	mov	r9, r1
 800face:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7f0 fd40 	bl	8000558 <__aeabi_f2d>
 800fad8:	4602      	mov	r2, r0
 800fada:	460b      	mov	r3, r1
 800fadc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fae0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800fae4:	e9cd 4500 	strd	r4, r5, [sp]
 800fae8:	4652      	mov	r2, sl
 800faea:	465b      	mov	r3, fp
 800faec:	4923      	ldr	r1, [pc, #140]	; (800fb7c <GetCompassData+0x234>)
 800faee:	4630      	mov	r0, r6
 800faf0:	f008 f8ec 	bl	8017ccc <siprintf>
	}
	if(prAllow & 4)
 800faf4:	4b1f      	ldr	r3, [pc, #124]	; (800fb74 <GetCompassData+0x22c>)
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	f003 0304 	and.w	r3, r3, #4
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d02a      	beq.n	800fb56 <GetCompassData+0x20e>
	{
		len = strlen(printOut);
 800fb00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800fb04:	4618      	mov	r0, r3
 800fb06:	f7f0 fb6b 	bl	80001e0 <strlen>
 800fb0a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
		sprintf(printOut + len,"linear %2.2f %2.2f %2.2f ",out.linear[0],out.linear[1],out.linear[2]);
 800fb0e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800fb12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fb16:	18d6      	adds	r6, r2, r3
 800fb18:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f7f0 fd1b 	bl	8000558 <__aeabi_f2d>
 800fb22:	4680      	mov	r8, r0
 800fb24:	4689      	mov	r9, r1
 800fb26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	f7f0 fd14 	bl	8000558 <__aeabi_f2d>
 800fb30:	4604      	mov	r4, r0
 800fb32:	460d      	mov	r5, r1
 800fb34:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f7f0 fd0d 	bl	8000558 <__aeabi_f2d>
 800fb3e:	4602      	mov	r2, r0
 800fb40:	460b      	mov	r3, r1
 800fb42:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fb46:	e9cd 4500 	strd	r4, r5, [sp]
 800fb4a:	4642      	mov	r2, r8
 800fb4c:	464b      	mov	r3, r9
 800fb4e:	490c      	ldr	r1, [pc, #48]	; (800fb80 <GetCompassData+0x238>)
 800fb50:	4630      	mov	r0, r6
 800fb52:	f008 f8bb 	bl	8017ccc <siprintf>
	}
	printf("\n\r%s",printOut);
 800fb56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800fb5a:	4619      	mov	r1, r3
 800fb5c:	4809      	ldr	r0, [pc, #36]	; (800fb84 <GetCompassData+0x23c>)
 800fb5e:	f008 f869 	bl	8017c34 <iprintf>

}
 800fb62:	bf00      	nop
 800fb64:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb6e:	bf00      	nop
 800fb70:	3dcccccd 	.word	0x3dcccccd
 800fb74:	200013c8 	.word	0x200013c8
 800fb78:	0801cd04 	.word	0x0801cd04
 800fb7c:	0801cd20 	.word	0x0801cd20
 800fb80:	0801cd3c 	.word	0x0801cd3c
 800fb84:	0801cc9c 	.word	0x0801cc9c

0800fb88 <MotionAC_LoadCalFromNVM>:

///////////////////////////

char MotionAC_LoadCalFromNVM (unsigned short intdataSize, unsigned int *data)
{
 800fb88:	b480      	push	{r7}
 800fb8a:	b083      	sub	sp, #12
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	4603      	mov	r3, r0
 800fb90:	6039      	str	r1, [r7, #0]
 800fb92:	80fb      	strh	r3, [r7, #6]
	return 0;
 800fb94:	2300      	movs	r3, #0

}
 800fb96:	4618      	mov	r0, r3
 800fb98:	370c      	adds	r7, #12
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba0:	4770      	bx	lr

0800fba2 <MotionAC_SaveCalInNVM>:
char MotionAC_SaveCalInNVM (unsigned short intdataSize, unsigned int *data)
{
 800fba2:	b480      	push	{r7}
 800fba4:	b083      	sub	sp, #12
 800fba6:	af00      	add	r7, sp, #0
 800fba8:	4603      	mov	r3, r0
 800fbaa:	6039      	str	r1, [r7, #0]
 800fbac:	80fb      	strh	r3, [r7, #6]
	return 0;
 800fbae:	2300      	movs	r3, #0
}
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	370c      	adds	r7, #12
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbba:	4770      	bx	lr

0800fbbc <MotionMC_LoadCalFromNVM>:

char MotionMC_LoadCalFromNVM (unsigned short intdataSize, unsigned int *data)
{
 800fbbc:	b480      	push	{r7}
 800fbbe:	b083      	sub	sp, #12
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	6039      	str	r1, [r7, #0]
 800fbc6:	80fb      	strh	r3, [r7, #6]
	return 0;
 800fbc8:	2300      	movs	r3, #0

}
 800fbca:	4618      	mov	r0, r3
 800fbcc:	370c      	adds	r7, #12
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd4:	4770      	bx	lr

0800fbd6 <MotionMC_SaveCalInNVM>:
char MotionMC_SaveCalInNVM (unsigned short intdataSize, unsigned int *data)
{
 800fbd6:	b480      	push	{r7}
 800fbd8:	b083      	sub	sp, #12
 800fbda:	af00      	add	r7, sp, #0
 800fbdc:	4603      	mov	r3, r0
 800fbde:	6039      	str	r1, [r7, #0]
 800fbe0:	80fb      	strh	r3, [r7, #6]
	return 0;
 800fbe2:	2300      	movs	r3, #0
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	370c      	adds	r7, #12
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbee:	4770      	bx	lr

0800fbf0 <position_Init>:
static void motionSensor_Init(void);



void position_Init(void)
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	af00      	add	r7, sp, #0
	motionSensor_Init();
 800fbf4:	f000 f80a 	bl	800fc0c <motionSensor_Init>
	compass_init();
 800fbf8:	f7ff fc88 	bl	800f50c <compass_init>


	/////
//	POS_MOTION_SENSOR_Axes_t AccAxesLsm6dso;
//	POS_MOTION_SENSOR_GetAxes(ACC_LSM6DSO, &AccAxesLsm6dso);
}
 800fbfc:	bf00      	nop
 800fbfe:	bd80      	pop	{r7, pc}

0800fc00 <PositionProcess>:

void PositionProcess(void)
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	af00      	add	r7, sp, #0
	GetCompassData();
 800fc04:	f7ff fea0 	bl	800f948 <GetCompassData>
//	POS_MOTION_SENSOR_GetAxes(ACC_LSM6DSO, &AccAxesLsm6dso);
//	POS_MOTION_SENSOR_GetAxes(GYR_LSM6DSO, &GyrAxesLsm6dso);
//
//	printf("\n\rACC x = %5d y = %5d z = %5d MAG x = %5d y = %5d z = %5d",(int)AccAxesLis2dw.x,(int)AccAxesLis2dw.y,(int)AccAxesLis2dw.z,(int)MagAxes.x,(int)MagAxes.y,(int)MagAxes.z);
//	printf("\n\rACC x = %5d y = %5d z = %5d GYR x = %5d y = %5d z = %5d\n\r",(int)AccAxesLsm6dso.x,(int)AccAxesLsm6dso.y,(int)AccAxesLsm6dso.z,(int)GyrAxesLsm6dso.x,(int)GyrAxesLsm6dso.y,(int)GyrAxesLsm6dso.z);
}
 800fc08:	bf00      	nop
 800fc0a:	bd80      	pop	{r7, pc}

0800fc0c <motionSensor_Init>:
/**
  * @brief  Initialize the accelerometer and  magnetometer
  * @retval None
  */
static void motionSensor_Init(void)
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	af00      	add	r7, sp, #0
//  displayFloatToInt_t out_value_odr;
//  int i;

	  /* Initialize Virtual COM Port */
	  BSP_COM_Init(COM1);
 800fc10:	2000      	movs	r0, #0
 800fc12:	f7f8 ff77 	bl	8008b04 <BSP_COM_Init>


	POS_MOTION_SENSOR_Init();
 800fc16:	f000 f802 	bl	800fc1e <POS_MOTION_SENSOR_Init>
    floatToInt(EnvCapabilities[i].HumMaxOdr, &out_value_odr, 3);
    snprintf(dataOut, MAX_BUF_SIZE, " MAX HUM ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int, (int)out_value_odr.out_dec);
    printf("%s", dataOut);
  }
  */
}
 800fc1a:	bf00      	nop
 800fc1c:	bd80      	pop	{r7, pc}

0800fc1e <POS_MOTION_SENSOR_Init>:
 * @brief  Initializes the motion sensors
 * @retval BSP status
 */
#include "position.h"
int32_t POS_MOTION_SENSOR_Init(void)
{
 800fc1e:	b580      	push	{r7, lr}
 800fc20:	b082      	sub	sp, #8
 800fc22:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800fc24:	2300      	movs	r3, #0
 800fc26:	607b      	str	r3, [r7, #4]

  ret = LIS2DW12_0_Probe(ACC_LIS2DW12);
 800fc28:	2003      	movs	r0, #3
 800fc2a:	f000 f8df 	bl	800fdec <LIS2DW12_0_Probe>
 800fc2e:	6078      	str	r0, [r7, #4]
  if (BSP_ERROR_NONE == ret)
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d103      	bne.n	800fc3e <POS_MOTION_SENSOR_Init+0x20>
  {
	  ret = LIS2MDL_0_Probe(MAG_LIS2MDL);
 800fc36:	2002      	movs	r0, #2
 800fc38:	f000 f950 	bl	800fedc <LIS2MDL_0_Probe>
 800fc3c:	6078      	str	r0, [r7, #4]
  }

  if (BSP_ERROR_NONE == ret)
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d103      	bne.n	800fc4c <POS_MOTION_SENSOR_Init+0x2e>
  {
	  ret = LSM6DSO_0_Probe(GYR_LSM6DSO);
 800fc44:	2001      	movs	r0, #1
 800fc46:	f000 f833 	bl	800fcb0 <LSM6DSO_0_Probe>
 800fc4a:	6078      	str	r0, [r7, #4]
  }
  return ret;
 800fc4c:	687b      	ldr	r3, [r7, #4]
}
 800fc4e:	4618      	mov	r0, r3
 800fc50:	3708      	adds	r7, #8
 800fc52:	46bd      	mov	sp, r7
 800fc54:	bd80      	pop	{r7, pc}
	...

0800fc58 <POS_MOTION_SENSOR_GetAxes>:
 * @param  Sensor Motion sensor instance
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t POS_MOTION_SENSOR_GetAxes(POS_MOTION_SENSORS sensor, POS_MOTION_SENSOR_Axes_t *Axes)
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b084      	sub	sp, #16
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	4603      	mov	r3, r0
 800fc60:	6039      	str	r1, [r7, #0]
 800fc62:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if (sensor >= POS_MOTION_SENSORS_MAX)
 800fc64:	79fb      	ldrb	r3, [r7, #7]
 800fc66:	2b03      	cmp	r3, #3
 800fc68:	d903      	bls.n	800fc72 <POS_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800fc6a:	f06f 0301 	mvn.w	r3, #1
 800fc6e:	60fb      	str	r3, [r7, #12]
 800fc70:	e014      	b.n	800fc9c <POS_MOTION_SENSOR_GetAxes+0x44>
  }
  else
  {
    if (PosMotionFuncDrv[sensor]->GetAxes(PosMotionCompObj[sensor], Axes) != BSP_ERROR_NONE)
 800fc72:	79fb      	ldrb	r3, [r7, #7]
 800fc74:	4a0c      	ldr	r2, [pc, #48]	; (800fca8 <POS_MOTION_SENSOR_GetAxes+0x50>)
 800fc76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc7a:	69db      	ldr	r3, [r3, #28]
 800fc7c:	79fa      	ldrb	r2, [r7, #7]
 800fc7e:	490b      	ldr	r1, [pc, #44]	; (800fcac <POS_MOTION_SENSOR_GetAxes+0x54>)
 800fc80:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800fc84:	6839      	ldr	r1, [r7, #0]
 800fc86:	4610      	mov	r0, r2
 800fc88:	4798      	blx	r3
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d003      	beq.n	800fc98 <POS_MOTION_SENSOR_GetAxes+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800fc90:	f06f 0304 	mvn.w	r3, #4
 800fc94:	60fb      	str	r3, [r7, #12]
 800fc96:	e001      	b.n	800fc9c <POS_MOTION_SENSOR_GetAxes+0x44>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 800fc98:	2300      	movs	r3, #0
 800fc9a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
}
 800fc9e:	4618      	mov	r0, r3
 800fca0:	3710      	adds	r7, #16
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}
 800fca6:	bf00      	nop
 800fca8:	2000939c 	.word	0x2000939c
 800fcac:	2000bef8 	.word	0x2000bef8

0800fcb0 <LSM6DSO_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSO_0_Probe(POS_MOTION_SENSORS sensor)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b08c      	sub	sp, #48	; 0x30
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	71fb      	strb	r3, [r7, #7]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  int32_t ret = BSP_ERROR_NONE;
 800fcba:	2300      	movs	r3, #0
 800fcbc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	61bb      	str	r3, [r7, #24]
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 800fcc2:	23d7      	movs	r3, #215	; 0xd7
 800fcc4:	773b      	strb	r3, [r7, #28]
  io_ctx.Init        = POS_I2C_Init;
 800fcc6:	4b3d      	ldr	r3, [pc, #244]	; (800fdbc <LSM6DSO_0_Probe+0x10c>)
 800fcc8:	613b      	str	r3, [r7, #16]
  io_ctx.DeInit      = POS_I2C_DeInit;
 800fcca:	4b3d      	ldr	r3, [pc, #244]	; (800fdc0 <LSM6DSO_0_Probe+0x110>)
 800fccc:	617b      	str	r3, [r7, #20]
  io_ctx.ReadReg     = POS_I2C_ReadReg;
 800fcce:	4b3d      	ldr	r3, [pc, #244]	; (800fdc4 <LSM6DSO_0_Probe+0x114>)
 800fcd0:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.WriteReg    = POS_I2C_WriteReg;
 800fcd2:	4b3d      	ldr	r3, [pc, #244]	; (800fdc8 <LSM6DSO_0_Probe+0x118>)
 800fcd4:	623b      	str	r3, [r7, #32]
  io_ctx.GetTick     = POS_GetTick;
 800fcd6:	4b3d      	ldr	r3, [pc, #244]	; (800fdcc <LSM6DSO_0_Probe+0x11c>)
 800fcd8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 800fcda:	f107 0310 	add.w	r3, r7, #16
 800fcde:	4619      	mov	r1, r3
 800fce0:	483b      	ldr	r0, [pc, #236]	; (800fdd0 <LSM6DSO_0_Probe+0x120>)
 800fce2:	f7f5 fb1f 	bl	8005324 <LSM6DSO_RegisterBusIO>
 800fce6:	4603      	mov	r3, r0
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d003      	beq.n	800fcf4 <LSM6DSO_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800fcec:	f06f 0306 	mvn.w	r3, #6
 800fcf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fcf2:	e05e      	b.n	800fdb2 <LSM6DSO_0_Probe+0x102>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 800fcf4:	f107 030f 	add.w	r3, r7, #15
 800fcf8:	4619      	mov	r1, r3
 800fcfa:	4835      	ldr	r0, [pc, #212]	; (800fdd0 <LSM6DSO_0_Probe+0x120>)
 800fcfc:	f7f5 fc14 	bl	8005528 <LSM6DSO_ReadID>
 800fd00:	4603      	mov	r3, r0
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d003      	beq.n	800fd0e <LSM6DSO_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800fd06:	f06f 0306 	mvn.w	r3, #6
 800fd0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fd0c:	e051      	b.n	800fdb2 <LSM6DSO_0_Probe+0x102>
  }
  else if (id != LSM6DSO_ID)
 800fd0e:	7bfb      	ldrb	r3, [r7, #15]
 800fd10:	2b6c      	cmp	r3, #108	; 0x6c
 800fd12:	d003      	beq.n	800fd1c <LSM6DSO_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800fd14:	f06f 0306 	mvn.w	r3, #6
 800fd18:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fd1a:	e04a      	b.n	800fdb2 <LSM6DSO_0_Probe+0x102>
  }
  else
  {
	PosMotionCompObj[ACC_LSM6DSO] = &lsm6dso_obj_0;
 800fd1c:	4b2d      	ldr	r3, [pc, #180]	; (800fdd4 <LSM6DSO_0_Probe+0x124>)
 800fd1e:	4a2c      	ldr	r2, [pc, #176]	; (800fdd0 <LSM6DSO_0_Probe+0x120>)
 800fd20:	601a      	str	r2, [r3, #0]
	PosMotionCompObj[GYR_LSM6DSO] = &lsm6dso_obj_0;
 800fd22:	4b2c      	ldr	r3, [pc, #176]	; (800fdd4 <LSM6DSO_0_Probe+0x124>)
 800fd24:	4a2a      	ldr	r2, [pc, #168]	; (800fdd0 <LSM6DSO_0_Probe+0x120>)
 800fd26:	605a      	str	r2, [r3, #4]
	/* The second cast (void *) is added to bypass Misra R11.3 rule */
	PosMotionDrv[ACC_LSM6DSO] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 800fd28:	4b2b      	ldr	r3, [pc, #172]	; (800fdd8 <LSM6DSO_0_Probe+0x128>)
 800fd2a:	4a2c      	ldr	r2, [pc, #176]	; (800fddc <LSM6DSO_0_Probe+0x12c>)
 800fd2c:	601a      	str	r2, [r3, #0]
	PosMotionDrv[GYR_LSM6DSO] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 800fd2e:	4b2a      	ldr	r3, [pc, #168]	; (800fdd8 <LSM6DSO_0_Probe+0x128>)
 800fd30:	4a2a      	ldr	r2, [pc, #168]	; (800fddc <LSM6DSO_0_Probe+0x12c>)
 800fd32:	605a      	str	r2, [r3, #4]

	/* The second cast (void *) is added to bypass Misra R11.3 rule */
	PosMotionFuncDrv[ACC_LSM6DSO] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_ACC_Driver;
 800fd34:	4b2a      	ldr	r3, [pc, #168]	; (800fde0 <LSM6DSO_0_Probe+0x130>)
 800fd36:	4a2b      	ldr	r2, [pc, #172]	; (800fde4 <LSM6DSO_0_Probe+0x134>)
 800fd38:	601a      	str	r2, [r3, #0]
	PosMotionFuncDrv[GYR_LSM6DSO] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 800fd3a:	4b29      	ldr	r3, [pc, #164]	; (800fde0 <LSM6DSO_0_Probe+0x130>)
 800fd3c:	4a2a      	ldr	r2, [pc, #168]	; (800fde8 <LSM6DSO_0_Probe+0x138>)
 800fd3e:	605a      	str	r2, [r3, #4]

	if (PosMotionDrv[ACC_LSM6DSO]->Init(PosMotionCompObj[ACC_LSM6DSO]) != LSM6DSO_OK)
 800fd40:	4b25      	ldr	r3, [pc, #148]	; (800fdd8 <LSM6DSO_0_Probe+0x128>)
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	4a23      	ldr	r2, [pc, #140]	; (800fdd4 <LSM6DSO_0_Probe+0x124>)
 800fd48:	6812      	ldr	r2, [r2, #0]
 800fd4a:	4610      	mov	r0, r2
 800fd4c:	4798      	blx	r3
 800fd4e:	4603      	mov	r3, r0
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d003      	beq.n	800fd5c <LSM6DSO_0_Probe+0xac>
	{
		ret = BSP_ERROR_COMPONENT_FAILURE;
 800fd54:	f06f 0304 	mvn.w	r3, #4
 800fd58:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fd5a:	e02a      	b.n	800fdb2 <LSM6DSO_0_Probe+0x102>
	}
	else if (PosMotionDrv[GYR_LSM6DSO]->Init(PosMotionCompObj[GYR_LSM6DSO]) != LSM6DSO_OK)
 800fd5c:	4b1e      	ldr	r3, [pc, #120]	; (800fdd8 <LSM6DSO_0_Probe+0x128>)
 800fd5e:	685b      	ldr	r3, [r3, #4]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	4a1c      	ldr	r2, [pc, #112]	; (800fdd4 <LSM6DSO_0_Probe+0x124>)
 800fd64:	6852      	ldr	r2, [r2, #4]
 800fd66:	4610      	mov	r0, r2
 800fd68:	4798      	blx	r3
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d003      	beq.n	800fd78 <LSM6DSO_0_Probe+0xc8>
	{
		ret = BSP_ERROR_COMPONENT_FAILURE;
 800fd70:	f06f 0304 	mvn.w	r3, #4
 800fd74:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fd76:	e01c      	b.n	800fdb2 <LSM6DSO_0_Probe+0x102>
	}
	else
	{
		ret = BSP_ERROR_NONE;
 800fd78:	2300      	movs	r3, #0
 800fd7a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (PosMotionFuncDrv[ACC_LSM6DSO]->Enable(PosMotionCompObj[ACC_LSM6DSO]) != LSM6DSO_OK)
 800fd7c:	4b18      	ldr	r3, [pc, #96]	; (800fde0 <LSM6DSO_0_Probe+0x130>)
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	4a14      	ldr	r2, [pc, #80]	; (800fdd4 <LSM6DSO_0_Probe+0x124>)
 800fd84:	6812      	ldr	r2, [r2, #0]
 800fd86:	4610      	mov	r0, r2
 800fd88:	4798      	blx	r3
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d003      	beq.n	800fd98 <LSM6DSO_0_Probe+0xe8>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 800fd90:	f06f 0304 	mvn.w	r3, #4
 800fd94:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fd96:	e00c      	b.n	800fdb2 <LSM6DSO_0_Probe+0x102>
		}
		else if (PosMotionFuncDrv[GYR_LSM6DSO]->Enable(PosMotionCompObj[GYR_LSM6DSO]) != LSM6DSO_OK)
 800fd98:	4b11      	ldr	r3, [pc, #68]	; (800fde0 <LSM6DSO_0_Probe+0x130>)
 800fd9a:	685b      	ldr	r3, [r3, #4]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	4a0d      	ldr	r2, [pc, #52]	; (800fdd4 <LSM6DSO_0_Probe+0x124>)
 800fda0:	6852      	ldr	r2, [r2, #4]
 800fda2:	4610      	mov	r0, r2
 800fda4:	4798      	blx	r3
 800fda6:	4603      	mov	r3, r0
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d002      	beq.n	800fdb2 <LSM6DSO_0_Probe+0x102>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 800fdac:	f06f 0304 	mvn.w	r3, #4
 800fdb0:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
	}
  }
	  return ret;
 800fdb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	3730      	adds	r7, #48	; 0x30
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}
 800fdbc:	080015f5 	.word	0x080015f5
 800fdc0:	08001659 	.word	0x08001659
 800fdc4:	0800170d 	.word	0x0800170d
 800fdc8:	080016a9 	.word	0x080016a9
 800fdcc:	08001771 	.word	0x08001771
 800fdd0:	200093bc 	.word	0x200093bc
 800fdd4:	2000bef8 	.word	0x2000bef8
 800fdd8:	200093ac 	.word	0x200093ac
 800fddc:	20001304 	.word	0x20001304
 800fde0:	2000939c 	.word	0x2000939c
 800fde4:	20001314 	.word	0x20001314
 800fde8:	20001338 	.word	0x20001338

0800fdec <LIS2DW12_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval BSP status
 */
static int32_t LIS2DW12_0_Probe(POS_MOTION_SENSORS sensor)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b08c      	sub	sp, #48	; 0x30
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	71fb      	strb	r3, [r7, #7]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  int32_t ret = BSP_ERROR_NONE;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	61bb      	str	r3, [r7, #24]
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 800fdfe:	2333      	movs	r3, #51	; 0x33
 800fe00:	773b      	strb	r3, [r7, #28]
  io_ctx.Init        = POS_I2C_Init;
 800fe02:	4b2b      	ldr	r3, [pc, #172]	; (800feb0 <LIS2DW12_0_Probe+0xc4>)
 800fe04:	613b      	str	r3, [r7, #16]
  io_ctx.DeInit      = POS_I2C_DeInit;
 800fe06:	4b2b      	ldr	r3, [pc, #172]	; (800feb4 <LIS2DW12_0_Probe+0xc8>)
 800fe08:	617b      	str	r3, [r7, #20]
  io_ctx.ReadReg     = POS_I2C_ReadReg;
 800fe0a:	4b2b      	ldr	r3, [pc, #172]	; (800feb8 <LIS2DW12_0_Probe+0xcc>)
 800fe0c:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.WriteReg    = POS_I2C_WriteReg;
 800fe0e:	4b2b      	ldr	r3, [pc, #172]	; (800febc <LIS2DW12_0_Probe+0xd0>)
 800fe10:	623b      	str	r3, [r7, #32]
  io_ctx.GetTick     = POS_GetTick;
 800fe12:	4b2b      	ldr	r3, [pc, #172]	; (800fec0 <LIS2DW12_0_Probe+0xd4>)
 800fe14:	62bb      	str	r3, [r7, #40]	; 0x28

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 800fe16:	f107 0310 	add.w	r3, r7, #16
 800fe1a:	4619      	mov	r1, r3
 800fe1c:	4829      	ldr	r0, [pc, #164]	; (800fec4 <LIS2DW12_0_Probe+0xd8>)
 800fe1e:	f7f2 fc6d 	bl	80026fc <LIS2DW12_RegisterBusIO>
 800fe22:	4603      	mov	r3, r0
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d003      	beq.n	800fe30 <LIS2DW12_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800fe28:	f06f 0306 	mvn.w	r3, #6
 800fe2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe2e:	e039      	b.n	800fea4 <LIS2DW12_0_Probe+0xb8>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 800fe30:	f107 030f 	add.w	r3, r7, #15
 800fe34:	4619      	mov	r1, r3
 800fe36:	4823      	ldr	r0, [pc, #140]	; (800fec4 <LIS2DW12_0_Probe+0xd8>)
 800fe38:	f7f2 fd4a 	bl	80028d0 <LIS2DW12_ReadID>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d003      	beq.n	800fe4a <LIS2DW12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800fe42:	f06f 0306 	mvn.w	r3, #6
 800fe46:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe48:	e02c      	b.n	800fea4 <LIS2DW12_0_Probe+0xb8>
  }
  else if (id != LIS2DW12_ID)
 800fe4a:	7bfb      	ldrb	r3, [r7, #15]
 800fe4c:	2b44      	cmp	r3, #68	; 0x44
 800fe4e:	d003      	beq.n	800fe58 <LIS2DW12_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800fe50:	f06f 0306 	mvn.w	r3, #6
 800fe54:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe56:	e025      	b.n	800fea4 <LIS2DW12_0_Probe+0xb8>
  }
  else
  {
    PosMotionCompObj[ACC_LIS2DW12] = &lis2dw12_obj_0;
 800fe58:	4b1b      	ldr	r3, [pc, #108]	; (800fec8 <LIS2DW12_0_Probe+0xdc>)
 800fe5a:	4a1a      	ldr	r2, [pc, #104]	; (800fec4 <LIS2DW12_0_Probe+0xd8>)
 800fe5c:	60da      	str	r2, [r3, #12]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    PosMotionDrv[ACC_LIS2DW12] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 800fe5e:	4b1b      	ldr	r3, [pc, #108]	; (800fecc <LIS2DW12_0_Probe+0xe0>)
 800fe60:	4a1b      	ldr	r2, [pc, #108]	; (800fed0 <LIS2DW12_0_Probe+0xe4>)
 800fe62:	60da      	str	r2, [r3, #12]

	/* The second cast (void *) is added to bypass Misra R11.3 rule */
	PosMotionFuncDrv[ACC_LIS2DW12] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LIS2DW12_ACC_Driver;
 800fe64:	4b1b      	ldr	r3, [pc, #108]	; (800fed4 <LIS2DW12_0_Probe+0xe8>)
 800fe66:	4a1c      	ldr	r2, [pc, #112]	; (800fed8 <LIS2DW12_0_Probe+0xec>)
 800fe68:	60da      	str	r2, [r3, #12]

	if (PosMotionDrv[ACC_LIS2DW12]->Init(PosMotionCompObj[ACC_LIS2DW12]) != LIS2DW12_OK)
 800fe6a:	4b18      	ldr	r3, [pc, #96]	; (800fecc <LIS2DW12_0_Probe+0xe0>)
 800fe6c:	68db      	ldr	r3, [r3, #12]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	4a15      	ldr	r2, [pc, #84]	; (800fec8 <LIS2DW12_0_Probe+0xdc>)
 800fe72:	68d2      	ldr	r2, [r2, #12]
 800fe74:	4610      	mov	r0, r2
 800fe76:	4798      	blx	r3
 800fe78:	4603      	mov	r3, r0
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d003      	beq.n	800fe86 <LIS2DW12_0_Probe+0x9a>
	{
		ret = BSP_ERROR_COMPONENT_FAILURE;
 800fe7e:	f06f 0304 	mvn.w	r3, #4
 800fe82:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe84:	e00e      	b.n	800fea4 <LIS2DW12_0_Probe+0xb8>
	}
	else
	{
		ret = BSP_ERROR_NONE;
 800fe86:	2300      	movs	r3, #0
 800fe88:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (PosMotionFuncDrv[ACC_LIS2DW12]->Enable(PosMotionCompObj[ACC_LIS2DW12]) != LSM6DSO_OK)
 800fe8a:	4b12      	ldr	r3, [pc, #72]	; (800fed4 <LIS2DW12_0_Probe+0xe8>)
 800fe8c:	68db      	ldr	r3, [r3, #12]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	4a0d      	ldr	r2, [pc, #52]	; (800fec8 <LIS2DW12_0_Probe+0xdc>)
 800fe92:	68d2      	ldr	r2, [r2, #12]
 800fe94:	4610      	mov	r0, r2
 800fe96:	4798      	blx	r3
 800fe98:	4603      	mov	r3, r0
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d002      	beq.n	800fea4 <LIS2DW12_0_Probe+0xb8>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 800fe9e:	f06f 0304 	mvn.w	r3, #4
 800fea2:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
	}
  }
  return ret;
 800fea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800fea6:	4618      	mov	r0, r3
 800fea8:	3730      	adds	r7, #48	; 0x30
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
 800feae:	bf00      	nop
 800feb0:	080015f5 	.word	0x080015f5
 800feb4:	08001659 	.word	0x08001659
 800feb8:	0800170d 	.word	0x0800170d
 800febc:	080016a9 	.word	0x080016a9
 800fec0:	08001771 	.word	0x08001771
 800fec4:	200093ec 	.word	0x200093ec
 800fec8:	2000bef8 	.word	0x2000bef8
 800fecc:	200093ac 	.word	0x200093ac
 800fed0:	20001264 	.word	0x20001264
 800fed4:	2000939c 	.word	0x2000939c
 800fed8:	20001274 	.word	0x20001274

0800fedc <LIS2MDL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval BSP status
 */
static int32_t LIS2MDL_0_Probe(POS_MOTION_SENSORS sensor)
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b08c      	sub	sp, #48	; 0x30
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	4603      	mov	r3, r0
 800fee4:	71fb      	strb	r3, [r7, #7]

  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  int32_t                 ret = BSP_ERROR_NONE;
 800fee6:	2300      	movs	r3, #0
 800fee8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Configure the magneto driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800feea:	2300      	movs	r3, #0
 800feec:	61bb      	str	r3, [r7, #24]
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 800feee:	233d      	movs	r3, #61	; 0x3d
 800fef0:	773b      	strb	r3, [r7, #28]
  io_ctx.Init        = POS_I2C_Init;
 800fef2:	4b2b      	ldr	r3, [pc, #172]	; (800ffa0 <LIS2MDL_0_Probe+0xc4>)
 800fef4:	613b      	str	r3, [r7, #16]
  io_ctx.DeInit      = POS_I2C_DeInit;
 800fef6:	4b2b      	ldr	r3, [pc, #172]	; (800ffa4 <LIS2MDL_0_Probe+0xc8>)
 800fef8:	617b      	str	r3, [r7, #20]
  io_ctx.ReadReg     = POS_I2C_ReadReg;
 800fefa:	4b2b      	ldr	r3, [pc, #172]	; (800ffa8 <LIS2MDL_0_Probe+0xcc>)
 800fefc:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.WriteReg    = POS_I2C_WriteReg;
 800fefe:	4b2b      	ldr	r3, [pc, #172]	; (800ffac <LIS2MDL_0_Probe+0xd0>)
 800ff00:	623b      	str	r3, [r7, #32]
  io_ctx.GetTick     = POS_GetTick;
 800ff02:	4b2b      	ldr	r3, [pc, #172]	; (800ffb0 <LIS2MDL_0_Probe+0xd4>)
 800ff04:	62bb      	str	r3, [r7, #40]	; 0x28

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800ff06:	f107 0310 	add.w	r3, r7, #16
 800ff0a:	4619      	mov	r1, r3
 800ff0c:	4829      	ldr	r0, [pc, #164]	; (800ffb4 <LIS2MDL_0_Probe+0xd8>)
 800ff0e:	f7f3 ff45 	bl	8003d9c <LIS2MDL_RegisterBusIO>
 800ff12:	4603      	mov	r3, r0
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d003      	beq.n	800ff20 <LIS2MDL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ff18:	f06f 0306 	mvn.w	r3, #6
 800ff1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff1e:	e039      	b.n	800ff94 <LIS2MDL_0_Probe+0xb8>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 800ff20:	f107 030f 	add.w	r3, r7, #15
 800ff24:	4619      	mov	r1, r3
 800ff26:	4823      	ldr	r0, [pc, #140]	; (800ffb4 <LIS2MDL_0_Probe+0xd8>)
 800ff28:	f7f4 f801 	bl	8003f2e <LIS2MDL_ReadID>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d003      	beq.n	800ff3a <LIS2MDL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ff32:	f06f 0306 	mvn.w	r3, #6
 800ff36:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff38:	e02c      	b.n	800ff94 <LIS2MDL_0_Probe+0xb8>
  }
  else if (id != LIS2MDL_ID)
 800ff3a:	7bfb      	ldrb	r3, [r7, #15]
 800ff3c:	2b40      	cmp	r3, #64	; 0x40
 800ff3e:	d003      	beq.n	800ff48 <LIS2MDL_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ff40:	f06f 0306 	mvn.w	r3, #6
 800ff44:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff46:	e025      	b.n	800ff94 <LIS2MDL_0_Probe+0xb8>
  }
  else
  {

    PosMotionCompObj[MAG_LIS2MDL] = &lis2mdl_obj_0;
 800ff48:	4b1b      	ldr	r3, [pc, #108]	; (800ffb8 <LIS2MDL_0_Probe+0xdc>)
 800ff4a:	4a1a      	ldr	r2, [pc, #104]	; (800ffb4 <LIS2MDL_0_Probe+0xd8>)
 800ff4c:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    PosMotionDrv[MAG_LIS2MDL] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800ff4e:	4b1b      	ldr	r3, [pc, #108]	; (800ffbc <LIS2MDL_0_Probe+0xe0>)
 800ff50:	4a1b      	ldr	r2, [pc, #108]	; (800ffc0 <LIS2MDL_0_Probe+0xe4>)
 800ff52:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    PosMotionFuncDrv[MAG_LIS2MDL] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LIS2MDL_MAG_Driver;
 800ff54:	4b1b      	ldr	r3, [pc, #108]	; (800ffc4 <LIS2MDL_0_Probe+0xe8>)
 800ff56:	4a1c      	ldr	r2, [pc, #112]	; (800ffc8 <LIS2MDL_0_Probe+0xec>)
 800ff58:	609a      	str	r2, [r3, #8]

    if (PosMotionDrv[MAG_LIS2MDL]->Init(PosMotionCompObj[MAG_LIS2MDL]) != LIS2MDL_OK)
 800ff5a:	4b18      	ldr	r3, [pc, #96]	; (800ffbc <LIS2MDL_0_Probe+0xe0>)
 800ff5c:	689b      	ldr	r3, [r3, #8]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	4a15      	ldr	r2, [pc, #84]	; (800ffb8 <LIS2MDL_0_Probe+0xdc>)
 800ff62:	6892      	ldr	r2, [r2, #8]
 800ff64:	4610      	mov	r0, r2
 800ff66:	4798      	blx	r3
 800ff68:	4603      	mov	r3, r0
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d003      	beq.n	800ff76 <LIS2MDL_0_Probe+0x9a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ff6e:	f06f 0304 	mvn.w	r3, #4
 800ff72:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff74:	e00e      	b.n	800ff94 <LIS2MDL_0_Probe+0xb8>
    }
	else
	{
		ret = BSP_ERROR_NONE;
 800ff76:	2300      	movs	r3, #0
 800ff78:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (PosMotionFuncDrv[MAG_LIS2MDL]->Enable(PosMotionCompObj[MAG_LIS2MDL]) != LSM6DSO_OK)
 800ff7a:	4b12      	ldr	r3, [pc, #72]	; (800ffc4 <LIS2MDL_0_Probe+0xe8>)
 800ff7c:	689b      	ldr	r3, [r3, #8]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	4a0d      	ldr	r2, [pc, #52]	; (800ffb8 <LIS2MDL_0_Probe+0xdc>)
 800ff82:	6892      	ldr	r2, [r2, #8]
 800ff84:	4610      	mov	r0, r2
 800ff86:	4798      	blx	r3
 800ff88:	4603      	mov	r3, r0
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d002      	beq.n	800ff94 <LIS2MDL_0_Probe+0xb8>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 800ff8e:	f06f 0304 	mvn.w	r3, #4
 800ff92:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
	}
  }
  return ret;
 800ff94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	3730      	adds	r7, #48	; 0x30
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}
 800ff9e:	bf00      	nop
 800ffa0:	080015f5 	.word	0x080015f5
 800ffa4:	08001659 	.word	0x08001659
 800ffa8:	0800170d 	.word	0x0800170d
 800ffac:	080016a9 	.word	0x080016a9
 800ffb0:	08001771 	.word	0x08001771
 800ffb4:	20009420 	.word	0x20009420
 800ffb8:	2000bef8 	.word	0x2000bef8
 800ffbc:	200093ac 	.word	0x200093ac
 800ffc0:	20001298 	.word	0x20001298
 800ffc4:	2000939c 	.word	0x2000939c
 800ffc8:	200012a8 	.word	0x200012a8

0800ffcc <quaternionsMult>:
 800ffcc:	ed90 4a01 	vldr	s8, [r0, #4]
 800ffd0:	edd1 7a01 	vldr	s15, [r1, #4]
 800ffd4:	edd0 4a00 	vldr	s9, [r0]
 800ffd8:	ed91 5a00 	vldr	s10, [r1]
 800ffdc:	edd0 5a02 	vldr	s11, [r0, #8]
 800ffe0:	ed91 6a02 	vldr	s12, [r1, #8]
 800ffe4:	edd0 6a03 	vldr	s13, [r0, #12]
 800ffe8:	ed91 7a03 	vldr	s14, [r1, #12]
 800ffec:	ee67 7ac4 	vnmul.f32	s15, s15, s8
 800fff0:	eee4 7a85 	vfma.f32	s15, s9, s10
 800fff4:	eee5 7ac6 	vfms.f32	s15, s11, s12
 800fff8:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800fffc:	edc2 7a00 	vstr	s15, [r2]
 8010000:	ed91 4a00 	vldr	s8, [r1]
 8010004:	edd0 7a01 	vldr	s15, [r0, #4]
 8010008:	edd0 4a00 	vldr	s9, [r0]
 801000c:	ed91 5a01 	vldr	s10, [r1, #4]
 8010010:	edd0 5a02 	vldr	s11, [r0, #8]
 8010014:	ed91 6a03 	vldr	s12, [r1, #12]
 8010018:	edd0 6a03 	vldr	s13, [r0, #12]
 801001c:	ed91 7a02 	vldr	s14, [r1, #8]
 8010020:	ee67 7a84 	vmul.f32	s15, s15, s8
 8010024:	eee4 7a85 	vfma.f32	s15, s9, s10
 8010028:	eee5 7a86 	vfma.f32	s15, s11, s12
 801002c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8010030:	edc2 7a01 	vstr	s15, [r2, #4]
 8010034:	ed91 4a00 	vldr	s8, [r1]
 8010038:	edd0 7a02 	vldr	s15, [r0, #8]
 801003c:	edd0 4a00 	vldr	s9, [r0]
 8010040:	ed91 5a02 	vldr	s10, [r1, #8]
 8010044:	ed91 6a01 	vldr	s12, [r1, #4]
 8010048:	edd0 5a03 	vldr	s11, [r0, #12]
 801004c:	edd0 6a01 	vldr	s13, [r0, #4]
 8010050:	ed91 7a03 	vldr	s14, [r1, #12]
 8010054:	ee67 7a84 	vmul.f32	s15, s15, s8
 8010058:	eee4 7a85 	vfma.f32	s15, s9, s10
 801005c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8010060:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8010064:	edc2 7a02 	vstr	s15, [r2, #8]
 8010068:	edd0 7a01 	vldr	s15, [r0, #4]
 801006c:	ed91 4a02 	vldr	s8, [r1, #8]
 8010070:	edd0 4a00 	vldr	s9, [r0]
 8010074:	ed91 5a03 	vldr	s10, [r1, #12]
 8010078:	edd0 6a02 	vldr	s13, [r0, #8]
 801007c:	edd0 5a03 	vldr	s11, [r0, #12]
 8010080:	ed91 6a00 	vldr	s12, [r1]
 8010084:	ed91 7a01 	vldr	s14, [r1, #4]
 8010088:	ee67 7a84 	vmul.f32	s15, s15, s8
 801008c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8010090:	eee5 7a86 	vfma.f32	s15, s11, s12
 8010094:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8010098:	edc2 7a03 	vstr	s15, [r2, #12]
 801009c:	4770      	bx	lr
 801009e:	bf00      	nop

080100a0 <MotionEC_Initialize>:
 80100a0:	4a3a      	ldr	r2, [pc, #232]	; (801018c <MotionEC_Initialize+0xec>)
 80100a2:	493b      	ldr	r1, [pc, #236]	; (8010190 <MotionEC_Initialize+0xf0>)
 80100a4:	6813      	ldr	r3, [r2, #0]
 80100a6:	f023 0301 	bic.w	r3, r3, #1
 80100aa:	b410      	push	{r4}
 80100ac:	6013      	str	r3, [r2, #0]
 80100ae:	680b      	ldr	r3, [r1, #0]
 80100b0:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80100b4:	4013      	ands	r3, r2
 80100b6:	f24c 2440 	movw	r4, #49728	; 0xc240
 80100ba:	42a3      	cmp	r3, r4
 80100bc:	d013      	beq.n	80100e6 <MotionEC_Initialize+0x46>
 80100be:	680b      	ldr	r3, [r1, #0]
 80100c0:	f24c 2170 	movw	r1, #49776	; 0xc270
 80100c4:	4013      	ands	r3, r2
 80100c6:	428b      	cmp	r3, r1
 80100c8:	d00d      	beq.n	80100e6 <MotionEC_Initialize+0x46>
 80100ca:	4b32      	ldr	r3, [pc, #200]	; (8010194 <MotionEC_Initialize+0xf4>)
 80100cc:	2201      	movs	r2, #1
 80100ce:	601a      	str	r2, [r3, #0]
 80100d0:	681a      	ldr	r2, [r3, #0]
 80100d2:	2a00      	cmp	r2, #0
 80100d4:	d1fc      	bne.n	80100d0 <MotionEC_Initialize+0x30>
 80100d6:	4b30      	ldr	r3, [pc, #192]	; (8010198 <MotionEC_Initialize+0xf8>)
 80100d8:	4a30      	ldr	r2, [pc, #192]	; (801019c <MotionEC_Initialize+0xfc>)
 80100da:	601a      	str	r2, [r3, #0]
 80100dc:	681a      	ldr	r2, [r3, #0]
 80100de:	4b30      	ldr	r3, [pc, #192]	; (80101a0 <MotionEC_Initialize+0x100>)
 80100e0:	429a      	cmp	r2, r3
 80100e2:	d01f      	beq.n	8010124 <MotionEC_Initialize+0x84>
 80100e4:	e7fe      	b.n	80100e4 <MotionEC_Initialize+0x44>
 80100e6:	4b2f      	ldr	r3, [pc, #188]	; (80101a4 <MotionEC_Initialize+0x104>)
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d1ed      	bne.n	80100ca <MotionEC_Initialize+0x2a>
 80100ee:	4a2e      	ldr	r2, [pc, #184]	; (80101a8 <MotionEC_Initialize+0x108>)
 80100f0:	6813      	ldr	r3, [r2, #0]
 80100f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80100f6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80100fa:	d006      	beq.n	801010a <MotionEC_Initialize+0x6a>
 80100fc:	6813      	ldr	r3, [r2, #0]
 80100fe:	f240 4283 	movw	r2, #1155	; 0x483
 8010102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010106:	4293      	cmp	r3, r2
 8010108:	d1df      	bne.n	80100ca <MotionEC_Initialize+0x2a>
 801010a:	4b28      	ldr	r3, [pc, #160]	; (80101ac <MotionEC_Initialize+0x10c>)
 801010c:	2201      	movs	r2, #1
 801010e:	601a      	str	r2, [r3, #0]
 8010110:	681a      	ldr	r2, [r3, #0]
 8010112:	2a00      	cmp	r2, #0
 8010114:	d1fc      	bne.n	8010110 <MotionEC_Initialize+0x70>
 8010116:	4b26      	ldr	r3, [pc, #152]	; (80101b0 <MotionEC_Initialize+0x110>)
 8010118:	4a20      	ldr	r2, [pc, #128]	; (801019c <MotionEC_Initialize+0xfc>)
 801011a:	601a      	str	r2, [r3, #0]
 801011c:	681a      	ldr	r2, [r3, #0]
 801011e:	4b20      	ldr	r3, [pc, #128]	; (80101a0 <MotionEC_Initialize+0x100>)
 8010120:	429a      	cmp	r2, r3
 8010122:	d1df      	bne.n	80100e4 <MotionEC_Initialize+0x44>
 8010124:	edd0 6a00 	vldr	s13, [r0]
 8010128:	4822      	ldr	r0, [pc, #136]	; (80101b4 <MotionEC_Initialize+0x114>)
 801012a:	4a23      	ldr	r2, [pc, #140]	; (80101b8 <MotionEC_Initialize+0x118>)
 801012c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010130:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
 8010134:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8010138:	4601      	mov	r1, r0
 801013a:	2301      	movs	r3, #1
 801013c:	f801 3b04 	strb.w	r3, [r1], #4
 8010140:	f100 0410 	add.w	r4, r0, #16
 8010144:	7313      	strb	r3, [r2, #12]
 8010146:	2300      	movs	r3, #0
 8010148:	6043      	str	r3, [r0, #4]
 801014a:	6103      	str	r3, [r0, #16]
 801014c:	e9c1 3301 	strd	r3, r3, [r1, #4]
 8010150:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8010154:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8010158:	e9c2 3305 	strd	r3, r3, [r2, #20]
 801015c:	e9c2 330a 	strd	r3, r3, [r2, #40]	; 0x28
 8010160:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 8010164:	6113      	str	r3, [r2, #16]
 8010166:	6253      	str	r3, [r2, #36]	; 0x24
 8010168:	63d3      	str	r3, [r2, #60]	; 0x3c
 801016a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801016e:	edc2 7a07 	vstr	s15, [r2, #28]
 8010172:	edc2 7a08 	vstr	s15, [r2, #32]
 8010176:	edc2 7a0c 	vstr	s15, [r2, #48]	; 0x30
 801017a:	edc2 7a10 	vstr	s15, [r2, #64]	; 0x40
 801017e:	ed82 6a02 	vstr	s12, [r2, #8]
 8010182:	ed82 7a00 	vstr	s14, [r2]
 8010186:	ed82 7a01 	vstr	s14, [r2, #4]
 801018a:	4770      	bx	lr
 801018c:	e0002000 	.word	0xe0002000
 8010190:	e000ed00 	.word	0xe000ed00
 8010194:	40023008 	.word	0x40023008
 8010198:	40023000 	.word	0x40023000
 801019c:	f407a5c2 	.word	0xf407a5c2
 80101a0:	b5e8b5cd 	.word	0xb5e8b5cd
 80101a4:	e0042000 	.word	0xe0042000
 80101a8:	5c001000 	.word	0x5c001000
 80101ac:	58024c08 	.word	0x58024c08
 80101b0:	58024c00 	.word	0x58024c00
 80101b4:	200015bc 	.word	0x200015bc
 80101b8:	20000000 	.word	0x20000000

080101bc <MotionEC_Run>:
 80101bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80101c0:	ed2d 8b10 	vpush	{d8-d15}
 80101c4:	4c04      	ldr	r4, [pc, #16]	; (80101d8 <MotionEC_Run+0x1c>)
 80101c6:	7823      	ldrb	r3, [r4, #0]
 80101c8:	b09f      	sub	sp, #124	; 0x7c
 80101ca:	b93b      	cbnz	r3, 80101dc <MotionEC_Run+0x20>
 80101cc:	b01f      	add	sp, #124	; 0x7c
 80101ce:	ecbd 8b10 	vpop	{d8-d15}
 80101d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80101d6:	bf00      	nop
 80101d8:	200015bc 	.word	0x200015bc
 80101dc:	4607      	mov	r7, r0
 80101de:	460d      	mov	r5, r1
 80101e0:	6800      	ldr	r0, [r0, #0]
 80101e2:	6879      	ldr	r1, [r7, #4]
 80101e4:	68ba      	ldr	r2, [r7, #8]
 80101e6:	4ef7      	ldr	r6, [pc, #988]	; (80105c4 <MotionEC_Run+0x408>)
 80101e8:	f10d 0910 	add.w	r9, sp, #16
 80101ec:	464b      	mov	r3, r9
 80101ee:	c307      	stmia	r3!, {r0, r1, r2}
 80101f0:	ed9d ba05 	vldr	s22, [sp, #20]
 80101f4:	eddd ba04 	vldr	s23, [sp, #16]
 80101f8:	eddd 9a06 	vldr	s19, [sp, #24]
 80101fc:	ee6b 7a0b 	vmul.f32	s15, s22, s22
 8010200:	463b      	mov	r3, r7
 8010202:	eeeb 7aab 	vfma.f32	s15, s23, s23
 8010206:	f853 0f0c 	ldr.w	r0, [r3, #12]!
 801020a:	f10d 081c 	add.w	r8, sp, #28
 801020e:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8010212:	689a      	ldr	r2, [r3, #8]
 8010214:	6859      	ldr	r1, [r3, #4]
 8010216:	4643      	mov	r3, r8
 8010218:	c307      	stmia	r3!, {r0, r1, r2}
 801021a:	ee17 0a90 	vmov	r0, s15
 801021e:	f7f0 f99b 	bl	8000558 <__aeabi_f2d>
 8010222:	ec41 0b10 	vmov	d0, r0, r1
 8010226:	f00a f8f1 	bl	801a40c <sqrt>
 801022a:	ec51 0b10 	vmov	r0, r1, d0
 801022e:	f7f0 fcc3 	bl	8000bb8 <__aeabi_d2f>
 8010232:	ed9d 8a08 	vldr	s16, [sp, #32]
 8010236:	ed9d 9a07 	vldr	s18, [sp, #28]
 801023a:	eddd 8a09 	vldr	s17, [sp, #36]	; 0x24
 801023e:	ee68 7a08 	vmul.f32	s15, s16, s16
 8010242:	ee0a 0a10 	vmov	s20, r0
 8010246:	eee9 7a09 	vfma.f32	s15, s18, s18
 801024a:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 801024e:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8010252:	eecc aa0a 	vdiv.f32	s21, s24, s20
 8010256:	ee17 0a90 	vmov	r0, s15
 801025a:	f7f0 f97d 	bl	8000558 <__aeabi_f2d>
 801025e:	ec41 0b10 	vmov	d0, r0, r1
 8010262:	f00a f8d3 	bl	801a40c <sqrt>
 8010266:	ec51 0b10 	vmov	r0, r1, d0
 801026a:	f7f0 fca5 	bl	8000bb8 <__aeabi_d2f>
 801026e:	ee07 0a90 	vmov	s15, r0
 8010272:	eecc 7a27 	vdiv.f32	s15, s24, s15
 8010276:	7b33      	ldrb	r3, [r6, #12]
 8010278:	ee6b baaa 	vmul.f32	s23, s23, s21
 801027c:	ee29 9a27 	vmul.f32	s18, s18, s15
 8010280:	ee28 8a27 	vmul.f32	s16, s16, s15
 8010284:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8010288:	ee69 9aaa 	vmul.f32	s19, s19, s21
 801028c:	ee6b 7a2a 	vmul.f32	s15, s22, s21
 8010290:	ed8d 9a07 	vstr	s18, [sp, #28]
 8010294:	ed8d 8a08 	vstr	s16, [sp, #32]
 8010298:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 801029c:	edcd ba04 	vstr	s23, [sp, #16]
 80102a0:	edcd 7a05 	vstr	s15, [sp, #20]
 80102a4:	edcd 9a06 	vstr	s19, [sp, #24]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	f040 822f 	bne.w	801070c <MotionEC_Run+0x550>
 80102ae:	ee7a 6a4c 	vsub.f32	s13, s20, s24
 80102b2:	ed96 7a01 	vldr	s14, [r6, #4]
 80102b6:	ed96 5a00 	vldr	s10, [r6]
 80102ba:	edd4 2a04 	vldr	s5, [r4, #16]
 80102be:	ed94 3a05 	vldr	s6, [r4, #20]
 80102c2:	edd4 3a06 	vldr	s7, [r4, #24]
 80102c6:	ed94 4a01 	vldr	s8, [r4, #4]
 80102ca:	edd4 4a02 	vldr	s9, [r4, #8]
 80102ce:	eef0 6ae6 	vabs.f32	s13, s13
 80102d2:	ee7c 6a66 	vsub.f32	s13, s24, s13
 80102d6:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
 80102da:	ee26 6a87 	vmul.f32	s12, s13, s14
 80102de:	ee27 7a25 	vmul.f32	s14, s14, s11
 80102e2:	ee66 6a85 	vmul.f32	s13, s13, s10
 80102e6:	ee25 5a25 	vmul.f32	s10, s10, s11
 80102ea:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80102ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102f2:	eeb4 5ae6 	vcmpe.f32	s10, s13
 80102f6:	bfb8      	it	lt
 80102f8:	eeb0 7a46 	vmovlt.f32	s14, s12
 80102fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010300:	bfa8      	it	ge
 8010302:	eef0 6a45 	vmovge.f32	s13, s10
 8010306:	ee27 9a09 	vmul.f32	s18, s14, s18
 801030a:	ee27 8a08 	vmul.f32	s16, s14, s16
 801030e:	ee68 8a87 	vmul.f32	s17, s17, s14
 8010312:	ee26 6aab 	vmul.f32	s12, s13, s23
 8010316:	ee3c 7a47 	vsub.f32	s14, s24, s14
 801031a:	ee7c 5a66 	vsub.f32	s11, s24, s13
 801031e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010322:	ee69 9aa6 	vmul.f32	s19, s19, s13
 8010326:	edd4 6a03 	vldr	s13, [r4, #12]
 801032a:	eea7 9a22 	vfma.f32	s18, s14, s5
 801032e:	eea7 8a03 	vfma.f32	s16, s14, s6
 8010332:	eee7 8a23 	vfma.f32	s17, s14, s7
 8010336:	eeb0 7a46 	vmov.f32	s14, s12
 801033a:	eea5 7a84 	vfma.f32	s14, s11, s8
 801033e:	eee5 7aa4 	vfma.f32	s15, s11, s9
 8010342:	eee5 9aa6 	vfma.f32	s19, s11, s13
 8010346:	ed84 9a04 	vstr	s18, [r4, #16]
 801034a:	ed84 8a05 	vstr	s16, [r4, #20]
 801034e:	edc4 8a06 	vstr	s17, [r4, #24]
 8010352:	ed84 7a01 	vstr	s14, [r4, #4]
 8010356:	edc4 7a02 	vstr	s15, [r4, #8]
 801035a:	edc4 9a03 	vstr	s19, [r4, #12]
 801035e:	eef0 aa47 	vmov.f32	s21, s14
 8010362:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010366:	ee28 8a08 	vmul.f32	s16, s16, s16
 801036a:	eee7 7a07 	vfma.f32	s15, s14, s14
 801036e:	eea9 8a09 	vfma.f32	s16, s18, s18
 8010372:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8010376:	eea8 8aa8 	vfma.f32	s16, s17, s17
 801037a:	ee17 0a90 	vmov	r0, s15
 801037e:	f7f0 f8eb 	bl	8000558 <__aeabi_f2d>
 8010382:	ec41 0b10 	vmov	d0, r0, r1
 8010386:	f00a f841 	bl	801a40c <sqrt>
 801038a:	ee18 0a10 	vmov	r0, s16
 801038e:	ec59 8b10 	vmov	r8, r9, d0
 8010392:	f7f0 f8e1 	bl	8000558 <__aeabi_f2d>
 8010396:	ec41 0b10 	vmov	d0, r0, r1
 801039a:	f00a f837 	bl	801a40c <sqrt>
 801039e:	4649      	mov	r1, r9
 80103a0:	4640      	mov	r0, r8
 80103a2:	ed8d 0b00 	vstr	d0, [sp]
 80103a6:	f7f0 fc07 	bl	8000bb8 <__aeabi_d2f>
 80103aa:	ed9d 0b00 	vldr	d0, [sp]
 80103ae:	ee07 0a90 	vmov	s15, r0
 80103b2:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 80103b6:	ec51 0b10 	vmov	r0, r1, d0
 80103ba:	ee8b 9aa7 	vdiv.f32	s18, s23, s15
 80103be:	f7f0 fbfb 	bl	8000bb8 <__aeabi_d2f>
 80103c2:	ee07 0a90 	vmov	s15, r0
 80103c6:	eecb 7aa7 	vdiv.f32	s15, s23, s15
 80103ca:	edd4 6a04 	vldr	s13, [r4, #16]
 80103ce:	edd4 8a03 	vldr	s17, [r4, #12]
 80103d2:	edd4 5a02 	vldr	s11, [r4, #8]
 80103d6:	ed94 7a06 	vldr	s14, [r4, #24]
 80103da:	ed94 6a05 	vldr	s12, [r4, #20]
 80103de:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80103e2:	ee69 8a28 	vmul.f32	s17, s18, s17
 80103e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80103ea:	ee69 aa2a 	vmul.f32	s21, s18, s21
 80103ee:	ee66 9ae8 	vnmul.f32	s19, s13, s17
 80103f2:	ee29 9a25 	vmul.f32	s18, s18, s11
 80103f6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80103fa:	eee7 9a2a 	vfma.f32	s19, s14, s21
 80103fe:	ee29 8a47 	vnmul.f32	s16, s18, s14
 8010402:	ee27 aaea 	vnmul.f32	s20, s15, s21
 8010406:	eea8 8aa7 	vfma.f32	s16, s17, s15
 801040a:	ee29 6aa9 	vmul.f32	s12, s19, s19
 801040e:	eea9 aa26 	vfma.f32	s20, s18, s13
 8010412:	eea8 6a08 	vfma.f32	s12, s16, s16
 8010416:	edc4 7a05 	vstr	s15, [r4, #20]
 801041a:	eeaa 6a0a 	vfma.f32	s12, s20, s20
 801041e:	ed84 7a06 	vstr	s14, [r4, #24]
 8010422:	edc4 6a04 	vstr	s13, [r4, #16]
 8010426:	ee16 0a10 	vmov	r0, s12
 801042a:	edc4 8a03 	vstr	s17, [r4, #12]
 801042e:	edc4 aa01 	vstr	s21, [r4, #4]
 8010432:	ed84 9a02 	vstr	s18, [r4, #8]
 8010436:	f7f0 f88f 	bl	8000558 <__aeabi_f2d>
 801043a:	ec41 0b10 	vmov	d0, r0, r1
 801043e:	f009 ffe5 	bl	801a40c <sqrt>
 8010442:	ec51 0b10 	vmov	r0, r1, d0
 8010446:	f7f0 fbb7 	bl	8000bb8 <__aeabi_d2f>
 801044a:	ee07 0a90 	vmov	s15, r0
 801044e:	eecb 7aa7 	vdiv.f32	s15, s23, s15
 8010452:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010456:	ee2a aa27 	vmul.f32	s20, s20, s15
 801045a:	ee28 8a27 	vmul.f32	s16, s16, s15
 801045e:	ee2a baca 	vnmul.f32	s22, s21, s20
 8010462:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8010466:	eea8 ba28 	vfma.f32	s22, s16, s17
 801046a:	ee29 cae8 	vnmul.f32	s24, s19, s17
 801046e:	ee78 7a4b 	vsub.f32	s15, s16, s22
 8010472:	ee69 ca48 	vnmul.f32	s25, s18, s16
 8010476:	ee77 7ae8 	vsub.f32	s15, s15, s17
 801047a:	eeaa ca09 	vfma.f32	s24, s20, s18
 801047e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010486:	eee9 caaa 	vfma.f32	s25, s19, s21
 801048a:	f2c0 815b 	blt.w	8010744 <MotionEC_Run+0x588>
 801048e:	ee77 7aab 	vadd.f32	s15, s15, s23
 8010492:	ee17 0a90 	vmov	r0, s15
 8010496:	f7f0 f85f 	bl	8000558 <__aeabi_f2d>
 801049a:	ec41 0b10 	vmov	d0, r0, r1
 801049e:	f009 ffb5 	bl	801a40c <sqrt>
 80104a2:	2200      	movs	r2, #0
 80104a4:	4b48      	ldr	r3, [pc, #288]	; (80105c8 <MotionEC_Run+0x40c>)
 80104a6:	ec51 0b10 	vmov	r0, r1, d0
 80104aa:	f7f0 f8ad 	bl	8000608 <__aeabi_dmul>
 80104ae:	ee79 7a6c 	vsub.f32	s15, s18, s25
 80104b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80104b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104ba:	da02      	bge.n	80104c2 <MotionEC_Run+0x306>
 80104bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80104c0:	4619      	mov	r1, r3
 80104c2:	f7f0 fb79 	bl	8000bb8 <__aeabi_d2f>
 80104c6:	ee7b 7a48 	vsub.f32	s15, s22, s16
 80104ca:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80104ce:	ee77 7ae8 	vsub.f32	s15, s15, s17
 80104d2:	ee0b 0a90 	vmov	s23, r0
 80104d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80104da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104de:	6028      	str	r0, [r5, #0]
 80104e0:	f2c0 8136 	blt.w	8010750 <MotionEC_Run+0x594>
 80104e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80104e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80104ec:	ee17 0a90 	vmov	r0, s15
 80104f0:	f7f0 f832 	bl	8000558 <__aeabi_f2d>
 80104f4:	ec41 0b10 	vmov	d0, r0, r1
 80104f8:	f009 ff88 	bl	801a40c <sqrt>
 80104fc:	2200      	movs	r2, #0
 80104fe:	4b32      	ldr	r3, [pc, #200]	; (80105c8 <MotionEC_Run+0x40c>)
 8010500:	ec51 0b10 	vmov	r0, r1, d0
 8010504:	f7f0 f880 	bl	8000608 <__aeabi_dmul>
 8010508:	ee7a 7a6a 	vsub.f32	s15, s20, s21
 801050c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010514:	da02      	bge.n	801051c <MotionEC_Run+0x360>
 8010516:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801051a:	4619      	mov	r1, r3
 801051c:	f7f0 fb4c 	bl	8000bb8 <__aeabi_d2f>
 8010520:	ee78 7ac8 	vsub.f32	s15, s17, s16
 8010524:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010528:	ee77 7acb 	vsub.f32	s15, s15, s22
 801052c:	ee0d 0a10 	vmov	s26, r0
 8010530:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010538:	6068      	str	r0, [r5, #4]
 801053a:	f2c0 8106 	blt.w	801074a <MotionEC_Run+0x58e>
 801053e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010542:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010546:	ee17 0a90 	vmov	r0, s15
 801054a:	f7f0 f805 	bl	8000558 <__aeabi_f2d>
 801054e:	ec41 0b10 	vmov	d0, r0, r1
 8010552:	f009 ff5b 	bl	801a40c <sqrt>
 8010556:	2200      	movs	r2, #0
 8010558:	4b1b      	ldr	r3, [pc, #108]	; (80105c8 <MotionEC_Run+0x40c>)
 801055a:	ec51 0b10 	vmov	r0, r1, d0
 801055e:	f7f0 f853 	bl	8000608 <__aeabi_dmul>
 8010562:	ee7c 7a69 	vsub.f32	s15, s24, s19
 8010566:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801056a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801056e:	da02      	bge.n	8010576 <MotionEC_Run+0x3ba>
 8010570:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010574:	4619      	mov	r1, r3
 8010576:	f7f0 fb1f 	bl	8000bb8 <__aeabi_d2f>
 801057a:	ee78 7a28 	vadd.f32	s15, s16, s17
 801057e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010582:	ee77 7a8b 	vadd.f32	s15, s15, s22
 8010586:	ee0d 0a90 	vmov	s27, r0
 801058a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801058e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010592:	60a8      	str	r0, [r5, #8]
 8010594:	f2c0 81c3 	blt.w	801091e <MotionEC_Run+0x762>
 8010598:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801059c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80105a0:	ee17 0a90 	vmov	r0, s15
 80105a4:	f7ef ffd8 	bl	8000558 <__aeabi_f2d>
 80105a8:	ec41 0b10 	vmov	d0, r0, r1
 80105ac:	f009 ff2e 	bl	801a40c <sqrt>
 80105b0:	2200      	movs	r2, #0
 80105b2:	4b05      	ldr	r3, [pc, #20]	; (80105c8 <MotionEC_Run+0x40c>)
 80105b4:	ec51 0b10 	vmov	r0, r1, d0
 80105b8:	f7f0 f826 	bl	8000608 <__aeabi_dmul>
 80105bc:	f7f0 fafc 	bl	8000bb8 <__aeabi_d2f>
 80105c0:	e006      	b.n	80105d0 <MotionEC_Run+0x414>
 80105c2:	bf00      	nop
 80105c4:	20000000 	.word	0x20000000
 80105c8:	3fe00000 	.word	0x3fe00000
 80105cc:	42652edf 	.word	0x42652edf
 80105d0:	ee0e 0a10 	vmov	s28, r0
 80105d4:	7fe3      	ldrb	r3, [r4, #31]
 80105d6:	ed85 ea03 	vstr	s28, [r5, #12]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	f040 8116 	bne.w	801080c <MotionEC_Run+0x650>
 80105e0:	7f23      	ldrb	r3, [r4, #28]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d06a      	beq.n	80106bc <MotionEC_Run+0x500>
 80105e6:	ed96 5a0d 	vldr	s10, [r6, #52]	; 0x34
 80105ea:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
 80105ee:	edd6 5a10 	vldr	s11, [r6, #64]	; 0x40
 80105f2:	ed97 6a06 	vldr	s12, [r7, #24]
 80105f6:	edd6 4a0b 	vldr	s9, [r6, #44]	; 0x2c
 80105fa:	ed96 4a0e 	vldr	s8, [r6, #56]	; 0x38
 80105fe:	ed86 9a0d 	vstr	s18, [r6, #52]	; 0x34
 8010602:	ee65 6a68 	vnmul.f32	s13, s10, s17
 8010606:	ee29 7a67 	vnmul.f32	s14, s18, s15
 801060a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801060e:	eea5 7a2a 	vfma.f32	s14, s10, s21
 8010612:	eee5 6a89 	vfma.f32	s13, s11, s18
 8010616:	eee5 7aea 	vfms.f32	s15, s11, s21
 801061a:	ed96 5a08 	vldr	s10, [r6, #32]
 801061e:	edc6 aa0a 	vstr	s21, [r6, #40]	; 0x28
 8010622:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8010626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801062a:	eee5 7a0a 	vfma.f32	s15, s10, s20
 801062e:	eea8 7a24 	vfma.f32	s14, s16, s9
 8010632:	eee9 6a84 	vfma.f32	s13, s19, s8
 8010636:	bf0c      	ite	eq
 8010638:	ed96 6a02 	vldreq	s12, [r6, #8]
 801063c:	ed86 6a02 	vstrne	s12, [r6, #8]
 8010640:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8010644:	eec3 5a86 	vdiv.f32	s11, s7, s12
 8010648:	eee4 6aca 	vfms.f32	s13, s9, s20
 801064c:	eea9 7ac5 	vfms.f32	s14, s19, s10
 8010650:	eee8 7a44 	vfms.f32	s15, s16, s8
 8010654:	edd6 4a0f 	vldr	s9, [r6, #60]	; 0x3c
 8010658:	ed96 6a09 	vldr	s12, [r6, #36]	; 0x24
 801065c:	ed96 5a0c 	vldr	s10, [r6, #48]	; 0x30
 8010660:	ed86 aa0e 	vstr	s20, [r6, #56]	; 0x38
 8010664:	eeec 7a86 	vfma.f32	s15, s25, s12
 8010668:	eeeb 6a24 	vfma.f32	s13, s22, s9
 801066c:	eeac 7a05 	vfma.f32	s14, s24, s10
 8010670:	eeec 7a64 	vfms.f32	s15, s24, s9
 8010674:	eeab 7a46 	vfms.f32	s14, s22, s12
 8010678:	eeec 6ac5 	vfms.f32	s13, s25, s10
 801067c:	ed1f 6a2d 	vldr	s12, [pc, #-180]	; 80105cc <MotionEC_Run+0x410>
 8010680:	ed86 8a08 	vstr	s16, [r6, #32]
 8010684:	ee66 6a86 	vmul.f32	s13, s13, s12
 8010688:	ee67 7a86 	vmul.f32	s15, s15, s12
 801068c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8010690:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8010694:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010698:	ee27 7a25 	vmul.f32	s14, s14, s11
 801069c:	edc5 6a07 	vstr	s13, [r5, #28]
 80106a0:	edc5 7a08 	vstr	s15, [r5, #32]
 80106a4:	edc6 9a0b 	vstr	s19, [r6, #44]	; 0x2c
 80106a8:	ed86 ca09 	vstr	s24, [r6, #36]	; 0x24
 80106ac:	ed86 ba0c 	vstr	s22, [r6, #48]	; 0x30
 80106b0:	ed85 7a09 	vstr	s14, [r5, #36]	; 0x24
 80106b4:	edc6 ca0f 	vstr	s25, [r6, #60]	; 0x3c
 80106b8:	edc6 8a10 	vstr	s17, [r6, #64]	; 0x40
 80106bc:	7f63      	ldrb	r3, [r4, #29]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d149      	bne.n	8010756 <MotionEC_Run+0x59a>
 80106c2:	7fa3      	ldrb	r3, [r4, #30]
 80106c4:	b1bb      	cbz	r3, 80106f6 <MotionEC_Run+0x53a>
 80106c6:	edd7 6a00 	vldr	s13, [r7]
 80106ca:	ed97 7a01 	vldr	s14, [r7, #4]
 80106ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80106d2:	ed95 5a0a 	vldr	s10, [r5, #40]	; 0x28
 80106d6:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 80106da:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 80106de:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80106e2:	ee37 7a65 	vsub.f32	s14, s14, s11
 80106e6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80106ea:	edc5 6a0d 	vstr	s13, [r5, #52]	; 0x34
 80106ee:	ed85 7a0e 	vstr	s14, [r5, #56]	; 0x38
 80106f2:	edc5 7a0f 	vstr	s15, [r5, #60]	; 0x3c
 80106f6:	6828      	ldr	r0, [r5, #0]
 80106f8:	6869      	ldr	r1, [r5, #4]
 80106fa:	68aa      	ldr	r2, [r5, #8]
 80106fc:	68eb      	ldr	r3, [r5, #12]
 80106fe:	4c89      	ldr	r4, [pc, #548]	; (8010924 <MotionEC_Run+0x768>)
 8010700:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010702:	b01f      	add	sp, #124	; 0x7c
 8010704:	ecbd 8b10 	vpop	{d8-d15}
 8010708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801070c:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8010710:	1d23      	adds	r3, r4, #4
 8010712:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010716:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 801071a:	f104 0310 	add.w	r3, r4, #16
 801071e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010722:	2300      	movs	r3, #0
 8010724:	ed94 7a01 	vldr	s14, [r4, #4]
 8010728:	edd4 7a02 	vldr	s15, [r4, #8]
 801072c:	edd4 9a03 	vldr	s19, [r4, #12]
 8010730:	ed94 9a04 	vldr	s18, [r4, #16]
 8010734:	ed94 8a05 	vldr	s16, [r4, #20]
 8010738:	edd4 8a06 	vldr	s17, [r4, #24]
 801073c:	7333      	strb	r3, [r6, #12]
 801073e:	edd4 aa01 	vldr	s21, [r4, #4]
 8010742:	e60e      	b.n	8010362 <MotionEC_Run+0x1a6>
 8010744:	2000      	movs	r0, #0
 8010746:	2100      	movs	r1, #0
 8010748:	e6b1      	b.n	80104ae <MotionEC_Run+0x2f2>
 801074a:	2000      	movs	r0, #0
 801074c:	2100      	movs	r1, #0
 801074e:	e708      	b.n	8010562 <MotionEC_Run+0x3a6>
 8010750:	2000      	movs	r0, #0
 8010752:	2100      	movs	r1, #0
 8010754:	e6d8      	b.n	8010508 <MotionEC_Run+0x34c>
 8010756:	2300      	movs	r3, #0
 8010758:	eef1 6a6b 	vneg.f32	s13, s23
 801075c:	eeb1 7a4d 	vneg.f32	s14, s26
 8010760:	eef1 7a6d 	vneg.f32	s15, s27
 8010764:	aa12      	add	r2, sp, #72	; 0x48
 8010766:	a916      	add	r1, sp, #88	; 0x58
 8010768:	a80a      	add	r0, sp, #40	; 0x28
 801076a:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
 801076e:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 8010772:	9316      	str	r3, [sp, #88]	; 0x58
 8010774:	9317      	str	r3, [sp, #92]	; 0x5c
 8010776:	9318      	str	r3, [sp, #96]	; 0x60
 8010778:	ed8d 7a0c 	vstr	s14, [sp, #48]	; 0x30
 801077c:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8010780:	ed8d ea0a 	vstr	s28, [sp, #40]	; 0x28
 8010784:	ed8d ea0e 	vstr	s28, [sp, #56]	; 0x38
 8010788:	edcd ba0f 	vstr	s23, [sp, #60]	; 0x3c
 801078c:	ed8d da10 	vstr	s26, [sp, #64]	; 0x40
 8010790:	edcd da11 	vstr	s27, [sp, #68]	; 0x44
 8010794:	9619      	str	r6, [sp, #100]	; 0x64
 8010796:	f7ff fc19 	bl	800ffcc <quaternionsMult>
 801079a:	aa1a      	add	r2, sp, #104	; 0x68
 801079c:	a812      	add	r0, sp, #72	; 0x48
 801079e:	a90e      	add	r1, sp, #56	; 0x38
 80107a0:	f7ff fc14 	bl	800ffcc <quaternionsMult>
 80107a4:	ed9d 9a1b 	vldr	s18, [sp, #108]	; 0x6c
 80107a8:	ed9d 7a1a 	vldr	s14, [sp, #104]	; 0x68
 80107ac:	eddd 8a1c 	vldr	s17, [sp, #112]	; 0x70
 80107b0:	ed9d 8a1d 	vldr	s16, [sp, #116]	; 0x74
 80107b4:	ee69 7a09 	vmul.f32	s15, s18, s18
 80107b8:	eee7 7a07 	vfma.f32	s15, s14, s14
 80107bc:	eee8 7aa8 	vfma.f32	s15, s17, s17
 80107c0:	eee8 7a08 	vfma.f32	s15, s16, s16
 80107c4:	ee17 0a90 	vmov	r0, s15
 80107c8:	f7ef fec6 	bl	8000558 <__aeabi_f2d>
 80107cc:	ec41 0b10 	vmov	d0, r0, r1
 80107d0:	f009 fe1c 	bl	801a40c <sqrt>
 80107d4:	2000      	movs	r0, #0
 80107d6:	ec53 2b10 	vmov	r2, r3, d0
 80107da:	4953      	ldr	r1, [pc, #332]	; (8010928 <MotionEC_Run+0x76c>)
 80107dc:	f7f0 f83e 	bl	800085c <__aeabi_ddiv>
 80107e0:	f7f0 f9ea 	bl	8000bb8 <__aeabi_d2f>
 80107e4:	ee07 0a90 	vmov	s15, r0
 80107e8:	ee29 9a27 	vmul.f32	s18, s18, s15
 80107ec:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80107f0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80107f4:	ed8d 9a1b 	vstr	s18, [sp, #108]	; 0x6c
 80107f8:	edcd 8a1c 	vstr	s17, [sp, #112]	; 0x70
 80107fc:	ed8d 8a1d 	vstr	s16, [sp, #116]	; 0x74
 8010800:	ab1b      	add	r3, sp, #108	; 0x6c
 8010802:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010804:	62a8      	str	r0, [r5, #40]	; 0x28
 8010806:	62e9      	str	r1, [r5, #44]	; 0x2c
 8010808:	632a      	str	r2, [r5, #48]	; 0x30
 801080a:	e75a      	b.n	80106c2 <MotionEC_Run+0x506>
 801080c:	ee6d 6a4d 	vnmul.f32	s13, s26, s26
 8010810:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
 8010814:	eef0 fa00 	vmov.f32	s31, #0	; 0x40000000  2.0
 8010818:	eef0 7a4f 	vmov.f32	s15, s30
 801081c:	eee6 7aaf 	vfma.f32	s15, s13, s31
 8010820:	ee2d 7aed 	vnmul.f32	s14, s27, s27
 8010824:	edcd 6a03 	vstr	s13, [sp, #12]
 8010828:	eee7 7a2f 	vfma.f32	s15, s14, s31
 801082c:	ee17 0a90 	vmov	r0, s15
 8010830:	f7ef fe92 	bl	8000558 <__aeabi_f2d>
 8010834:	ee6b 7a8d 	vmul.f32	s15, s23, s26
 8010838:	e9cd 0100 	strd	r0, r1, [sp]
 801083c:	eeed 7a8e 	vfma.f32	s15, s27, s28
 8010840:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010844:	ee17 0a90 	vmov	r0, s15
 8010848:	f7ef fe86 	bl	8000558 <__aeabi_f2d>
 801084c:	ed9d 1b00 	vldr	d1, [sp]
 8010850:	ec41 0b10 	vmov	d0, r0, r1
 8010854:	f009 fd2a 	bl	801a2ac <atan2>
 8010858:	ec51 0b10 	vmov	r0, r1, d0
 801085c:	f7f0 f9ac 	bl	8000bb8 <__aeabi_d2f>
 8010860:	ee6b 7aeb 	vnmul.f32	s15, s23, s23
 8010864:	eddd 6a03 	vldr	s13, [sp, #12]
 8010868:	9002      	str	r0, [sp, #8]
 801086a:	eea7 faaf 	vfma.f32	s30, s15, s31
 801086e:	ee07 0a10 	vmov	s14, r0
 8010872:	eea6 faaf 	vfma.f32	s30, s13, s31
 8010876:	eef1 ea47 	vneg.f32	s29, s14
 801087a:	edc5 ea04 	vstr	s29, [r5, #16]
 801087e:	ee1f 0a10 	vmov	r0, s30
 8010882:	f7ef fe69 	bl	8000558 <__aeabi_f2d>
 8010886:	ee6b 7a8e 	vmul.f32	s15, s23, s28
 801088a:	e9cd 0100 	strd	r0, r1, [sp]
 801088e:	eeed 7a2d 	vfma.f32	s15, s26, s27
 8010892:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010896:	ee17 0a90 	vmov	r0, s15
 801089a:	f7ef fe5d 	bl	8000558 <__aeabi_f2d>
 801089e:	ed9d 1b00 	vldr	d1, [sp]
 80108a2:	ec41 0b10 	vmov	d0, r0, r1
 80108a6:	f009 fd01 	bl	801a2ac <atan2>
 80108aa:	ec51 0b10 	vmov	r0, r1, d0
 80108ae:	f7f0 f983 	bl	8000bb8 <__aeabi_d2f>
 80108b2:	ee6e 7a4d 	vnmul.f32	s15, s28, s26
 80108b6:	ee07 0a10 	vmov	s14, r0
 80108ba:	eeeb 7aad 	vfma.f32	s15, s23, s27
 80108be:	eeb1 fa47 	vneg.f32	s30, s14
 80108c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80108c6:	ed85 fa05 	vstr	s30, [r5, #20]
 80108ca:	ee17 0a90 	vmov	r0, s15
 80108ce:	f7ef fe43 	bl	8000558 <__aeabi_f2d>
 80108d2:	ec41 0b10 	vmov	d0, r0, r1
 80108d6:	f009 fcaf 	bl	801a238 <asin>
 80108da:	ec51 0b10 	vmov	r0, r1, d0
 80108de:	f7f0 f96b 	bl	8000bb8 <__aeabi_d2f>
 80108e2:	ed9d 7a02 	vldr	s14, [sp, #8]
 80108e6:	61a8      	str	r0, [r5, #24]
 80108e8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80108ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108f0:	bfc8      	it	gt
 80108f2:	eddf ea0e 	vldrgt	s29, [pc, #56]	; 801092c <MotionEC_Run+0x770>
 80108f6:	ee07 0a90 	vmov	s15, r0
 80108fa:	bfc8      	it	gt
 80108fc:	ee7e eac7 	vsubgt.f32	s29, s29, s14
 8010900:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8010930 <MotionEC_Run+0x774>
 8010904:	ee6e ea87 	vmul.f32	s29, s29, s14
 8010908:	ee2f fa07 	vmul.f32	s30, s30, s14
 801090c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010910:	edc5 ea04 	vstr	s29, [r5, #16]
 8010914:	ed85 fa05 	vstr	s30, [r5, #20]
 8010918:	edc5 7a06 	vstr	s15, [r5, #24]
 801091c:	e660      	b.n	80105e0 <MotionEC_Run+0x424>
 801091e:	ed9f ea05 	vldr	s28, [pc, #20]	; 8010934 <MotionEC_Run+0x778>
 8010922:	e657      	b.n	80105d4 <MotionEC_Run+0x418>
 8010924:	20000010 	.word	0x20000010
 8010928:	3ff00000 	.word	0x3ff00000
 801092c:	40c90fdc 	.word	0x40c90fdc
 8010930:	42652edf 	.word	0x42652edf
 8010934:	00000000 	.word	0x00000000

08010938 <MotionEC_GetOrientationEnable>:
 8010938:	4b02      	ldr	r3, [pc, #8]	; (8010944 <MotionEC_GetOrientationEnable+0xc>)
 801093a:	781a      	ldrb	r2, [r3, #0]
 801093c:	b10a      	cbz	r2, 8010942 <MotionEC_GetOrientationEnable+0xa>
 801093e:	7fdb      	ldrb	r3, [r3, #31]
 8010940:	7003      	strb	r3, [r0, #0]
 8010942:	4770      	bx	lr
 8010944:	200015bc 	.word	0x200015bc

08010948 <MotionEC_SetOrientationEnable>:
 8010948:	4b02      	ldr	r3, [pc, #8]	; (8010954 <MotionEC_SetOrientationEnable+0xc>)
 801094a:	781a      	ldrb	r2, [r3, #0]
 801094c:	b102      	cbz	r2, 8010950 <MotionEC_SetOrientationEnable+0x8>
 801094e:	77d8      	strb	r0, [r3, #31]
 8010950:	4770      	bx	lr
 8010952:	bf00      	nop
 8010954:	200015bc 	.word	0x200015bc

08010958 <MotionEC_GetVirtualGyroEnable>:
 8010958:	4b02      	ldr	r3, [pc, #8]	; (8010964 <MotionEC_GetVirtualGyroEnable+0xc>)
 801095a:	781a      	ldrb	r2, [r3, #0]
 801095c:	b10a      	cbz	r2, 8010962 <MotionEC_GetVirtualGyroEnable+0xa>
 801095e:	7f1b      	ldrb	r3, [r3, #28]
 8010960:	7003      	strb	r3, [r0, #0]
 8010962:	4770      	bx	lr
 8010964:	200015bc 	.word	0x200015bc

08010968 <MotionEC_SetVirtualGyroEnable>:
 8010968:	4b02      	ldr	r3, [pc, #8]	; (8010974 <MotionEC_SetVirtualGyroEnable+0xc>)
 801096a:	781a      	ldrb	r2, [r3, #0]
 801096c:	b102      	cbz	r2, 8010970 <MotionEC_SetVirtualGyroEnable+0x8>
 801096e:	7718      	strb	r0, [r3, #28]
 8010970:	4770      	bx	lr
 8010972:	bf00      	nop
 8010974:	200015bc 	.word	0x200015bc

08010978 <MotionEC_GetGravityEnable>:
 8010978:	4b02      	ldr	r3, [pc, #8]	; (8010984 <MotionEC_GetGravityEnable+0xc>)
 801097a:	781a      	ldrb	r2, [r3, #0]
 801097c:	b10a      	cbz	r2, 8010982 <MotionEC_GetGravityEnable+0xa>
 801097e:	7f5b      	ldrb	r3, [r3, #29]
 8010980:	7003      	strb	r3, [r0, #0]
 8010982:	4770      	bx	lr
 8010984:	200015bc 	.word	0x200015bc

08010988 <MotionEC_SetGravityEnable>:
 8010988:	4b02      	ldr	r3, [pc, #8]	; (8010994 <MotionEC_SetGravityEnable+0xc>)
 801098a:	781a      	ldrb	r2, [r3, #0]
 801098c:	b102      	cbz	r2, 8010990 <MotionEC_SetGravityEnable+0x8>
 801098e:	7758      	strb	r0, [r3, #29]
 8010990:	4770      	bx	lr
 8010992:	bf00      	nop
 8010994:	200015bc 	.word	0x200015bc

08010998 <MotionEC_GetLinearAccEnable>:
 8010998:	4b02      	ldr	r3, [pc, #8]	; (80109a4 <MotionEC_GetLinearAccEnable+0xc>)
 801099a:	781a      	ldrb	r2, [r3, #0]
 801099c:	b10a      	cbz	r2, 80109a2 <MotionEC_GetLinearAccEnable+0xa>
 801099e:	7f9b      	ldrb	r3, [r3, #30]
 80109a0:	7003      	strb	r3, [r0, #0]
 80109a2:	4770      	bx	lr
 80109a4:	200015bc 	.word	0x200015bc

080109a8 <MotionEC_SetLinearAccEnable>:
 80109a8:	4b02      	ldr	r3, [pc, #8]	; (80109b4 <MotionEC_SetLinearAccEnable+0xc>)
 80109aa:	781a      	ldrb	r2, [r3, #0]
 80109ac:	b102      	cbz	r2, 80109b0 <MotionEC_SetLinearAccEnable+0x8>
 80109ae:	7798      	strb	r0, [r3, #30]
 80109b0:	4770      	bx	lr
 80109b2:	bf00      	nop
 80109b4:	200015bc 	.word	0x200015bc

080109b8 <MotionEC_GetLibVersion>:
 80109b8:	4b0f      	ldr	r3, [pc, #60]	; (80109f8 <MotionEC_GetLibVersion+0x40>)
 80109ba:	781b      	ldrb	r3, [r3, #0]
 80109bc:	b90b      	cbnz	r3, 80109c2 <MotionEC_GetLibVersion+0xa>
 80109be:	4618      	mov	r0, r3
 80109c0:	4770      	bx	lr
 80109c2:	b470      	push	{r4, r5, r6}
 80109c4:	4e0d      	ldr	r6, [pc, #52]	; (80109fc <MotionEC_GetLibVersion+0x44>)
 80109c6:	4605      	mov	r5, r0
 80109c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80109ca:	b08b      	sub	sp, #44	; 0x2c
 80109cc:	ac01      	add	r4, sp, #4
 80109ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80109d0:	6833      	ldr	r3, [r6, #0]
 80109d2:	f824 3b02 	strh.w	r3, [r4], #2
 80109d6:	0c1b      	lsrs	r3, r3, #16
 80109d8:	7023      	strb	r3, [r4, #0]
 80109da:	ac01      	add	r4, sp, #4
 80109dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80109de:	8826      	ldrh	r6, [r4, #0]
 80109e0:	60eb      	str	r3, [r5, #12]
 80109e2:	78a4      	ldrb	r4, [r4, #2]
 80109e4:	6028      	str	r0, [r5, #0]
 80109e6:	2312      	movs	r3, #18
 80109e8:	4618      	mov	r0, r3
 80109ea:	6069      	str	r1, [r5, #4]
 80109ec:	60aa      	str	r2, [r5, #8]
 80109ee:	822e      	strh	r6, [r5, #16]
 80109f0:	74ac      	strb	r4, [r5, #18]
 80109f2:	b00b      	add	sp, #44	; 0x2c
 80109f4:	bc70      	pop	{r4, r5, r6}
 80109f6:	4770      	bx	lr
 80109f8:	200015bc 	.word	0x200015bc
 80109fc:	0801cd58 	.word	0x0801cd58

08010a00 <MotionAC_Initialize>:
 8010a00:	4a5a      	ldr	r2, [pc, #360]	; (8010b6c <MotionAC_Initialize+0x16c>)
 8010a02:	495b      	ldr	r1, [pc, #364]	; (8010b70 <MotionAC_Initialize+0x170>)
 8010a04:	6813      	ldr	r3, [r2, #0]
 8010a06:	f023 0301 	bic.w	r3, r3, #1
 8010a0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010a0e:	6013      	str	r3, [r2, #0]
 8010a10:	680b      	ldr	r3, [r1, #0]
 8010a12:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8010a16:	4013      	ands	r3, r2
 8010a18:	f24c 2440 	movw	r4, #49728	; 0xc240
 8010a1c:	42a3      	cmp	r3, r4
 8010a1e:	b091      	sub	sp, #68	; 0x44
 8010a20:	d013      	beq.n	8010a4a <MotionAC_Initialize+0x4a>
 8010a22:	680b      	ldr	r3, [r1, #0]
 8010a24:	f24c 2170 	movw	r1, #49776	; 0xc270
 8010a28:	4013      	ands	r3, r2
 8010a2a:	428b      	cmp	r3, r1
 8010a2c:	d00d      	beq.n	8010a4a <MotionAC_Initialize+0x4a>
 8010a2e:	4b51      	ldr	r3, [pc, #324]	; (8010b74 <MotionAC_Initialize+0x174>)
 8010a30:	2201      	movs	r2, #1
 8010a32:	601a      	str	r2, [r3, #0]
 8010a34:	681a      	ldr	r2, [r3, #0]
 8010a36:	2a00      	cmp	r2, #0
 8010a38:	d1fc      	bne.n	8010a34 <MotionAC_Initialize+0x34>
 8010a3a:	4b4f      	ldr	r3, [pc, #316]	; (8010b78 <MotionAC_Initialize+0x178>)
 8010a3c:	4a4f      	ldr	r2, [pc, #316]	; (8010b7c <MotionAC_Initialize+0x17c>)
 8010a3e:	601a      	str	r2, [r3, #0]
 8010a40:	681a      	ldr	r2, [r3, #0]
 8010a42:	4b4f      	ldr	r3, [pc, #316]	; (8010b80 <MotionAC_Initialize+0x180>)
 8010a44:	429a      	cmp	r2, r3
 8010a46:	d01f      	beq.n	8010a88 <MotionAC_Initialize+0x88>
 8010a48:	e7fe      	b.n	8010a48 <MotionAC_Initialize+0x48>
 8010a4a:	4b4e      	ldr	r3, [pc, #312]	; (8010b84 <MotionAC_Initialize+0x184>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d1ed      	bne.n	8010a2e <MotionAC_Initialize+0x2e>
 8010a52:	4a4d      	ldr	r2, [pc, #308]	; (8010b88 <MotionAC_Initialize+0x188>)
 8010a54:	6813      	ldr	r3, [r2, #0]
 8010a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010a5a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8010a5e:	d006      	beq.n	8010a6e <MotionAC_Initialize+0x6e>
 8010a60:	6813      	ldr	r3, [r2, #0]
 8010a62:	f240 4283 	movw	r2, #1155	; 0x483
 8010a66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010a6a:	4293      	cmp	r3, r2
 8010a6c:	d1df      	bne.n	8010a2e <MotionAC_Initialize+0x2e>
 8010a6e:	4b47      	ldr	r3, [pc, #284]	; (8010b8c <MotionAC_Initialize+0x18c>)
 8010a70:	2201      	movs	r2, #1
 8010a72:	601a      	str	r2, [r3, #0]
 8010a74:	681a      	ldr	r2, [r3, #0]
 8010a76:	2a00      	cmp	r2, #0
 8010a78:	d1fc      	bne.n	8010a74 <MotionAC_Initialize+0x74>
 8010a7a:	4b45      	ldr	r3, [pc, #276]	; (8010b90 <MotionAC_Initialize+0x190>)
 8010a7c:	4a3f      	ldr	r2, [pc, #252]	; (8010b7c <MotionAC_Initialize+0x17c>)
 8010a7e:	601a      	str	r2, [r3, #0]
 8010a80:	681a      	ldr	r2, [r3, #0]
 8010a82:	4b3f      	ldr	r3, [pc, #252]	; (8010b80 <MotionAC_Initialize+0x180>)
 8010a84:	429a      	cmp	r2, r3
 8010a86:	d1df      	bne.n	8010a48 <MotionAC_Initialize+0x48>
 8010a88:	4f42      	ldr	r7, [pc, #264]	; (8010b94 <MotionAC_Initialize+0x194>)
 8010a8a:	f04f 0901 	mov.w	r9, #1
 8010a8e:	4606      	mov	r6, r0
 8010a90:	f887 9000 	strb.w	r9, [r7]
 8010a94:	b9e0      	cbnz	r0, 8010ad0 <MotionAC_Initialize+0xd0>
 8010a96:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8010b98 <MotionAC_Initialize+0x198>
 8010a9a:	f88d 9004 	strb.w	r9, [sp, #4]
 8010a9e:	f108 0514 	add.w	r5, r8, #20
 8010aa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010aa4:	ac03      	add	r4, sp, #12
 8010aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010aa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010aac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010aae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ab0:	682a      	ldr	r2, [r5, #0]
 8010ab2:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8010ab6:	6022      	str	r2, [r4, #0]
 8010ab8:	a901      	add	r1, sp, #4
 8010aba:	203c      	movs	r0, #60	; 0x3c
 8010abc:	9302      	str	r3, [sp, #8]
 8010abe:	f7ff f870 	bl	800fba2 <MotionAC_SaveCalInNVM>
 8010ac2:	f888 6000 	strb.w	r6, [r8]
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	707b      	strb	r3, [r7, #1]
 8010aca:	b011      	add	sp, #68	; 0x44
 8010acc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ad0:	4c31      	ldr	r4, [pc, #196]	; (8010b98 <MotionAC_Initialize+0x198>)
 8010ad2:	4832      	ldr	r0, [pc, #200]	; (8010b9c <MotionAC_Initialize+0x19c>)
 8010ad4:	4a32      	ldr	r2, [pc, #200]	; (8010ba0 <MotionAC_Initialize+0x1a0>)
 8010ad6:	2114      	movs	r1, #20
 8010ad8:	f44f 13f0 	mov.w	r3, #1966080	; 0x1e0000
 8010adc:	f8c4 1464 	str.w	r1, [r4, #1124]	; 0x464
 8010ae0:	6523      	str	r3, [r4, #80]	; 0x50
 8010ae2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010ae6:	f44f 03dc 	mov.w	r3, #7208960	; 0x6e0000
 8010aea:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
 8010aee:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
 8010af2:	f504 618c 	add.w	r1, r4, #1120	; 0x460
 8010af6:	f504 638d 	add.w	r3, r4, #1128	; 0x468
 8010afa:	2500      	movs	r5, #0
 8010afc:	6008      	str	r0, [r1, #0]
 8010afe:	601a      	str	r2, [r3, #0]
 8010b00:	4629      	mov	r1, r5
 8010b02:	222e      	movs	r2, #46	; 0x2e
 8010b04:	f104 0016 	add.w	r0, r4, #22
 8010b08:	7025      	strb	r5, [r4, #0]
 8010b0a:	f884 546c 	strb.w	r5, [r4, #1132]	; 0x46c
 8010b0e:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 8010b12:	6565      	str	r5, [r4, #84]	; 0x54
 8010b14:	6125      	str	r5, [r4, #16]
 8010b16:	64a5      	str	r5, [r4, #72]	; 0x48
 8010b18:	f006 fc1a 	bl	8017350 <memset>
 8010b1c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8010b20:	2202      	movs	r2, #2
 8010b22:	a901      	add	r1, sp, #4
 8010b24:	203c      	movs	r0, #60	; 0x3c
 8010b26:	f884 9015 	strb.w	r9, [r4, #21]
 8010b2a:	7522      	strb	r2, [r4, #20]
 8010b2c:	6263      	str	r3, [r4, #36]	; 0x24
 8010b2e:	6363      	str	r3, [r4, #52]	; 0x34
 8010b30:	6463      	str	r3, [r4, #68]	; 0x44
 8010b32:	f7ff f829 	bl	800fb88 <MotionAC_LoadCalFromNVM>
 8010b36:	4548      	cmp	r0, r9
 8010b38:	d0c5      	beq.n	8010ac6 <MotionAC_Initialize+0xc6>
 8010b3a:	f8dd c008 	ldr.w	ip, [sp, #8]
 8010b3e:	f88d 5004 	strb.w	r5, [sp, #4]
 8010b42:	f1bc 0f00 	cmp.w	ip, #0
 8010b46:	d0be      	beq.n	8010ac6 <MotionAC_Initialize+0xc6>
 8010b48:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d0ba      	beq.n	8010ac6 <MotionAC_Initialize+0xc6>
 8010b50:	ae03      	add	r6, sp, #12
 8010b52:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010b54:	f104 0514 	add.w	r5, r4, #20
 8010b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010b5a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010b5e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010b60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010b62:	6833      	ldr	r3, [r6, #0]
 8010b64:	602b      	str	r3, [r5, #0]
 8010b66:	f8c4 c048 	str.w	ip, [r4, #72]	; 0x48
 8010b6a:	e7ac      	b.n	8010ac6 <MotionAC_Initialize+0xc6>
 8010b6c:	e0002000 	.word	0xe0002000
 8010b70:	e000ed00 	.word	0xe000ed00
 8010b74:	40023008 	.word	0x40023008
 8010b78:	40023000 	.word	0x40023000
 8010b7c:	f407a5c2 	.word	0xf407a5c2
 8010b80:	b5e8b5cd 	.word	0xb5e8b5cd
 8010b84:	e0042000 	.word	0xe0042000
 8010b88:	5c001000 	.word	0x5c001000
 8010b8c:	58024c08 	.word	0x58024c08
 8010b90:	58024c00 	.word	0x58024c00
 8010b94:	200015dc 	.word	0x200015dc
 8010b98:	2000bf08 	.word	0x2000bf08
 8010b9c:	3a83126f 	.word	0x3a83126f
 8010ba0:	3e4ccccd 	.word	0x3e4ccccd

08010ba4 <MotionAC_GetLibVersion>:
 8010ba4:	4b0f      	ldr	r3, [pc, #60]	; (8010be4 <MotionAC_GetLibVersion+0x40>)
 8010ba6:	781b      	ldrb	r3, [r3, #0]
 8010ba8:	b90b      	cbnz	r3, 8010bae <MotionAC_GetLibVersion+0xa>
 8010baa:	4618      	mov	r0, r3
 8010bac:	4770      	bx	lr
 8010bae:	b470      	push	{r4, r5, r6}
 8010bb0:	4e0d      	ldr	r6, [pc, #52]	; (8010be8 <MotionAC_GetLibVersion+0x44>)
 8010bb2:	4605      	mov	r5, r0
 8010bb4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010bb6:	b08b      	sub	sp, #44	; 0x2c
 8010bb8:	ac01      	add	r4, sp, #4
 8010bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010bbc:	6833      	ldr	r3, [r6, #0]
 8010bbe:	f824 3b02 	strh.w	r3, [r4], #2
 8010bc2:	0c1b      	lsrs	r3, r3, #16
 8010bc4:	7023      	strb	r3, [r4, #0]
 8010bc6:	ac01      	add	r4, sp, #4
 8010bc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010bca:	8826      	ldrh	r6, [r4, #0]
 8010bcc:	60eb      	str	r3, [r5, #12]
 8010bce:	78a4      	ldrb	r4, [r4, #2]
 8010bd0:	6028      	str	r0, [r5, #0]
 8010bd2:	2312      	movs	r3, #18
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	6069      	str	r1, [r5, #4]
 8010bd8:	60aa      	str	r2, [r5, #8]
 8010bda:	822e      	strh	r6, [r5, #16]
 8010bdc:	74ac      	strb	r4, [r5, #18]
 8010bde:	b00b      	add	sp, #44	; 0x2c
 8010be0:	bc70      	pop	{r4, r5, r6}
 8010be2:	4770      	bx	lr
 8010be4:	200015dc 	.word	0x200015dc
 8010be8:	0801cd7c 	.word	0x0801cd7c

08010bec <MotionGC_Initialize>:
 8010bec:	4a35      	ldr	r2, [pc, #212]	; (8010cc4 <MotionGC_Initialize+0xd8>)
 8010bee:	4936      	ldr	r1, [pc, #216]	; (8010cc8 <MotionGC_Initialize+0xdc>)
 8010bf0:	6813      	ldr	r3, [r2, #0]
 8010bf2:	f023 0301 	bic.w	r3, r3, #1
 8010bf6:	b470      	push	{r4, r5, r6}
 8010bf8:	6013      	str	r3, [r2, #0]
 8010bfa:	680b      	ldr	r3, [r1, #0]
 8010bfc:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8010c00:	4013      	ands	r3, r2
 8010c02:	f24c 2440 	movw	r4, #49728	; 0xc240
 8010c06:	42a3      	cmp	r3, r4
 8010c08:	d013      	beq.n	8010c32 <MotionGC_Initialize+0x46>
 8010c0a:	680b      	ldr	r3, [r1, #0]
 8010c0c:	f24c 2170 	movw	r1, #49776	; 0xc270
 8010c10:	4013      	ands	r3, r2
 8010c12:	428b      	cmp	r3, r1
 8010c14:	d00d      	beq.n	8010c32 <MotionGC_Initialize+0x46>
 8010c16:	4b2d      	ldr	r3, [pc, #180]	; (8010ccc <MotionGC_Initialize+0xe0>)
 8010c18:	2201      	movs	r2, #1
 8010c1a:	601a      	str	r2, [r3, #0]
 8010c1c:	681a      	ldr	r2, [r3, #0]
 8010c1e:	2a00      	cmp	r2, #0
 8010c20:	d1fc      	bne.n	8010c1c <MotionGC_Initialize+0x30>
 8010c22:	4b2b      	ldr	r3, [pc, #172]	; (8010cd0 <MotionGC_Initialize+0xe4>)
 8010c24:	4a2b      	ldr	r2, [pc, #172]	; (8010cd4 <MotionGC_Initialize+0xe8>)
 8010c26:	601a      	str	r2, [r3, #0]
 8010c28:	681a      	ldr	r2, [r3, #0]
 8010c2a:	4b2b      	ldr	r3, [pc, #172]	; (8010cd8 <MotionGC_Initialize+0xec>)
 8010c2c:	429a      	cmp	r2, r3
 8010c2e:	d01f      	beq.n	8010c70 <MotionGC_Initialize+0x84>
 8010c30:	e7fe      	b.n	8010c30 <MotionGC_Initialize+0x44>
 8010c32:	4b2a      	ldr	r3, [pc, #168]	; (8010cdc <MotionGC_Initialize+0xf0>)
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d1ed      	bne.n	8010c16 <MotionGC_Initialize+0x2a>
 8010c3a:	4a29      	ldr	r2, [pc, #164]	; (8010ce0 <MotionGC_Initialize+0xf4>)
 8010c3c:	6813      	ldr	r3, [r2, #0]
 8010c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010c42:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8010c46:	d006      	beq.n	8010c56 <MotionGC_Initialize+0x6a>
 8010c48:	6813      	ldr	r3, [r2, #0]
 8010c4a:	f240 4283 	movw	r2, #1155	; 0x483
 8010c4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010c52:	4293      	cmp	r3, r2
 8010c54:	d1df      	bne.n	8010c16 <MotionGC_Initialize+0x2a>
 8010c56:	4b23      	ldr	r3, [pc, #140]	; (8010ce4 <MotionGC_Initialize+0xf8>)
 8010c58:	2201      	movs	r2, #1
 8010c5a:	601a      	str	r2, [r3, #0]
 8010c5c:	681a      	ldr	r2, [r3, #0]
 8010c5e:	2a00      	cmp	r2, #0
 8010c60:	d1fc      	bne.n	8010c5c <MotionGC_Initialize+0x70>
 8010c62:	4b21      	ldr	r3, [pc, #132]	; (8010ce8 <MotionGC_Initialize+0xfc>)
 8010c64:	4a1b      	ldr	r2, [pc, #108]	; (8010cd4 <MotionGC_Initialize+0xe8>)
 8010c66:	601a      	str	r2, [r3, #0]
 8010c68:	681a      	ldr	r2, [r3, #0]
 8010c6a:	4b1b      	ldr	r3, [pc, #108]	; (8010cd8 <MotionGC_Initialize+0xec>)
 8010c6c:	429a      	cmp	r2, r3
 8010c6e:	d1df      	bne.n	8010c30 <MotionGC_Initialize+0x44>
 8010c70:	ed90 7a00 	vldr	s14, [r0]
 8010c74:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8010cec <MotionGC_Initialize+0x100>
 8010c78:	4b1d      	ldr	r3, [pc, #116]	; (8010cf0 <MotionGC_Initialize+0x104>)
 8010c7a:	4a1e      	ldr	r2, [pc, #120]	; (8010cf4 <MotionGC_Initialize+0x108>)
 8010c7c:	605a      	str	r2, [r3, #4]
 8010c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010c82:	2200      	movs	r2, #0
 8010c84:	2101      	movs	r1, #1
 8010c86:	4e1c      	ldr	r6, [pc, #112]	; (8010cf8 <MotionGC_Initialize+0x10c>)
 8010c88:	4c1c      	ldr	r4, [pc, #112]	; (8010cfc <MotionGC_Initialize+0x110>)
 8010c8a:	7019      	strb	r1, [r3, #0]
 8010c8c:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
 8010c90:	f04f 557c 	mov.w	r5, #1056964608	; 0x3f000000
 8010c94:	481a      	ldr	r0, [pc, #104]	; (8010d00 <MotionGC_Initialize+0x114>)
 8010c96:	6159      	str	r1, [r3, #20]
 8010c98:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
 8010c9c:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
 8010ca0:	4918      	ldr	r1, [pc, #96]	; (8010d04 <MotionGC_Initialize+0x118>)
 8010ca2:	609e      	str	r6, [r3, #8]
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	60dd      	str	r5, [r3, #12]
 8010ca8:	611c      	str	r4, [r3, #16]
 8010caa:	edc3 7a08 	vstr	s15, [r3, #32]
 8010cae:	6199      	str	r1, [r3, #24]
 8010cb0:	61d8      	str	r0, [r3, #28]
 8010cb2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8010cb6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 8010cba:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 8010cbe:	bc70      	pop	{r4, r5, r6}
 8010cc0:	4770      	bx	lr
 8010cc2:	bf00      	nop
 8010cc4:	e0002000 	.word	0xe0002000
 8010cc8:	e000ed00 	.word	0xe000ed00
 8010ccc:	40023008 	.word	0x40023008
 8010cd0:	40023000 	.word	0x40023000
 8010cd4:	f407a5c2 	.word	0xf407a5c2
 8010cd8:	b5e8b5cd 	.word	0xb5e8b5cd
 8010cdc:	e0042000 	.word	0xe0042000
 8010ce0:	5c001000 	.word	0x5c001000
 8010ce4:	58024c08 	.word	0x58024c08
 8010ce8:	58024c00 	.word	0x58024c00
 8010cec:	3e4ccccd 	.word	0x3e4ccccd
 8010cf0:	200015e0 	.word	0x200015e0
 8010cf4:	3b83126f 	.word	0x3b83126f
 8010cf8:	3dcccccd 	.word	0x3dcccccd
 8010cfc:	3b03126f 	.word	0x3b03126f
 8010d00:	3fa66666 	.word	0x3fa66666
 8010d04:	41700000 	.word	0x41700000

08010d08 <MotionGC_GetLibVersion>:
 8010d08:	4b0f      	ldr	r3, [pc, #60]	; (8010d48 <MotionGC_GetLibVersion+0x40>)
 8010d0a:	781b      	ldrb	r3, [r3, #0]
 8010d0c:	b90b      	cbnz	r3, 8010d12 <MotionGC_GetLibVersion+0xa>
 8010d0e:	4618      	mov	r0, r3
 8010d10:	4770      	bx	lr
 8010d12:	b470      	push	{r4, r5, r6}
 8010d14:	4e0d      	ldr	r6, [pc, #52]	; (8010d4c <MotionGC_GetLibVersion+0x44>)
 8010d16:	4605      	mov	r5, r0
 8010d18:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010d1a:	b08b      	sub	sp, #44	; 0x2c
 8010d1c:	ac01      	add	r4, sp, #4
 8010d1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010d20:	6833      	ldr	r3, [r6, #0]
 8010d22:	f824 3b02 	strh.w	r3, [r4], #2
 8010d26:	0c1b      	lsrs	r3, r3, #16
 8010d28:	7023      	strb	r3, [r4, #0]
 8010d2a:	ac01      	add	r4, sp, #4
 8010d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010d2e:	8826      	ldrh	r6, [r4, #0]
 8010d30:	60eb      	str	r3, [r5, #12]
 8010d32:	78a4      	ldrb	r4, [r4, #2]
 8010d34:	6028      	str	r0, [r5, #0]
 8010d36:	2312      	movs	r3, #18
 8010d38:	4618      	mov	r0, r3
 8010d3a:	6069      	str	r1, [r5, #4]
 8010d3c:	60aa      	str	r2, [r5, #8]
 8010d3e:	822e      	strh	r6, [r5, #16]
 8010d40:	74ac      	strb	r4, [r5, #18]
 8010d42:	b00b      	add	sp, #44	; 0x2c
 8010d44:	bc70      	pop	{r4, r5, r6}
 8010d46:	4770      	bx	lr
 8010d48:	200015e0 	.word	0x200015e0
 8010d4c:	0801cda8 	.word	0x0801cda8

08010d50 <MEMS_INV3x3>:
 8010d50:	ed90 6a01 	vldr	s12, [r0, #4]
 8010d54:	edd0 6a03 	vldr	s13, [r0, #12]
 8010d58:	ed90 7a05 	vldr	s14, [r0, #20]
 8010d5c:	edd0 7a07 	vldr	s15, [r0, #28]
 8010d60:	eeb4 6a66 	vcmp.f32	s12, s13
 8010d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d68:	b430      	push	{r4, r5}
 8010d6a:	d110      	bne.n	8010d8e <MEMS_INV3x3+0x3e>
 8010d6c:	ed90 6a02 	vldr	s12, [r0, #8]
 8010d70:	edd0 6a06 	vldr	s13, [r0, #24]
 8010d74:	eeb4 6a66 	vcmp.f32	s12, s13
 8010d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d7c:	d107      	bne.n	8010d8e <MEMS_INV3x3+0x3e>
 8010d7e:	eeb4 7a67 	vcmp.f32	s14, s15
 8010d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d86:	bf0c      	ite	eq
 8010d88:	2501      	moveq	r5, #1
 8010d8a:	2500      	movne	r5, #0
 8010d8c:	e000      	b.n	8010d90 <MEMS_INV3x3+0x40>
 8010d8e:	2500      	movs	r5, #0
 8010d90:	edd0 6a04 	vldr	s13, [r0, #16]
 8010d94:	688c      	ldr	r4, [r1, #8]
 8010d96:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8010d9a:	ed90 7a08 	vldr	s14, [r0, #32]
 8010d9e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010da2:	e9d1 2300 	ldrd	r2, r3, [r1]
 8010da6:	edc2 7a00 	vstr	s15, [r2]
 8010daa:	ed90 6a03 	vldr	s12, [r0, #12]
 8010dae:	edd0 7a08 	vldr	s15, [r0, #32]
 8010db2:	edd0 6a05 	vldr	s13, [r0, #20]
 8010db6:	ed90 7a06 	vldr	s14, [r0, #24]
 8010dba:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 8010dbe:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010dc2:	edc3 7a00 	vstr	s15, [r3]
 8010dc6:	ed90 6a04 	vldr	s12, [r0, #16]
 8010dca:	ed90 7a06 	vldr	s14, [r0, #24]
 8010dce:	edd0 6a03 	vldr	s13, [r0, #12]
 8010dd2:	edd0 7a07 	vldr	s15, [r0, #28]
 8010dd6:	ee27 7a46 	vnmul.f32	s14, s14, s12
 8010dda:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010dde:	ed84 7a00 	vstr	s14, [r4]
 8010de2:	edd0 7a01 	vldr	s15, [r0, #4]
 8010de6:	ed93 5a00 	vldr	s10, [r3]
 8010dea:	edd0 6a00 	vldr	s13, [r0]
 8010dee:	edd2 5a00 	vldr	s11, [r2]
 8010df2:	ed90 6a02 	vldr	s12, [r0, #8]
 8010df6:	ee67 7a85 	vmul.f32	s15, s15, s10
 8010dfa:	eee6 7aa5 	vfma.f32	s15, s13, s11
 8010dfe:	eee7 7a06 	vfma.f32	s15, s14, s12
 8010e02:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e0a:	d075      	beq.n	8010ef8 <MEMS_INV3x3+0x1a8>
 8010e0c:	ed90 7a06 	vldr	s14, [r0, #24]
 8010e10:	edd0 5a08 	vldr	s11, [r0, #32]
 8010e14:	ee27 7a46 	vnmul.f32	s14, s14, s12
 8010e18:	eea6 7aa5 	vfma.f32	s14, s13, s11
 8010e1c:	ed83 7a01 	vstr	s14, [r3, #4]
 8010e20:	edd0 5a07 	vldr	s11, [r0, #28]
 8010e24:	ed90 7a00 	vldr	s14, [r0]
 8010e28:	ed90 6a06 	vldr	s12, [r0, #24]
 8010e2c:	edd0 6a01 	vldr	s13, [r0, #4]
 8010e30:	ee27 7a65 	vnmul.f32	s14, s14, s11
 8010e34:	eea6 7a26 	vfma.f32	s14, s12, s13
 8010e38:	ed84 7a01 	vstr	s14, [r4, #4]
 8010e3c:	edd0 5a03 	vldr	s11, [r0, #12]
 8010e40:	ed90 7a01 	vldr	s14, [r0, #4]
 8010e44:	ed90 6a04 	vldr	s12, [r0, #16]
 8010e48:	edd0 6a00 	vldr	s13, [r0]
 8010e4c:	ee27 7a65 	vnmul.f32	s14, s14, s11
 8010e50:	eea6 7a26 	vfma.f32	s14, s12, s13
 8010e54:	ed84 7a02 	vstr	s14, [r4, #8]
 8010e58:	bb55      	cbnz	r5, 8010eb0 <MEMS_INV3x3+0x160>
 8010e5a:	edd0 5a08 	vldr	s11, [r0, #32]
 8010e5e:	ed90 7a01 	vldr	s14, [r0, #4]
 8010e62:	ed90 6a07 	vldr	s12, [r0, #28]
 8010e66:	edd0 6a02 	vldr	s13, [r0, #8]
 8010e6a:	ee27 7a65 	vnmul.f32	s14, s14, s11
 8010e6e:	eea6 7a26 	vfma.f32	s14, s12, s13
 8010e72:	ed82 7a01 	vstr	s14, [r2, #4]
 8010e76:	edd0 5a04 	vldr	s11, [r0, #16]
 8010e7a:	ed90 7a02 	vldr	s14, [r0, #8]
 8010e7e:	ed90 6a05 	vldr	s12, [r0, #20]
 8010e82:	edd0 6a01 	vldr	s13, [r0, #4]
 8010e86:	ee27 7a65 	vnmul.f32	s14, s14, s11
 8010e8a:	eea6 7a26 	vfma.f32	s14, s12, s13
 8010e8e:	ed82 7a02 	vstr	s14, [r2, #8]
 8010e92:	edd0 5a05 	vldr	s11, [r0, #20]
 8010e96:	ed90 7a00 	vldr	s14, [r0]
 8010e9a:	ed90 6a03 	vldr	s12, [r0, #12]
 8010e9e:	edd0 6a02 	vldr	s13, [r0, #8]
 8010ea2:	ee27 7a65 	vnmul.f32	s14, s14, s11
 8010ea6:	eea6 7a26 	vfma.f32	s14, s12, s13
 8010eaa:	ed83 7a02 	vstr	s14, [r3, #8]
 8010eae:	e005      	b.n	8010ebc <MEMS_INV3x3+0x16c>
 8010eb0:	6818      	ldr	r0, [r3, #0]
 8010eb2:	6050      	str	r0, [r2, #4]
 8010eb4:	6820      	ldr	r0, [r4, #0]
 8010eb6:	6090      	str	r0, [r2, #8]
 8010eb8:	6862      	ldr	r2, [r4, #4]
 8010eba:	609a      	str	r2, [r3, #8]
 8010ebc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010ec0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010ec4:	1f0a      	subs	r2, r1, #4
 8010ec6:	3108      	adds	r1, #8
 8010ec8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8010ecc:	4291      	cmp	r1, r2
 8010ece:	ed93 6a00 	vldr	s12, [r3]
 8010ed2:	edd3 6a01 	vldr	s13, [r3, #4]
 8010ed6:	edd3 7a02 	vldr	s15, [r3, #8]
 8010eda:	ee26 6a07 	vmul.f32	s12, s12, s14
 8010ede:	ee66 6a87 	vmul.f32	s13, s13, s14
 8010ee2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010ee6:	ed83 6a00 	vstr	s12, [r3]
 8010eea:	edc3 6a01 	vstr	s13, [r3, #4]
 8010eee:	edc3 7a02 	vstr	s15, [r3, #8]
 8010ef2:	d1e9      	bne.n	8010ec8 <MEMS_INV3x3+0x178>
 8010ef4:	2001      	movs	r0, #1
 8010ef6:	e000      	b.n	8010efa <MEMS_INV3x3+0x1aa>
 8010ef8:	2000      	movs	r0, #0
 8010efa:	bc30      	pop	{r4, r5}
 8010efc:	4770      	bx	lr
	...

08010f00 <Hessenberg_Form_Orthogonal>:
 8010f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f04:	b08f      	sub	sp, #60	; 0x3c
 8010f06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010f0a:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8010f0e:	460c      	mov	r4, r1
 8010f10:	2000      	movs	r0, #0
 8010f12:	2700      	movs	r7, #0
 8010f14:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
 8010f18:	b205      	sxth	r5, r0
 8010f1a:	42aa      	cmp	r2, r5
 8010f1c:	dd11      	ble.n	8010f42 <Hessenberg_Form_Orthogonal+0x42>
 8010f1e:	4621      	mov	r1, r4
 8010f20:	2300      	movs	r3, #0
 8010f22:	fa0f fc83 	sxth.w	ip, r3
 8010f26:	3301      	adds	r3, #1
 8010f28:	4565      	cmp	r5, ip
 8010f2a:	fa0f fc83 	sxth.w	ip, r3
 8010f2e:	bf0c      	ite	eq
 8010f30:	600e      	streq	r6, [r1, #0]
 8010f32:	600f      	strne	r7, [r1, #0]
 8010f34:	4562      	cmp	r2, ip
 8010f36:	f101 0104 	add.w	r1, r1, #4
 8010f3a:	dcf2      	bgt.n	8010f22 <Hessenberg_Form_Orthogonal+0x22>
 8010f3c:	3001      	adds	r0, #1
 8010f3e:	445c      	add	r4, fp
 8010f40:	e7ea      	b.n	8010f18 <Hessenberg_Form_Orthogonal+0x18>
 8010f42:	2a02      	cmp	r2, #2
 8010f44:	f340 811b 	ble.w	801117e <Hessenberg_Form_Orthogonal+0x27e>
 8010f48:	9902      	ldr	r1, [sp, #8]
 8010f4a:	ed9f 5a8f 	vldr	s10, [pc, #572]	; 8011188 <Hessenberg_Form_Orthogonal+0x288>
 8010f4e:	eddf 5a8f 	vldr	s11, [pc, #572]	; 801118c <Hessenberg_Form_Orthogonal+0x28c>
 8010f52:	4459      	add	r1, fp
 8010f54:	4608      	mov	r0, r1
 8010f56:	f10b 0104 	add.w	r1, fp, #4
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	9104      	str	r1, [sp, #16]
 8010f5e:	1e91      	subs	r1, r2, #2
 8010f60:	9301      	str	r3, [sp, #4]
 8010f62:	9106      	str	r1, [sp, #24]
 8010f64:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 8010f68:	4682      	mov	sl, r0
 8010f6a:	9906      	ldr	r1, [sp, #24]
 8010f6c:	428b      	cmp	r3, r1
 8010f6e:	f280 8106 	bge.w	801117e <Hessenberg_Form_Orthogonal+0x27e>
 8010f72:	1c59      	adds	r1, r3, #1
 8010f74:	b20b      	sxth	r3, r1
 8010f76:	eddf 6a85 	vldr	s13, [pc, #532]	; 801118c <Hessenberg_Form_Orthogonal+0x28c>
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	4654      	mov	r4, sl
 8010f7e:	4290      	cmp	r0, r2
 8010f80:	da07      	bge.n	8010f92 <Hessenberg_Form_Orthogonal+0x92>
 8010f82:	edd4 7a00 	vldr	s15, [r4]
 8010f86:	3001      	adds	r0, #1
 8010f88:	eee7 6aa7 	vfma.f32	s13, s15, s15
 8010f8c:	b200      	sxth	r0, r0
 8010f8e:	445c      	add	r4, fp
 8010f90:	e7f5      	b.n	8010f7e <Hessenberg_Form_Orthogonal+0x7e>
 8010f92:	eef0 7ae6 	vabs.f32	s15, s13
 8010f96:	eef4 7ac5 	vcmpe.f32	s15, s10
 8010f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f9e:	f100 80e8 	bmi.w	8011172 <Hessenberg_Form_Orthogonal+0x272>
 8010fa2:	eef1 7ae6 	vsqrt.f32	s15, s13
 8010fa6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8010faa:	9300      	str	r3, [sp, #0]
 8010fac:	1c87      	adds	r7, r0, #2
 8010fae:	ad08      	add	r5, sp, #32
 8010fb0:	008c      	lsls	r4, r1, #2
 8010fb2:	b2bf      	uxth	r7, r7
 8010fb4:	eb05 0804 	add.w	r8, r5, r4
 8010fb8:	fa0f fc87 	sxth.w	ip, r7
 8010fbc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8010fc0:	eb0a 060b 	add.w	r6, sl, fp
 8010fc4:	2500      	movs	r5, #0
 8010fc6:	ed9a 7a00 	vldr	s14, [sl]
 8010fca:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fd2:	bfa8      	it	ge
 8010fd4:	eef1 7a67 	vnegge.f32	s15, s15
 8010fd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010fdc:	edca 7a00 	vstr	s15, [sl]
 8010fe0:	ed88 7a00 	vstr	s14, [r8]
 8010fe4:	eb07 0e05 	add.w	lr, r7, r5
 8010fe8:	fa0f fe8e 	sxth.w	lr, lr
 8010fec:	4572      	cmp	r2, lr
 8010fee:	dd0c      	ble.n	801100a <Hessenberg_Form_Orthogonal+0x10a>
 8010ff0:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 8010ff4:	ab08      	add	r3, sp, #32
 8010ff6:	449e      	add	lr, r3
 8010ff8:	f8d6 9000 	ldr.w	r9, [r6]
 8010ffc:	f8ce 9000 	str.w	r9, [lr]
 8011000:	edc6 5a00 	vstr	s11, [r6]
 8011004:	3501      	adds	r5, #1
 8011006:	445e      	add	r6, fp
 8011008:	e7ec      	b.n	8010fe4 <Hessenberg_Form_Orthogonal+0xe4>
 801100a:	ed98 7a00 	vldr	s14, [r8]
 801100e:	9b00      	ldr	r3, [sp, #0]
 8011010:	9f02      	ldr	r7, [sp, #8]
 8011012:	9307      	str	r3, [sp, #28]
 8011014:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011018:	fb02 3501 	mla	r5, r2, r1, r3
 801101c:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8011020:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011024:	3c04      	subs	r4, #4
 8011026:	0099      	lsls	r1, r3, #2
 8011028:	ebaa 0404 	sub.w	r4, sl, r4
 801102c:	1c46      	adds	r6, r0, #1
 801102e:	9505      	str	r5, [sp, #20]
 8011030:	ad08      	add	r5, sp, #32
 8011032:	440c      	add	r4, r1
 8011034:	440d      	add	r5, r1
 8011036:	b2b6      	uxth	r6, r6
 8011038:	461f      	mov	r7, r3
 801103a:	f04f 0c00 	mov.w	ip, #0
 801103e:	4297      	cmp	r7, r2
 8011040:	da33      	bge.n	80110aa <Hessenberg_Form_Orthogonal+0x1aa>
 8011042:	9b05      	ldr	r3, [sp, #20]
 8011044:	eddf 7a51 	vldr	s15, [pc, #324]	; 801118c <Hessenberg_Form_Orthogonal+0x28c>
 8011048:	eb0c 0e03 	add.w	lr, ip, r3
 801104c:	2300      	movs	r3, #0
 801104e:	eb06 0803 	add.w	r8, r6, r3
 8011052:	fa0f f888 	sxth.w	r8, r8
 8011056:	4542      	cmp	r2, r8
 8011058:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 801105c:	dd08      	ble.n	8011070 <Hessenberg_Form_Orthogonal+0x170>
 801105e:	edde 6a00 	vldr	s13, [lr]
 8011062:	edd9 4a00 	vldr	s9, [r9]
 8011066:	3301      	adds	r3, #1
 8011068:	eee4 7aa6 	vfma.f32	s15, s9, s13
 801106c:	44de      	add	lr, fp
 801106e:	e7ee      	b.n	801104e <Hessenberg_Form_Orthogonal+0x14e>
 8011070:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011074:	eb0c 0e04 	add.w	lr, ip, r4
 8011078:	2300      	movs	r3, #0
 801107a:	eb06 0803 	add.w	r8, r6, r3
 801107e:	fa0f f888 	sxth.w	r8, r8
 8011082:	4542      	cmp	r2, r8
 8011084:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 8011088:	dd0a      	ble.n	80110a0 <Hessenberg_Form_Orthogonal+0x1a0>
 801108a:	edde 6a00 	vldr	s13, [lr]
 801108e:	edd9 4a00 	vldr	s9, [r9]
 8011092:	eee4 6ae7 	vfms.f32	s13, s9, s15
 8011096:	3301      	adds	r3, #1
 8011098:	edce 6a00 	vstr	s13, [lr]
 801109c:	44de      	add	lr, fp
 801109e:	e7ec      	b.n	801107a <Hessenberg_Form_Orthogonal+0x17a>
 80110a0:	3701      	adds	r7, #1
 80110a2:	b23f      	sxth	r7, r7
 80110a4:	f10c 0c04 	add.w	ip, ip, #4
 80110a8:	e7c9      	b.n	801103e <Hessenberg_Form_Orthogonal+0x13e>
 80110aa:	9c02      	ldr	r4, [sp, #8]
 80110ac:	9b07      	ldr	r3, [sp, #28]
 80110ae:	3001      	adds	r0, #1
 80110b0:	b280      	uxth	r0, r0
 80110b2:	440c      	add	r4, r1
 80110b4:	f04f 0c00 	mov.w	ip, #0
 80110b8:	eddf 7a34 	vldr	s15, [pc, #208]	; 801118c <Hessenberg_Form_Orthogonal+0x28c>
 80110bc:	2600      	movs	r6, #0
 80110be:	eb00 0e06 	add.w	lr, r0, r6
 80110c2:	fa0f fe8e 	sxth.w	lr, lr
 80110c6:	00b7      	lsls	r7, r6, #2
 80110c8:	4572      	cmp	r2, lr
 80110ca:	eb05 0807 	add.w	r8, r5, r7
 80110ce:	4427      	add	r7, r4
 80110d0:	dd07      	ble.n	80110e2 <Hessenberg_Form_Orthogonal+0x1e2>
 80110d2:	edd8 4a00 	vldr	s9, [r8]
 80110d6:	edd7 6a00 	vldr	s13, [r7]
 80110da:	3601      	adds	r6, #1
 80110dc:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80110e0:	e7ed      	b.n	80110be <Hessenberg_Form_Orthogonal+0x1be>
 80110e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80110e6:	46ae      	mov	lr, r5
 80110e8:	4627      	mov	r7, r4
 80110ea:	461e      	mov	r6, r3
 80110ec:	4296      	cmp	r6, r2
 80110ee:	da0a      	bge.n	8011106 <Hessenberg_Form_Orthogonal+0x206>
 80110f0:	edd7 6a00 	vldr	s13, [r7]
 80110f4:	ecfe 4a01 	vldmia	lr!, {s9}
 80110f8:	eee4 6ae7 	vfms.f32	s13, s9, s15
 80110fc:	3601      	adds	r6, #1
 80110fe:	b236      	sxth	r6, r6
 8011100:	ece7 6a01 	vstmia	r7!, {s13}
 8011104:	e7f2      	b.n	80110ec <Hessenberg_Form_Orthogonal+0x1ec>
 8011106:	f10c 0c01 	add.w	ip, ip, #1
 801110a:	fa0f f68c 	sxth.w	r6, ip
 801110e:	42b2      	cmp	r2, r6
 8011110:	445c      	add	r4, fp
 8011112:	dcd1      	bgt.n	80110b8 <Hessenberg_Form_Orthogonal+0x1b8>
 8011114:	9c03      	ldr	r4, [sp, #12]
 8011116:	2700      	movs	r7, #0
 8011118:	4421      	add	r1, r4
 801111a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801118c <Hessenberg_Form_Orthogonal+0x28c>
 801111e:	2400      	movs	r4, #0
 8011120:	eb00 0c04 	add.w	ip, r0, r4
 8011124:	fa0f fc8c 	sxth.w	ip, ip
 8011128:	00a6      	lsls	r6, r4, #2
 801112a:	4562      	cmp	r2, ip
 801112c:	eb05 0e06 	add.w	lr, r5, r6
 8011130:	440e      	add	r6, r1
 8011132:	dd07      	ble.n	8011144 <Hessenberg_Form_Orthogonal+0x244>
 8011134:	edde 4a00 	vldr	s9, [lr]
 8011138:	edd6 6a00 	vldr	s13, [r6]
 801113c:	3401      	adds	r4, #1
 801113e:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8011142:	e7ed      	b.n	8011120 <Hessenberg_Form_Orthogonal+0x220>
 8011144:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011148:	46ac      	mov	ip, r5
 801114a:	460e      	mov	r6, r1
 801114c:	461c      	mov	r4, r3
 801114e:	4294      	cmp	r4, r2
 8011150:	da0a      	bge.n	8011168 <Hessenberg_Form_Orthogonal+0x268>
 8011152:	edd6 6a00 	vldr	s13, [r6]
 8011156:	ecfc 4a01 	vldmia	ip!, {s9}
 801115a:	eee4 6ae7 	vfms.f32	s13, s9, s15
 801115e:	3401      	adds	r4, #1
 8011160:	b224      	sxth	r4, r4
 8011162:	ece6 6a01 	vstmia	r6!, {s13}
 8011166:	e7f2      	b.n	801114e <Hessenberg_Form_Orthogonal+0x24e>
 8011168:	3701      	adds	r7, #1
 801116a:	b23c      	sxth	r4, r7
 801116c:	42a2      	cmp	r2, r4
 801116e:	4459      	add	r1, fp
 8011170:	dcd3      	bgt.n	801111a <Hessenberg_Form_Orthogonal+0x21a>
 8011172:	9904      	ldr	r1, [sp, #16]
 8011174:	448a      	add	sl, r1
 8011176:	9901      	ldr	r1, [sp, #4]
 8011178:	3101      	adds	r1, #1
 801117a:	9101      	str	r1, [sp, #4]
 801117c:	e6f5      	b.n	8010f6a <Hessenberg_Form_Orthogonal+0x6a>
 801117e:	2000      	movs	r0, #0
 8011180:	b00f      	add	sp, #60	; 0x3c
 8011182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011186:	bf00      	nop
 8011188:	358637bd 	.word	0x358637bd
 801118c:	00000000 	.word	0x00000000

08011190 <QR_Hessenberg_Matrix.constprop.27>:
 8011190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011194:	ed2d 8b02 	vpush	{d8}
 8011198:	461c      	mov	r4, r3
 801119a:	b0a5      	sub	sp, #148	; 0x94
 801119c:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80111a0:	3b01      	subs	r3, #1
 80111a2:	e9cd 1205 	strd	r1, r2, [sp, #20]
 80111a6:	f1ce 0100 	rsb	r1, lr, #0
 80111aa:	9307      	str	r3, [sp, #28]
 80111ac:	910a      	str	r1, [sp, #40]	; 0x28
 80111ae:	00e3      	lsls	r3, r4, #3
 80111b0:	00e1      	lsls	r1, r4, #3
 80111b2:	ed9f 5ac6 	vldr	s10, [pc, #792]	; 80114cc <QR_Hessenberg_Matrix.constprop.27+0x33c>
 80111b6:	931d      	str	r3, [sp, #116]	; 0x74
 80111b8:	3104      	adds	r1, #4
 80111ba:	f06f 0303 	mvn.w	r3, #3
 80111be:	9a07      	ldr	r2, [sp, #28]
 80111c0:	9121      	str	r1, [sp, #132]	; 0x84
 80111c2:	fb03 f304 	mul.w	r3, r3, r4
 80111c6:	0061      	lsls	r1, r4, #1
 80111c8:	ed9f 4abe 	vldr	s8, [pc, #760]	; 80114c4 <QR_Hessenberg_Matrix.constprop.27+0x334>
 80111cc:	ed9f 3abe 	vldr	s6, [pc, #760]	; 80114c8 <QR_Hessenberg_Matrix.constprop.27+0x338>
 80111d0:	9000      	str	r0, [sp, #0]
 80111d2:	9110      	str	r1, [sp, #64]	; 0x40
 80111d4:	9308      	str	r3, [sp, #32]
 80111d6:	eef0 4a45 	vmov.f32	s9, s10
 80111da:	eef0 3a45 	vmov.f32	s7, s10
 80111de:	46f2      	mov	sl, lr
 80111e0:	4693      	mov	fp, r2
 80111e2:	46a1      	mov	r9, r4
 80111e4:	9900      	ldr	r1, [sp, #0]
 80111e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80111e8:	fb0b f309 	mul.w	r3, fp, r9
 80111ec:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80111f0:	9301      	str	r3, [sp, #4]
 80111f2:	f1ab 0302 	sub.w	r3, fp, #2
 80111f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80111f8:	f10b 3eff 	add.w	lr, fp, #4294967295
 80111fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80111fe:	eb09 060b 	add.w	r6, r9, fp
 8011202:	ea4f 078e 	mov.w	r7, lr, lsl #2
 8011206:	00b6      	lsls	r6, r6, #2
 8011208:	eb03 010b 	add.w	r1, r3, fp
 801120c:	960f      	str	r6, [sp, #60]	; 0x3c
 801120e:	9b01      	ldr	r3, [sp, #4]
 8011210:	9e01      	ldr	r6, [sp, #4]
 8011212:	9722      	str	r7, [sp, #136]	; 0x88
 8011214:	1f3a      	subs	r2, r7, #4
 8011216:	eba2 020a 	sub.w	r2, r2, sl
 801121a:	181d      	adds	r5, r3, r0
 801121c:	18b2      	adds	r2, r6, r2
 801121e:	ea4f 088b 	mov.w	r8, fp, lsl #2
 8011222:	9212      	str	r2, [sp, #72]	; 0x48
 8011224:	19ea      	adds	r2, r5, r7
 8011226:	9213      	str	r2, [sp, #76]	; 0x4c
 8011228:	eb05 0208 	add.w	r2, r5, r8
 801122c:	9214      	str	r2, [sp, #80]	; 0x50
 801122e:	4632      	mov	r2, r6
 8011230:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011232:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8011236:	4442      	add	r2, r8
 8011238:	920c      	str	r2, [sp, #48]	; 0x30
 801123a:	4632      	mov	r2, r6
 801123c:	469c      	mov	ip, r3
 801123e:	443a      	add	r2, r7
 8011240:	9b00      	ldr	r3, [sp, #0]
 8011242:	920d      	str	r2, [sp, #52]	; 0x34
 8011244:	f1a8 0404 	sub.w	r4, r8, #4
 8011248:	4632      	mov	r2, r6
 801124a:	fb0c 330a 	mla	r3, ip, sl, r3
 801124e:	4422      	add	r2, r4
 8011250:	eba8 000a 	sub.w	r0, r8, sl
 8011254:	9215      	str	r2, [sp, #84]	; 0x54
 8011256:	18c2      	adds	r2, r0, r3
 8011258:	9218      	str	r2, [sp, #96]	; 0x60
 801125a:	eb03 0208 	add.w	r2, r3, r8
 801125e:	921c      	str	r2, [sp, #112]	; 0x70
 8011260:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011262:	0089      	lsls	r1, r1, #2
 8011264:	189a      	adds	r2, r3, r2
 8011266:	910e      	str	r1, [sp, #56]	; 0x38
 8011268:	9217      	str	r2, [sp, #92]	; 0x5c
 801126a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801126c:	f06f 0103 	mvn.w	r1, #3
 8011270:	4413      	add	r3, r2
 8011272:	9316      	str	r3, [sp, #88]	; 0x58
 8011274:	eba1 030a 	sub.w	r3, r1, sl
 8011278:	9304      	str	r3, [sp, #16]
 801127a:	2301      	movs	r3, #1
 801127c:	9302      	str	r3, [sp, #8]
 801127e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011280:	9b01      	ldr	r3, [sp, #4]
 8011282:	4659      	mov	r1, fp
 8011284:	9808      	ldr	r0, [sp, #32]
 8011286:	2900      	cmp	r1, #0
 8011288:	4410      	add	r0, r2
 801128a:	dd1a      	ble.n	80112c2 <QR_Hessenberg_Matrix.constprop.27+0x132>
 801128c:	ed90 7a00 	vldr	s14, [r0]
 8011290:	edd2 7a01 	vldr	s15, [r2, #4]
 8011294:	edd2 6a00 	vldr	s13, [r2]
 8011298:	9804      	ldr	r0, [sp, #16]
 801129a:	eeb0 7ac7 	vabs.f32	s14, s14
 801129e:	eef0 7ae7 	vabs.f32	s15, s15
 80112a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80112a6:	eeb0 7ae6 	vabs.f32	s14, s13
 80112aa:	ee67 7a84 	vmul.f32	s15, s15, s8
 80112ae:	4402      	add	r2, r0
 80112b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80112b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112b8:	d903      	bls.n	80112c2 <QR_Hessenberg_Matrix.constprop.27+0x132>
 80112ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 80112bc:	3901      	subs	r1, #1
 80112be:	4403      	add	r3, r0
 80112c0:	e7e0      	b.n	8011284 <QR_Hessenberg_Matrix.constprop.27+0xf4>
 80112c2:	ebbb 0201 	subs.w	r2, fp, r1
 80112c6:	9103      	str	r1, [sp, #12]
 80112c8:	d002      	beq.n	80112d0 <QR_Hessenberg_Matrix.constprop.27+0x140>
 80112ca:	2a01      	cmp	r2, #1
 80112cc:	d00f      	beq.n	80112ee <QR_Hessenberg_Matrix.constprop.27+0x15e>
 80112ce:	e0c8      	b.n	8011462 <QR_Hessenberg_Matrix.constprop.27+0x2d2>
 80112d0:	9a03      	ldr	r2, [sp, #12]
 80112d2:	9906      	ldr	r1, [sp, #24]
 80112d4:	0092      	lsls	r2, r2, #2
 80112d6:	4413      	add	r3, r2
 80112d8:	edd3 7a00 	vldr	s15, [r3]
 80112dc:	ee75 7a27 	vadd.f32	s15, s10, s15
 80112e0:	440a      	add	r2, r1
 80112e2:	edc3 7a00 	vstr	s15, [r3]
 80112e6:	46de      	mov	lr, fp
 80112e8:	edc2 7a00 	vstr	s15, [r2]
 80112ec:	e2c5      	b.n	801187a <QR_Hessenberg_Matrix.constprop.27+0x6ea>
 80112ee:	9a00      	ldr	r2, [sp, #0]
 80112f0:	9f22      	ldr	r7, [sp, #136]	; 0x88
 80112f2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80112f6:	fb0e f309 	mul.w	r3, lr, r9
 80112fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80112fe:	eb03 020a 	add.w	r2, r3, sl
 8011302:	eb02 0008 	add.w	r0, r2, r8
 8011306:	19d9      	adds	r1, r3, r7
 8011308:	edd1 5a00 	vldr	s11, [r1]
 801130c:	edd0 7a00 	vldr	s15, [r0]
 8011310:	eb03 0408 	add.w	r4, r3, r8
 8011314:	443a      	add	r2, r7
 8011316:	ed94 6a00 	vldr	s12, [r4]
 801131a:	edd2 6a00 	vldr	s13, [r2]
 801131e:	ee35 7ae7 	vsub.f32	s14, s11, s15
 8011322:	ee26 6a26 	vmul.f32	s12, s12, s13
 8011326:	ee75 5a85 	vadd.f32	s11, s11, s10
 801132a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801132e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011332:	edc1 5a00 	vstr	s11, [r1]
 8011336:	eef0 5a46 	vmov.f32	s11, s12
 801133a:	eee7 5aa7 	vfma.f32	s11, s15, s15
 801133e:	9906      	ldr	r1, [sp, #24]
 8011340:	ed90 7a00 	vldr	s14, [r0]
 8011344:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8011348:	ee35 7a07 	vadd.f32	s14, s10, s14
 801134c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011350:	eb01 0507 	add.w	r5, r1, r7
 8011354:	eb01 0408 	add.w	r4, r1, r8
 8011358:	ed80 7a00 	vstr	s14, [r0]
 801135c:	dd7a      	ble.n	8011454 <QR_Hessenberg_Matrix.constprop.27+0x2c4>
 801135e:	eef1 6ae5 	vsqrt.f32	s13, s11
 8011362:	f1a8 0104 	sub.w	r1, r8, #4
 8011366:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801136a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801136e:	bf4c      	ite	mi
 8011370:	ee77 7ae6 	vsubmi.f32	s15, s15, s13
 8011374:	ee77 7aa6 	vaddpl.f32	s15, s15, s13
 8011378:	eec6 6a27 	vdiv.f32	s13, s12, s15
 801137c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011380:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8011384:	ed85 7a00 	vstr	s14, [r5]
 8011388:	ed90 7a00 	vldr	s14, [r0]
 801138c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8011390:	eb0a 0001 	add.w	r0, sl, r1
 8011394:	ed84 7a00 	vstr	s14, [r4]
 8011398:	edd2 6a00 	vldr	s13, [r2]
 801139c:	eeb0 7a46 	vmov.f32	s14, s12
 80113a0:	eea6 7aa6 	vfma.f32	s14, s13, s13
 80113a4:	4418      	add	r0, r3
 80113a6:	4419      	add	r1, r3
 80113a8:	4673      	mov	r3, lr
 80113aa:	eeb1 6ac7 	vsqrt.f32	s12, s14
 80113ae:	ee86 7a86 	vdiv.f32	s14, s13, s12
 80113b2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80113b6:	4599      	cmp	r9, r3
 80113b8:	dd13      	ble.n	80113e2 <QR_Hessenberg_Matrix.constprop.27+0x252>
 80113ba:	3301      	adds	r3, #1
 80113bc:	edd0 7a00 	vldr	s15, [r0]
 80113c0:	edd1 5a00 	vldr	s11, [r1]
 80113c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80113c8:	ee25 6ac7 	vnmul.f32	s12, s11, s14
 80113cc:	eee6 7aa5 	vfma.f32	s15, s13, s11
 80113d0:	ece1 7a01 	vstmia	r1!, {s15}
 80113d4:	edd0 7a00 	vldr	s15, [r0]
 80113d8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80113dc:	eca0 6a01 	vstmia	r0!, {s12}
 80113e0:	e7e9      	b.n	80113b6 <QR_Hessenberg_Matrix.constprop.27+0x226>
 80113e2:	9b00      	ldr	r3, [sp, #0]
 80113e4:	2200      	movs	r2, #0
 80113e6:	443b      	add	r3, r7
 80113e8:	eba8 0007 	sub.w	r0, r8, r7
 80113ec:	18c1      	adds	r1, r0, r3
 80113ee:	edd1 7a00 	vldr	s15, [r1]
 80113f2:	edd3 5a00 	vldr	s11, [r3]
 80113f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80113fa:	ee25 6ac7 	vnmul.f32	s12, s11, s14
 80113fe:	eee6 7aa5 	vfma.f32	s15, s13, s11
 8011402:	3201      	adds	r2, #1
 8011404:	455a      	cmp	r2, fp
 8011406:	edc3 7a00 	vstr	s15, [r3]
 801140a:	edd1 7a00 	vldr	s15, [r1]
 801140e:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8011412:	4453      	add	r3, sl
 8011414:	ed81 6a00 	vstr	s12, [r1]
 8011418:	dde8      	ble.n	80113ec <QR_Hessenberg_Matrix.constprop.27+0x25c>
 801141a:	9b05      	ldr	r3, [sp, #20]
 801141c:	eba8 0007 	sub.w	r0, r8, r7
 8011420:	443b      	add	r3, r7
 8011422:	2200      	movs	r2, #0
 8011424:	18c1      	adds	r1, r0, r3
 8011426:	edd1 7a00 	vldr	s15, [r1]
 801142a:	edd3 5a00 	vldr	s11, [r3]
 801142e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011432:	ee25 6ac7 	vnmul.f32	s12, s11, s14
 8011436:	eee6 7aa5 	vfma.f32	s15, s13, s11
 801143a:	3201      	adds	r2, #1
 801143c:	4591      	cmp	r9, r2
 801143e:	edc3 7a00 	vstr	s15, [r3]
 8011442:	edd1 7a00 	vldr	s15, [r1]
 8011446:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801144a:	4453      	add	r3, sl
 801144c:	ed81 6a00 	vstr	s12, [r1]
 8011450:	d1e8      	bne.n	8011424 <QR_Hessenberg_Matrix.constprop.27+0x294>
 8011452:	e212      	b.n	801187a <QR_Hessenberg_Matrix.constprop.27+0x6ea>
 8011454:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011458:	edc5 7a00 	vstr	s15, [r5]
 801145c:	edc4 7a00 	vstr	s15, [r4]
 8011460:	e20b      	b.n	801187a <QR_Hessenberg_Matrix.constprop.27+0x6ea>
 8011462:	9a02      	ldr	r2, [sp, #8]
 8011464:	9b02      	ldr	r3, [sp, #8]
 8011466:	210a      	movs	r1, #10
 8011468:	fb93 f3f1 	sdiv	r3, r3, r1
 801146c:	fb01 2313 	mls	r3, r1, r3, r2
 8011470:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011472:	ed92 7a00 	vldr	s14, [r2]
 8011476:	bb5b      	cbnz	r3, 80114d0 <QR_Hessenberg_Matrix.constprop.27+0x340>
 8011478:	ee35 5a07 	vadd.f32	s10, s10, s14
 801147c:	9a00      	ldr	r2, [sp, #0]
 801147e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011480:	f10a 0104 	add.w	r1, sl, #4
 8011484:	ed92 7a00 	vldr	s14, [r2]
 8011488:	edd0 7a00 	vldr	s15, [r0]
 801148c:	3301      	adds	r3, #1
 801148e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011492:	455b      	cmp	r3, fp
 8011494:	edc2 7a00 	vstr	s15, [r2]
 8011498:	440a      	add	r2, r1
 801149a:	ddf3      	ble.n	8011484 <QR_Hessenberg_Matrix.constprop.27+0x2f4>
 801149c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801149e:	ed93 7a00 	vldr	s14, [r3]
 80114a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80114a4:	edd3 7a00 	vldr	s15, [r3]
 80114a8:	eeb0 7ac7 	vabs.f32	s14, s14
 80114ac:	eef0 7ae7 	vabs.f32	s15, s15
 80114b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80114b4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80114b8:	ee67 1aa7 	vmul.f32	s3, s15, s15
 80114bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80114c0:	e015      	b.n	80114ee <QR_Hessenberg_Matrix.constprop.27+0x35e>
 80114c2:	bf00      	nop
 80114c4:	34000000 	.word	0x34000000
 80114c8:	358637bd 	.word	0x358637bd
 80114cc:	00000000 	.word	0x00000000
 80114d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80114d2:	edd3 7a00 	vldr	s15, [r3]
 80114d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80114d8:	edd3 1a00 	vldr	s3, [r3]
 80114dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80114de:	ee61 1ae7 	vnmul.f32	s3, s3, s15
 80114e2:	edd3 6a00 	vldr	s13, [r3]
 80114e6:	eee6 1a87 	vfma.f32	s3, s13, s14
 80114ea:	ee76 7a87 	vadd.f32	s15, s13, s14
 80114ee:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80114f0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80114f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80114f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80114f6:	3c08      	subs	r4, #8
 80114f8:	9420      	str	r4, [sp, #128]	; 0x80
 80114fa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80114fc:	f1a4 0c04 	sub.w	ip, r4, #4
 8011500:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8011502:	2200      	movs	r2, #0
 8011504:	1f27      	subs	r7, r4, #4
 8011506:	4610      	mov	r0, r2
 8011508:	9723      	str	r7, [sp, #140]	; 0x8c
 801150a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801150c:	1826      	adds	r6, r4, r0
 801150e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8011510:	4404      	add	r4, r0
 8011512:	941f      	str	r4, [sp, #124]	; 0x7c
 8011514:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8011516:	eb04 0800 	add.w	r8, r4, r0
 801151a:	1e5c      	subs	r4, r3, #1
 801151c:	eb0c 0702 	add.w	r7, ip, r2
 8011520:	9411      	str	r4, [sp, #68]	; 0x44
 8011522:	9c04      	ldr	r4, [sp, #16]
 8011524:	971a      	str	r7, [sp, #104]	; 0x68
 8011526:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8011528:	4420      	add	r0, r4
 801152a:	9c20      	ldr	r4, [sp, #128]	; 0x80
 801152c:	4417      	add	r7, r2
 801152e:	4414      	add	r4, r2
 8011530:	9719      	str	r7, [sp, #100]	; 0x64
 8011532:	9f03      	ldr	r7, [sp, #12]
 8011534:	941b      	str	r4, [sp, #108]	; 0x6c
 8011536:	f1a5 0408 	sub.w	r4, r5, #8
 801153a:	941e      	str	r4, [sp, #120]	; 0x78
 801153c:	429f      	cmp	r7, r3
 801153e:	f1a5 0404 	sub.w	r4, r5, #4
 8011542:	4625      	mov	r5, r4
 8011544:	f1a2 0204 	sub.w	r2, r2, #4
 8011548:	dc4e      	bgt.n	80115e8 <QR_Hessenberg_Matrix.constprop.27+0x458>
 801154a:	ed11 7a02 	vldr	s14, [r1, #-8]
 801154e:	ed16 0a02 	vldr	s0, [r6, #-8]
 8011552:	ed56 6a01 	vldr	s13, [r6, #-4]
 8011556:	ed58 0a01 	vldr	s1, [r8, #-4]
 801155a:	ed51 5a01 	vldr	s11, [r1, #-4]
 801155e:	ee37 2a67 	vsub.f32	s4, s14, s15
 8011562:	eeb0 8a61 	vmov.f32	s16, s3
 8011566:	eea7 8a02 	vfma.f32	s16, s14, s4
 801156a:	ee32 2a26 	vadd.f32	s4, s4, s13
 801156e:	eec8 2a00 	vdiv.f32	s5, s16, s0
 8011572:	eeb0 6ae6 	vabs.f32	s12, s13
 8011576:	ee72 5aa5 	vadd.f32	s11, s5, s11
 801157a:	eef0 6ae0 	vabs.f32	s13, s1
 801157e:	eef0 2ac2 	vabs.f32	s5, s4
 8011582:	ee72 2aa6 	vadd.f32	s5, s5, s13
 8011586:	eef0 6ae5 	vabs.f32	s13, s11
 801158a:	ee72 2aa6 	vadd.f32	s5, s5, s13
 801158e:	eeb0 1ac7 	vabs.f32	s2, s14
 8011592:	eec5 6aa2 	vdiv.f32	s13, s11, s5
 8011596:	eec2 5a22 	vdiv.f32	s11, s4, s5
 801159a:	eef0 6ae6 	vabs.f32	s13, s13
 801159e:	eeb0 2ae5 	vabs.f32	s4, s11
 80115a2:	eec0 5aa2 	vdiv.f32	s11, s1, s5
 80115a6:	d01f      	beq.n	80115e8 <QR_Hessenberg_Matrix.constprop.27+0x458>
 80115a8:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80115aa:	ed16 7a03 	vldr	s14, [r6, #-12]
 80115ae:	ed51 2a03 	vldr	s5, [r1, #-12]
 80115b2:	9e04      	ldr	r6, [sp, #16]
 80115b4:	eeb0 7ac7 	vabs.f32	s14, s14
 80115b8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80115bc:	eeb0 6ae5 	vabs.f32	s12, s11
 80115c0:	ee37 7a01 	vadd.f32	s14, s14, s2
 80115c4:	ee72 5a06 	vadd.f32	s11, s4, s12
 80115c8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80115cc:	eeb0 6ae2 	vabs.f32	s12, s5
 80115d0:	ee26 6a25 	vmul.f32	s12, s12, s11
 80115d4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80115d8:	4431      	add	r1, r6
 80115da:	eeb4 6ac7 	vcmpe.f32	s12, s14
 80115de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115e2:	d901      	bls.n	80115e8 <QR_Hessenberg_Matrix.constprop.27+0x458>
 80115e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80115e6:	e790      	b.n	801150a <QR_Hessenberg_Matrix.constprop.27+0x37a>
 80115e8:	1c98      	adds	r0, r3, #2
 80115ea:	fb00 f209 	mul.w	r2, r0, r9
 80115ee:	009d      	lsls	r5, r3, #2
 80115f0:	9e00      	ldr	r6, [sp, #0]
 80115f2:	eb05 0182 	add.w	r1, r5, r2, lsl #2
 80115f6:	4431      	add	r1, r6
 80115f8:	f10a 0804 	add.w	r8, sl, #4
 80115fc:	4558      	cmp	r0, fp
 80115fe:	dc04      	bgt.n	801160a <QR_Hessenberg_Matrix.constprop.27+0x47a>
 8011600:	edc1 4a00 	vstr	s9, [r1]
 8011604:	3001      	adds	r0, #1
 8011606:	4441      	add	r1, r8
 8011608:	e7f8      	b.n	80115fc <QR_Hessenberg_Matrix.constprop.27+0x46c>
 801160a:	9900      	ldr	r1, [sp, #0]
 801160c:	444a      	add	r2, r9
 801160e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8011612:	440a      	add	r2, r1
 8011614:	1cd9      	adds	r1, r3, #3
 8011616:	4559      	cmp	r1, fp
 8011618:	dc04      	bgt.n	8011624 <QR_Hessenberg_Matrix.constprop.27+0x494>
 801161a:	edc2 4a00 	vstr	s9, [r2]
 801161e:	3101      	adds	r1, #1
 8011620:	4442      	add	r2, r8
 8011622:	e7f8      	b.n	8011616 <QR_Hessenberg_Matrix.constprop.27+0x486>
 8011624:	9900      	ldr	r1, [sp, #0]
 8011626:	981a      	ldr	r0, [sp, #104]	; 0x68
 8011628:	fb03 f209 	mul.w	r2, r3, r9
 801162c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8011630:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8011632:	4411      	add	r1, r2
 8011634:	ed91 7a00 	vldr	s14, [r1]
 8011638:	991e      	ldr	r1, [sp, #120]	; 0x78
 801163a:	ee77 6a67 	vsub.f32	s13, s14, s15
 801163e:	4411      	add	r1, r2
 8011640:	eee7 1a26 	vfma.f32	s3, s14, s13
 8011644:	4414      	add	r4, r2
 8011646:	4410      	add	r0, r2
 8011648:	edd1 2a00 	vldr	s5, [r1]
 801164c:	edd4 6a00 	vldr	s13, [r4]
 8011650:	9919      	ldr	r1, [sp, #100]	; 0x64
 8011652:	ed90 6a00 	vldr	s12, [r0]
 8011656:	9c00      	ldr	r4, [sp, #0]
 8011658:	eec1 5aa2 	vdiv.f32	s11, s3, s5
 801165c:	4411      	add	r1, r2
 801165e:	4608      	mov	r0, r1
 8011660:	3404      	adds	r4, #4
 8011662:	1f29      	subs	r1, r5, #4
 8011664:	440a      	add	r2, r1
 8011666:	9411      	str	r4, [sp, #68]	; 0x44
 8011668:	4619      	mov	r1, r3
 801166a:	ee37 7a26 	vadd.f32	s14, s14, s13
 801166e:	ed90 2a00 	vldr	s4, [r0]
 8011672:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011676:	ee35 6a86 	vadd.f32	s12, s11, s12
 801167a:	eeb0 7ac2 	vabs.f32	s14, s4
 801167e:	eef0 6ae7 	vabs.f32	s13, s15
 8011682:	ee76 6a87 	vadd.f32	s13, s13, s14
 8011686:	eeb0 7ac6 	vabs.f32	s14, s12
 801168a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801168e:	eef0 6a63 	vmov.f32	s13, s7
 8011692:	eec6 2a07 	vdiv.f32	s5, s12, s14
 8011696:	eec2 5a07 	vdiv.f32	s11, s4, s14
 801169a:	ee87 6a87 	vdiv.f32	s12, s15, s14
 801169e:	4571      	cmp	r1, lr
 80116a0:	f300 80e2 	bgt.w	8011868 <QR_Hessenberg_Matrix.constprop.27+0x6d8>
 80116a4:	4299      	cmp	r1, r3
 80116a6:	dd24      	ble.n	80116f2 <QR_Hessenberg_Matrix.constprop.27+0x562>
 80116a8:	4571      	cmp	r1, lr
 80116aa:	bf1e      	ittt	ne
 80116ac:	981d      	ldrne	r0, [sp, #116]	; 0x74
 80116ae:	1880      	addne	r0, r0, r2
 80116b0:	edd0 5a00 	vldrne	s11, [r0]
 80116b4:	edd2 1a00 	vldr	s3, [r2]
 80116b8:	bf08      	it	eq
 80116ba:	ed5f 5a7c 	vldreq	s11, [pc, #-496]	; 80114cc <QR_Hessenberg_Matrix.constprop.27+0x33c>
 80116be:	eb0a 0002 	add.w	r0, sl, r2
 80116c2:	ed90 2a00 	vldr	s4, [r0]
 80116c6:	eeb0 7ae1 	vabs.f32	s14, s3
 80116ca:	eef0 7ac2 	vabs.f32	s15, s4
 80116ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80116d2:	eef0 6ae5 	vabs.f32	s13, s11
 80116d6:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80116da:	eef4 6ac3 	vcmpe.f32	s13, s6
 80116de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116e2:	f100 80bd 	bmi.w	8011860 <QR_Hessenberg_Matrix.constprop.27+0x6d0>
 80116e6:	eec1 2aa6 	vdiv.f32	s5, s3, s13
 80116ea:	ee82 6a26 	vdiv.f32	s12, s4, s13
 80116ee:	eec5 5aa6 	vdiv.f32	s11, s11, s13
 80116f2:	ee26 7a06 	vmul.f32	s14, s12, s12
 80116f6:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 80116fa:	eea2 7aa2 	vfma.f32	s14, s5, s5
 80116fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011702:	eea5 7aa5 	vfma.f32	s14, s11, s11
 8011706:	eef1 7ac7 	vsqrt.f32	s15, s14
 801170a:	bf48      	it	mi
 801170c:	eef1 7a67 	vnegmi.f32	s15, s15
 8011710:	4299      	cmp	r1, r3
 8011712:	dd04      	ble.n	801171e <QR_Hessenberg_Matrix.constprop.27+0x58e>
 8011714:	ee66 6ae7 	vnmul.f32	s13, s13, s15
 8011718:	edc2 6a00 	vstr	s13, [r2]
 801171c:	e008      	b.n	8011730 <QR_Hessenberg_Matrix.constprop.27+0x5a0>
 801171e:	9803      	ldr	r0, [sp, #12]
 8011720:	4298      	cmp	r0, r3
 8011722:	d005      	beq.n	8011730 <QR_Hessenberg_Matrix.constprop.27+0x5a0>
 8011724:	edd2 6a00 	vldr	s13, [r2]
 8011728:	eef1 6a66 	vneg.f32	s13, s13
 801172c:	edc2 6a00 	vstr	s13, [r2]
 8011730:	ee32 7aa7 	vadd.f32	s14, s5, s15
 8011734:	ee86 2a27 	vdiv.f32	s4, s12, s15
 8011738:	9821      	ldr	r0, [sp, #132]	; 0x84
 801173a:	eb08 0602 	add.w	r6, r8, r2
 801173e:	1d14      	adds	r4, r2, #4
 8011740:	4410      	add	r0, r2
 8011742:	460f      	mov	r7, r1
 8011744:	eec5 1aa7 	vdiv.f32	s3, s11, s15
 8011748:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801174c:	ee86 6a07 	vdiv.f32	s12, s12, s14
 8011750:	eec5 5a87 	vdiv.f32	s11, s11, s14
 8011754:	eef1 0a66 	vneg.f32	s1, s13
 8011758:	eeb1 1a61 	vneg.f32	s2, s3
 801175c:	eef1 2a42 	vneg.f32	s5, s4
 8011760:	45b9      	cmp	r9, r7
 8011762:	dd1e      	ble.n	80117a2 <QR_Hessenberg_Matrix.constprop.27+0x612>
 8011764:	ed96 7a00 	vldr	s14, [r6]
 8011768:	edd4 7a00 	vldr	s15, [r4]
 801176c:	4571      	cmp	r1, lr
 801176e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011772:	d007      	beq.n	8011784 <QR_Hessenberg_Matrix.constprop.27+0x5f4>
 8011774:	ed90 7a00 	vldr	s14, [r0]
 8011778:	eee5 7a87 	vfma.f32	s15, s11, s14
 801177c:	eea1 7a27 	vfma.f32	s14, s2, s15
 8011780:	ed80 7a00 	vstr	s14, [r0]
 8011784:	ed96 7a00 	vldr	s14, [r6]
 8011788:	eea2 7aa7 	vfma.f32	s14, s5, s15
 801178c:	3004      	adds	r0, #4
 801178e:	3701      	adds	r7, #1
 8011790:	eca6 7a01 	vstmia	r6!, {s14}
 8011794:	ed94 7a00 	vldr	s14, [r4]
 8011798:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801179c:	eca4 7a01 	vstmia	r4!, {s14}
 80117a0:	e7de      	b.n	8011760 <QR_Hessenberg_Matrix.constprop.27+0x5d0>
 80117a2:	1cce      	adds	r6, r1, #3
 80117a4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80117a6:	455e      	cmp	r6, fp
 80117a8:	bfa8      	it	ge
 80117aa:	465e      	movge	r6, fp
 80117ac:	4428      	add	r0, r5
 80117ae:	2400      	movs	r4, #0
 80117b0:	eeb1 1a46 	vneg.f32	s2, s12
 80117b4:	eef1 2a65 	vneg.f32	s5, s11
 80117b8:	42b4      	cmp	r4, r6
 80117ba:	f100 0c04 	add.w	ip, r0, #4
 80117be:	f1a0 0704 	sub.w	r7, r0, #4
 80117c2:	dc21      	bgt.n	8011808 <QR_Hessenberg_Matrix.constprop.27+0x678>
 80117c4:	edd0 7a00 	vldr	s15, [r0]
 80117c8:	ed10 7a01 	vldr	s14, [r0, #-4]
 80117cc:	ee62 7a27 	vmul.f32	s15, s4, s15
 80117d0:	4571      	cmp	r1, lr
 80117d2:	f104 0401 	add.w	r4, r4, #1
 80117d6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80117da:	d007      	beq.n	80117ec <QR_Hessenberg_Matrix.constprop.27+0x65c>
 80117dc:	ed9c 7a00 	vldr	s14, [ip]
 80117e0:	eee1 7a87 	vfma.f32	s15, s3, s14
 80117e4:	eea2 7aa7 	vfma.f32	s14, s5, s15
 80117e8:	ed8c 7a00 	vstr	s14, [ip]
 80117ec:	ed90 7a00 	vldr	s14, [r0]
 80117f0:	eea1 7a27 	vfma.f32	s14, s2, s15
 80117f4:	ed80 7a00 	vstr	s14, [r0]
 80117f8:	ed97 7a00 	vldr	s14, [r7]
 80117fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011800:	4450      	add	r0, sl
 8011802:	edc7 7a00 	vstr	s15, [r7]
 8011806:	e7d7      	b.n	80117b8 <QR_Hessenberg_Matrix.constprop.27+0x628>
 8011808:	9805      	ldr	r0, [sp, #20]
 801180a:	2400      	movs	r4, #0
 801180c:	4428      	add	r0, r5
 801180e:	eef1 0a65 	vneg.f32	s1, s11
 8011812:	ed90 7a01 	vldr	s14, [r0, #4]
 8011816:	edd0 7a00 	vldr	s15, [r0]
 801181a:	ee22 7a07 	vmul.f32	s14, s4, s14
 801181e:	4571      	cmp	r1, lr
 8011820:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011824:	f104 0401 	add.w	r4, r4, #1
 8011828:	f100 0604 	add.w	r6, r0, #4
 801182c:	eef0 2a47 	vmov.f32	s5, s14
 8011830:	d007      	beq.n	8011842 <QR_Hessenberg_Matrix.constprop.27+0x6b2>
 8011832:	ed90 7a02 	vldr	s14, [r0, #8]
 8011836:	eee1 2a87 	vfma.f32	s5, s3, s14
 801183a:	eea0 7aa2 	vfma.f32	s14, s1, s5
 801183e:	ed80 7a02 	vstr	s14, [r0, #8]
 8011842:	edd6 7a00 	vldr	s15, [r6]
 8011846:	eee1 7a22 	vfma.f32	s15, s2, s5
 801184a:	45a1      	cmp	r9, r4
 801184c:	edc6 7a00 	vstr	s15, [r6]
 8011850:	edd0 7a00 	vldr	s15, [r0]
 8011854:	ee77 7ae2 	vsub.f32	s15, s15, s5
 8011858:	edc0 7a00 	vstr	s15, [r0]
 801185c:	4450      	add	r0, sl
 801185e:	d1d8      	bne.n	8011812 <QR_Hessenberg_Matrix.constprop.27+0x682>
 8011860:	3101      	adds	r1, #1
 8011862:	4442      	add	r2, r8
 8011864:	3504      	adds	r5, #4
 8011866:	e71a      	b.n	801169e <QR_Hessenberg_Matrix.constprop.27+0x50e>
 8011868:	9b02      	ldr	r3, [sp, #8]
 801186a:	3301      	adds	r3, #1
 801186c:	2b0b      	cmp	r3, #11
 801186e:	9302      	str	r3, [sp, #8]
 8011870:	f47f ad05 	bne.w	801127e <QR_Hessenberg_Matrix.constprop.27+0xee>
 8011874:	f04f 30ff 	mov.w	r0, #4294967295
 8011878:	e0c6      	b.n	8011a08 <QR_Hessenberg_Matrix.constprop.27+0x878>
 801187a:	f1be 0b01 	subs.w	fp, lr, #1
 801187e:	f57f acb1 	bpl.w	80111e4 <QR_Hessenberg_Matrix.constprop.27+0x54>
 8011882:	9b00      	ldr	r3, [sp, #0]
 8011884:	edd3 7a00 	vldr	s15, [r3]
 8011888:	eb03 020a 	add.w	r2, r3, sl
 801188c:	46d6      	mov	lr, sl
 801188e:	464c      	mov	r4, r9
 8011890:	f10a 0504 	add.w	r5, sl, #4
 8011894:	eef0 7ae7 	vabs.f32	s15, s15
 8011898:	2301      	movs	r3, #1
 801189a:	1e59      	subs	r1, r3, #1
 801189c:	4610      	mov	r0, r2
 801189e:	428c      	cmp	r4, r1
 80118a0:	dd07      	ble.n	80118b2 <QR_Hessenberg_Matrix.constprop.27+0x722>
 80118a2:	ecb0 7a01 	vldmia	r0!, {s14}
 80118a6:	eeb0 7ac7 	vabs.f32	s14, s14
 80118aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80118ae:	3101      	adds	r1, #1
 80118b0:	e7f5      	b.n	801189e <QR_Hessenberg_Matrix.constprop.27+0x70e>
 80118b2:	1c58      	adds	r0, r3, #1
 80118b4:	4284      	cmp	r4, r0
 80118b6:	442a      	add	r2, r5
 80118b8:	d001      	beq.n	80118be <QR_Hessenberg_Matrix.constprop.27+0x72e>
 80118ba:	4603      	mov	r3, r0
 80118bc:	e7ed      	b.n	801189a <QR_Hessenberg_Matrix.constprop.27+0x70a>
 80118be:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8011a14 <QR_Hessenberg_Matrix.constprop.27+0x884>
 80118c2:	9a00      	ldr	r2, [sp, #0]
 80118c4:	9908      	ldr	r1, [sp, #32]
 80118c6:	eddf 4a54 	vldr	s9, [pc, #336]	; 8011a18 <QR_Hessenberg_Matrix.constprop.27+0x888>
 80118ca:	9c07      	ldr	r4, [sp, #28]
 80118cc:	ee87 5a27 	vdiv.f32	s10, s14, s15
 80118d0:	fb03 3300 	mla	r3, r3, r0, r3
 80118d4:	ebce 0383 	rsb	r3, lr, r3, lsl #2
 80118d8:	4413      	add	r3, r2
 80118da:	9a06      	ldr	r2, [sp, #24]
 80118dc:	f1a1 0a04 	sub.w	sl, r1, #4
 80118e0:	4472      	add	r2, lr
 80118e2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80118e6:	eef0 5a46 	vmov.f32	s11, s12
 80118ea:	eb03 010e 	add.w	r1, r3, lr
 80118ee:	f104 38ff 	add.w	r8, r4, #4294967295
 80118f2:	ed81 6a00 	vstr	s12, [r1]
 80118f6:	4647      	mov	r7, r8
 80118f8:	461e      	mov	r6, r3
 80118fa:	461d      	mov	r5, r3
 80118fc:	9401      	str	r4, [sp, #4]
 80118fe:	2f00      	cmp	r7, #0
 8011900:	f107 0c01 	add.w	ip, r7, #1
 8011904:	db30      	blt.n	8011968 <QR_Hessenberg_Matrix.constprop.27+0x7d8>
 8011906:	ed56 6a01 	vldr	s13, [r6, #-4]
 801190a:	ed12 7a01 	vldr	s14, [r2, #-4]
 801190e:	edd5 7a00 	vldr	s15, [r5]
 8011912:	9c01      	ldr	r4, [sp, #4]
 8011914:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8011918:	4689      	mov	r9, r1
 801191a:	46b3      	mov	fp, r6
 801191c:	45a4      	cmp	ip, r4
 801191e:	da09      	bge.n	8011934 <QR_Hessenberg_Matrix.constprop.27+0x7a4>
 8011920:	edd9 6a00 	vldr	s13, [r9]
 8011924:	ecbb 4a01 	vldmia	fp!, {s8}
 8011928:	f10c 0c01 	add.w	ip, ip, #1
 801192c:	eee4 7a26 	vfma.f32	s15, s8, s13
 8011930:	44f1      	add	r9, lr
 8011932:	e7f3      	b.n	801191c <QR_Hessenberg_Matrix.constprop.27+0x78c>
 8011934:	eef0 6ac7 	vabs.f32	s13, s14
 8011938:	eef4 6ae4 	vcmpe.f32	s13, s9
 801193c:	eef1 7a67 	vneg.f32	s15, s15
 8011940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011944:	bfc8      	it	gt
 8011946:	eec7 6a87 	vdivgt.f32	s13, s15, s14
 801194a:	9401      	str	r4, [sp, #4]
 801194c:	9c04      	ldr	r4, [sp, #16]
 801194e:	4426      	add	r6, r4
 8011950:	9c08      	ldr	r4, [sp, #32]
 8011952:	f107 37ff 	add.w	r7, r7, #4294967295
 8011956:	4421      	add	r1, r4
 8011958:	bfd8      	it	le
 801195a:	ee65 6a27 	vmulle.f32	s13, s10, s15
 801195e:	edc5 6a00 	vstr	s13, [r5]
 8011962:	eba5 050e 	sub.w	r5, r5, lr
 8011966:	e7ca      	b.n	80118fe <QR_Hessenberg_Matrix.constprop.27+0x76e>
 8011968:	f118 0101 	adds.w	r1, r8, #1
 801196c:	4453      	add	r3, sl
 801196e:	f1a2 0204 	sub.w	r2, r2, #4
 8011972:	4644      	mov	r4, r8
 8011974:	d1b9      	bne.n	80118ea <QR_Hessenberg_Matrix.constprop.27+0x75a>
 8011976:	9a00      	ldr	r2, [sp, #0]
 8011978:	9907      	ldr	r1, [sp, #28]
 801197a:	f1ae 0304 	sub.w	r3, lr, #4
 801197e:	4413      	add	r3, r2
 8011980:	9a00      	ldr	r2, [sp, #0]
 8011982:	eba3 0c02 	sub.w	ip, r3, r2
 8011986:	9a05      	ldr	r2, [sp, #20]
 8011988:	2400      	movs	r4, #0
 801198a:	eddf 7a24 	vldr	s15, [pc, #144]	; 8011a1c <QR_Hessenberg_Matrix.constprop.27+0x88c>
 801198e:	461e      	mov	r6, r3
 8011990:	4617      	mov	r7, r2
 8011992:	2500      	movs	r5, #0
 8011994:	ed96 7a00 	vldr	s14, [r6]
 8011998:	ecf7 6a01 	vldmia	r7!, {s13}
 801199c:	3501      	adds	r5, #1
 801199e:	428d      	cmp	r5, r1
 80119a0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80119a4:	4476      	add	r6, lr
 80119a6:	ddf5      	ble.n	8011994 <QR_Hessenberg_Matrix.constprop.27+0x804>
 80119a8:	3401      	adds	r4, #1
 80119aa:	eb02 050c 	add.w	r5, r2, ip
 80119ae:	4284      	cmp	r4, r0
 80119b0:	edc5 7a00 	vstr	s15, [r5]
 80119b4:	4472      	add	r2, lr
 80119b6:	d1e8      	bne.n	801198a <QR_Hessenberg_Matrix.constprop.27+0x7fa>
 80119b8:	3901      	subs	r1, #1
 80119ba:	1c4a      	adds	r2, r1, #1
 80119bc:	f1a3 0304 	sub.w	r3, r3, #4
 80119c0:	d1de      	bne.n	8011980 <QR_Hessenberg_Matrix.constprop.27+0x7f0>
 80119c2:	9905      	ldr	r1, [sp, #20]
 80119c4:	eb01 040e 	add.w	r4, r1, lr
 80119c8:	eddf 7a14 	vldr	s15, [pc, #80]	; 8011a1c <QR_Hessenberg_Matrix.constprop.27+0x88c>
 80119cc:	460a      	mov	r2, r1
 80119ce:	2300      	movs	r3, #0
 80119d0:	ed92 7a00 	vldr	s14, [r2]
 80119d4:	3301      	adds	r3, #1
 80119d6:	4283      	cmp	r3, r0
 80119d8:	eee7 7a07 	vfma.f32	s15, s14, s14
 80119dc:	4472      	add	r2, lr
 80119de:	d1f7      	bne.n	80119d0 <QR_Hessenberg_Matrix.constprop.27+0x840>
 80119e0:	eef1 6ae7 	vsqrt.f32	s13, s15
 80119e4:	460b      	mov	r3, r1
 80119e6:	2200      	movs	r2, #0
 80119e8:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80119ec:	3201      	adds	r2, #1
 80119ee:	4282      	cmp	r2, r0
 80119f0:	edd3 7a00 	vldr	s15, [r3]
 80119f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80119f8:	edc3 7a00 	vstr	s15, [r3]
 80119fc:	4473      	add	r3, lr
 80119fe:	d1f5      	bne.n	80119ec <QR_Hessenberg_Matrix.constprop.27+0x85c>
 8011a00:	3104      	adds	r1, #4
 8011a02:	428c      	cmp	r4, r1
 8011a04:	d1e0      	bne.n	80119c8 <QR_Hessenberg_Matrix.constprop.27+0x838>
 8011a06:	2000      	movs	r0, #0
 8011a08:	b025      	add	sp, #148	; 0x94
 8011a0a:	ecbd 8b02 	vpop	{d8}
 8011a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a12:	bf00      	nop
 8011a14:	4b000000 	.word	0x4b000000
 8011a18:	358637bd 	.word	0x358637bd
 8011a1c:	00000000 	.word	0x00000000

08011a20 <MEMS_checkConsistency.constprop.32>:
 8011a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a24:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8011a28:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8011a2c:	f9b1 5006 	ldrsh.w	r5, [r1, #6]
 8011a30:	f9b1 3008 	ldrsh.w	r3, [r1, #8]
 8011a34:	1b67      	subs	r7, r4, r5
 8011a36:	1ad6      	subs	r6, r2, r3
 8011a38:	ea87 7ee7 	eor.w	lr, r7, r7, asr #31
 8011a3c:	ea86 7ce6 	eor.w	ip, r6, r6, asr #31
 8011a40:	ebae 7ee7 	sub.w	lr, lr, r7, asr #31
 8011a44:	ebac 7ce6 	sub.w	ip, ip, r6, asr #31
 8011a48:	45e6      	cmp	lr, ip
 8011a4a:	dd5f      	ble.n	8011b0c <MEMS_checkConsistency.constprop.32+0xec>
 8011a4c:	b2a4      	uxth	r4, r4
 8011a4e:	b2ab      	uxth	r3, r5
 8011a50:	2f00      	cmp	r7, #0
 8011a52:	bfb4      	ite	lt
 8011a54:	1b1c      	sublt	r4, r3, r4
 8011a56:	1ae4      	subge	r4, r4, r3
 8011a58:	b223      	sxth	r3, r4
 8011a5a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8011a5e:	f9b1 400a 	ldrsh.w	r4, [r1, #10]
 8011a62:	1b15      	subs	r5, r2, r4
 8011a64:	ea85 76e5 	eor.w	r6, r5, r5, asr #31
 8011a68:	eba6 76e5 	sub.w	r6, r6, r5, asr #31
 8011a6c:	42b3      	cmp	r3, r6
 8011a6e:	dc06      	bgt.n	8011a7e <MEMS_checkConsistency.constprop.32+0x5e>
 8011a70:	b292      	uxth	r2, r2
 8011a72:	b2a3      	uxth	r3, r4
 8011a74:	2d00      	cmp	r5, #0
 8011a76:	bfb4      	ite	lt
 8011a78:	1a9a      	sublt	r2, r3, r2
 8011a7a:	1ad2      	subge	r2, r2, r3
 8011a7c:	b213      	sxth	r3, r2
 8011a7e:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 8011a82:	898e      	ldrh	r6, [r1, #12]
 8011a84:	89c7      	ldrh	r7, [r0, #14]
 8011a86:	89cd      	ldrh	r5, [r1, #14]
 8011a88:	ebac 0406 	sub.w	r4, ip, r6
 8011a8c:	1b7a      	subs	r2, r7, r5
 8011a8e:	ea84 78e4 	eor.w	r8, r4, r4, asr #31
 8011a92:	ea82 7ee2 	eor.w	lr, r2, r2, asr #31
 8011a96:	eba8 78e4 	sub.w	r8, r8, r4, asr #31
 8011a9a:	ebae 7ee2 	sub.w	lr, lr, r2, asr #31
 8011a9e:	45f0      	cmp	r8, lr
 8011aa0:	dd2f      	ble.n	8011b02 <MEMS_checkConsistency.constprop.32+0xe2>
 8011aa2:	2c00      	cmp	r4, #0
 8011aa4:	bfba      	itte	lt
 8011aa6:	eba6 020c 	sublt.w	r2, r6, ip
 8011aaa:	b212      	sxthlt	r2, r2
 8011aac:	b222      	sxthge	r2, r4
 8011aae:	8a04      	ldrh	r4, [r0, #16]
 8011ab0:	8a08      	ldrh	r0, [r1, #16]
 8011ab2:	1a21      	subs	r1, r4, r0
 8011ab4:	ea81 75e1 	eor.w	r5, r1, r1, asr #31
 8011ab8:	eba5 75e1 	sub.w	r5, r5, r1, asr #31
 8011abc:	42aa      	cmp	r2, r5
 8011abe:	dc04      	bgt.n	8011aca <MEMS_checkConsistency.constprop.32+0xaa>
 8011ac0:	2900      	cmp	r1, #0
 8011ac2:	bfba      	itte	lt
 8011ac4:	1b02      	sublt	r2, r0, r4
 8011ac6:	b212      	sxthlt	r2, r2
 8011ac8:	b20a      	sxthge	r2, r1
 8011aca:	ee07 3a90 	vmov	s15, r3
 8011ace:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011ad2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8011ad6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011ada:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8011ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ae2:	d51c      	bpl.n	8011b1e <MEMS_checkConsistency.constprop.32+0xfe>
 8011ae4:	ee07 2a90 	vmov	s15, r2
 8011ae8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8011b24 <MEMS_checkConsistency.constprop.32+0x104>
 8011aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011af0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011af8:	bf4c      	ite	mi
 8011afa:	2001      	movmi	r0, #1
 8011afc:	2000      	movpl	r0, #0
 8011afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b02:	2a00      	cmp	r2, #0
 8011b04:	bfb8      	it	lt
 8011b06:	1bea      	sublt	r2, r5, r7
 8011b08:	b212      	sxth	r2, r2
 8011b0a:	e7d0      	b.n	8011aae <MEMS_checkConsistency.constprop.32+0x8e>
 8011b0c:	b29b      	uxth	r3, r3
 8011b0e:	2e00      	cmp	r6, #0
 8011b10:	b292      	uxth	r2, r2
 8011b12:	bfb5      	itete	lt
 8011b14:	1a9b      	sublt	r3, r3, r2
 8011b16:	1ad2      	subge	r2, r2, r3
 8011b18:	b21b      	sxthlt	r3, r3
 8011b1a:	b213      	sxthge	r3, r2
 8011b1c:	e79d      	b.n	8011a5a <MEMS_checkConsistency.constprop.32+0x3a>
 8011b1e:	2000      	movs	r0, #0
 8011b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b24:	43480000 	.word	0x43480000

08011b28 <MEMS_updateMagBufferIndex.constprop.22>:
 8011b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b2c:	4d76      	ldr	r5, [pc, #472]	; (8011d08 <MEMS_updateMagBufferIndex.constprop.22+0x1e0>)
 8011b2e:	ed2d 8b02 	vpush	{d8}
 8011b32:	f895 10e0 	ldrb.w	r1, [r5, #224]	; 0xe0
 8011b36:	f895 80e1 	ldrb.w	r8, [r5, #225]	; 0xe1
 8011b3a:	f995 20e2 	ldrsb.w	r2, [r5, #226]	; 0xe2
 8011b3e:	b089      	sub	sp, #36	; 0x24
 8011b40:	2300      	movs	r3, #0
 8011b42:	4541      	cmp	r1, r8
 8011b44:	9101      	str	r1, [sp, #4]
 8011b46:	f102 0201 	add.w	r2, r2, #1
 8011b4a:	e9c5 333a 	strd	r3, r3, [r5, #232]	; 0xe8
 8011b4e:	e9c5 333c 	strd	r3, r3, [r5, #240]	; 0xf0
 8011b52:	e9c5 333e 	strd	r3, r3, [r5, #248]	; 0xf8
 8011b56:	f000 80d0 	beq.w	8011cfa <MEMS_updateMagBufferIndex.constprop.22+0x1d2>
 8011b5a:	1a52      	subs	r2, r2, r1
 8011b5c:	fb92 f3f8 	sdiv	r3, r2, r8
 8011b60:	fb08 2213 	mls	r2, r8, r3, r2
 8011b64:	b213      	sxth	r3, r2
 8011b66:	2a00      	cmp	r2, #0
 8011b68:	9307      	str	r3, [sp, #28]
 8011b6a:	f2c0 80c2 	blt.w	8011cf2 <MEMS_updateMagBufferIndex.constprop.22+0x1ca>
 8011b6e:	9b01      	ldr	r3, [sp, #4]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	f000 80b9 	beq.w	8011ce8 <MEMS_updateMagBufferIndex.constprop.22+0x1c0>
 8011b76:	2600      	movs	r6, #0
 8011b78:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011b7c:	4681      	mov	r9, r0
 8011b7e:	ee87 8a80 	vdiv.f32	s16, s15, s0
 8011b82:	e9cd 6602 	strd	r6, r6, [sp, #8]
 8011b86:	e9cd 6604 	strd	r6, r6, [sp, #16]
 8011b8a:	9606      	str	r6, [sp, #24]
 8011b8c:	46b3      	mov	fp, r6
 8011b8e:	2701      	movs	r7, #1
 8011b90:	e021      	b.n	8011bd6 <MEMS_updateMagBufferIndex.constprop.22+0xae>
 8011b92:	3c20      	subs	r4, #32
 8011b94:	fa07 f404 	lsl.w	r4, r7, r4
 8011b98:	ea24 040b 	bic.w	r4, r4, fp
 8011b9c:	f1ba 0f1f 	cmp.w	sl, #31
 8011ba0:	ea8b 0b04 	eor.w	fp, fp, r4
 8011ba4:	d97a      	bls.n	8011c9c <MEMS_updateMagBufferIndex.constprop.22+0x174>
 8011ba6:	9905      	ldr	r1, [sp, #20]
 8011ba8:	f1aa 0220 	sub.w	r2, sl, #32
 8011bac:	fa07 f202 	lsl.w	r2, r7, r2
 8011bb0:	ea22 0201 	bic.w	r2, r2, r1
 8011bb4:	404a      	eors	r2, r1
 8011bb6:	2b1f      	cmp	r3, #31
 8011bb8:	9205      	str	r2, [sp, #20]
 8011bba:	d978      	bls.n	8011cae <MEMS_updateMagBufferIndex.constprop.22+0x186>
 8011bbc:	9a03      	ldr	r2, [sp, #12]
 8011bbe:	3b20      	subs	r3, #32
 8011bc0:	fa07 f303 	lsl.w	r3, r7, r3
 8011bc4:	ea23 0302 	bic.w	r3, r3, r2
 8011bc8:	4053      	eors	r3, r2
 8011bca:	3601      	adds	r6, #1
 8011bcc:	9a01      	ldr	r2, [sp, #4]
 8011bce:	9303      	str	r3, [sp, #12]
 8011bd0:	b2f3      	uxtb	r3, r6
 8011bd2:	429a      	cmp	r2, r3
 8011bd4:	d977      	bls.n	8011cc6 <MEMS_updateMagBufferIndex.constprop.22+0x19e>
 8011bd6:	9b07      	ldr	r3, [sp, #28]
 8011bd8:	199a      	adds	r2, r3, r6
 8011bda:	fb92 f3f8 	sdiv	r3, r2, r8
 8011bde:	fb08 2313 	mls	r3, r8, r3, r2
 8011be2:	b2db      	uxtb	r3, r3
 8011be4:	f103 0a04 	add.w	sl, r3, #4
 8011be8:	eb05 02ca 	add.w	r2, r5, sl, lsl #3
 8011bec:	f9b2 00e2 	ldrsh.w	r0, [r2, #226]	; 0xe2
 8011bf0:	fb90 f2f9 	sdiv	r2, r0, r9
 8011bf4:	fb09 0212 	mls	r2, r9, r2, r0
 8011bf8:	2a00      	cmp	r2, #0
 8011bfa:	bfb8      	it	lt
 8011bfc:	444a      	addlt	r2, r9
 8011bfe:	b213      	sxth	r3, r2
 8011c00:	ee00 3a10 	vmov	s0, r3
 8011c04:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8011c08:	ee20 0a08 	vmul.f32	s0, s0, s16
 8011c0c:	f008 faee 	bl	801a1ec <roundf>
 8011c10:	eb05 02ca 	add.w	r2, r5, sl, lsl #3
 8011c14:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8011c18:	f9b2 00e4 	ldrsh.w	r0, [r2, #228]	; 0xe4
 8011c1c:	fb90 f2f9 	sdiv	r2, r0, r9
 8011c20:	fb09 0212 	mls	r2, r9, r2, r0
 8011c24:	2a00      	cmp	r2, #0
 8011c26:	bfb8      	it	lt
 8011c28:	444a      	addlt	r2, r9
 8011c2a:	b213      	sxth	r3, r2
 8011c2c:	ee00 3a10 	vmov	s0, r3
 8011c30:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8011c34:	edcd 7a00 	vstr	s15, [sp]
 8011c38:	ee20 0a08 	vmul.f32	s0, s0, s16
 8011c3c:	f008 fad6 	bl	801a1ec <roundf>
 8011c40:	eb05 03ca 	add.w	r3, r5, sl, lsl #3
 8011c44:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8011c48:	f9b3 20e6 	ldrsh.w	r2, [r3, #230]	; 0xe6
 8011c4c:	fb92 f3f9 	sdiv	r3, r2, r9
 8011c50:	fb09 2313 	mls	r3, r9, r3, r2
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	bfb8      	it	lt
 8011c58:	444b      	addlt	r3, r9
 8011c5a:	b21b      	sxth	r3, r3
 8011c5c:	ee00 3a10 	vmov	s0, r3
 8011c60:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8011c64:	f89d 4000 	ldrb.w	r4, [sp]
 8011c68:	edcd 7a00 	vstr	s15, [sp]
 8011c6c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8011c70:	f008 fabc 	bl	801a1ec <roundf>
 8011c74:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8011c78:	f89d a000 	ldrb.w	sl, [sp]
 8011c7c:	edcd 7a00 	vstr	s15, [sp]
 8011c80:	2c1f      	cmp	r4, #31
 8011c82:	f89d 3000 	ldrb.w	r3, [sp]
 8011c86:	d884      	bhi.n	8011b92 <MEMS_updateMagBufferIndex.constprop.22+0x6a>
 8011c88:	9a06      	ldr	r2, [sp, #24]
 8011c8a:	fa07 f404 	lsl.w	r4, r7, r4
 8011c8e:	ea24 0402 	bic.w	r4, r4, r2
 8011c92:	4062      	eors	r2, r4
 8011c94:	f1ba 0f1f 	cmp.w	sl, #31
 8011c98:	9206      	str	r2, [sp, #24]
 8011c9a:	d884      	bhi.n	8011ba6 <MEMS_updateMagBufferIndex.constprop.22+0x7e>
 8011c9c:	9904      	ldr	r1, [sp, #16]
 8011c9e:	fa07 f20a 	lsl.w	r2, r7, sl
 8011ca2:	ea22 0201 	bic.w	r2, r2, r1
 8011ca6:	404a      	eors	r2, r1
 8011ca8:	2b1f      	cmp	r3, #31
 8011caa:	9204      	str	r2, [sp, #16]
 8011cac:	d886      	bhi.n	8011bbc <MEMS_updateMagBufferIndex.constprop.22+0x94>
 8011cae:	9a02      	ldr	r2, [sp, #8]
 8011cb0:	fa07 f303 	lsl.w	r3, r7, r3
 8011cb4:	ea23 0302 	bic.w	r3, r3, r2
 8011cb8:	4053      	eors	r3, r2
 8011cba:	3601      	adds	r6, #1
 8011cbc:	9a01      	ldr	r2, [sp, #4]
 8011cbe:	9302      	str	r3, [sp, #8]
 8011cc0:	b2f3      	uxtb	r3, r6
 8011cc2:	429a      	cmp	r2, r3
 8011cc4:	d887      	bhi.n	8011bd6 <MEMS_updateMagBufferIndex.constprop.22+0xae>
 8011cc6:	9b06      	ldr	r3, [sp, #24]
 8011cc8:	f8c5 30ec 	str.w	r3, [r5, #236]	; 0xec
 8011ccc:	9b05      	ldr	r3, [sp, #20]
 8011cce:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
 8011cd2:	9b04      	ldr	r3, [sp, #16]
 8011cd4:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 8011cd8:	9b03      	ldr	r3, [sp, #12]
 8011cda:	f8c5 30fc 	str.w	r3, [r5, #252]	; 0xfc
 8011cde:	9b02      	ldr	r3, [sp, #8]
 8011ce0:	f8c5 b0e8 	str.w	fp, [r5, #232]	; 0xe8
 8011ce4:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
 8011ce8:	b009      	add	sp, #36	; 0x24
 8011cea:	ecbd 8b02 	vpop	{d8}
 8011cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cf2:	4442      	add	r2, r8
 8011cf4:	b213      	sxth	r3, r2
 8011cf6:	9307      	str	r3, [sp, #28]
 8011cf8:	e739      	b.n	8011b6e <MEMS_updateMagBufferIndex.constprop.22+0x46>
 8011cfa:	fb92 f3f1 	sdiv	r3, r2, r1
 8011cfe:	fb01 2213 	mls	r2, r1, r3, r2
 8011d02:	b213      	sxth	r3, r2
 8011d04:	9307      	str	r3, [sp, #28]
 8011d06:	e732      	b.n	8011b6e <MEMS_updateMagBufferIndex.constprop.22+0x46>
 8011d08:	20001708 	.word	0x20001708

08011d0c <getMagStats.constprop.28>:
 8011d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d10:	4d80      	ldr	r5, [pc, #512]	; (8011f14 <getMagStats.constprop.28+0x208>)
 8011d12:	2400      	movs	r4, #0
 8011d14:	601c      	str	r4, [r3, #0]
 8011d16:	6014      	str	r4, [r2, #0]
 8011d18:	f895 e0e0 	ldrb.w	lr, [r5, #224]	; 0xe0
 8011d1c:	f895 80e1 	ldrb.w	r8, [r5, #225]	; 0xe1
 8011d20:	f995 40e2 	ldrsb.w	r4, [r5, #226]	; 0xe2
 8011d24:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011d28:	45c6      	cmp	lr, r8
 8011d2a:	b083      	sub	sp, #12
 8011d2c:	f104 0401 	add.w	r4, r4, #1
 8011d30:	46a9      	mov	r9, r5
 8011d32:	ee87 4a80 	vdiv.f32	s8, s15, s0
 8011d36:	d105      	bne.n	8011d44 <getMagStats.constprop.28+0x38>
 8011d38:	fb94 f5fe 	sdiv	r5, r4, lr
 8011d3c:	fb0e 4415 	mls	r4, lr, r5, r4
 8011d40:	b225      	sxth	r5, r4
 8011d42:	e00a      	b.n	8011d5a <getMagStats.constprop.28+0x4e>
 8011d44:	eba4 040e 	sub.w	r4, r4, lr
 8011d48:	fb94 f5f8 	sdiv	r5, r4, r8
 8011d4c:	fb08 4415 	mls	r4, r8, r5, r4
 8011d50:	2c00      	cmp	r4, #0
 8011d52:	b225      	sxth	r5, r4
 8011d54:	bfbc      	itt	lt
 8011d56:	4444      	addlt	r4, r8
 8011d58:	b225      	sxthlt	r5, r4
 8011d5a:	eddf 3a6f 	vldr	s7, [pc, #444]	; 8011f18 <getMagStats.constprop.28+0x20c>
 8011d5e:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8011d62:	f04f 0a00 	mov.w	sl, #0
 8011d66:	b26c      	sxtb	r4, r5
 8011d68:	ee64 3a23 	vmul.f32	s7, s8, s7
 8011d6c:	ee24 4a27 	vmul.f32	s8, s8, s15
 8011d70:	9401      	str	r4, [sp, #4]
 8011d72:	46d3      	mov	fp, sl
 8011d74:	9c01      	ldr	r4, [sp, #4]
 8011d76:	eb04 050a 	add.w	r5, r4, sl
 8011d7a:	fa5f f48a 	uxtb.w	r4, sl
 8011d7e:	45a6      	cmp	lr, r4
 8011d80:	f240 80a4 	bls.w	8011ecc <getMagStats.constprop.28+0x1c0>
 8011d84:	fb95 f4f8 	sdiv	r4, r5, r8
 8011d88:	fb08 5414 	mls	r4, r8, r4, r5
 8011d8c:	b2e4      	uxtb	r4, r4
 8011d8e:	3404      	adds	r4, #4
 8011d90:	eb09 04c4 	add.w	r4, r9, r4, lsl #3
 8011d94:	8887      	ldrh	r7, [r0, #4]
 8011d96:	f8b4 60e6 	ldrh.w	r6, [r4, #230]	; 0xe6
 8011d9a:	f8b4 50e2 	ldrh.w	r5, [r4, #226]	; 0xe2
 8011d9e:	f8b0 c000 	ldrh.w	ip, [r0]
 8011da2:	f8b4 40e4 	ldrh.w	r4, [r4, #228]	; 0xe4
 8011da6:	ed91 2a05 	vldr	s4, [r1, #20]
 8011daa:	edd1 2a02 	vldr	s5, [r1, #8]
 8011dae:	edd1 0a03 	vldr	s1, [r1, #12]
 8011db2:	ed91 7a07 	vldr	s14, [r1, #28]
 8011db6:	ed91 1a01 	vldr	s2, [r1, #4]
 8011dba:	edd1 4a04 	vldr	s9, [r1, #16]
 8011dbe:	edd1 6a08 	vldr	s13, [r1, #32]
 8011dc2:	edd1 1a06 	vldr	s3, [r1, #24]
 8011dc6:	edd1 5a00 	vldr	s11, [r1]
 8011dca:	ed92 3a00 	vldr	s6, [r2]
 8011dce:	1bf6      	subs	r6, r6, r7
 8011dd0:	b236      	sxth	r6, r6
 8011dd2:	8847      	ldrh	r7, [r0, #2]
 8011dd4:	ee07 6a90 	vmov	s15, r6
 8011dd8:	eba5 050c 	sub.w	r5, r5, ip
 8011ddc:	b22d      	sxth	r5, r5
 8011dde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011de2:	1be4      	subs	r4, r4, r7
 8011de4:	ee06 5a10 	vmov	s12, r5
 8011de8:	b224      	sxth	r4, r4
 8011dea:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8011dee:	ee05 4a10 	vmov	s10, r4
 8011df2:	ee27 2a82 	vmul.f32	s4, s15, s4
 8011df6:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8011dfa:	ee67 2aa2 	vmul.f32	s5, s15, s5
 8011dfe:	eea6 2a20 	vfma.f32	s4, s12, s1
 8011e02:	f10b 0601 	add.w	r6, fp, #1
 8011e06:	f10a 0a01 	add.w	sl, sl, #1
 8011e0a:	ee25 7a07 	vmul.f32	s14, s10, s14
 8011e0e:	eee5 2a01 	vfma.f32	s5, s10, s2
 8011e12:	ee25 5a24 	vmul.f32	s10, s10, s9
 8011e16:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011e1a:	eebd 2ac2 	vcvt.s32.f32	s4, s4
 8011e1e:	eefd 6ac5 	vcvt.s32.f32	s13, s10
 8011e22:	eea6 7a21 	vfma.f32	s14, s12, s3
 8011e26:	ee26 6a25 	vmul.f32	s12, s12, s11
 8011e2a:	ee16 7a90 	vmov	r7, s13
 8011e2e:	ee12 4a10 	vmov	r4, s4
 8011e32:	eefd 2ae2 	vcvt.s32.f32	s5, s5
 8011e36:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 8011e3a:	443c      	add	r4, r7
 8011e3c:	fb14 f704 	smulbb	r7, r4, r4
 8011e40:	ee12 5a90 	vmov	r5, s5
 8011e44:	ee16 4a10 	vmov	r4, s12
 8011e48:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8011e4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011e50:	4425      	add	r5, r4
 8011e52:	fb15 7505 	smlabb	r5, r5, r5, r7
 8011e56:	ee17 4a90 	vmov	r4, s15
 8011e5a:	ee17 7a10 	vmov	r7, s14
 8011e5e:	4427      	add	r7, r4
 8011e60:	fb17 5407 	smlabb	r4, r7, r7, r5
 8011e64:	ee07 4a90 	vmov	s15, r4
 8011e68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011e6c:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8011e70:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8011e74:	ee17 4a10 	vmov	r4, s14
 8011e78:	b224      	sxth	r4, r4
 8011e7a:	ee07 4a10 	vmov	s14, r4
 8011e7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011e82:	ee77 7a63 	vsub.f32	s15, s14, s7
 8011e86:	ee33 7a07 	vadd.f32	s14, s6, s14
 8011e8a:	eef0 7ae7 	vabs.f32	s15, s15
 8011e8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011e92:	ed82 7a00 	vstr	s14, [r2]
 8011e96:	ee17 4a90 	vmov	r4, s15
 8011e9a:	b224      	sxth	r4, r4
 8011e9c:	ee07 4a90 	vmov	s15, r4
 8011ea0:	fb04 f404 	mul.w	r4, r4, r4
 8011ea4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011ea8:	ee07 4a90 	vmov	s15, r4
 8011eac:	eeb4 4ac7 	vcmpe.f32	s8, s14
 8011eb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011eb4:	ed93 7a00 	vldr	s14, [r3]
 8011eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ec0:	bf48      	it	mi
 8011ec2:	fa5f fb86 	uxtbmi.w	fp, r6
 8011ec6:	edc3 7a00 	vstr	s15, [r3]
 8011eca:	e753      	b.n	8011d74 <getMagStats.constprop.28+0x68>
 8011ecc:	ee07 ea90 	vmov	s15, lr
 8011ed0:	ed93 7a00 	vldr	s14, [r3]
 8011ed4:	eddf 6a11 	vldr	s13, [pc, #68]	; 8011f1c <getMagStats.constprop.28+0x210>
 8011ed8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011edc:	4658      	mov	r0, fp
 8011ede:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8011ee2:	eeb1 7ac6 	vsqrt.f32	s14, s12
 8011ee6:	ee20 7a07 	vmul.f32	s14, s0, s14
 8011eea:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8011eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ef2:	bfb8      	it	lt
 8011ef4:	eeb0 7a66 	vmovlt.f32	s14, s13
 8011ef8:	ed83 7a00 	vstr	s14, [r3]
 8011efc:	ed92 7a00 	vldr	s14, [r2]
 8011f00:	ee20 0a07 	vmul.f32	s0, s0, s14
 8011f04:	ee80 7a27 	vdiv.f32	s14, s0, s15
 8011f08:	ed82 7a00 	vstr	s14, [r2]
 8011f0c:	b003      	add	sp, #12
 8011f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f12:	bf00      	nop
 8011f14:	20001708 	.word	0x20001708
 8011f18:	423c0000 	.word	0x423c0000
 8011f1c:	3f59999a 	.word	0x3f59999a

08011f20 <MEMS_solveEllipsoid.constprop.25>:
 8011f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f24:	ed2d 8b10 	vpush	{d8-d15}
 8011f28:	4bb9      	ldr	r3, [pc, #740]	; (8012210 <MEMS_solveEllipsoid.constprop.25+0x2f0>)
 8011f2a:	2400      	movs	r4, #0
 8011f2c:	6014      	str	r4, [r2, #0]
 8011f2e:	f893 50e0 	ldrb.w	r5, [r3, #224]	; 0xe0
 8011f32:	f893 60e1 	ldrb.w	r6, [r3, #225]	; 0xe1
 8011f36:	f993 70e2 	ldrsb.w	r7, [r3, #226]	; 0xe2
 8011f3a:	f5ad 7d6f 	sub.w	sp, sp, #956	; 0x3bc
 8011f3e:	42b5      	cmp	r5, r6
 8011f40:	9201      	str	r2, [sp, #4]
 8011f42:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 8011f46:	4604      	mov	r4, r0
 8011f48:	910e      	str	r1, [sp, #56]	; 0x38
 8011f4a:	f107 0701 	add.w	r7, r7, #1
 8011f4e:	4698      	mov	r8, r3
 8011f50:	d106      	bne.n	8011f60 <MEMS_solveEllipsoid.constprop.25+0x40>
 8011f52:	fb97 f9f5 	sdiv	r9, r7, r5
 8011f56:	fb05 7919 	mls	r9, r5, r9, r7
 8011f5a:	fa0f f989 	sxth.w	r9, r9
 8011f5e:	e00d      	b.n	8011f7c <MEMS_solveEllipsoid.constprop.25+0x5c>
 8011f60:	eba7 0905 	sub.w	r9, r7, r5
 8011f64:	fb99 f3f6 	sdiv	r3, r9, r6
 8011f68:	fb06 9313 	mls	r3, r6, r3, r9
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	fa0f f983 	sxth.w	r9, r3
 8011f72:	bfbc      	itt	lt
 8011f74:	eb06 0903 	addlt.w	r9, r6, r3
 8011f78:	fa0f f989 	sxthlt.w	r9, r9
 8011f7c:	ed9f 8aa8 	vldr	s16, [pc, #672]	; 8012220 <MEMS_solveEllipsoid.constprop.25+0x300>
 8011f80:	2200      	movs	r2, #0
 8011f82:	eef0 8a48 	vmov.f32	s17, s16
 8011f86:	eeb0 9a48 	vmov.f32	s18, s16
 8011f8a:	b2d3      	uxtb	r3, r2
 8011f8c:	429d      	cmp	r5, r3
 8011f8e:	eb09 0102 	add.w	r1, r9, r2
 8011f92:	d921      	bls.n	8011fd8 <MEMS_solveEllipsoid.constprop.25+0xb8>
 8011f94:	fb91 f3f6 	sdiv	r3, r1, r6
 8011f98:	fb06 1313 	mls	r3, r6, r3, r1
 8011f9c:	b2db      	uxtb	r3, r3
 8011f9e:	3304      	adds	r3, #4
 8011fa0:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8011fa4:	3201      	adds	r2, #1
 8011fa6:	f9b3 10e2 	ldrsh.w	r1, [r3, #226]	; 0xe2
 8011faa:	ee06 1a90 	vmov	s13, r1
 8011fae:	f9b3 10e4 	ldrsh.w	r1, [r3, #228]	; 0xe4
 8011fb2:	f9b3 30e6 	ldrsh.w	r3, [r3, #230]	; 0xe6
 8011fb6:	ee07 1a10 	vmov	s14, r1
 8011fba:	ee07 3a90 	vmov	s15, r3
 8011fbe:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011fc2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011fc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011fca:	ee39 9a26 	vadd.f32	s18, s18, s13
 8011fce:	ee78 8a87 	vadd.f32	s17, s17, s14
 8011fd2:	ee38 8a27 	vadd.f32	s16, s16, s15
 8011fd6:	e7d8      	b.n	8011f8a <MEMS_solveEllipsoid.constprop.25+0x6a>
 8011fd8:	ee07 5a90 	vmov	s15, r5
 8011fdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011fe0:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 8011fe4:	eec9 7a87 	vdiv.f32	s15, s19, s14
 8011fe8:	2210      	movs	r2, #16
 8011fea:	a82e      	add	r0, sp, #184	; 0xb8
 8011fec:	2100      	movs	r1, #0
 8011fee:	ee29 9a27 	vmul.f32	s18, s18, s15
 8011ff2:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8011ff6:	ee28 8a27 	vmul.f32	s16, s16, s15
 8011ffa:	ed8d 9a13 	vstr	s18, [sp, #76]	; 0x4c
 8011ffe:	edcd 8a14 	vstr	s17, [sp, #80]	; 0x50
 8012002:	ed8d 8a15 	vstr	s16, [sp, #84]	; 0x54
 8012006:	f005 f9a3 	bl	8017350 <memset>
 801200a:	eddf 6a85 	vldr	s13, [pc, #532]	; 8012220 <MEMS_solveEllipsoid.constprop.25+0x300>
 801200e:	eef0 4a69 	vmov.f32	s9, s19
 8012012:	eeb0 4a66 	vmov.f32	s8, s13
 8012016:	eef0 7a66 	vmov.f32	s15, s13
 801201a:	eef0 3a66 	vmov.f32	s7, s13
 801201e:	eeb0 3a66 	vmov.f32	s6, s13
 8012022:	eeb0 ba66 	vmov.f32	s22, s13
 8012026:	2200      	movs	r2, #0
 8012028:	b2d3      	uxtb	r3, r2
 801202a:	429d      	cmp	r5, r3
 801202c:	eb09 0102 	add.w	r1, r9, r2
 8012030:	d92d      	bls.n	801208e <MEMS_solveEllipsoid.constprop.25+0x16e>
 8012032:	fb91 f3f6 	sdiv	r3, r1, r6
 8012036:	fb06 1313 	mls	r3, r6, r3, r1
 801203a:	b2db      	uxtb	r3, r3
 801203c:	3304      	adds	r3, #4
 801203e:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8012042:	3201      	adds	r2, #1
 8012044:	f9b3 10e2 	ldrsh.w	r1, [r3, #226]	; 0xe2
 8012048:	ee05 1a90 	vmov	s11, r1
 801204c:	f9b3 10e4 	ldrsh.w	r1, [r3, #228]	; 0xe4
 8012050:	f9b3 30e6 	ldrsh.w	r3, [r3, #230]	; 0xe6
 8012054:	ee06 1a10 	vmov	s12, r1
 8012058:	ee07 3a10 	vmov	s14, r3
 801205c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8012060:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8012064:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012068:	ee75 5ac9 	vsub.f32	s11, s11, s18
 801206c:	ee36 6a68 	vsub.f32	s12, s12, s17
 8012070:	ee37 7a48 	vsub.f32	s14, s14, s16
 8012074:	eea5 baa5 	vfma.f32	s22, s11, s11
 8012078:	eea5 3a86 	vfma.f32	s6, s11, s12
 801207c:	eee6 7a06 	vfma.f32	s15, s12, s12
 8012080:	eee5 3a87 	vfma.f32	s7, s11, s14
 8012084:	eea6 4a07 	vfma.f32	s8, s12, s14
 8012088:	eee7 6a07 	vfma.f32	s13, s14, s14
 801208c:	e7cc      	b.n	8012028 <MEMS_solveEllipsoid.constprop.25+0x108>
 801208e:	ee23 6aa3 	vmul.f32	s12, s7, s7
 8012092:	ab28      	add	r3, sp, #160	; 0xa0
 8012094:	eea3 6a03 	vfma.f32	s12, s6, s6
 8012098:	ed8d ba28 	vstr	s22, [sp, #160]	; 0xa0
 801209c:	eea4 6a04 	vfma.f32	s12, s8, s8
 80120a0:	ed8d 3a29 	vstr	s6, [sp, #164]	; 0xa4
 80120a4:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80120a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120ac:	edcd 3a2a 	vstr	s7, [sp, #168]	; 0xa8
 80120b0:	edcd 7a2b 	vstr	s15, [sp, #172]	; 0xac
 80120b4:	ed8d 4a2c 	vstr	s8, [sp, #176]	; 0xb0
 80120b8:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 80120bc:	f000 80d2 	beq.w	8012264 <MEMS_solveEllipsoid.constprop.25+0x344>
 80120c0:	ee7b 9a26 	vadd.f32	s19, s22, s13
 80120c4:	eddf aa53 	vldr	s21, [pc, #332]	; 8012214 <MEMS_solveEllipsoid.constprop.25+0x2f4>
 80120c8:	eddf 5a53 	vldr	s11, [pc, #332]	; 8012218 <MEMS_solveEllipsoid.constprop.25+0x2f8>
 80120cc:	9302      	str	r3, [sp, #8]
 80120ce:	ee79 9aa7 	vadd.f32	s19, s19, s15
 80120d2:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 80120d6:	ee69 9aaa 	vmul.f32	s19, s19, s21
 80120da:	f04f 0900 	mov.w	r9, #0
 80120de:	ee77 7ae9 	vsub.f32	s15, s15, s19
 80120e2:	ee3b 7a69 	vsub.f32	s14, s22, s19
 80120e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80120ea:	ee76 6ae9 	vsub.f32	s13, s13, s19
 80120ee:	eee7 7a07 	vfma.f32	s15, s14, s14
 80120f2:	4648      	mov	r0, r9
 80120f4:	eee6 7a05 	vfma.f32	s15, s12, s10
 80120f8:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80120fc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8012100:	eeb1 aae7 	vsqrt.f32	s20, s15
 8012104:	ee84 7a8a 	vdiv.f32	s14, s9, s20
 8012108:	f100 0e01 	add.w	lr, r0, #1
 801210c:	fb00 f10e 	mul.w	r1, r0, lr
 8012110:	2302      	movs	r3, #2
 8012112:	fb91 f1f3 	sdiv	r1, r1, r3
 8012116:	eba9 0101 	sub.w	r1, r9, r1
 801211a:	aab7      	add	r2, sp, #732	; 0x2dc
 801211c:	b2c9      	uxtb	r1, r1
 801211e:	230c      	movs	r3, #12
 8012120:	fa5f fc80 	uxtb.w	ip, r0
 8012124:	9103      	str	r1, [sp, #12]
 8012126:	fb03 2000 	mla	r0, r3, r0, r2
 801212a:	2200      	movs	r2, #0
 801212c:	fa5f fa82 	uxtb.w	sl, r2
 8012130:	9903      	ldr	r1, [sp, #12]
 8012132:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
 8012136:	45d4      	cmp	ip, sl
 8012138:	4463      	add	r3, ip
 801213a:	448a      	add	sl, r1
 801213c:	fb02 2b02 	mla	fp, r2, r2, r2
 8012140:	d80e      	bhi.n	8012160 <MEMS_solveEllipsoid.constprop.25+0x240>
 8012142:	fa5f f38a 	uxtb.w	r3, sl
 8012146:	d111      	bne.n	801216c <MEMS_solveEllipsoid.constprop.25+0x24c>
 8012148:	9902      	ldr	r1, [sp, #8]
 801214a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801214e:	edd3 7a00 	vldr	s15, [r3]
 8012152:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8012156:	ee67 7a87 	vmul.f32	s15, s15, s14
 801215a:	edc0 7a00 	vstr	s15, [r0]
 801215e:	e00e      	b.n	801217e <MEMS_solveEllipsoid.constprop.25+0x25e>
 8012160:	2102      	movs	r1, #2
 8012162:	fb9b faf1 	sdiv	sl, fp, r1
 8012166:	eba3 030a 	sub.w	r3, r3, sl
 801216a:	b2db      	uxtb	r3, r3
 801216c:	9902      	ldr	r1, [sp, #8]
 801216e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012172:	edd3 7a00 	vldr	s15, [r3]
 8012176:	ee67 7a87 	vmul.f32	s15, s15, s14
 801217a:	edc0 7a00 	vstr	s15, [r0]
 801217e:	3201      	adds	r2, #1
 8012180:	2a03      	cmp	r2, #3
 8012182:	f100 0004 	add.w	r0, r0, #4
 8012186:	d1d1      	bne.n	801212c <MEMS_solveEllipsoid.constprop.25+0x20c>
 8012188:	4670      	mov	r0, lr
 801218a:	f109 0903 	add.w	r9, r9, #3
 801218e:	2803      	cmp	r0, #3
 8012190:	fa5f f989 	uxtb.w	r9, r9
 8012194:	d1b8      	bne.n	8012108 <MEMS_solveEllipsoid.constprop.25+0x1e8>
 8012196:	ed9d 5abf 	vldr	s10, [sp, #764]	; 0x2fc
 801219a:	eddd 6aba 	vldr	s13, [sp, #744]	; 0x2e8
 801219e:	ed9d 4abc 	vldr	s8, [sp, #752]	; 0x2f0
 80121a2:	ed9d 6abe 	vldr	s12, [sp, #760]	; 0x2f8
 80121a6:	eddd 7abd 	vldr	s15, [sp, #756]	; 0x2f4
 80121aa:	eddd 5abb 	vldr	s11, [sp, #748]	; 0x2ec
 80121ae:	eddd 3ab8 	vldr	s7, [sp, #736]	; 0x2e0
 80121b2:	ee26 0ac5 	vnmul.f32	s0, s13, s10
 80121b6:	ee26 7a44 	vnmul.f32	s14, s12, s8
 80121ba:	eea4 0a27 	vfma.f32	s0, s8, s15
 80121be:	eea5 7a85 	vfma.f32	s14, s11, s10
 80121c2:	ed9d 4ab7 	vldr	s8, [sp, #732]	; 0x2dc
 80121c6:	ed9d 5ab9 	vldr	s10, [sp, #740]	; 0x2e4
 80121ca:	ee67 7ae5 	vnmul.f32	s15, s15, s11
 80121ce:	ee20 0a23 	vmul.f32	s0, s0, s7
 80121d2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80121d6:	eea4 0a07 	vfma.f32	s0, s8, s14
 80121da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80121de:	eea5 0a27 	vfma.f32	s0, s10, s15
 80121e2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80121e6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80121ea:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80121ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121f2:	d909      	bls.n	8012208 <MEMS_solveEllipsoid.constprop.25+0x2e8>
 80121f4:	eeb4 0ae4 	vcmpe.f32	s0, s9
 80121f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121fc:	da14      	bge.n	8012228 <MEMS_solveEllipsoid.constprop.25+0x308>
 80121fe:	f008 f939 	bl	801a474 <acosf>
 8012202:	ee60 aa2a 	vmul.f32	s21, s0, s21
 8012206:	e011      	b.n	801222c <MEMS_solveEllipsoid.constprop.25+0x30c>
 8012208:	eddf aa04 	vldr	s21, [pc, #16]	; 801221c <MEMS_solveEllipsoid.constprop.25+0x2fc>
 801220c:	e00e      	b.n	801222c <MEMS_solveEllipsoid.constprop.25+0x30c>
 801220e:	bf00      	nop
 8012210:	20001708 	.word	0x20001708
 8012214:	3eaaaaab 	.word	0x3eaaaaab
 8012218:	3e2aaaab 	.word	0x3e2aaaab
 801221c:	3f860a92 	.word	0x3f860a92
 8012220:	00000000 	.word	0x00000000
 8012224:	40060a92 	.word	0x40060a92
 8012228:	ed5f aa03 	vldr	s21, [pc, #-12]	; 8012220 <MEMS_solveEllipsoid.constprop.25+0x300>
 801222c:	eeb0 0a6a 	vmov.f32	s0, s21
 8012230:	f007 ff9c 	bl	801a16c <cosf>
 8012234:	ee3a aa0a 	vadd.f32	s20, s20, s20
 8012238:	ed5f 7a06 	vldr	s15, [pc, #-24]	; 8012224 <MEMS_solveEllipsoid.constprop.25+0x304>
 801223c:	eeb0 ba69 	vmov.f32	s22, s19
 8012240:	eea0 ba0a 	vfma.f32	s22, s0, s20
 8012244:	ee3a 0aa7 	vadd.f32	s0, s21, s15
 8012248:	f007 ff90 	bl	801a16c <cosf>
 801224c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8012250:	eef0 6a69 	vmov.f32	s13, s19
 8012254:	eeb0 7a4b 	vmov.f32	s14, s22
 8012258:	eee0 6a0a 	vfma.f32	s13, s0, s20
 801225c:	ee99 7aa7 	vfnms.f32	s14, s19, s15
 8012260:	ee77 7a66 	vsub.f32	s15, s14, s13
 8012264:	eeb0 7acb 	vabs.f32	s14, s22
 8012268:	eef0 7ae7 	vabs.f32	s15, s15
 801226c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012274:	bfb4      	ite	lt
 8012276:	eeb0 6a47 	vmovlt.f32	s12, s14
 801227a:	eeb0 6a67 	vmovge.f32	s12, s15
 801227e:	eef0 6ae6 	vabs.f32	s13, s13
 8012282:	bf88      	it	hi
 8012284:	eef0 7a47 	vmovhi.f32	s15, s14
 8012288:	eef4 6ac6 	vcmpe.f32	s13, s12
 801228c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012290:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012294:	bfa8      	it	ge
 8012296:	eeb0 6a66 	vmovge.f32	s12, s13
 801229a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801229e:	bf88      	it	hi
 80122a0:	eef0 7a66 	vmovhi.f32	s15, s13
 80122a4:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80122a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80122ac:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80122b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122b4:	f300 853c 	bgt.w	8012d30 <MEMS_solveEllipsoid.constprop.25+0xe10>
 80122b8:	2210      	movs	r2, #16
 80122ba:	2100      	movs	r1, #0
 80122bc:	a82e      	add	r0, sp, #184	; 0xb8
 80122be:	f005 f847 	bl	8017350 <memset>
 80122c2:	2218      	movs	r2, #24
 80122c4:	2100      	movs	r1, #0
 80122c6:	a8e7      	add	r0, sp, #924	; 0x39c
 80122c8:	f005 f842 	bl	8017350 <memset>
 80122cc:	4b7c      	ldr	r3, [pc, #496]	; (80124c0 <MEMS_solveEllipsoid.constprop.25+0x5a0>)
 80122ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80122d2:	ab10      	add	r3, sp, #64	; 0x40
 80122d4:	c303      	stmia	r3!, {r0, r1}
 80122d6:	42b5      	cmp	r5, r6
 80122d8:	801a      	strh	r2, [r3, #0]
 80122da:	d105      	bne.n	80122e8 <MEMS_solveEllipsoid.constprop.25+0x3c8>
 80122dc:	fb97 f1f5 	sdiv	r1, r7, r5
 80122e0:	fb05 7711 	mls	r7, r5, r1, r7
 80122e4:	b239      	sxth	r1, r7
 80122e6:	e009      	b.n	80122fc <MEMS_solveEllipsoid.constprop.25+0x3dc>
 80122e8:	1b7f      	subs	r7, r7, r5
 80122ea:	fb97 f3f6 	sdiv	r3, r7, r6
 80122ee:	fb06 7713 	mls	r7, r6, r3, r7
 80122f2:	2f00      	cmp	r7, #0
 80122f4:	b239      	sxth	r1, r7
 80122f6:	bfbc      	itt	lt
 80122f8:	19bf      	addlt	r7, r7, r6
 80122fa:	b239      	sxthlt	r1, r7
 80122fc:	eddf 7a71 	vldr	s15, [pc, #452]	; 80124c4 <MEMS_solveEllipsoid.constprop.25+0x5a4>
 8012300:	ed8d 8a0f 	vstr	s16, [sp, #60]	; 0x3c
 8012304:	2000      	movs	r0, #0
 8012306:	eef0 ba67 	vmov.f32	s23, s15
 801230a:	eeb0 ca67 	vmov.f32	s24, s15
 801230e:	eef0 2a67 	vmov.f32	s5, s15
 8012312:	eef0 fa67 	vmov.f32	s31, s15
 8012316:	eeb0 2a67 	vmov.f32	s4, s15
 801231a:	eeb0 0a67 	vmov.f32	s0, s15
 801231e:	eef0 0a67 	vmov.f32	s1, s15
 8012322:	edcd 7a0c 	vstr	s15, [sp, #48]	; 0x30
 8012326:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
 801232a:	eef0 1a67 	vmov.f32	s3, s15
 801232e:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
 8012332:	eef0 aa67 	vmov.f32	s21, s15
 8012336:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 801233a:	eeb0 1a67 	vmov.f32	s2, s15
 801233e:	edcd 7a08 	vstr	s15, [sp, #32]
 8012342:	eeb0 aa67 	vmov.f32	s20, s15
 8012346:	eeb0 ba67 	vmov.f32	s22, s15
 801234a:	edcd 7a07 	vstr	s15, [sp, #28]
 801234e:	edcd 7a06 	vstr	s15, [sp, #24]
 8012352:	edcd 7a05 	vstr	s15, [sp, #20]
 8012356:	eef0 9a67 	vmov.f32	s19, s15
 801235a:	eeb0 ea67 	vmov.f32	s28, s15
 801235e:	eef0 ea67 	vmov.f32	s29, s15
 8012362:	eeb0 fa67 	vmov.f32	s30, s15
 8012366:	eef0 da67 	vmov.f32	s27, s15
 801236a:	eeb0 da67 	vmov.f32	s26, s15
 801236e:	eef0 ca67 	vmov.f32	s25, s15
 8012372:	edcd 7a04 	vstr	s15, [sp, #16]
 8012376:	edcd 7a03 	vstr	s15, [sp, #12]
 801237a:	edcd 7a02 	vstr	s15, [sp, #8]
 801237e:	b2c3      	uxtb	r3, r0
 8012380:	429d      	cmp	r5, r3
 8012382:	eb01 0200 	add.w	r2, r1, r0
 8012386:	f240 809f 	bls.w	80124c8 <MEMS_solveEllipsoid.constprop.25+0x5a8>
 801238a:	fb92 f3f6 	sdiv	r3, r2, r6
 801238e:	fb06 2313 	mls	r3, r6, r3, r2
 8012392:	b2db      	uxtb	r3, r3
 8012394:	3304      	adds	r3, #4
 8012396:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801239a:	ed9d 8a02 	vldr	s16, [sp, #8]
 801239e:	f9b3 20e2 	ldrsh.w	r2, [r3, #226]	; 0xe2
 80123a2:	eddd 5a0f 	vldr	s11, [sp, #60]	; 0x3c
 80123a6:	ee07 2a10 	vmov	s14, r2
 80123aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80123ae:	f9b3 20e4 	ldrsh.w	r2, [r3, #228]	; 0xe4
 80123b2:	f9b3 30e6 	ldrsh.w	r3, [r3, #230]	; 0xe6
 80123b6:	ee37 7a49 	vsub.f32	s14, s14, s18
 80123ba:	ee06 3a90 	vmov	s13, r3
 80123be:	ee67 4a07 	vmul.f32	s9, s14, s14
 80123c2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80123c6:	eea4 8aa4 	vfma.f32	s16, s9, s9
 80123ca:	3001      	adds	r0, #1
 80123cc:	ee76 6ae5 	vsub.f32	s13, s13, s11
 80123d0:	ed8d 8a02 	vstr	s16, [sp, #8]
 80123d4:	ed9d 8a07 	vldr	s16, [sp, #28]
 80123d8:	eea7 8a24 	vfma.f32	s16, s14, s9
 80123dc:	ee27 3a26 	vmul.f32	s6, s14, s13
 80123e0:	ee06 2a10 	vmov	s12, r2
 80123e4:	ed8d 8a07 	vstr	s16, [sp, #28]
 80123e8:	ed9d 8a05 	vldr	s16, [sp, #20]
 80123ec:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80123f0:	eea3 8a24 	vfma.f32	s16, s6, s9
 80123f4:	ee36 6a68 	vsub.f32	s12, s12, s17
 80123f8:	ed8d 8a05 	vstr	s16, [sp, #20]
 80123fc:	ee67 3a06 	vmul.f32	s7, s14, s12
 8012400:	ed9d 8a06 	vldr	s16, [sp, #24]
 8012404:	eea3 8aa4 	vfma.f32	s16, s7, s9
 8012408:	ee26 5a06 	vmul.f32	s10, s12, s12
 801240c:	ee26 4a26 	vmul.f32	s8, s12, s13
 8012410:	ed8d 8a06 	vstr	s16, [sp, #24]
 8012414:	ed9d 8a08 	vldr	s16, [sp, #32]
 8012418:	eea4 8a05 	vfma.f32	s16, s8, s10
 801241c:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8012420:	ed8d 8a08 	vstr	s16, [sp, #32]
 8012424:	ed9d 8a03 	vldr	s16, [sp, #12]
 8012428:	eea5 8a05 	vfma.f32	s16, s10, s10
 801242c:	eea6 ba24 	vfma.f32	s22, s12, s9
 8012430:	ed8d 8a03 	vstr	s16, [sp, #12]
 8012434:	ed9d 8a09 	vldr	s16, [sp, #36]	; 0x24
 8012438:	eea3 8a85 	vfma.f32	s16, s7, s10
 801243c:	eea6 aaa4 	vfma.f32	s20, s13, s9
 8012440:	ed8d 8a09 	vstr	s16, [sp, #36]	; 0x24
 8012444:	ed9d 8a0a 	vldr	s16, [sp, #40]	; 0x28
 8012448:	eea6 8a05 	vfma.f32	s16, s12, s10
 801244c:	eee4 9a24 	vfma.f32	s19, s8, s9
 8012450:	ed8d 8a0a 	vstr	s16, [sp, #40]	; 0x28
 8012454:	ed9d 8a0b 	vldr	s16, [sp, #44]	; 0x2c
 8012458:	eea4 8a25 	vfma.f32	s16, s8, s11
 801245c:	eee4 ca04 	vfma.f32	s25, s8, s8
 8012460:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8012464:	ed9d 8a04 	vldr	s16, [sp, #16]
 8012468:	eea5 8aa5 	vfma.f32	s16, s11, s11
 801246c:	eee7 2a04 	vfma.f32	s5, s14, s8
 8012470:	ed8d 8a04 	vstr	s16, [sp, #16]
 8012474:	ed9d 8a0c 	vldr	s16, [sp, #48]	; 0x30
 8012478:	eea3 8a25 	vfma.f32	s16, s6, s11
 801247c:	eea3 da03 	vfma.f32	s26, s6, s6
 8012480:	eee3 daa3 	vfma.f32	s27, s7, s7
 8012484:	eea3 1a05 	vfma.f32	s2, s6, s10
 8012488:	eee7 aa05 	vfma.f32	s21, s14, s10
 801248c:	eee6 1a85 	vfma.f32	s3, s13, s10
 8012490:	ed8d 8a0c 	vstr	s16, [sp, #48]	; 0x30
 8012494:	eee3 0aa5 	vfma.f32	s1, s7, s11
 8012498:	eea7 0a25 	vfma.f32	s0, s14, s11
 801249c:	eea6 2a25 	vfma.f32	s4, s12, s11
 80124a0:	eee6 faa5 	vfma.f32	s31, s13, s11
 80124a4:	ee3f fa24 	vadd.f32	s30, s30, s9
 80124a8:	ee3c ca04 	vadd.f32	s24, s24, s8
 80124ac:	ee7b ba83 	vadd.f32	s23, s23, s6
 80124b0:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80124b4:	ee7e ea85 	vadd.f32	s29, s29, s10
 80124b8:	ee3e ea25 	vadd.f32	s28, s28, s11
 80124bc:	e75f      	b.n	801237e <MEMS_solveEllipsoid.constprop.25+0x45e>
 80124be:	bf00      	nop
 80124c0:	0801cdcc 	.word	0x0801cdcc
 80124c4:	00000000 	.word	0x00000000
 80124c8:	eddd 6a02 	vldr	s13, [sp, #8]
 80124cc:	edcd cad2 	vstr	s25, [sp, #840]	; 0x348
 80124d0:	edcd 6ab7 	vstr	s13, [sp, #732]	; 0x2dc
 80124d4:	eddd 6a03 	vldr	s13, [sp, #12]
 80124d8:	ed8d dad9 	vstr	s26, [sp, #868]	; 0x364
 80124dc:	edcd 6ac1 	vstr	s13, [sp, #772]	; 0x304
 80124e0:	eddd 6a04 	vldr	s13, [sp, #16]
 80124e4:	edcd dadf 	vstr	s27, [sp, #892]	; 0x37c
 80124e8:	edcd 6aca 	vstr	s13, [sp, #808]	; 0x328
 80124ec:	eddd 6a05 	vldr	s13, [sp, #20]
 80124f0:	ed8d fae4 	vstr	s30, [sp, #912]	; 0x390
 80124f4:	edcd 6abb 	vstr	s13, [sp, #748]	; 0x2ec
 80124f8:	eddd 6a06 	vldr	s13, [sp, #24]
 80124fc:	edcd eae8 	vstr	s29, [sp, #928]	; 0x3a0
 8012500:	edcd 6abc 	vstr	s13, [sp, #752]	; 0x2f0
 8012504:	eddd 6a07 	vldr	s13, [sp, #28]
 8012508:	ed8d eaeb 	vstr	s28, [sp, #940]	; 0x3ac
 801250c:	edcd 6abd 	vstr	s13, [sp, #756]	; 0x2f4
 8012510:	eddd 6a08 	vldr	s13, [sp, #32]
 8012514:	edcd 9aba 	vstr	s19, [sp, #744]	; 0x2e8
 8012518:	edcd 6ac3 	vstr	s13, [sp, #780]	; 0x30c
 801251c:	eddd 6a09 	vldr	s13, [sp, #36]	; 0x24
 8012520:	ed8d babe 	vstr	s22, [sp, #760]	; 0x2f8
 8012524:	edcd 6ac5 	vstr	s13, [sp, #788]	; 0x314
 8012528:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
 801252c:	ed8d aabf 	vstr	s20, [sp, #764]	; 0x2fc
 8012530:	ee07 5a10 	vmov	s14, r5
 8012534:	edcd 6ac7 	vstr	s13, [sp, #796]	; 0x31c
 8012538:	eddd 6a0b 	vldr	s13, [sp, #44]	; 0x2c
 801253c:	ed8d 1ac4 	vstr	s2, [sp, #784]	; 0x310
 8012540:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8012544:	edcd aac6 	vstr	s21, [sp, #792]	; 0x318
 8012548:	edcd 1ac8 	vstr	s3, [sp, #800]	; 0x320
 801254c:	edcd 6acb 	vstr	s13, [sp, #812]	; 0x32c
 8012550:	eddd 6a0c 	vldr	s13, [sp, #48]	; 0x30
 8012554:	edcd 0acd 	vstr	s1, [sp, #820]	; 0x334
 8012558:	edcd 6acc 	vstr	s13, [sp, #816]	; 0x330
 801255c:	ed8d 0ace 	vstr	s0, [sp, #824]	; 0x338
 8012560:	ed8d 2acf 	vstr	s4, [sp, #828]	; 0x33c
 8012564:	edcd fad0 	vstr	s31, [sp, #832]	; 0x340
 8012568:	edcd 2ad5 	vstr	s5, [sp, #852]	; 0x354
 801256c:	ed8d cad8 	vstr	s24, [sp, #864]	; 0x360
 8012570:	edcd bade 	vstr	s23, [sp, #888]	; 0x378
 8012574:	edcd 7ae3 	vstr	s15, [sp, #908]	; 0x38c
 8012578:	ed8d fac0 	vstr	s30, [sp, #768]	; 0x300
 801257c:	2100      	movs	r1, #0
 801257e:	edcd eac9 	vstr	s29, [sp, #804]	; 0x324
 8012582:	ed8d ead1 	vstr	s28, [sp, #836]	; 0x344
 8012586:	edcd dab8 	vstr	s27, [sp, #736]	; 0x2e0
 801258a:	ed8d dab9 	vstr	s26, [sp, #740]	; 0x2e4
 801258e:	edcd cac2 	vstr	s25, [sp, #776]	; 0x308
 8012592:	ed8d cae9 	vstr	s24, [sp, #932]	; 0x3a4
 8012596:	edcd 7ae5 	vstr	s15, [sp, #916]	; 0x394
 801259a:	edcd bae6 	vstr	s23, [sp, #920]	; 0x398
 801259e:	ed8d bae0 	vstr	s22, [sp, #896]	; 0x380
 80125a2:	edcd aae1 	vstr	s21, [sp, #900]	; 0x384
 80125a6:	edcd 2ae2 	vstr	s5, [sp, #904]	; 0x388
 80125aa:	ed8d aadb 	vstr	s20, [sp, #876]	; 0x36c
 80125ae:	edcd 9ada 	vstr	s19, [sp, #872]	; 0x368
 80125b2:	edcd 2adc 	vstr	s5, [sp, #880]	; 0x370
 80125b6:	ed8d 0add 	vstr	s0, [sp, #884]	; 0x374
 80125ba:	edcd 0ad3 	vstr	s1, [sp, #844]	; 0x34c
 80125be:	ed8d 1ad4 	vstr	s2, [sp, #848]	; 0x350
 80125c2:	edcd 1ad6 	vstr	s3, [sp, #856]	; 0x358
 80125c6:	ed8d 2ad7 	vstr	s4, [sp, #860]	; 0x35c
 80125ca:	ed8d 7aed 	vstr	s14, [sp, #948]	; 0x3b4
 80125ce:	2602      	movs	r6, #2
 80125d0:	250b      	movs	r5, #11
 80125d2:	1c48      	adds	r0, r1, #1
 80125d4:	fb05 f301 	mul.w	r3, r5, r1
 80125d8:	fb00 f201 	mul.w	r2, r0, r1
 80125dc:	fb92 f2f6 	sdiv	r2, r2, r6
 80125e0:	1a9b      	subs	r3, r3, r2
 80125e2:	aab7      	add	r2, sp, #732	; 0x2dc
 80125e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80125e8:	aa10      	add	r2, sp, #64	; 0x40
 80125ea:	5c57      	ldrb	r7, [r2, r1]
 80125ec:	ed93 7a00 	vldr	s14, [r3]
 80125f0:	aa10      	add	r2, sp, #64	; 0x40
 80125f2:	5c52      	ldrb	r2, [r2, r1]
 80125f4:	fb12 f207 	smulbb	r2, r2, r7
 80125f8:	ee07 2a90 	vmov	s15, r2
 80125fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012600:	3101      	adds	r1, #1
 8012602:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012606:	b2ca      	uxtb	r2, r1
 8012608:	2a0a      	cmp	r2, #10
 801260a:	ece3 7a01 	vstmia	r3!, {s15}
 801260e:	d1ed      	bne.n	80125ec <MEMS_solveEllipsoid.constprop.25+0x6cc>
 8012610:	280a      	cmp	r0, #10
 8012612:	4601      	mov	r1, r0
 8012614:	d1dd      	bne.n	80125d2 <MEMS_solveEllipsoid.constprop.25+0x6b2>
 8012616:	2250      	movs	r2, #80	; 0x50
 8012618:	2100      	movs	r1, #0
 801261a:	a842      	add	r0, sp, #264	; 0x108
 801261c:	f004 fe98 	bl	8017350 <memset>
 8012620:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8012624:	4ad1      	ldr	r2, [pc, #836]	; (801296c <MEMS_solveEllipsoid.constprop.25+0xa4c>)
 8012626:	9343      	str	r3, [sp, #268]	; 0x10c
 8012628:	9344      	str	r3, [sp, #272]	; 0x110
 801262a:	9349      	str	r3, [sp, #292]	; 0x124
 801262c:	9251      	str	r2, [sp, #324]	; 0x144
 801262e:	9254      	str	r2, [sp, #336]	; 0x150
 8012630:	9256      	str	r2, [sp, #344]	; 0x158
 8012632:	a937      	add	r1, sp, #220	; 0xdc
 8012634:	2306      	movs	r3, #6
 8012636:	2602      	movs	r6, #2
 8012638:	250b      	movs	r5, #11
 801263a:	fb05 f203 	mul.w	r2, r5, r3
 801263e:	f1c3 0008 	rsb	r0, r3, #8
 8012642:	1c5f      	adds	r7, r3, #1
 8012644:	4410      	add	r0, r2
 8012646:	fb07 f303 	mul.w	r3, r7, r3
 801264a:	fb93 f3f6 	sdiv	r3, r3, r6
 801264e:	425b      	negs	r3, r3
 8012650:	441a      	add	r2, r3
 8012652:	4403      	add	r3, r0
 8012654:	a8b7      	add	r0, sp, #732	; 0x2dc
 8012656:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801265a:	a8b8      	add	r0, sp, #736	; 0x2e0
 801265c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8012660:	f1a1 0c60 	sub.w	ip, r1, #96	; 0x60
 8012664:	4608      	mov	r0, r1
 8012666:	f852 eb04 	ldr.w	lr, [r2], #4
 801266a:	f84c eb04 	str.w	lr, [ip], #4
 801266e:	4293      	cmp	r3, r2
 8012670:	f840 ec60 	str.w	lr, [r0, #-96]
 8012674:	f100 000c 	add.w	r0, r0, #12
 8012678:	d1f5      	bne.n	8012666 <MEMS_solveEllipsoid.constprop.25+0x746>
 801267a:	2f09      	cmp	r7, #9
 801267c:	f101 0110 	add.w	r1, r1, #16
 8012680:	463b      	mov	r3, r7
 8012682:	d1da      	bne.n	801263a <MEMS_solveEllipsoid.constprop.25+0x71a>
 8012684:	ae32      	add	r6, sp, #200	; 0xc8
 8012686:	2240      	movs	r2, #64	; 0x40
 8012688:	2100      	movs	r1, #0
 801268a:	4630      	mov	r0, r6
 801268c:	f004 fe60 	bl	8017350 <memset>
 8012690:	aa36      	add	r2, sp, #216	; 0xd8
 8012692:	ab3a      	add	r3, sp, #232	; 0xe8
 8012694:	a916      	add	r1, sp, #88	; 0x58
 8012696:	a81f      	add	r0, sp, #124	; 0x7c
 8012698:	e9cd 6216 	strd	r6, r2, [sp, #88]	; 0x58
 801269c:	9318      	str	r3, [sp, #96]	; 0x60
 801269e:	f7fe fb57 	bl	8010d50 <MEMS_INV3x3>
 80126a2:	ed9d 8aed 	vldr	s16, [sp, #948]	; 0x3b4
 80126a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80126aa:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80126ae:	4635      	mov	r5, r6
 80126b0:	2100      	movs	r1, #0
 80126b2:	f04f 0c18 	mov.w	ip, #24
 80126b6:	2702      	movs	r7, #2
 80126b8:	edc6 7a0f 	vstr	s15, [r6, #60]	; 0x3c
 80126bc:	2600      	movs	r6, #0
 80126be:	ab57      	add	r3, sp, #348	; 0x15c
 80126c0:	4632      	mov	r2, r6
 80126c2:	fb0c 3e01 	mla	lr, ip, r1, r3
 80126c6:	4613      	mov	r3, r2
 80126c8:	3201      	adds	r2, #1
 80126ca:	fb03 f302 	mul.w	r3, r3, r2
 80126ce:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8012970 <MEMS_solveEllipsoid.constprop.25+0xa50>
 80126d2:	fb93 f3f7 	sdiv	r3, r3, r7
 80126d6:	1af3      	subs	r3, r6, r3
 80126d8:	009b      	lsls	r3, r3, #2
 80126da:	2000      	movs	r0, #0
 80126dc:	eb00 0803 	add.w	r8, r0, r3
 80126e0:	f50d 7937 	add.w	r9, sp, #732	; 0x2dc
 80126e4:	44c8      	add	r8, r9
 80126e6:	eb05 0900 	add.w	r9, r5, r0
 80126ea:	ed98 7a06 	vldr	s14, [r8, #24]
 80126ee:	edd9 6a00 	vldr	s13, [r9]
 80126f2:	3004      	adds	r0, #4
 80126f4:	2810      	cmp	r0, #16
 80126f6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80126fa:	d1ef      	bne.n	80126dc <MEMS_solveEllipsoid.constprop.25+0x7bc>
 80126fc:	2a06      	cmp	r2, #6
 80126fe:	ecee 7a01 	vstmia	lr!, {s15}
 8012702:	f106 060a 	add.w	r6, r6, #10
 8012706:	d1de      	bne.n	80126c6 <MEMS_solveEllipsoid.constprop.25+0x7a6>
 8012708:	3101      	adds	r1, #1
 801270a:	2904      	cmp	r1, #4
 801270c:	f105 0510 	add.w	r5, r5, #16
 8012710:	d1d4      	bne.n	80126bc <MEMS_solveEllipsoid.constprop.25+0x79c>
 8012712:	2500      	movs	r5, #0
 8012714:	ae6f      	add	r6, sp, #444	; 0x1bc
 8012716:	4629      	mov	r1, r5
 8012718:	f50d 7eae 	add.w	lr, sp, #348	; 0x15c
 801271c:	1c4f      	adds	r7, r1, #1
 801271e:	1868      	adds	r0, r5, r1
 8012720:	fb01 f307 	mul.w	r3, r1, r7
 8012724:	f04f 0c02 	mov.w	ip, #2
 8012728:	fb93 f3fc 	sdiv	r3, r3, ip
 801272c:	425b      	negs	r3, r3
 801272e:	eb02 0803 	add.w	r8, r2, r3
 8012732:	4403      	add	r3, r0
 8012734:	f06f 0003 	mvn.w	r0, #3
 8012738:	fb00 f101 	mul.w	r1, r0, r1
 801273c:	a8b7      	add	r0, sp, #732	; 0x2dc
 801273e:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8012742:	3118      	adds	r1, #24
 8012744:	fa03 f00c 	lsl.w	r0, r3, ip
 8012748:	2300      	movs	r3, #0
 801274a:	eddf 7a89 	vldr	s15, [pc, #548]	; 8012970 <MEMS_solveEllipsoid.constprop.25+0xa50>
 801274e:	46c1      	mov	r9, r8
 8012750:	f04f 0c00 	mov.w	ip, #0
 8012754:	eb0e 0a03 	add.w	sl, lr, r3
 8012758:	f04f 0b18 	mov.w	fp, #24
 801275c:	fb0b ab0c 	mla	fp, fp, ip, sl
 8012760:	ed9b 7a00 	vldr	s14, [fp]
 8012764:	ecf9 6a01 	vldmia	r9!, {s13}
 8012768:	f10c 0c01 	add.w	ip, ip, #1
 801276c:	f1bc 0f04 	cmp.w	ip, #4
 8012770:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012774:	d1f0      	bne.n	8012758 <MEMS_solveEllipsoid.constprop.25+0x838>
 8012776:	eb00 0c03 	add.w	ip, r0, r3
 801277a:	f50d 7937 	add.w	r9, sp, #732	; 0x2dc
 801277e:	44cc      	add	ip, r9
 8012780:	ed9c 7a00 	vldr	s14, [ip]
 8012784:	f04f 0c06 	mov.w	ip, #6
 8012788:	ee77 7a67 	vsub.f32	s15, s14, s15
 801278c:	eb06 0903 	add.w	r9, r6, r3
 8012790:	fb0c 6c03 	mla	ip, ip, r3, r6
 8012794:	3304      	adds	r3, #4
 8012796:	4299      	cmp	r1, r3
 8012798:	edc9 7a00 	vstr	s15, [r9]
 801279c:	edcc 7a00 	vstr	s15, [ip]
 80127a0:	d1d3      	bne.n	801274a <MEMS_solveEllipsoid.constprop.25+0x82a>
 80127a2:	2f06      	cmp	r7, #6
 80127a4:	f105 050a 	add.w	r5, r5, #10
 80127a8:	f106 061c 	add.w	r6, r6, #28
 80127ac:	f10e 0e04 	add.w	lr, lr, #4
 80127b0:	f102 020a 	add.w	r2, r2, #10
 80127b4:	4639      	mov	r1, r7
 80127b6:	d1b1      	bne.n	801271c <MEMS_solveEllipsoid.constprop.25+0x7fc>
 80127b8:	f04f 0e18 	mov.w	lr, #24
 80127bc:	ab6f      	add	r3, sp, #444	; 0x1bc
 80127be:	4473      	add	r3, lr
 80127c0:	2600      	movs	r6, #0
 80127c2:	9303      	str	r3, [sp, #12]
 80127c4:	2002      	movs	r0, #2
 80127c6:	f106 0801 	add.w	r8, r6, #1
 80127ca:	fb07 f506 	mul.w	r5, r7, r6
 80127ce:	fb06 f308 	mul.w	r3, r6, r8
 80127d2:	fb93 f3f0 	sdiv	r3, r3, r0
 80127d6:	1aed      	subs	r5, r5, r3
 80127d8:	b2f3      	uxtb	r3, r6
 80127da:	9302      	str	r3, [sp, #8]
 80127dc:	ab93      	add	r3, sp, #588	; 0x24c
 80127de:	00ad      	lsls	r5, r5, #2
 80127e0:	fb0e 3a06 	mla	sl, lr, r6, r3
 80127e4:	f50d 7cde 	add.w	ip, sp, #444	; 0x1bc
 80127e8:	eddf 7a61 	vldr	s15, [pc, #388]	; 8012970 <MEMS_solveEllipsoid.constprop.25+0xa50>
 80127ec:	2300      	movs	r3, #0
 80127ee:	fb07 6203 	mla	r2, r7, r3, r6
 80127f2:	9204      	str	r2, [sp, #16]
 80127f4:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 80127f8:	aa42      	add	r2, sp, #264	; 0x108
 80127fa:	fb0e cb03 	mla	fp, lr, r3, ip
 80127fe:	4491      	add	r9, r2
 8012800:	9a02      	ldr	r2, [sp, #8]
 8012802:	ed9b 7a00 	vldr	s14, [fp]
 8012806:	fa5f fb83 	uxtb.w	fp, r3
 801280a:	455a      	cmp	r2, fp
 801280c:	fb03 3103 	mla	r1, r3, r3, r3
 8012810:	d804      	bhi.n	801281c <MEMS_solveEllipsoid.constprop.25+0x8fc>
 8012812:	edd9 6a00 	vldr	s13, [r9]
 8012816:	eee6 7a87 	vfma.f32	s15, s13, s14
 801281a:	e00a      	b.n	8012832 <MEMS_solveEllipsoid.constprop.25+0x912>
 801281c:	9a04      	ldr	r2, [sp, #16]
 801281e:	fb91 f1f0 	sdiv	r1, r1, r0
 8012822:	1a52      	subs	r2, r2, r1
 8012824:	a942      	add	r1, sp, #264	; 0x108
 8012826:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801282a:	edd2 6a00 	vldr	s13, [r2]
 801282e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012832:	3301      	adds	r3, #1
 8012834:	2b06      	cmp	r3, #6
 8012836:	d1da      	bne.n	80127ee <MEMS_solveEllipsoid.constprop.25+0x8ce>
 8012838:	9b03      	ldr	r3, [sp, #12]
 801283a:	ecea 7a01 	vstmia	sl!, {s15}
 801283e:	f10c 0c04 	add.w	ip, ip, #4
 8012842:	4563      	cmp	r3, ip
 8012844:	d1d0      	bne.n	80127e8 <MEMS_solveEllipsoid.constprop.25+0x8c8>
 8012846:	f1b8 0f06 	cmp.w	r8, #6
 801284a:	4646      	mov	r6, r8
 801284c:	d1bb      	bne.n	80127c6 <MEMS_solveEllipsoid.constprop.25+0x8a6>
 801284e:	a96f      	add	r1, sp, #444	; 0x1bc
 8012850:	4642      	mov	r2, r8
 8012852:	a893      	add	r0, sp, #588	; 0x24c
 8012854:	f7fe fb54 	bl	8010f00 <Hessenberg_Form_Orthogonal>
 8012858:	4643      	mov	r3, r8
 801285a:	a96f      	add	r1, sp, #444	; 0x1bc
 801285c:	aa19      	add	r2, sp, #100	; 0x64
 801285e:	a893      	add	r0, sp, #588	; 0x24c
 8012860:	f7fe fc96 	bl	8011190 <QR_Hessenberg_Matrix.constprop.27>
 8012864:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
 8012868:	a91a      	add	r1, sp, #104	; 0x68
 801286a:	2201      	movs	r2, #1
 801286c:	2300      	movs	r3, #0
 801286e:	ecb1 7a01 	vldmia	r1!, {s14}
 8012872:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801287a:	b2d0      	uxtb	r0, r2
 801287c:	f102 0201 	add.w	r2, r2, #1
 8012880:	bfc4      	itt	gt
 8012882:	eef0 7a47 	vmovgt.f32	s15, s14
 8012886:	4603      	movgt	r3, r0
 8012888:	2a06      	cmp	r2, #6
 801288a:	d1f0      	bne.n	801286e <MEMS_solveEllipsoid.constprop.25+0x94e>
 801288c:	aa6f      	add	r2, sp, #444	; 0x1bc
 801288e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8012892:	460a      	mov	r2, r1
 8012894:	6809      	ldr	r1, [r1, #0]
 8012896:	6992      	ldr	r2, [r2, #24]
 8012898:	9229      	str	r2, [sp, #164]	; 0xa4
 801289a:	aa6f      	add	r2, sp, #444	; 0x1bc
 801289c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80128a0:	a86f      	add	r0, sp, #444	; 0x1bc
 80128a2:	9128      	str	r1, [sp, #160]	; 0xa0
 80128a4:	a96f      	add	r1, sp, #444	; 0x1bc
 80128a6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80128aa:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80128ae:	4613      	mov	r3, r2
 80128b0:	6c89      	ldr	r1, [r1, #72]	; 0x48
 80128b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80128b4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80128b6:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80128b8:	912b      	str	r1, [sp, #172]	; 0xac
 80128ba:	932d      	str	r3, [sp, #180]	; 0xb4
 80128bc:	902a      	str	r0, [sp, #168]	; 0xa8
 80128be:	922c      	str	r2, [sp, #176]	; 0xb0
 80128c0:	a92e      	add	r1, sp, #184	; 0xb8
 80128c2:	2300      	movs	r3, #0
 80128c4:	ad5d      	add	r5, sp, #372	; 0x174
 80128c6:	aa57      	add	r2, sp, #348	; 0x15c
 80128c8:	eddf 7a29 	vldr	s15, [pc, #164]	; 8012970 <MEMS_solveEllipsoid.constprop.25+0xa50>
 80128cc:	441a      	add	r2, r3
 80128ce:	18ee      	adds	r6, r5, r3
 80128d0:	a828      	add	r0, sp, #160	; 0xa0
 80128d2:	ecf2 6a01 	vldmia	r2!, {s13}
 80128d6:	ecb0 7a01 	vldmia	r0!, {s14}
 80128da:	4296      	cmp	r6, r2
 80128dc:	eee6 7a87 	vfma.f32	s15, s13, s14
 80128e0:	d1f7      	bne.n	80128d2 <MEMS_solveEllipsoid.constprop.25+0x9b2>
 80128e2:	3318      	adds	r3, #24
 80128e4:	eef1 7a67 	vneg.f32	s15, s15
 80128e8:	2b60      	cmp	r3, #96	; 0x60
 80128ea:	ece1 7a01 	vstmia	r1!, {s15}
 80128ee:	d1ea      	bne.n	80128c6 <MEMS_solveEllipsoid.constprop.25+0x9a6>
 80128f0:	eddd 7a2a 	vldr	s15, [sp, #168]	; 0xa8
 80128f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80128f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128fc:	d509      	bpl.n	8012912 <MEMS_solveEllipsoid.constprop.25+0x9f2>
 80128fe:	ab28      	add	r3, sp, #160	; 0xa0
 8012900:	aa32      	add	r2, sp, #200	; 0xc8
 8012902:	edd3 7a00 	vldr	s15, [r3]
 8012906:	eef1 7a67 	vneg.f32	s15, s15
 801290a:	ece3 7a01 	vstmia	r3!, {s15}
 801290e:	429a      	cmp	r2, r3
 8012910:	d1f7      	bne.n	8012902 <MEMS_solveEllipsoid.constprop.25+0x9e2>
 8012912:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8012970 <MEMS_solveEllipsoid.constprop.25+0xa50>
 8012916:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
 801291a:	2500      	movs	r5, #0
 801291c:	f04f 0e02 	mov.w	lr, #2
 8012920:	f04f 0c0a 	mov.w	ip, #10
 8012924:	1c6f      	adds	r7, r5, #1
 8012926:	fb0c f005 	mul.w	r0, ip, r5
 801292a:	fb05 f307 	mul.w	r3, r5, r7
 801292e:	eddf 7a10 	vldr	s15, [pc, #64]	; 8012970 <MEMS_solveEllipsoid.constprop.25+0xa50>
 8012932:	fb93 f3fe 	sdiv	r3, r3, lr
 8012936:	1ac0      	subs	r0, r0, r3
 8012938:	0080      	lsls	r0, r0, #2
 801293a:	fa5f f985 	uxtb.w	r9, r5
 801293e:	ae28      	add	r6, sp, #160	; 0xa0
 8012940:	2300      	movs	r3, #0
 8012942:	f50d 7b37 	add.w	fp, sp, #732	; 0x2dc
 8012946:	eb00 0a83 	add.w	sl, r0, r3, lsl #2
 801294a:	44da      	add	sl, fp
 801294c:	fa5f fb83 	uxtb.w	fp, r3
 8012950:	45d9      	cmp	r9, fp
 8012952:	fb0c 5203 	mla	r2, ip, r3, r5
 8012956:	fb03 3103 	mla	r1, r3, r3, r3
 801295a:	ecf6 6a01 	vldmia	r6!, {s13}
 801295e:	d815      	bhi.n	801298c <MEMS_solveEllipsoid.constprop.25+0xa6c>
 8012960:	ed9a 6a00 	vldr	s12, [sl]
 8012964:	eee6 7a26 	vfma.f32	s15, s12, s13
 8012968:	e01a      	b.n	80129a0 <MEMS_solveEllipsoid.constprop.25+0xa80>
 801296a:	bf00      	nop
 801296c:	be800000 	.word	0xbe800000
 8012970:	00000000 	.word	0x00000000
 8012974:	423c0000 	.word	0x423c0000
 8012978:	3eaaaaab 	.word	0x3eaaaaab
 801297c:	3eb33333 	.word	0x3eb33333
 8012980:	3e99999a 	.word	0x3e99999a
 8012984:	3f333333 	.word	0x3f333333
 8012988:	3e4ccccd 	.word	0x3e4ccccd
 801298c:	fb91 f1fe 	sdiv	r1, r1, lr
 8012990:	1a52      	subs	r2, r2, r1
 8012992:	a9ee      	add	r1, sp, #952	; 0x3b8
 8012994:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8012998:	ed12 6a37 	vldr	s12, [r2, #-220]	; 0xffffff24
 801299c:	eee6 7a26 	vfma.f32	s15, s12, s13
 80129a0:	3301      	adds	r3, #1
 80129a2:	2b0a      	cmp	r3, #10
 80129a4:	d1cd      	bne.n	8012942 <MEMS_solveEllipsoid.constprop.25+0xa22>
 80129a6:	ecf8 6a01 	vldmia	r8!, {s13}
 80129aa:	2f0a      	cmp	r7, #10
 80129ac:	463d      	mov	r5, r7
 80129ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80129b2:	d1b7      	bne.n	8012924 <MEMS_solveEllipsoid.constprop.25+0xa04>
 80129b4:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80129b8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80129ba:	9393      	str	r3, [sp, #588]	; 0x24c
 80129bc:	9b01      	ldr	r3, [sp, #4]
 80129be:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80129c0:	9294      	str	r2, [sp, #592]	; 0x250
 80129c2:	9296      	str	r2, [sp, #600]	; 0x258
 80129c4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80129c6:	9297      	str	r2, [sp, #604]	; 0x25c
 80129c8:	f104 060c 	add.w	r6, r4, #12
 80129cc:	f104 0518 	add.w	r5, r4, #24
 80129d0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80129d2:	9457      	str	r4, [sp, #348]	; 0x15c
 80129d4:	a957      	add	r1, sp, #348	; 0x15c
 80129d6:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80129da:	eef1 6ae7 	vsqrt.f32	s13, s15
 80129de:	a893      	add	r0, sp, #588	; 0x24c
 80129e0:	9658      	str	r6, [sp, #352]	; 0x160
 80129e2:	9559      	str	r5, [sp, #356]	; 0x164
 80129e4:	929b      	str	r2, [sp, #620]	; 0x26c
 80129e6:	eef1 7ae6 	vsqrt.f32	s15, s13
 80129ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80129ee:	edc3 7a00 	vstr	s15, [r3]
 80129f2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80129f4:	9395      	str	r3, [sp, #596]	; 0x254
 80129f6:	9399      	str	r3, [sp, #612]	; 0x264
 80129f8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80129fa:	9398      	str	r3, [sp, #608]	; 0x260
 80129fc:	939a      	str	r3, [sp, #616]	; 0x268
 80129fe:	f7fe f9a7 	bl	8010d50 <MEMS_INV3x3>
 8012a02:	2800      	cmp	r0, #0
 8012a04:	f000 8194 	beq.w	8012d30 <MEMS_solveEllipsoid.constprop.25+0xe10>
 8012a08:	eddd 7a2f 	vldr	s15, [sp, #188]	; 0xbc
 8012a0c:	ed94 6a04 	vldr	s12, [r4, #16]
 8012a10:	ed9d 5a2e 	vldr	s10, [sp, #184]	; 0xb8
 8012a14:	edd4 1a03 	vldr	s3, [r4, #12]
 8012a18:	edd4 6a01 	vldr	s13, [r4, #4]
 8012a1c:	ed94 2a00 	vldr	s4, [r4]
 8012a20:	eddd 5a30 	vldr	s11, [sp, #192]	; 0xc0
 8012a24:	edd4 2a05 	vldr	s5, [r4, #20]
 8012a28:	ed94 3a02 	vldr	s6, [r4, #8]
 8012a2c:	ed94 7a07 	vldr	s14, [r4, #28]
 8012a30:	edd4 3a06 	vldr	s7, [r4, #24]
 8012a34:	ed94 4a08 	vldr	s8, [r4, #32]
 8012a38:	eddd 4a31 	vldr	s9, [sp, #196]	; 0xc4
 8012a3c:	9457      	str	r4, [sp, #348]	; 0x15c
 8012a3e:	ee27 6a86 	vmul.f32	s12, s15, s12
 8012a42:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8012a46:	eea1 6a85 	vfma.f32	s12, s3, s10
 8012a4a:	2203      	movs	r2, #3
 8012a4c:	a9b7      	add	r1, sp, #732	; 0x2dc
 8012a4e:	eee2 6a05 	vfma.f32	s13, s4, s10
 8012a52:	a893      	add	r0, sp, #588	; 0x24c
 8012a54:	9658      	str	r6, [sp, #352]	; 0x160
 8012a56:	eea2 6aa5 	vfma.f32	s12, s5, s11
 8012a5a:	9559      	str	r5, [sp, #356]	; 0x164
 8012a5c:	eee3 6a25 	vfma.f32	s13, s6, s11
 8012a60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012a64:	eeb1 6a46 	vneg.f32	s12, s12
 8012a68:	eea3 7a85 	vfma.f32	s14, s7, s10
 8012a6c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8012a70:	eef1 6a66 	vneg.f32	s13, s13
 8012a74:	eee6 7a85 	vfma.f32	s15, s13, s10
 8012a78:	eea4 7a25 	vfma.f32	s14, s8, s11
 8012a7c:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8012a80:	eeb1 7a47 	vneg.f32	s14, s14
 8012a84:	eee7 7a25 	vfma.f32	s15, s14, s11
 8012a88:	edcd 6a42 	vstr	s13, [sp, #264]	; 0x108
 8012a8c:	eef0 7ae7 	vabs.f32	s15, s15
 8012a90:	ed8d 6a43 	vstr	s12, [sp, #268]	; 0x10c
 8012a94:	eeb1 8ae7 	vsqrt.f32	s16, s15
 8012a98:	ed8d 7a44 	vstr	s14, [sp, #272]	; 0x110
 8012a9c:	f7fe fa30 	bl	8010f00 <Hessenberg_Form_Orthogonal>
 8012aa0:	a9b7      	add	r1, sp, #732	; 0x2dc
 8012aa2:	a893      	add	r0, sp, #588	; 0x24c
 8012aa4:	aa6f      	add	r2, sp, #444	; 0x1bc
 8012aa6:	2303      	movs	r3, #3
 8012aa8:	f7fe fb72 	bl	8011190 <QR_Hessenberg_Matrix.constprop.27>
 8012aac:	eddd 6a6f 	vldr	s13, [sp, #444]	; 0x1bc
 8012ab0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8012ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ab8:	d519      	bpl.n	8012aee <MEMS_solveEllipsoid.constprop.25+0xbce>
 8012aba:	ed9d 7a70 	vldr	s14, [sp, #448]	; 0x1c0
 8012abe:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ac6:	d512      	bpl.n	8012aee <MEMS_solveEllipsoid.constprop.25+0xbce>
 8012ac8:	eddd 7a71 	vldr	s15, [sp, #452]	; 0x1c4
 8012acc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ad4:	d50b      	bpl.n	8012aee <MEMS_solveEllipsoid.constprop.25+0xbce>
 8012ad6:	eef1 6a66 	vneg.f32	s13, s13
 8012ada:	eeb1 7a47 	vneg.f32	s14, s14
 8012ade:	eef1 7a67 	vneg.f32	s15, s15
 8012ae2:	edcd 6a6f 	vstr	s13, [sp, #444]	; 0x1bc
 8012ae6:	ed8d 7a70 	vstr	s14, [sp, #448]	; 0x1c0
 8012aea:	edcd 7a71 	vstr	s15, [sp, #452]	; 0x1c4
 8012aee:	eddd 7a6f 	vldr	s15, [sp, #444]	; 0x1bc
 8012af2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012afa:	f100 8119 	bmi.w	8012d30 <MEMS_solveEllipsoid.constprop.25+0xe10>
 8012afe:	eddd 7a70 	vldr	s15, [sp, #448]	; 0x1c0
 8012b02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b0a:	f100 8111 	bmi.w	8012d30 <MEMS_solveEllipsoid.constprop.25+0xe10>
 8012b0e:	eddd 7a71 	vldr	s15, [sp, #452]	; 0x1c4
 8012b12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b1a:	f100 8109 	bmi.w	8012d30 <MEMS_solveEllipsoid.constprop.25+0xe10>
 8012b1e:	aa72      	add	r2, sp, #456	; 0x1c8
 8012b20:	ab6f      	add	r3, sp, #444	; 0x1bc
 8012b22:	ed93 7a00 	vldr	s14, [r3]
 8012b26:	eef1 7ac7 	vsqrt.f32	s15, s14
 8012b2a:	ece3 7a01 	vstmia	r3!, {s15}
 8012b2e:	429a      	cmp	r2, r3
 8012b30:	d1f7      	bne.n	8012b22 <MEMS_solveEllipsoid.constprop.25+0xc02>
 8012b32:	f04f 0b00 	mov.w	fp, #0
 8012b36:	2300      	movs	r3, #0
 8012b38:	46da      	mov	sl, fp
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	a9b7      	add	r1, sp, #732	; 0x2dc
 8012b3e:	f50d 7cae 	add.w	ip, sp, #348	; 0x15c
 8012b42:	f85c 2020 	ldr.w	r2, [ip, r0, lsl #2]
 8012b46:	460e      	mov	r6, r1
 8012b48:	441a      	add	r2, r3
 8012b4a:	4605      	mov	r5, r0
 8012b4c:	f101 0e0c 	add.w	lr, r1, #12
 8012b50:	f8c2 b000 	str.w	fp, [r2]
 8012b54:	46b1      	mov	r9, r6
 8012b56:	460f      	mov	r7, r1
 8012b58:	f50d 78de 	add.w	r8, sp, #444	; 0x1bc
 8012b5c:	ecf7 7a01 	vldmia	r7!, {s15}
 8012b60:	ecb8 7a01 	vldmia	r8!, {s14}
 8012b64:	ecb9 6a01 	vldmia	r9!, {s12}
 8012b68:	edd2 6a00 	vldr	s13, [r2]
 8012b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012b70:	45be      	cmp	lr, r7
 8012b72:	eee7 6a86 	vfma.f32	s13, s15, s12
 8012b76:	edc2 6a00 	vstr	s13, [r2]
 8012b7a:	d1ef      	bne.n	8012b5c <MEMS_solveEllipsoid.constprop.25+0xc3c>
 8012b7c:	f85c 7025 	ldr.w	r7, [ip, r5, lsl #2]
 8012b80:	3501      	adds	r5, #1
 8012b82:	fa5f f885 	uxtb.w	r8, r5
 8012b86:	441f      	add	r7, r3
 8012b88:	f1b8 0f03 	cmp.w	r8, #3
 8012b8c:	f102 0204 	add.w	r2, r2, #4
 8012b90:	f106 060c 	add.w	r6, r6, #12
 8012b94:	edc7 6a00 	vstr	s13, [r7]
 8012b98:	d1da      	bne.n	8012b50 <MEMS_solveEllipsoid.constprop.25+0xc30>
 8012b9a:	3304      	adds	r3, #4
 8012b9c:	2b0c      	cmp	r3, #12
 8012b9e:	f100 0001 	add.w	r0, r0, #1
 8012ba2:	4671      	mov	r1, lr
 8012ba4:	d1cd      	bne.n	8012b42 <MEMS_solveEllipsoid.constprop.25+0xc22>
 8012ba6:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8012baa:	ed5f 3a8e 	vldr	s7, [pc, #-568]	; 8012974 <MEMS_solveEllipsoid.constprop.25+0xa54>
 8012bae:	ed94 7a08 	vldr	s14, [r4, #32]
 8012bb2:	edd4 4a00 	vldr	s9, [r4]
 8012bb6:	ed94 5a03 	vldr	s10, [r4, #12]
 8012bba:	edd4 5a04 	vldr	s11, [r4, #16]
 8012bbe:	ed94 6a06 	vldr	s12, [r4, #24]
 8012bc2:	edd4 6a07 	vldr	s13, [r4, #28]
 8012bc6:	9b01      	ldr	r3, [sp, #4]
 8012bc8:	f8c4 a004 	str.w	sl, [r4, #4]
 8012bcc:	ee28 4a27 	vmul.f32	s8, s16, s15
 8012bd0:	f8c4 a008 	str.w	sl, [r4, #8]
 8012bd4:	eec3 7a84 	vdiv.f32	s15, s7, s8
 8012bd8:	f8c4 a014 	str.w	sl, [r4, #20]
 8012bdc:	ed1f 2a9a 	vldr	s4, [pc, #-616]	; 8012978 <MEMS_solveEllipsoid.constprop.25+0xa58>
 8012be0:	ed5f 1a9a 	vldr	s3, [pc, #-616]	; 801297c <MEMS_solveEllipsoid.constprop.25+0xa5c>
 8012be4:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8012be8:	ee25 5a27 	vmul.f32	s10, s10, s15
 8012bec:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8012bf0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8012bf4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8012bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012bfc:	edc4 4a00 	vstr	s9, [r4]
 8012c00:	edc4 5a04 	vstr	s11, [r4, #16]
 8012c04:	ed84 5a03 	vstr	s10, [r4, #12]
 8012c08:	ed84 6a06 	vstr	s12, [r4, #24]
 8012c0c:	edc4 6a07 	vstr	s13, [r4, #28]
 8012c10:	edc4 7a08 	vstr	s15, [r4, #32]
 8012c14:	edd3 7a00 	vldr	s15, [r3]
 8012c18:	eec7 2a88 	vdiv.f32	s5, s15, s16
 8012c1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012c20:	ee77 7a62 	vsub.f32	s15, s14, s5
 8012c24:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 8012c28:	edc3 7a00 	vstr	s15, [r3]
 8012c2c:	ed94 6a00 	vldr	s12, [r4]
 8012c30:	ed94 3a04 	vldr	s6, [r4, #16]
 8012c34:	edd4 3a08 	vldr	s7, [r4, #32]
 8012c38:	ee76 7a03 	vadd.f32	s15, s12, s6
 8012c3c:	ee76 4a47 	vsub.f32	s9, s12, s14
 8012c40:	ee33 5a47 	vsub.f32	s10, s6, s14
 8012c44:	ee33 4a66 	vsub.f32	s8, s6, s13
 8012c48:	ee76 5a66 	vsub.f32	s11, s12, s13
 8012c4c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8012c50:	eef0 4ae4 	vabs.f32	s9, s9
 8012c54:	eeb0 5ac5 	vabs.f32	s10, s10
 8012c58:	eeb4 5ae4 	vcmpe.f32	s10, s9
 8012c5c:	eef0 5ae5 	vabs.f32	s11, s11
 8012c60:	ee67 7a82 	vmul.f32	s15, s15, s4
 8012c64:	eeb0 4ac4 	vabs.f32	s8, s8
 8012c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c6c:	ee73 6ae6 	vsub.f32	s13, s7, s13
 8012c70:	eeb4 4ae5 	vcmpe.f32	s8, s11
 8012c74:	bfb8      	it	lt
 8012c76:	eeb0 5a64 	vmovlt.f32	s10, s9
 8012c7a:	ee36 2a67 	vsub.f32	s4, s12, s15
 8012c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c82:	ee73 4a67 	vsub.f32	s9, s6, s15
 8012c86:	bfb8      	it	lt
 8012c88:	eeb0 4a65 	vmovlt.f32	s8, s11
 8012c8c:	eef0 6ae6 	vabs.f32	s13, s13
 8012c90:	eef4 6ac4 	vcmpe.f32	s13, s8
 8012c94:	eef0 4ae4 	vabs.f32	s9, s9
 8012c98:	eeb0 2ac2 	vabs.f32	s4, s4
 8012c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ca0:	ee73 5ae7 	vsub.f32	s11, s7, s15
 8012ca4:	eef4 4ac2 	vcmpe.f32	s9, s4
 8012ca8:	bfb8      	it	lt
 8012caa:	eef0 6a44 	vmovlt.f32	s13, s8
 8012cae:	ee33 7ac7 	vsub.f32	s14, s7, s14
 8012cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cb6:	bfb8      	it	lt
 8012cb8:	eef0 4a42 	vmovlt.f32	s9, s4
 8012cbc:	eef0 5ae5 	vabs.f32	s11, s11
 8012cc0:	eef4 5ae4 	vcmpe.f32	s11, s9
 8012cc4:	eeb0 7ac7 	vabs.f32	s14, s14
 8012cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ccc:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8012cd0:	bfb8      	it	lt
 8012cd2:	eef0 5a64 	vmovlt.f32	s11, s9
 8012cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cda:	bfb8      	it	lt
 8012cdc:	eeb0 7a45 	vmovlt.f32	s14, s10
 8012ce0:	eeb4 7ae1 	vcmpe.f32	s14, s3
 8012ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ce8:	d524      	bpl.n	8012d34 <MEMS_solveEllipsoid.constprop.25+0xe14>
 8012cea:	ed1f 7adb 	vldr	s14, [pc, #-876]	; 8012980 <MEMS_solveEllipsoid.constprop.25+0xa60>
 8012cee:	eef4 5ac7 	vcmpe.f32	s11, s14
 8012cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cf6:	bf4c      	ite	mi
 8012cf8:	2301      	movmi	r3, #1
 8012cfa:	2300      	movpl	r3, #0
 8012cfc:	ed1f 7adf 	vldr	s14, [pc, #-892]	; 8012984 <MEMS_solveEllipsoid.constprop.25+0xa64>
 8012d00:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d08:	d516      	bpl.n	8012d38 <MEMS_solveEllipsoid.constprop.25+0xe18>
 8012d0a:	ed1f 7ae1 	vldr	s14, [pc, #-900]	; 8012988 <MEMS_solveEllipsoid.constprop.25+0xa68>
 8012d0e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012d12:	eef4 5ac7 	vcmpe.f32	s11, s14
 8012d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d1a:	bf4c      	ite	mi
 8012d1c:	2201      	movmi	r2, #1
 8012d1e:	2200      	movpl	r2, #0
 8012d20:	edd4 6a06 	vldr	s13, [r4, #24]
 8012d24:	ed94 7a03 	vldr	s14, [r4, #12]
 8012d28:	edd4 5a07 	vldr	s11, [r4, #28]
 8012d2c:	b932      	cbnz	r2, 8012d3c <MEMS_solveEllipsoid.constprop.25+0xe1c>
 8012d2e:	bbbb      	cbnz	r3, 8012da0 <MEMS_solveEllipsoid.constprop.25+0xe80>
 8012d30:	2000      	movs	r0, #0
 8012d32:	e07c      	b.n	8012e2e <MEMS_solveEllipsoid.constprop.25+0xf0e>
 8012d34:	2300      	movs	r3, #0
 8012d36:	e7e1      	b.n	8012cfc <MEMS_solveEllipsoid.constprop.25+0xddc>
 8012d38:	2200      	movs	r2, #0
 8012d3a:	e7f1      	b.n	8012d20 <MEMS_solveEllipsoid.constprop.25+0xe00>
 8012d3c:	eeb4 6ac3 	vcmpe.f32	s12, s6
 8012d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d44:	bf88      	it	hi
 8012d46:	eeb0 6a43 	vmovhi.f32	s12, s6
 8012d4a:	eef4 3ac6 	vcmpe.f32	s7, s12
 8012d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d52:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8012e48 <MEMS_solveEllipsoid.constprop.25+0xf28>
 8012d56:	bf98      	it	ls
 8012d58:	eeb0 6a63 	vmovls.f32	s12, s7
 8012d5c:	eeb4 6ac5 	vcmpe.f32	s12, s10
 8012d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d64:	dde3      	ble.n	8012d2e <MEMS_solveEllipsoid.constprop.25+0xe0e>
 8012d66:	eeb0 6ae5 	vabs.f32	s12, s11
 8012d6a:	eeb0 7ac7 	vabs.f32	s14, s14
 8012d6e:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8012d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d76:	bfb8      	it	lt
 8012d78:	eeb0 7a46 	vmovlt.f32	s14, s12
 8012d7c:	eef0 6ae6 	vabs.f32	s13, s13
 8012d80:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8012e4c <MEMS_solveEllipsoid.constprop.25+0xf2c>
 8012d84:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8012d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d8c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012d90:	bfb8      	it	lt
 8012d92:	eeb0 7a66 	vmovlt.f32	s14, s13
 8012d96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d9e:	d5c6      	bpl.n	8012d2e <MEMS_solveEllipsoid.constprop.25+0xe0e>
 8012da0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012da4:	eef4 2ae7 	vcmpe.f32	s5, s15
 8012da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dac:	dcc0      	bgt.n	8012d30 <MEMS_solveEllipsoid.constprop.25+0xe10>
 8012dae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012db0:	ed9f 8a27 	vldr	s16, [pc, #156]	; 8012e50 <MEMS_solveEllipsoid.constprop.25+0xf30>
 8012db4:	a722      	add	r7, pc, #136	; (adr r7, 8012e40 <MEMS_solveEllipsoid.constprop.25+0xf20>)
 8012db6:	e9d7 6700 	ldrd	r6, r7, [r7]
 8012dba:	f1a3 0a02 	sub.w	sl, r3, #2
 8012dbe:	f104 0904 	add.w	r9, r4, #4
 8012dc2:	2500      	movs	r5, #0
 8012dc4:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8012dc8:	44a0      	add	r8, r4
 8012dca:	f8d8 0000 	ldr.w	r0, [r8]
 8012dce:	f7ed fbc3 	bl	8000558 <__aeabi_f2d>
 8012dd2:	4632      	mov	r2, r6
 8012dd4:	463b      	mov	r3, r7
 8012dd6:	f7ed fc17 	bl	8000608 <__aeabi_dmul>
 8012dda:	f7ed fec5 	bl	8000b68 <__aeabi_d2iz>
 8012dde:	ee07 0a90 	vmov	s15, r0
 8012de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012de6:	ee67 7a88 	vmul.f32	s15, s15, s16
 8012dea:	ece8 7a01 	vstmia	r8!, {s15}
 8012dee:	45c8      	cmp	r8, r9
 8012df0:	d1eb      	bne.n	8012dca <MEMS_solveEllipsoid.constprop.25+0xeaa>
 8012df2:	ab42      	add	r3, sp, #264	; 0x108
 8012df4:	195a      	adds	r2, r3, r5
 8012df6:	ab13      	add	r3, sp, #76	; 0x4c
 8012df8:	442b      	add	r3, r5
 8012dfa:	edd3 7a00 	vldr	s15, [r3]
 8012dfe:	ed92 0a00 	vldr	s0, [r2]
 8012e02:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012e06:	f007 f9f1 	bl	801a1ec <roundf>
 8012e0a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012e0e:	3504      	adds	r5, #4
 8012e10:	ee10 3a10 	vmov	r3, s0
 8012e14:	2d0c      	cmp	r5, #12
 8012e16:	f108 0910 	add.w	r9, r8, #16
 8012e1a:	f82a 3f02 	strh.w	r3, [sl, #2]!
 8012e1e:	d1d1      	bne.n	8012dc4 <MEMS_solveEllipsoid.constprop.25+0xea4>
 8012e20:	68e1      	ldr	r1, [r4, #12]
 8012e22:	69a2      	ldr	r2, [r4, #24]
 8012e24:	69e3      	ldr	r3, [r4, #28]
 8012e26:	6061      	str	r1, [r4, #4]
 8012e28:	60a2      	str	r2, [r4, #8]
 8012e2a:	6163      	str	r3, [r4, #20]
 8012e2c:	2001      	movs	r0, #1
 8012e2e:	f50d 7d6f 	add.w	sp, sp, #956	; 0x3bc
 8012e32:	ecbd 8b10 	vpop	{d8-d15}
 8012e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e3a:	bf00      	nop
 8012e3c:	f3af 8000 	nop.w
 8012e40:	00000000 	.word	0x00000000
 8012e44:	412e8480 	.word	0x412e8480
 8012e48:	3ecccccd 	.word	0x3ecccccd
 8012e4c:	3f19999a 	.word	0x3f19999a
 8012e50:	358637bd 	.word	0x358637bd

08012e54 <MEMS_compareCalScore>:
 8012e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e58:	7904      	ldrb	r4, [r0, #4]
 8012e5a:	790e      	ldrb	r6, [r1, #4]
 8012e5c:	6803      	ldr	r3, [r0, #0]
 8012e5e:	680d      	ldr	r5, [r1, #0]
 8012e60:	42b4      	cmp	r4, r6
 8012e62:	bf8c      	ite	hi
 8012e64:	ee07 4a90 	vmovhi	s15, r4
 8012e68:	ee07 6a90 	vmovls	s15, r6
 8012e6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012e70:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8012e74:	ee20 7a07 	vmul.f32	s14, s0, s14
 8012e78:	1ad3      	subs	r3, r2, r3
 8012e7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e82:	b083      	sub	sp, #12
 8012e84:	eba2 0205 	sub.w	r2, r2, r5
 8012e88:	f100 8103 	bmi.w	8013092 <MEMS_compareCalScore+0x23e>
 8012e8c:	eef0 7a0c 	vmov.f32	s15, #12	; 0x40600000  3.5
 8012e90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e98:	eeb1 7a0e 	vmov.f32	s14, #30	; 0x40f00000  7.5
 8012e9c:	bf48      	it	mi
 8012e9e:	eeb0 7a67 	vmovmi.f32	s14, s15
 8012ea2:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8012ea6:	f9b1 e006 	ldrsh.w	lr, [r1, #6]
 8012eaa:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8012eae:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8012eb2:	eba7 090e 	sub.w	r9, r7, lr
 8012eb6:	eba5 080c 	sub.w	r8, r5, ip
 8012eba:	ea89 7be9 	eor.w	fp, r9, r9, asr #31
 8012ebe:	ea88 7ae8 	eor.w	sl, r8, r8, asr #31
 8012ec2:	ebab 7be9 	sub.w	fp, fp, r9, asr #31
 8012ec6:	ebaa 7ae8 	sub.w	sl, sl, r8, asr #31
 8012eca:	45d3      	cmp	fp, sl
 8012ecc:	f340 80d4 	ble.w	8013078 <MEMS_compareCalScore+0x224>
 8012ed0:	b2bf      	uxth	r7, r7
 8012ed2:	fa1f fe8e 	uxth.w	lr, lr
 8012ed6:	f1b9 0f00 	cmp.w	r9, #0
 8012eda:	bfb4      	ite	lt
 8012edc:	ebae 0707 	sublt.w	r7, lr, r7
 8012ee0:	eba7 070e 	subge.w	r7, r7, lr
 8012ee4:	b23d      	sxth	r5, r7
 8012ee6:	9501      	str	r5, [sp, #4]
 8012ee8:	f9b0 800a 	ldrsh.w	r8, [r0, #10]
 8012eec:	f9b1 700a 	ldrsh.w	r7, [r1, #10]
 8012ef0:	eba8 0c07 	sub.w	ip, r8, r7
 8012ef4:	ea8c 7eec 	eor.w	lr, ip, ip, asr #31
 8012ef8:	ebae 7eec 	sub.w	lr, lr, ip, asr #31
 8012efc:	4575      	cmp	r5, lr
 8012efe:	dc09      	bgt.n	8012f14 <MEMS_compareCalScore+0xc0>
 8012f00:	fa1f f588 	uxth.w	r5, r8
 8012f04:	b2bf      	uxth	r7, r7
 8012f06:	f1bc 0f00 	cmp.w	ip, #0
 8012f0a:	bfb4      	ite	lt
 8012f0c:	1b7d      	sublt	r5, r7, r5
 8012f0e:	1bed      	subge	r5, r5, r7
 8012f10:	b22d      	sxth	r5, r5
 8012f12:	9501      	str	r5, [sp, #4]
 8012f14:	f8b0 900c 	ldrh.w	r9, [r0, #12]
 8012f18:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 8012f1c:	f8b0 800e 	ldrh.w	r8, [r0, #14]
 8012f20:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
 8012f24:	eba9 070e 	sub.w	r7, r9, lr
 8012f28:	eba8 050c 	sub.w	r5, r8, ip
 8012f2c:	ea87 7be7 	eor.w	fp, r7, r7, asr #31
 8012f30:	ea85 7ae5 	eor.w	sl, r5, r5, asr #31
 8012f34:	ebab 7be7 	sub.w	fp, fp, r7, asr #31
 8012f38:	ebaa 7ae5 	sub.w	sl, sl, r5, asr #31
 8012f3c:	45d3      	cmp	fp, sl
 8012f3e:	f340 8095 	ble.w	801306c <MEMS_compareCalScore+0x218>
 8012f42:	2f00      	cmp	r7, #0
 8012f44:	bfba      	itte	lt
 8012f46:	ebae 0509 	sublt.w	r5, lr, r9
 8012f4a:	b22d      	sxthlt	r5, r5
 8012f4c:	b23d      	sxthge	r5, r7
 8012f4e:	f8b0 9010 	ldrh.w	r9, [r0, #16]
 8012f52:	8a0f      	ldrh	r7, [r1, #16]
 8012f54:	eba9 0107 	sub.w	r1, r9, r7
 8012f58:	ea81 70e1 	eor.w	r0, r1, r1, asr #31
 8012f5c:	eba0 70e1 	sub.w	r0, r0, r1, asr #31
 8012f60:	4285      	cmp	r5, r0
 8012f62:	dc05      	bgt.n	8012f70 <MEMS_compareCalScore+0x11c>
 8012f64:	2900      	cmp	r1, #0
 8012f66:	bfba      	itte	lt
 8012f68:	eba7 0509 	sublt.w	r5, r7, r9
 8012f6c:	b22d      	sxthlt	r5, r5
 8012f6e:	b20d      	sxthge	r5, r1
 8012f70:	eddd 7a01 	vldr	s15, [sp, #4]
 8012f74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012f78:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012f7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f84:	d50a      	bpl.n	8012f9c <MEMS_compareCalScore+0x148>
 8012f86:	ee07 5a90 	vmov	s15, r5
 8012f8a:	ed9f 7a84 	vldr	s14, [pc, #528]	; 801319c <MEMS_compareCalScore+0x348>
 8012f8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012f92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f9a:	d41c      	bmi.n	8012fd6 <MEMS_compareCalScore+0x182>
 8012f9c:	ebb4 0f46 	cmp.w	r4, r6, lsl #1
 8012fa0:	db12      	blt.n	8012fc8 <MEMS_compareCalScore+0x174>
 8012fa2:	497f      	ldr	r1, [pc, #508]	; (80131a0 <MEMS_compareCalScore+0x34c>)
 8012fa4:	1ad0      	subs	r0, r2, r3
 8012fa6:	4288      	cmp	r0, r1
 8012fa8:	d80e      	bhi.n	8012fc8 <MEMS_compareCalScore+0x174>
 8012faa:	ee07 4a90 	vmov	s15, r4
 8012fae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012fb2:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8012fb6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012fba:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8012fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fc2:	d401      	bmi.n	8012fc8 <MEMS_compareCalScore+0x174>
 8012fc4:	2000      	movs	r0, #0
 8012fc6:	e003      	b.n	8012fd0 <MEMS_compareCalScore+0x17c>
 8012fc8:	4293      	cmp	r3, r2
 8012fca:	bf2c      	ite	cs
 8012fcc:	2000      	movcs	r0, #0
 8012fce:	2001      	movcc	r0, #1
 8012fd0:	b003      	add	sp, #12
 8012fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fd6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8012fda:	d25d      	bcs.n	8013098 <MEMS_compareCalScore+0x244>
 8012fdc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8012fe0:	ee07 4a90 	vmov	s15, r4
 8012fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012fe8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8012fec:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012ff0:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ff8:	d465      	bmi.n	80130c6 <MEMS_compareCalScore+0x272>
 8012ffa:	eef0 6a0c 	vmov.f32	s13, #12	; 0x40600000  3.5
 8012ffe:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013006:	f100 80bd 	bmi.w	8013184 <MEMS_compareCalScore+0x330>
 801300a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 801300e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013016:	bf44      	itt	mi
 8013018:	eef7 7a00 	vmovmi.f32	s15, #112	; 0x3f800000  1.0
 801301c:	ee37 7a27 	vaddmi.f32	s14, s14, s15
 8013020:	f5b2 7f16 	cmp.w	r2, #600	; 0x258
 8013024:	d256      	bcs.n	80130d4 <MEMS_compareCalScore+0x280>
 8013026:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 801302a:	ee07 6a90 	vmov	s15, r6
 801302e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013032:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8013036:	ee27 0a80 	vmul.f32	s0, s15, s0
 801303a:	eeb4 0ac6 	vcmpe.f32	s0, s12
 801303e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013042:	d45e      	bmi.n	8013102 <MEMS_compareCalScore+0x2ae>
 8013044:	eef0 7a0c 	vmov.f32	s15, #12	; 0x40600000  3.5
 8013048:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801304c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013050:	f100 8093 	bmi.w	801317a <MEMS_compareCalScore+0x326>
 8013054:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8013058:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801305c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013060:	bf44      	itt	mi
 8013062:	eef7 7a00 	vmovmi.f32	s15, #112	; 0x3f800000  1.0
 8013066:	ee76 6aa7 	vaddmi.f32	s13, s13, s15
 801306a:	e04e      	b.n	801310a <MEMS_compareCalScore+0x2b6>
 801306c:	2d00      	cmp	r5, #0
 801306e:	bfb8      	it	lt
 8013070:	ebac 0508 	sublt.w	r5, ip, r8
 8013074:	b22d      	sxth	r5, r5
 8013076:	e76a      	b.n	8012f4e <MEMS_compareCalScore+0xfa>
 8013078:	b2ad      	uxth	r5, r5
 801307a:	fa1f fc8c 	uxth.w	ip, ip
 801307e:	f1b8 0f00 	cmp.w	r8, #0
 8013082:	bfb4      	ite	lt
 8013084:	ebac 0505 	sublt.w	r5, ip, r5
 8013088:	eba5 050c 	subge.w	r5, r5, ip
 801308c:	b22d      	sxth	r5, r5
 801308e:	9501      	str	r5, [sp, #4]
 8013090:	e72a      	b.n	8012ee8 <MEMS_compareCalScore+0x94>
 8013092:	eeb0 7a67 	vmov.f32	s14, s15
 8013096:	e704      	b.n	8012ea2 <MEMS_compareCalScore+0x4e>
 8013098:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 801309c:	d35c      	bcc.n	8013158 <MEMS_compareCalScore+0x304>
 801309e:	4941      	ldr	r1, [pc, #260]	; (80131a4 <MEMS_compareCalScore+0x350>)
 80130a0:	428b      	cmp	r3, r1
 80130a2:	d877      	bhi.n	8013194 <MEMS_compareCalScore+0x340>
 80130a4:	f5a3 51e1 	sub.w	r1, r3, #7200	; 0x1c20
 80130a8:	ee07 1a90 	vmov	s15, r1
 80130ac:	eddf 6a3e 	vldr	s13, [pc, #248]	; 80131a8 <MEMS_compareCalScore+0x354>
 80130b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80130b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80130b8:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80130bc:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80130c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80130c4:	e78c      	b.n	8012fe0 <MEMS_compareCalScore+0x18c>
 80130c6:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 80130ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80130ce:	f5b2 7f16 	cmp.w	r2, #600	; 0x258
 80130d2:	d3a8      	bcc.n	8013026 <MEMS_compareCalScore+0x1d2>
 80130d4:	f5b2 5fe1 	cmp.w	r2, #7200	; 0x1c20
 80130d8:	d32d      	bcc.n	8013136 <MEMS_compareCalScore+0x2e2>
 80130da:	4932      	ldr	r1, [pc, #200]	; (80131a4 <MEMS_compareCalScore+0x350>)
 80130dc:	428a      	cmp	r2, r1
 80130de:	d856      	bhi.n	801318e <MEMS_compareCalScore+0x33a>
 80130e0:	f5a2 51e1 	sub.w	r1, r2, #7200	; 0x1c20
 80130e4:	ee07 1a90 	vmov	s15, r1
 80130e8:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80131a8 <MEMS_compareCalScore+0x354>
 80130ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80130f0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80130f4:	eee7 6ac6 	vfms.f32	s13, s15, s12
 80130f8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80130fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8013100:	e793      	b.n	801302a <MEMS_compareCalScore+0x1d6>
 8013102:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8013106:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801310a:	ee77 7a66 	vsub.f32	s15, s14, s13
 801310e:	ed9f 6a27 	vldr	s12, [pc, #156]	; 80131ac <MEMS_compareCalScore+0x358>
 8013112:	eef0 7ae7 	vabs.f32	s15, s15
 8013116:	eef4 7ac6 	vcmpe.f32	s15, s12
 801311a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801311e:	f53f af53 	bmi.w	8012fc8 <MEMS_compareCalScore+0x174>
 8013122:	eef4 6ac7 	vcmpe.f32	s13, s14
 8013126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801312a:	bf4c      	ite	mi
 801312c:	2001      	movmi	r0, #1
 801312e:	2000      	movpl	r0, #0
 8013130:	b003      	add	sp, #12
 8013132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013136:	f5a2 7116 	sub.w	r1, r2, #600	; 0x258
 801313a:	ee07 1a90 	vmov	s15, r1
 801313e:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 80131b0 <MEMS_compareCalScore+0x35c>
 8013142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801314a:	eee7 6ac6 	vfms.f32	s13, s15, s12
 801314e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8013152:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8013156:	e768      	b.n	801302a <MEMS_compareCalScore+0x1d6>
 8013158:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 801315c:	ee07 1a90 	vmov	s15, r1
 8013160:	eddf 6a13 	vldr	s13, [pc, #76]	; 80131b0 <MEMS_compareCalScore+0x35c>
 8013164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013168:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801316c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8013170:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8013174:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013178:	e732      	b.n	8012fe0 <MEMS_compareCalScore+0x18c>
 801317a:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 801317e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8013182:	e7c2      	b.n	801310a <MEMS_compareCalScore+0x2b6>
 8013184:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8013188:	ee37 7a27 	vadd.f32	s14, s14, s15
 801318c:	e79f      	b.n	80130ce <MEMS_compareCalScore+0x27a>
 801318e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013192:	e74a      	b.n	801302a <MEMS_compareCalScore+0x1d6>
 8013194:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013198:	e722      	b.n	8012fe0 <MEMS_compareCalScore+0x18c>
 801319a:	bf00      	nop
 801319c:	43480000 	.word	0x43480000
 80131a0:	00015180 	.word	0x00015180
 80131a4:	0001517f 	.word	0x0001517f
 80131a8:	367e3344 	.word	0x367e3344
 80131ac:	3dcccccd 	.word	0x3dcccccd
 80131b0:	389ee00a 	.word	0x389ee00a
 80131b4:	00000000 	.word	0x00000000

080131b8 <MEMS_runMagCal.constprop.18>:
 80131b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131bc:	f8df b07c 	ldr.w	fp, [pc, #124]	; 801323c <MEMS_runMagCal.constprop.18+0x84>
 80131c0:	ed2d 8b0e 	vpush	{d8-d14}
 80131c4:	f8bb 5008 	ldrh.w	r5, [fp, #8]
 80131c8:	f8db 600c 	ldr.w	r6, [fp, #12]
 80131cc:	f9bb 4002 	ldrsh.w	r4, [fp, #2]
 80131d0:	2d82      	cmp	r5, #130	; 0x82
 80131d2:	f2ad 4db4 	subw	sp, sp, #1204	; 0x4b4
 80131d6:	f240 824f 	bls.w	8013678 <MEMS_runMagCal.constprop.18+0x4c0>
 80131da:	f105 077e 	add.w	r7, r5, #126	; 0x7e
 80131de:	b2ff      	uxtb	r7, r7
 80131e0:	f04f 0982 	mov.w	r9, #130	; 0x82
 80131e4:	f8db c010 	ldr.w	ip, [fp, #16]
 80131e8:	2300      	movs	r3, #0
 80131ea:	f10d 0aa0 	add.w	sl, sp, #160	; 0xa0
 80131ee:	b219      	sxth	r1, r3
 80131f0:	00ca      	lsls	r2, r1, #3
 80131f2:	eb0c 0002 	add.w	r0, ip, r2
 80131f6:	3301      	adds	r3, #1
 80131f8:	f81c e031 	ldrb.w	lr, [ip, r1, lsl #3]
 80131fc:	f80a e031 	strb.w	lr, [sl, r1, lsl #3]
 8013200:	4452      	add	r2, sl
 8013202:	b2db      	uxtb	r3, r3
 8013204:	f8d0 e002 	ldr.w	lr, [r0, #2]
 8013208:	88c1      	ldrh	r1, [r0, #6]
 801320a:	f8c2 e002 	str.w	lr, [r2, #2]
 801320e:	4599      	cmp	r9, r3
 8013210:	80d1      	strh	r1, [r2, #6]
 8013212:	d8ec      	bhi.n	80131ee <MEMS_runMagCal.constprop.18+0x36>
 8013214:	2d82      	cmp	r5, #130	; 0x82
 8013216:	bf86      	itte	hi
 8013218:	f1a5 0382 	subhi.w	r3, r5, #130	; 0x82
 801321c:	b29b      	uxthhi	r3, r3
 801321e:	2300      	movls	r3, #0
 8013220:	f8ab 3008 	strh.w	r3, [fp, #8]
 8013224:	b1ff      	cbz	r7, 8013266 <MEMS_runMagCal.constprop.18+0xae>
 8013226:	f8db 3010 	ldr.w	r3, [fp, #16]
 801322a:	1e79      	subs	r1, r7, #1
 801322c:	b2c9      	uxtb	r1, r1
 801322e:	f103 0208 	add.w	r2, r3, #8
 8013232:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8013236:	f04f 0e00 	mov.w	lr, #0
 801323a:	e002      	b.n	8013242 <MEMS_runMagCal.constprop.18+0x8a>
 801323c:	20001708 	.word	0x20001708
 8013240:	3208      	adds	r2, #8
 8013242:	f893 0410 	ldrb.w	r0, [r3, #1040]	; 0x410
 8013246:	f8b3 c412 	ldrh.w	ip, [r3, #1042]	; 0x412
 801324a:	f8b3 7414 	ldrh.w	r7, [r3, #1044]	; 0x414
 801324e:	7018      	strb	r0, [r3, #0]
 8013250:	4291      	cmp	r1, r2
 8013252:	f8b3 0416 	ldrh.w	r0, [r3, #1046]	; 0x416
 8013256:	f883 e410 	strb.w	lr, [r3, #1040]	; 0x410
 801325a:	f8a3 c002 	strh.w	ip, [r3, #2]
 801325e:	809f      	strh	r7, [r3, #4]
 8013260:	80d8      	strh	r0, [r3, #6]
 8013262:	4613      	mov	r3, r2
 8013264:	d1ec      	bne.n	8013240 <MEMS_runMagCal.constprop.18+0x88>
 8013266:	3d01      	subs	r5, #1
 8013268:	fb04 6215 	mls	r2, r4, r5, r6
 801326c:	f109 31ff 	add.w	r1, r9, #4294967295
 8013270:	f89b 30e0 	ldrb.w	r3, [fp, #224]	; 0xe0
 8013274:	9206      	str	r2, [sp, #24]
 8013276:	fb04 2201 	mla	r2, r4, r1, r2
 801327a:	9107      	str	r1, [sp, #28]
 801327c:	9205      	str	r2, [sp, #20]
 801327e:	2b00      	cmp	r3, #0
 8013280:	f000 81fe 	beq.w	8013680 <MEMS_runMagCal.constprop.18+0x4c8>
 8013284:	f8df 83c0 	ldr.w	r8, [pc, #960]	; 8013648 <MEMS_runMagCal.constprop.18+0x490>
 8013288:	eddb 2a01 	vldr	s5, [fp, #4]
 801328c:	ed9b 3a2d 	vldr	s6, [fp, #180]	; 0xb4
 8013290:	eddb 3a2a 	vldr	s7, [fp, #168]	; 0xa8
 8013294:	ed9b 4a31 	vldr	s8, [fp, #196]	; 0xc4
 8013298:	eddb 4a2b 	vldr	s9, [fp, #172]	; 0xac
 801329c:	ed9b 5a35 	vldr	s10, [fp, #212]	; 0xd4
 80132a0:	eddb 5a2c 	vldr	s11, [fp, #176]	; 0xb0
 80132a4:	ed9f 6ae3 	vldr	s12, [pc, #908]	; 8013634 <MEMS_runMagCal.constprop.18+0x47c>
 80132a8:	f647 7eff 	movw	lr, #32767	; 0x7fff
 80132ac:	2300      	movs	r3, #0
 80132ae:	4645      	mov	r5, r8
 80132b0:	e9cd 8e00 	strd	r8, lr, [sp]
 80132b4:	f8cd e008 	str.w	lr, [sp, #8]
 80132b8:	46f0      	mov	r8, lr
 80132ba:	9304      	str	r3, [sp, #16]
 80132bc:	461f      	mov	r7, r3
 80132be:	4618      	mov	r0, r3
 80132c0:	46ac      	mov	ip, r5
 80132c2:	46ae      	mov	lr, r5
 80132c4:	f81a 1030 	ldrb.w	r1, [sl, r0, lsl #3]
 80132c8:	00c3      	lsls	r3, r0, #3
 80132ca:	1c45      	adds	r5, r0, #1
 80132cc:	1c7e      	adds	r6, r7, #1
 80132ce:	eb0a 0203 	add.w	r2, sl, r3
 80132d2:	2900      	cmp	r1, #0
 80132d4:	f000 809e 	beq.w	8013414 <MEMS_runMagCal.constprop.18+0x25c>
 80132d8:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 80132dc:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 80132e0:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80132e4:	ee07 1a90 	vmov	s15, r1
 80132e8:	ee07 4a10 	vmov	s14, r4
 80132ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80132f0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80132f4:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80132f8:	b237      	sxth	r7, r6
 80132fa:	9e01      	ldr	r6, [sp, #4]
 80132fc:	458c      	cmp	ip, r1
 80132fe:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8013302:	ee67 7a84 	vmul.f32	s15, s15, s8
 8013306:	bfb8      	it	lt
 8013308:	468c      	movlt	ip, r1
 801330a:	428e      	cmp	r6, r1
 801330c:	bfa8      	it	ge
 801330e:	460e      	movge	r6, r1
 8013310:	ee66 6a83 	vmul.f32	s13, s13, s6
 8013314:	45a6      	cmp	lr, r4
 8013316:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801331a:	ee07 2a10 	vmov	s14, r2
 801331e:	9601      	str	r6, [sp, #4]
 8013320:	9e00      	ldr	r6, [sp, #0]
 8013322:	bfb8      	it	lt
 8013324:	46a6      	movlt	lr, r4
 8013326:	45a0      	cmp	r8, r4
 8013328:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801332c:	bfa8      	it	ge
 801332e:	46a0      	movge	r8, r4
 8013330:	4296      	cmp	r6, r2
 8013332:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013336:	bfb8      	it	lt
 8013338:	4616      	movlt	r6, r2
 801333a:	ee37 7a65 	vsub.f32	s14, s14, s11
 801333e:	9600      	str	r6, [sp, #0]
 8013340:	9e02      	ldr	r6, [sp, #8]
 8013342:	ee37 6a86 	vadd.f32	s12, s15, s12
 8013346:	4296      	cmp	r6, r2
 8013348:	ee67 7a05 	vmul.f32	s15, s14, s10
 801334c:	bfa8      	it	ge
 801334e:	4616      	movge	r6, r2
 8013350:	2803      	cmp	r0, #3
 8013352:	9602      	str	r6, [sp, #8]
 8013354:	eea7 6aa7 	vfma.f32	s12, s15, s15
 8013358:	dd5c      	ble.n	8013414 <MEMS_runMagCal.constprop.18+0x25c>
 801335a:	f1a3 0620 	sub.w	r6, r3, #32
 801335e:	4456      	add	r6, sl
 8013360:	f1a3 0008 	sub.w	r0, r3, #8
 8013364:	3b18      	subs	r3, #24
 8013366:	4453      	add	r3, sl
 8013368:	9303      	str	r3, [sp, #12]
 801336a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801336e:	4450      	add	r0, sl
 8013370:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8013374:	9b03      	ldr	r3, [sp, #12]
 8013376:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 801337a:	900a      	str	r0, [sp, #40]	; 0x28
 801337c:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 8013380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013382:	1ae4      	subs	r4, r4, r3
 8013384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013386:	1a1b      	subs	r3, r3, r0
 8013388:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 801338c:	9803      	ldr	r0, [sp, #12]
 801338e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8013392:	9309      	str	r3, [sp, #36]	; 0x24
 8013394:	9b08      	ldr	r3, [sp, #32]
 8013396:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 801339a:	9008      	str	r0, [sp, #32]
 801339c:	ee07 4a90 	vmov	s15, r4
 80133a0:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80133a4:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 80133a8:	9b03      	ldr	r3, [sp, #12]
 80133aa:	f9b6 6006 	ldrsh.w	r6, [r6, #6]
 80133ae:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80133b2:	9303      	str	r3, [sp, #12]
 80133b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133b6:	1ac9      	subs	r1, r1, r3
 80133b8:	9b08      	ldr	r3, [sp, #32]
 80133ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80133be:	1ae4      	subs	r4, r4, r3
 80133c0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80133c4:	eeb0 7ac7 	vabs.f32	s14, s14
 80133c8:	ee07 1a90 	vmov	s15, r1
 80133cc:	eefc 6ac7 	vcvt.u32.f32	s13, s14
 80133d0:	9b03      	ldr	r3, [sp, #12]
 80133d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80133d6:	eeb8 7a66 	vcvt.f32.u32	s14, s13
 80133da:	eef0 7ae7 	vabs.f32	s15, s15
 80133de:	1ac0      	subs	r0, r0, r3
 80133e0:	1b92      	subs	r2, r2, r6
 80133e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80133e6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80133ea:	ee07 2a90 	vmov	s15, r2
 80133ee:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80133f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80133f6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80133fa:	eef0 7ae7 	vabs.f32	s15, s15
 80133fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013402:	9b04      	ldr	r3, [sp, #16]
 8013404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013408:	ee17 2a90 	vmov	r2, s15
 801340c:	4293      	cmp	r3, r2
 801340e:	bf38      	it	cc
 8013410:	4613      	movcc	r3, r2
 8013412:	9304      	str	r3, [sp, #16]
 8013414:	b228      	sxth	r0, r5
 8013416:	4581      	cmp	r9, r0
 8013418:	f73f af54 	bgt.w	80132c4 <MEMS_runMagCal.constprop.18+0x10c>
 801341c:	4673      	mov	r3, lr
 801341e:	4665      	mov	r5, ip
 8013420:	46c6      	mov	lr, r8
 8013422:	4698      	mov	r8, r3
 8013424:	2f00      	cmp	r7, #0
 8013426:	f000 816a 	beq.w	80136fe <MEMS_runMagCal.constprop.18+0x546>
 801342a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801342e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013432:	ee87 7aa2 	vdiv.f32	s14, s15, s5
 8013436:	f280 814d 	bge.w	80136d4 <MEMS_runMagCal.constprop.18+0x51c>
 801343a:	f51e 4f80 	cmn.w	lr, #16384	; 0x4000
 801343e:	f2c0 8149 	blt.w	80136d4 <MEMS_runMagCal.constprop.18+0x51c>
 8013442:	f5bc 4f80 	cmp.w	ip, #16384	; 0x4000
 8013446:	f280 8145 	bge.w	80136d4 <MEMS_runMagCal.constprop.18+0x51c>
 801344a:	9b01      	ldr	r3, [sp, #4]
 801344c:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8013450:	f2c0 8140 	blt.w	80136d4 <MEMS_runMagCal.constprop.18+0x51c>
 8013454:	9900      	ldr	r1, [sp, #0]
 8013456:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 801345a:	f280 813b 	bge.w	80136d4 <MEMS_runMagCal.constprop.18+0x51c>
 801345e:	9802      	ldr	r0, [sp, #8]
 8013460:	f510 4f80 	cmn.w	r0, #16384	; 0x4000
 8013464:	f2c0 8136 	blt.w	80136d4 <MEMS_runMagCal.constprop.18+0x51c>
 8013468:	ee07 7a90 	vmov	s15, r7
 801346c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013470:	1aea      	subs	r2, r5, r3
 8013472:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8013476:	eba8 0e0e 	sub.w	lr, r8, lr
 801347a:	4596      	cmp	lr, r2
 801347c:	4673      	mov	r3, lr
 801347e:	eba1 0100 	sub.w	r1, r1, r0
 8013482:	bfb8      	it	lt
 8013484:	4613      	movlt	r3, r2
 8013486:	428b      	cmp	r3, r1
 8013488:	bfb8      	it	lt
 801348a:	460b      	movlt	r3, r1
 801348c:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8013638 <MEMS_runMagCal.constprop.18+0x480>
 8013490:	eeb1 6ae7 	vsqrt.f32	s12, s15
 8013494:	ee07 3a90 	vmov	s15, r3
 8013498:	ee67 6a26 	vmul.f32	s13, s14, s13
 801349c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80134a0:	ee26 6a22 	vmul.f32	s12, s12, s5
 80134a4:	eef4 6ae7 	vcmpe.f32	s13, s15
 80134a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134ac:	f100 8112 	bmi.w	80136d4 <MEMS_runMagCal.constprop.18+0x51c>
 80134b0:	eddd 6a04 	vldr	s13, [sp, #16]
 80134b4:	eddf 5a61 	vldr	s11, [pc, #388]	; 801363c <MEMS_runMagCal.constprop.18+0x484>
 80134b8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80134bc:	ee66 2aa2 	vmul.f32	s5, s13, s5
 80134c0:	eef4 2ae5 	vcmpe.f32	s5, s11
 80134c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134c8:	f300 8104 	bgt.w	80136d4 <MEMS_runMagCal.constprop.18+0x51c>
 80134cc:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80134d0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80134d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80134d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134dc:	f300 80df 	bgt.w	801369e <MEMS_runMagCal.constprop.18+0x4e6>
 80134e0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80134e4:	ee67 6a26 	vmul.f32	s13, s14, s13
 80134e8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80134ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134f0:	f340 85e5 	ble.w	80140be <MEMS_runMagCal.constprop.18+0xf06>
 80134f4:	ee07 ea90 	vmov	s15, lr
 80134f8:	ee37 7a07 	vadd.f32	s14, s14, s14
 80134fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013500:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013508:	f340 85d9 	ble.w	80140be <MEMS_runMagCal.constprop.18+0xf06>
 801350c:	ee07 2a90 	vmov	s15, r2
 8013510:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013514:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801351c:	f140 85cf 	bpl.w	80140be <MEMS_runMagCal.constprop.18+0xf06>
 8013520:	ee07 1a90 	vmov	s15, r1
 8013524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013528:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801352c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013530:	bf4c      	ite	mi
 8013532:	2301      	movmi	r3, #1
 8013534:	2300      	movpl	r3, #0
 8013536:	9300      	str	r3, [sp, #0]
 8013538:	f89b 6364 	ldrb.w	r6, [fp, #868]	; 0x364
 801353c:	f89b 7365 	ldrb.w	r7, [fp, #869]	; 0x365
 8013540:	f99b 2366 	ldrsb.w	r2, [fp, #870]	; 0x366
 8013544:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8013548:	283b      	cmp	r0, #59	; 0x3b
 801354a:	4633      	mov	r3, r6
 801354c:	4639      	mov	r1, r7
 801354e:	f340 80dd 	ble.w	801370c <MEMS_runMagCal.constprop.18+0x554>
 8013552:	f89b 00a4 	ldrb.w	r0, [fp, #164]	; 0xa4
 8013556:	2800      	cmp	r0, #0
 8013558:	f000 80d8 	beq.w	801370c <MEMS_runMagCal.constprop.18+0x554>
 801355c:	eddf 7a38 	vldr	s15, [pc, #224]	; 8013640 <MEMS_runMagCal.constprop.18+0x488>
 8013560:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8013564:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8013568:	eef0 7ae7 	vabs.f32	s15, s15
 801356c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013574:	f340 80ca 	ble.w	801370c <MEMS_runMagCal.constprop.18+0x554>
 8013578:	42be      	cmp	r6, r7
 801357a:	f001 86d0 	beq.w	801531e <MEMS_runMagCal.constprop.18+0x2166>
 801357e:	2000      	movs	r0, #0
 8013580:	9001      	str	r0, [sp, #4]
 8013582:	2e00      	cmp	r6, #0
 8013584:	f000 80c2 	beq.w	801370c <MEMS_runMagCal.constprop.18+0x554>
 8013588:	2500      	movs	r5, #0
 801358a:	46ae      	mov	lr, r5
 801358c:	46ac      	mov	ip, r5
 801358e:	46a8      	mov	r8, r5
 8013590:	4628      	mov	r0, r5
 8013592:	9c01      	ldr	r4, [sp, #4]
 8013594:	1904      	adds	r4, r0, r4
 8013596:	fb94 f0f7 	sdiv	r0, r4, r7
 801359a:	fb07 4010 	mls	r0, r7, r0, r4
 801359e:	eb0b 0040 	add.w	r0, fp, r0, lsl #1
 80135a2:	3501      	adds	r5, #1
 80135a4:	f8b0 4368 	ldrh.w	r4, [r0, #872]	; 0x368
 80135a8:	f241 205b 	movw	r0, #4699	; 0x125b
 80135ac:	4284      	cmp	r4, r0
 80135ae:	bf95      	itete	ls
 80135b0:	f5c4 5092 	rsbls	r0, r4, #4672	; 0x1240
 80135b4:	f5a4 5092 	subhi.w	r0, r4, #4672	; 0x1240
 80135b8:	301c      	addls	r0, #28
 80135ba:	381c      	subhi	r0, #28
 80135bc:	b280      	uxth	r0, r0
 80135be:	44a0      	add	r8, r4
 80135c0:	f640 34b8 	movw	r4, #3000	; 0xbb8
 80135c4:	42a0      	cmp	r0, r4
 80135c6:	bf98      	it	ls
 80135c8:	f10e 0e01 	addls.w	lr, lr, #1
 80135cc:	f10c 0001 	add.w	r0, ip, #1
 80135d0:	b22d      	sxth	r5, r5
 80135d2:	bf8c      	ite	hi
 80135d4:	fa5f fc80 	uxtbhi.w	ip, r0
 80135d8:	fa5f fe8e 	uxtbls.w	lr, lr
 80135dc:	42ae      	cmp	r6, r5
 80135de:	4628      	mov	r0, r5
 80135e0:	dcd7      	bgt.n	8013592 <MEMS_runMagCal.constprop.18+0x3da>
 80135e2:	fbb8 f0f6 	udiv	r0, r8, r6
 80135e6:	ee07 0a90 	vmov	s15, r0
 80135ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8013660 <MEMS_runMagCal.constprop.18+0x4a8>
 80135ee:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8013640 <MEMS_runMagCal.constprop.18+0x488>
 80135f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80135f6:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 80135fa:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80135fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013606:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801360a:	eeb0 7ac7 	vabs.f32	s14, s14
 801360e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013616:	d579      	bpl.n	801370c <MEMS_runMagCal.constprop.18+0x554>
 8013618:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801361c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8013644 <MEMS_runMagCal.constprop.18+0x48c>
 8013620:	eef0 7ae7 	vabs.f32	s15, s15
 8013624:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801362c:	dd6e      	ble.n	801370c <MEMS_runMagCal.constprop.18+0x554>
 801362e:	45f4      	cmp	ip, lr
 8013630:	d86c      	bhi.n	801370c <MEMS_runMagCal.constprop.18+0x554>
 8013632:	e01f      	b.n	8013674 <MEMS_runMagCal.constprop.18+0x4bc>
 8013634:	00000000 	.word	0x00000000
 8013638:	43020000 	.word	0x43020000
 801363c:	447a0000 	.word	0x447a0000
 8013640:	423c0000 	.word	0x423c0000
 8013644:	42700000 	.word	0x42700000
 8013648:	ffff8000 	.word	0xffff8000
 801364c:	43480000 	.word	0x43480000
 8013650:	42c80000 	.word	0x42c80000
 8013654:	477fff00 	.word	0x477fff00
 8013658:	3a83126f 	.word	0x3a83126f
 801365c:	00000000 	.word	0x00000000
 8013660:	3c23d70a 	.word	0x3c23d70a
 8013664:	c23c0000 	.word	0xc23c0000
 8013668:	3fd9999a 	.word	0x3fd9999a
 801366c:	40233334 	.word	0x40233334
 8013670:	427c0000 	.word	0x427c0000
 8013674:	2401      	movs	r4, #1
 8013676:	e04a      	b.n	801370e <MEMS_runMagCal.constprop.18+0x556>
 8013678:	b14d      	cbz	r5, 801368e <MEMS_runMagCal.constprop.18+0x4d6>
 801367a:	46a9      	mov	r9, r5
 801367c:	2700      	movs	r7, #0
 801367e:	e5b1      	b.n	80131e4 <MEMS_runMagCal.constprop.18+0x2c>
 8013680:	e9cb 333a 	strd	r3, r3, [fp, #232]	; 0xe8
 8013684:	e9cb 333c 	strd	r3, r3, [fp, #240]	; 0xf0
 8013688:	e9cb 333e 	strd	r3, r3, [fp, #248]	; 0xf8
 801368c:	e5fa      	b.n	8013284 <MEMS_runMagCal.constprop.18+0xcc>
 801368e:	f8ab 5008 	strh.w	r5, [fp, #8]
 8013692:	f20d 4db4 	addw	sp, sp, #1204	; 0x4b4
 8013696:	ecbd 8b0e 	vpop	{d8-d14}
 801369a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801369e:	f89b 30a4 	ldrb.w	r3, [fp, #164]	; 0xa4
 80136a2:	3b02      	subs	r3, #2
 80136a4:	2b01      	cmp	r3, #1
 80136a6:	d8f4      	bhi.n	8013692 <MEMS_runMagCal.constprop.18+0x4da>
 80136a8:	ed5f 7a18 	vldr	s15, [pc, #-96]	; 801364c <MEMS_runMagCal.constprop.18+0x494>
 80136ac:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80136b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136b4:	dded      	ble.n	8013692 <MEMS_runMagCal.constprop.18+0x4da>
 80136b6:	2300      	movs	r3, #0
 80136b8:	2101      	movs	r1, #1
 80136ba:	22ff      	movs	r2, #255	; 0xff
 80136bc:	9805      	ldr	r0, [sp, #20]
 80136be:	f8cb 0360 	str.w	r0, [fp, #864]	; 0x360
 80136c2:	f88b 10a4 	strb.w	r1, [fp, #164]	; 0xa4
 80136c6:	f88b 30e0 	strb.w	r3, [fp, #224]	; 0xe0
 80136ca:	f88b 3024 	strb.w	r3, [fp, #36]	; 0x24
 80136ce:	f88b 20e2 	strb.w	r2, [fp, #226]	; 0xe2
 80136d2:	e7de      	b.n	8013692 <MEMS_runMagCal.constprop.18+0x4da>
 80136d4:	f89b 30a4 	ldrb.w	r3, [fp, #164]	; 0xa4
 80136d8:	3b02      	subs	r3, #2
 80136da:	2b01      	cmp	r3, #1
 80136dc:	f240 84df 	bls.w	801409e <MEMS_runMagCal.constprop.18+0xee6>
 80136e0:	9905      	ldr	r1, [sp, #20]
 80136e2:	f8cb 1360 	str.w	r1, [fp, #864]	; 0x360
 80136e6:	2200      	movs	r2, #0
 80136e8:	23ff      	movs	r3, #255	; 0xff
 80136ea:	f88b 20e0 	strb.w	r2, [fp, #224]	; 0xe0
 80136ee:	f88b 30e2 	strb.w	r3, [fp, #226]	; 0xe2
 80136f2:	f20d 4db4 	addw	sp, sp, #1204	; 0x4b4
 80136f6:	ecbd 8b0e 	vpop	{d8-d14}
 80136fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136fe:	f89b 3364 	ldrb.w	r3, [fp, #868]	; 0x364
 8013702:	f99b 2366 	ldrsb.w	r2, [fp, #870]	; 0x366
 8013706:	f89b 1365 	ldrb.w	r1, [fp, #869]	; 0x365
 801370a:	9700      	str	r7, [sp, #0]
 801370c:	2400      	movs	r4, #0
 801370e:	ed1f 0a30 	vldr	s0, [pc, #-192]	; 8013650 <MEMS_runMagCal.constprop.18+0x498>
 8013712:	ed5f 7a30 	vldr	s15, [pc, #-192]	; 8013654 <MEMS_runMagCal.constprop.18+0x49c>
 8013716:	ee26 0a00 	vmul.f32	s0, s12, s0
 801371a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801371e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013722:	bf88      	it	hi
 8013724:	eeb0 0a67 	vmovhi.f32	s0, s15
 8013728:	2a00      	cmp	r2, #0
 801372a:	f2c0 8479 	blt.w	8014020 <MEMS_runMagCal.constprop.18+0xe68>
 801372e:	1c50      	adds	r0, r2, #1
 8013730:	fb90 f2f1 	sdiv	r2, r0, r1
 8013734:	fb01 0212 	mls	r2, r1, r2, r0
 8013738:	b252      	sxtb	r2, r2
 801373a:	4615      	mov	r5, r2
 801373c:	3301      	adds	r3, #1
 801373e:	4299      	cmp	r1, r3
 8013740:	bfa8      	it	ge
 8013742:	4619      	movge	r1, r3
 8013744:	f88b 1364 	strb.w	r1, [fp, #868]	; 0x364
 8013748:	f88b 2366 	strb.w	r2, [fp, #870]	; 0x366
 801374c:	f006 fd4e 	bl	801a1ec <roundf>
 8013750:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8013754:	eb0b 0545 	add.w	r5, fp, r5, lsl #1
 8013758:	ee10 3a10 	vmov	r3, s0
 801375c:	f8a5 3368 	strh.w	r3, [r5, #872]	; 0x368
 8013760:	2c00      	cmp	r4, #0
 8013762:	d1bd      	bne.n	80136e0 <MEMS_runMagCal.constprop.18+0x528>
 8013764:	f8db 5360 	ldr.w	r5, [fp, #864]	; 0x360
 8013768:	b12d      	cbz	r5, 8013776 <MEMS_runMagCal.constprop.18+0x5be>
 801376a:	9b05      	ldr	r3, [sp, #20]
 801376c:	1b5a      	subs	r2, r3, r5
 801376e:	f640 33b7 	movw	r3, #2999	; 0xbb7
 8013772:	429a      	cmp	r2, r3
 8013774:	d98d      	bls.n	8013692 <MEMS_runMagCal.constprop.18+0x4da>
 8013776:	eddd 7a05 	vldr	s15, [sp, #20]
 801377a:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 801377e:	ed5f 7a4a 	vldr	s15, [pc, #-296]	; 8013658 <MEMS_runMagCal.constprop.18+0x4a0>
 8013782:	ee2a aa27 	vmul.f32	s20, s20, s15
 8013786:	eeb0 0a4a 	vmov.f32	s0, s20
 801378a:	f006 fd2f 	bl	801a1ec <roundf>
 801378e:	f8db 30d8 	ldr.w	r3, [fp, #216]	; 0xd8
 8013792:	eef0 ba40 	vmov.f32	s23, s0
 8013796:	2b00      	cmp	r3, #0
 8013798:	f040 841e 	bne.w	8013fd8 <MEMS_runMagCal.constprop.18+0xe20>
 801379c:	f89b 80a4 	ldrb.w	r8, [fp, #164]	; 0xa4
 80137a0:	f89b 6364 	ldrb.w	r6, [fp, #868]	; 0x364
 80137a4:	f89b 1365 	ldrb.w	r1, [fp, #869]	; 0x365
 80137a8:	428e      	cmp	r6, r1
 80137aa:	f000 846e 	beq.w	801408a <MEMS_runMagCal.constprop.18+0xed2>
 80137ae:	2700      	movs	r7, #0
 80137b0:	ee07 6a90 	vmov	s15, r6
 80137b4:	b2b4      	uxth	r4, r6
 80137b6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80137ba:	ed1f 7a58 	vldr	s14, [pc, #-352]	; 801365c <MEMS_runMagCal.constprop.18+0x4a4>
 80137be:	2c00      	cmp	r4, #0
 80137c0:	f000 8111 	beq.w	80139e6 <MEMS_runMagCal.constprop.18+0x82e>
 80137c4:	2200      	movs	r2, #0
 80137c6:	9501      	str	r5, [sp, #4]
 80137c8:	eef0 6a47 	vmov.f32	s13, s14
 80137cc:	f241 205c 	movw	r0, #4700	; 0x125c
 80137d0:	f640 3cb8 	movw	ip, #3000	; 0xbb8
 80137d4:	4615      	mov	r5, r2
 80137d6:	eb07 0e02 	add.w	lr, r7, r2
 80137da:	fb9e f3f1 	sdiv	r3, lr, r1
 80137de:	fb01 e313 	mls	r3, r1, r3, lr
 80137e2:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 80137e6:	3201      	adds	r2, #1
 80137e8:	f8b3 3368 	ldrh.w	r3, [r3, #872]	; 0x368
 80137ec:	ee07 3a90 	vmov	s15, r3
 80137f0:	f5a3 5e92 	sub.w	lr, r3, #4672	; 0x1240
 80137f4:	4283      	cmp	r3, r0
 80137f6:	bf98      	it	ls
 80137f8:	1ac3      	subls	r3, r0, r3
 80137fa:	f1ae 0e1c 	sub.w	lr, lr, #28
 80137fe:	bf88      	it	hi
 8013800:	fa1f f38e 	uxthhi.w	r3, lr
 8013804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013808:	bf98      	it	ls
 801380a:	b29b      	uxthls	r3, r3
 801380c:	fb03 fe03 	mul.w	lr, r3, r3
 8013810:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013814:	ee07 ea90 	vmov	s15, lr
 8013818:	4563      	cmp	r3, ip
 801381a:	bf88      	it	hi
 801381c:	1c6b      	addhi	r3, r5, #1
 801381e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013822:	fa1f fe82 	uxth.w	lr, r2
 8013826:	bf88      	it	hi
 8013828:	b2dd      	uxtbhi	r5, r3
 801382a:	4574      	cmp	r4, lr
 801382c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8013830:	d8d1      	bhi.n	80137d6 <MEMS_runMagCal.constprop.18+0x61e>
 8013832:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8013836:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801383a:	2e3b      	cmp	r6, #59	; 0x3b
 801383c:	9505      	str	r5, [sp, #20]
 801383e:	9d01      	ldr	r5, [sp, #4]
 8013840:	ed5f 6a79 	vldr	s13, [pc, #-484]	; 8013660 <MEMS_runMagCal.constprop.18+0x4a8>
 8013844:	eeb1 bae7 	vsqrt.f32	s22, s15
 8013848:	ee2b ba26 	vmul.f32	s22, s22, s13
 801384c:	f340 80d2 	ble.w	80139f4 <MEMS_runMagCal.constprop.18+0x83c>
 8013850:	f1b8 0f00 	cmp.w	r8, #0
 8013854:	d038      	beq.n	80138c8 <MEMS_runMagCal.constprop.18+0x710>
 8013856:	eec7 5a06 	vdiv.f32	s11, s14, s12
 801385a:	ed5f 7a7e 	vldr	s15, [pc, #-504]	; 8013664 <MEMS_runMagCal.constprop.18+0x4ac>
 801385e:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8013862:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8013866:	eef0 7ae7 	vabs.f32	s15, s15
 801386a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801386e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013872:	f101 8543 	bmi.w	80152fc <MEMS_runMagCal.constprop.18+0x2144>
 8013876:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 801387a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801387e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013882:	d507      	bpl.n	8013894 <MEMS_runMagCal.constprop.18+0x6dc>
 8013884:	ed1f 7a88 	vldr	s14, [pc, #-544]	; 8013668 <MEMS_runMagCal.constprop.18+0x4b0>
 8013888:	eeb4 bac7 	vcmpe.f32	s22, s14
 801388c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013890:	f101 8534 	bmi.w	80152fc <MEMS_runMagCal.constprop.18+0x2144>
 8013894:	eeb1 7a05 	vmov.f32	s14, #21	; 0x40a80000  5.250
 8013898:	eef4 7ac7 	vcmpe.f32	s15, s14
 801389c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138a0:	f101 8538 	bmi.w	8015314 <MEMS_runMagCal.constprop.18+0x215c>
 80138a4:	eeb2 7a05 	vmov.f32	s14, #37	; 0x41280000  10.5
 80138a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80138ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138b0:	d507      	bpl.n	80138c2 <MEMS_runMagCal.constprop.18+0x70a>
 80138b2:	ed5f 7a92 	vldr	s15, [pc, #-584]	; 801366c <MEMS_runMagCal.constprop.18+0x4b4>
 80138b6:	eeb4 bae7 	vcmpe.f32	s22, s15
 80138ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138be:	f101 8529 	bmi.w	8015314 <MEMS_runMagCal.constprop.18+0x215c>
 80138c2:	2301      	movs	r3, #1
 80138c4:	f88b 30a4 	strb.w	r3, [fp, #164]	; 0xa4
 80138c8:	ed9b 8a01 	vldr	s16, [fp, #4]
 80138cc:	ed5f 7a98 	vldr	s15, [pc, #-608]	; 8013670 <MEMS_runMagCal.constprop.18+0x4b8>
 80138d0:	f8db 30e4 	ldr.w	r3, [fp, #228]	; 0xe4
 80138d4:	f9bb 6002 	ldrsh.w	r6, [fp, #2]
 80138d8:	f89b 50e0 	ldrb.w	r5, [fp, #224]	; 0xe0
 80138dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80138e0:	eec7 8a08 	vdiv.f32	s17, s14, s16
 80138e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80138e8:	f503 42ab 	add.w	r2, r3, #21888	; 0x5580
 80138ec:	fb01 0606 	mla	r6, r1, r6, r0
 80138f0:	3270      	adds	r2, #112	; 0x70
 80138f2:	42b2      	cmp	r2, r6
 80138f4:	eeb1 9a00 	vmov.f32	s18, #16	; 0x40800000  4.0
 80138f8:	ee28 9a89 	vmul.f32	s18, s17, s18
 80138fc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8013900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013904:	ee17 1a90 	vmov	r1, s15
 8013908:	b289      	uxth	r1, r1
 801390a:	4688      	mov	r8, r1
 801390c:	d254      	bcs.n	80139b8 <MEMS_runMagCal.constprop.18+0x800>
 801390e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8013912:	4296      	cmp	r6, r2
 8013914:	f89b 40e1 	ldrb.w	r4, [fp, #225]	; 0xe1
 8013918:	f99b 20e2 	ldrsb.w	r2, [fp, #226]	; 0xe2
 801391c:	bf1a      	itte	ne
 801391e:	f5a6 469c 	subne.w	r6, r6, #19968	; 0x4e00
 8013922:	3e20      	subne	r6, #32
 8013924:	2600      	moveq	r6, #0
 8013926:	42ac      	cmp	r4, r5
 8013928:	f102 0201 	add.w	r2, r2, #1
 801392c:	f000 839d 	beq.w	801406a <MEMS_runMagCal.constprop.18+0xeb2>
 8013930:	1b52      	subs	r2, r2, r5
 8013932:	fb92 f1f4 	sdiv	r1, r2, r4
 8013936:	fb04 2211 	mls	r2, r4, r1, r2
 801393a:	2a00      	cmp	r2, #0
 801393c:	b217      	sxth	r7, r2
 801393e:	bfbc      	itt	lt
 8013940:	1912      	addlt	r2, r2, r4
 8013942:	b217      	sxthlt	r7, r2
 8013944:	fa0f fc85 	sxth.w	ip, r5
 8013948:	f1bc 0f00 	cmp.w	ip, #0
 801394c:	d031      	beq.n	80139b2 <MEMS_runMagCal.constprop.18+0x7fa>
 801394e:	1b9b      	subs	r3, r3, r6
 8013950:	2100      	movs	r1, #0
 8013952:	b298      	uxth	r0, r3
 8013954:	468e      	mov	lr, r1
 8013956:	e005      	b.n	8013964 <MEMS_runMagCal.constprop.18+0x7ac>
 8013958:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 801395c:	3101      	adds	r1, #1
 801395e:	b20b      	sxth	r3, r1
 8013960:	459c      	cmp	ip, r3
 8013962:	dd1a      	ble.n	801399a <MEMS_runMagCal.constprop.18+0x7e2>
 8013964:	187a      	adds	r2, r7, r1
 8013966:	fb92 f3f4 	sdiv	r3, r2, r4
 801396a:	fb04 2313 	mls	r3, r4, r3, r2
 801396e:	b2db      	uxtb	r3, r3
 8013970:	3304      	adds	r3, #4
 8013972:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013976:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	; 0xe0
 801397a:	4402      	add	r2, r0
 801397c:	b212      	sxth	r2, r2
 801397e:	2a00      	cmp	r2, #0
 8013980:	daea      	bge.n	8013958 <MEMS_runMagCal.constprop.18+0x7a0>
 8013982:	f105 3eff 	add.w	lr, r5, #4294967295
 8013986:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 801398a:	2d00      	cmp	r5, #0
 801398c:	f000 837a 	beq.w	8014084 <MEMS_runMagCal.constprop.18+0xecc>
 8013990:	fa5f f58e 	uxtb.w	r5, lr
 8013994:	f04f 0e01 	mov.w	lr, #1
 8013998:	e7e0      	b.n	801395c <MEMS_runMagCal.constprop.18+0x7a4>
 801399a:	f88b 50e0 	strb.w	r5, [fp, #224]	; 0xe0
 801399e:	f1be 0f00 	cmp.w	lr, #0
 80139a2:	d006      	beq.n	80139b2 <MEMS_runMagCal.constprop.18+0x7fa>
 80139a4:	eeb0 0a49 	vmov.f32	s0, s18
 80139a8:	4640      	mov	r0, r8
 80139aa:	f7fe f8bd 	bl	8011b28 <MEMS_updateMagBufferIndex.constprop.22>
 80139ae:	f89b 50e0 	ldrb.w	r5, [fp, #224]	; 0xe0
 80139b2:	f8cb 60e4 	str.w	r6, [fp, #228]	; 0xe4
 80139b6:	4633      	mov	r3, r6
 80139b8:	2d00      	cmp	r5, #0
 80139ba:	d04d      	beq.n	8013a58 <MEMS_runMagCal.constprop.18+0x8a0>
 80139bc:	f99b 20e2 	ldrsb.w	r2, [fp, #226]	; 0xe2
 80139c0:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 80139c4:	f9b2 2100 	ldrsh.w	r2, [r2, #256]	; 0x100
 80139c8:	f502 529c 	add.w	r2, r2, #4992	; 0x1380
 80139cc:	3208      	adds	r2, #8
 80139ce:	4413      	add	r3, r2
 80139d0:	9a06      	ldr	r2, [sp, #24]
 80139d2:	4293      	cmp	r3, r2
 80139d4:	d334      	bcc.n	8013a40 <MEMS_runMagCal.constprop.18+0x888>
 80139d6:	9b00      	ldr	r3, [sp, #0]
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d140      	bne.n	8013a5e <MEMS_runMagCal.constprop.18+0x8a6>
 80139dc:	2d0a      	cmp	r5, #10
 80139de:	d83e      	bhi.n	8013a5e <MEMS_runMagCal.constprop.18+0x8a6>
 80139e0:	2300      	movs	r3, #0
 80139e2:	9304      	str	r3, [sp, #16]
 80139e4:	e122      	b.n	8013c2c <MEMS_runMagCal.constprop.18+0xa74>
 80139e6:	eeb1 bac7 	vsqrt.f32	s22, s14
 80139ea:	9405      	str	r4, [sp, #20]
 80139ec:	eddf 7ac7 	vldr	s15, [pc, #796]	; 8013d0c <MEMS_runMagCal.constprop.18+0xb54>
 80139f0:	ee2b ba27 	vmul.f32	s22, s22, s15
 80139f4:	f1b8 0f03 	cmp.w	r8, #3
 80139f8:	f47f af66 	bne.w	80138c8 <MEMS_runMagCal.constprop.18+0x710>
 80139fc:	f8db 30a0 	ldr.w	r3, [fp, #160]	; 0xa0
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	f43f af61 	beq.w	80138c8 <MEMS_runMagCal.constprop.18+0x710>
 8013a06:	ee07 3a90 	vmov	s15, r3
 8013a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013a0e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8013a12:	ee7a 6a67 	vsub.f32	s13, s20, s15
 8013a16:	eef4 6ac7 	vcmpe.f32	s13, s14
 8013a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a1e:	f77f af53 	ble.w	80138c8 <MEMS_runMagCal.constprop.18+0x710>
 8013a22:	ee07 5a10 	vmov	s14, r5
 8013a26:	eddf 6aba 	vldr	s13, [pc, #744]	; 8013d10 <MEMS_runMagCal.constprop.18+0xb58>
 8013a2a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013a2e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013a32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a3a:	f73f ae2a 	bgt.w	8013692 <MEMS_runMagCal.constprop.18+0x4da>
 8013a3e:	e743      	b.n	80138c8 <MEMS_runMagCal.constprop.18+0x710>
 8013a40:	2300      	movs	r3, #0
 8013a42:	e9cb 333a 	strd	r3, r3, [fp, #232]	; 0xe8
 8013a46:	e9cb 333c 	strd	r3, r3, [fp, #240]	; 0xf0
 8013a4a:	e9cb 333e 	strd	r3, r3, [fp, #248]	; 0xf8
 8013a4e:	22ff      	movs	r2, #255	; 0xff
 8013a50:	f88b 30e0 	strb.w	r3, [fp, #224]	; 0xe0
 8013a54:	f88b 20e2 	strb.w	r2, [fp, #226]	; 0xe2
 8013a58:	9b00      	ldr	r3, [sp, #0]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d0c0      	beq.n	80139e0 <MEMS_runMagCal.constprop.18+0x828>
 8013a5e:	ee69 aa09 	vmul.f32	s21, s18, s18
 8013a62:	eddf 6aac 	vldr	s13, [pc, #688]	; 8013d14 <MEMS_runMagCal.constprop.18+0xb5c>
 8013a66:	f8cd 9000 	str.w	r9, [sp]
 8013a6a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013a6e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8013a72:	eef7 9a08 	vmov.f32	s19, #120	; 0x3fc00000  1.5
 8013a76:	2300      	movs	r3, #0
 8013a78:	ee6a aaa6 	vmul.f32	s21, s21, s13
 8013a7c:	ee68 8a87 	vmul.f32	s17, s17, s14
 8013a80:	ee28 8a27 	vmul.f32	s16, s16, s15
 8013a84:	ee69 9a29 	vmul.f32	s19, s18, s19
 8013a88:	461c      	mov	r4, r3
 8013a8a:	9304      	str	r3, [sp, #16]
 8013a8c:	f81a 1034 	ldrb.w	r1, [sl, r4, lsl #3]
 8013a90:	eb0a 02c4 	add.w	r2, sl, r4, lsl #3
 8013a94:	b2a4      	uxth	r4, r4
 8013a96:	2900      	cmp	r1, #0
 8013a98:	f000 80c1 	beq.w	8013c1e <MEMS_runMagCal.constprop.18+0xa66>
 8013a9c:	f9b2 5002 	ldrsh.w	r5, [r2, #2]
 8013aa0:	f9b2 6004 	ldrsh.w	r6, [r2, #4]
 8013aa4:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8013aa8:	ee07 5a90 	vmov	s15, r5
 8013aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ab0:	eef0 7ae7 	vabs.f32	s15, s15
 8013ab4:	eef4 7ae8 	vcmpe.f32	s15, s17
 8013ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013abc:	d516      	bpl.n	8013aec <MEMS_runMagCal.constprop.18+0x934>
 8013abe:	ee07 6a90 	vmov	s15, r6
 8013ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ac6:	eef0 7ae7 	vabs.f32	s15, s15
 8013aca:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ad2:	dd0b      	ble.n	8013aec <MEMS_runMagCal.constprop.18+0x934>
 8013ad4:	ee07 7a90 	vmov	s15, r7
 8013ad8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013adc:	eef0 7ae7 	vabs.f32	s15, s15
 8013ae0:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ae8:	f300 8099 	bgt.w	8013c1e <MEMS_runMagCal.constprop.18+0xa66>
 8013aec:	f89b 90e0 	ldrb.w	r9, [fp, #224]	; 0xe0
 8013af0:	f1b9 0f00 	cmp.w	r9, #0
 8013af4:	f000 81c6 	beq.w	8013e84 <MEMS_runMagCal.constprop.18+0xccc>
 8013af8:	f9bb 135a 	ldrsh.w	r1, [fp, #858]	; 0x35a
 8013afc:	f9bb 2358 	ldrsh.w	r2, [fp, #856]	; 0x358
 8013b00:	f9bb 335c 	ldrsh.w	r3, [fp, #860]	; 0x35c
 8013b04:	1b89      	subs	r1, r1, r6
 8013b06:	fb01 f101 	mul.w	r1, r1, r1
 8013b0a:	1b52      	subs	r2, r2, r5
 8013b0c:	fb02 1202 	mla	r2, r2, r2, r1
 8013b10:	1bdb      	subs	r3, r3, r7
 8013b12:	fb03 2303 	mla	r3, r3, r3, r2
 8013b16:	ee07 3a90 	vmov	s15, r3
 8013b1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b1e:	eef4 aae7 	vcmpe.f32	s21, s15
 8013b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b26:	dc7a      	bgt.n	8013c1e <MEMS_runMagCal.constprop.18+0xa66>
 8013b28:	fb95 f3f8 	sdiv	r3, r5, r8
 8013b2c:	fb08 5313 	mls	r3, r8, r3, r5
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	bfb8      	it	lt
 8013b34:	4443      	addlt	r3, r8
 8013b36:	b21b      	sxth	r3, r3
 8013b38:	ee07 3a90 	vmov	s15, r3
 8013b3c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013b40:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013b44:	f006 fb52 	bl	801a1ec <roundf>
 8013b48:	fb96 f3f8 	sdiv	r3, r6, r8
 8013b4c:	fb08 6313 	mls	r3, r8, r3, r6
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013b56:	bfb8      	it	lt
 8013b58:	4443      	addlt	r3, r8
 8013b5a:	b21b      	sxth	r3, r3
 8013b5c:	edcd 7a01 	vstr	s15, [sp, #4]
 8013b60:	ee07 3a90 	vmov	s15, r3
 8013b64:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013b68:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013b6c:	9201      	str	r2, [sp, #4]
 8013b6e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013b72:	f006 fb3b 	bl	801a1ec <roundf>
 8013b76:	fb97 f3f8 	sdiv	r3, r7, r8
 8013b7a:	fb08 7313 	mls	r3, r8, r3, r7
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013b84:	bfb8      	it	lt
 8013b86:	4443      	addlt	r3, r8
 8013b88:	b21b      	sxth	r3, r3
 8013b8a:	edcd 7a02 	vstr	s15, [sp, #8]
 8013b8e:	ee07 3a90 	vmov	s15, r3
 8013b92:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013b96:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8013b9a:	9202      	str	r2, [sp, #8]
 8013b9c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013ba0:	f006 fb24 	bl	801a1ec <roundf>
 8013ba4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013ba8:	e9db 233a 	ldrd	r2, r3, [fp, #232]	; 0xe8
 8013bac:	edcd 7a03 	vstr	s15, [sp, #12]
 8013bb0:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8013bb4:	9103      	str	r1, [sp, #12]
 8013bb6:	9901      	ldr	r1, [sp, #4]
 8013bb8:	291f      	cmp	r1, #31
 8013bba:	f240 8205 	bls.w	8013fc8 <MEMS_runMagCal.constprop.18+0xe10>
 8013bbe:	f1a1 0320 	sub.w	r3, r1, #32
 8013bc2:	2101      	movs	r1, #1
 8013bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8013bc8:	4213      	tst	r3, r2
 8013bca:	bf08      	it	eq
 8013bcc:	2100      	moveq	r1, #0
 8013bce:	9802      	ldr	r0, [sp, #8]
 8013bd0:	281f      	cmp	r0, #31
 8013bd2:	f081 0c01 	eor.w	ip, r1, #1
 8013bd6:	e9db 233c 	ldrd	r2, r3, [fp, #240]	; 0xf0
 8013bda:	f240 81ec 	bls.w	8013fb6 <MEMS_runMagCal.constprop.18+0xdfe>
 8013bde:	f1a0 0320 	sub.w	r3, r0, #32
 8013be2:	2001      	movs	r0, #1
 8013be4:	fa00 f303 	lsl.w	r3, r0, r3
 8013be8:	4213      	tst	r3, r2
 8013bea:	bf14      	ite	ne
 8013bec:	4603      	movne	r3, r0
 8013bee:	2300      	moveq	r3, #0
 8013bf0:	9a03      	ldr	r2, [sp, #12]
 8013bf2:	2a1f      	cmp	r2, #31
 8013bf4:	f083 0001 	eor.w	r0, r3, #1
 8013bf8:	f240 8094 	bls.w	8013d24 <MEMS_runMagCal.constprop.18+0xb6c>
 8013bfc:	f1a2 0e20 	sub.w	lr, r2, #32
 8013c00:	f8db 20fc 	ldr.w	r2, [fp, #252]	; 0xfc
 8013c04:	9207      	str	r2, [sp, #28]
 8013c06:	2201      	movs	r2, #1
 8013c08:	fa02 fe0e 	lsl.w	lr, r2, lr
 8013c0c:	9a07      	ldr	r2, [sp, #28]
 8013c0e:	ea1e 0f02 	tst.w	lr, r2
 8013c12:	f000 8094 	beq.w	8013d3e <MEMS_runMagCal.constprop.18+0xb86>
 8013c16:	ea5c 0300 	orrs.w	r3, ip, r0
 8013c1a:	f040 80e6 	bne.w	8013dea <MEMS_runMagCal.constprop.18+0xc32>
 8013c1e:	3401      	adds	r4, #1
 8013c20:	9a00      	ldr	r2, [sp, #0]
 8013c22:	b224      	sxth	r4, r4
 8013c24:	42a2      	cmp	r2, r4
 8013c26:	4623      	mov	r3, r4
 8013c28:	f73f af30 	bgt.w	8013a8c <MEMS_runMagCal.constprop.18+0x8d4>
 8013c2c:	f89b 30dc 	ldrb.w	r3, [fp, #220]	; 0xdc
 8013c30:	9a04      	ldr	r2, [sp, #16]
 8013c32:	431a      	orrs	r2, r3
 8013c34:	f88b 20dc 	strb.w	r2, [fp, #220]	; 0xdc
 8013c38:	2a00      	cmp	r2, #0
 8013c3a:	f43f ad2a 	beq.w	8013692 <MEMS_runMagCal.constprop.18+0x4da>
 8013c3e:	f89b 30e0 	ldrb.w	r3, [fp, #224]	; 0xe0
 8013c42:	9303      	str	r3, [sp, #12]
 8013c44:	2b18      	cmp	r3, #24
 8013c46:	f67f ad24 	bls.w	8013692 <MEMS_runMagCal.constprop.18+0x4da>
 8013c4a:	f8db 30a0 	ldr.w	r3, [fp, #160]	; 0xa0
 8013c4e:	b16b      	cbz	r3, 8013c6c <MEMS_runMagCal.constprop.18+0xab4>
 8013c50:	ee07 3a90 	vmov	s15, r3
 8013c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c58:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8013c5c:	ee3a aa67 	vsub.f32	s20, s20, s15
 8013c60:	eeb4 aac7 	vcmpe.f32	s20, s14
 8013c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c68:	f53f ad13 	bmi.w	8013692 <MEMS_runMagCal.constprop.18+0x4da>
 8013c6c:	f8db 30f4 	ldr.w	r3, [fp, #244]	; 0xf4
 8013c70:	9300      	str	r3, [sp, #0]
 8013c72:	f8db 30f8 	ldr.w	r3, [fp, #248]	; 0xf8
 8013c76:	9302      	str	r3, [sp, #8]
 8013c78:	2200      	movs	r2, #0
 8013c7a:	f8db 30fc 	ldr.w	r3, [fp, #252]	; 0xfc
 8013c7e:	9301      	str	r3, [sp, #4]
 8013c80:	4611      	mov	r1, r2
 8013c82:	eddb 8a01 	vldr	s17, [fp, #4]
 8013c86:	f8db e0f0 	ldr.w	lr, [fp, #240]	; 0xf0
 8013c8a:	9219      	str	r2, [sp, #100]	; 0x64
 8013c8c:	e9db 893a 	ldrd	r8, r9, [fp, #232]	; 0xe8
 8013c90:	4610      	mov	r0, r2
 8013c92:	4613      	mov	r3, r2
 8013c94:	4615      	mov	r5, r2
 8013c96:	e9cd 221a 	strd	r2, r2, [sp, #104]	; 0x68
 8013c9a:	e9cd 221c 	strd	r2, r2, [sp, #112]	; 0x70
 8013c9e:	921e      	str	r2, [sp, #120]	; 0x78
 8013ca0:	f04f 0c01 	mov.w	ip, #1
 8013ca4:	e012      	b.n	8013ccc <MEMS_runMagCal.constprop.18+0xb14>
 8013ca6:	9c01      	ldr	r4, [sp, #4]
 8013ca8:	2f00      	cmp	r7, #0
 8013caa:	bf18      	it	ne
 8013cac:	3501      	addne	r5, #1
 8013cae:	2e00      	cmp	r6, #0
 8013cb0:	bf18      	it	ne
 8013cb2:	3301      	addne	r3, #1
 8013cb4:	4214      	tst	r4, r2
 8013cb6:	b2ed      	uxtb	r5, r5
 8013cb8:	b2db      	uxtb	r3, r3
 8013cba:	bf14      	ite	ne
 8013cbc:	2201      	movne	r2, #1
 8013cbe:	2200      	moveq	r2, #0
 8013cc0:	3101      	adds	r1, #1
 8013cc2:	4410      	add	r0, r2
 8013cc4:	2940      	cmp	r1, #64	; 0x40
 8013cc6:	b2c0      	uxtb	r0, r0
 8013cc8:	f000 8213 	beq.w	80140f2 <MEMS_runMagCal.constprop.18+0xf3a>
 8013ccc:	f1a1 0220 	sub.w	r2, r1, #32
 8013cd0:	fa0c f202 	lsl.w	r2, ip, r2
 8013cd4:	291f      	cmp	r1, #31
 8013cd6:	fa0c f401 	lsl.w	r4, ip, r1
 8013cda:	ea08 0702 	and.w	r7, r8, r2
 8013cde:	ea0e 0602 	and.w	r6, lr, r2
 8013ce2:	d8e0      	bhi.n	8013ca6 <MEMS_runMagCal.constprop.18+0xaee>
 8013ce4:	9a00      	ldr	r2, [sp, #0]
 8013ce6:	ea19 0f04 	tst.w	r9, r4
 8013cea:	bf18      	it	ne
 8013cec:	3501      	addne	r5, #1
 8013cee:	ea02 0204 	and.w	r2, r2, r4
 8013cf2:	bf18      	it	ne
 8013cf4:	b2ed      	uxtbne	r5, r5
 8013cf6:	2a00      	cmp	r2, #0
 8013cf8:	bf18      	it	ne
 8013cfa:	3301      	addne	r3, #1
 8013cfc:	9a02      	ldr	r2, [sp, #8]
 8013cfe:	4222      	tst	r2, r4
 8013d00:	b2db      	uxtb	r3, r3
 8013d02:	bf14      	ite	ne
 8013d04:	2201      	movne	r2, #1
 8013d06:	2200      	moveq	r2, #0
 8013d08:	e7da      	b.n	8013cc0 <MEMS_runMagCal.constprop.18+0xb08>
 8013d0a:	bf00      	nop
 8013d0c:	3c23d70a 	.word	0x3c23d70a
 8013d10:	3a83126f 	.word	0x3a83126f
 8013d14:	3f666666 	.word	0x3f666666
 8013d18:	4952f000 	.word	0x4952f000
 8013d1c:	4828c000 	.word	0x4828c000
 8013d20:	43480000 	.word	0x43480000
 8013d24:	f8db 20f8 	ldr.w	r2, [fp, #248]	; 0xf8
 8013d28:	9207      	str	r2, [sp, #28]
 8013d2a:	9a03      	ldr	r2, [sp, #12]
 8013d2c:	f04f 0e01 	mov.w	lr, #1
 8013d30:	fa0e fe02 	lsl.w	lr, lr, r2
 8013d34:	9a07      	ldr	r2, [sp, #28]
 8013d36:	ea1e 0f02 	tst.w	lr, r2
 8013d3a:	f47f af6c 	bne.w	8013c16 <MEMS_runMagCal.constprop.18+0xa5e>
 8013d3e:	f99b 20e2 	ldrsb.w	r2, [fp, #226]	; 0xe2
 8013d42:	f89b c0e1 	ldrb.w	ip, [fp, #225]	; 0xe1
 8013d46:	3201      	adds	r2, #1
 8013d48:	9207      	str	r2, [sp, #28]
 8013d4a:	2900      	cmp	r1, #0
 8013d4c:	d153      	bne.n	8013df6 <MEMS_runMagCal.constprop.18+0xc3e>
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d151      	bne.n	8013df6 <MEMS_runMagCal.constprop.18+0xc3e>
 8013d52:	fb92 f3fc 	sdiv	r3, r2, ip
 8013d56:	9806      	ldr	r0, [sp, #24]
 8013d58:	f8bb e002 	ldrh.w	lr, [fp, #2]
 8013d5c:	f8ab 5358 	strh.w	r5, [fp, #856]	; 0x358
 8013d60:	fb0c 2213 	mls	r2, ip, r3, r2
 8013d64:	f8db 30e4 	ldr.w	r3, [fp, #228]	; 0xe4
 8013d68:	f8ab 635a 	strh.w	r6, [fp, #858]	; 0x35a
 8013d6c:	b251      	sxtb	r1, r2
 8013d6e:	f109 0201 	add.w	r2, r9, #1
 8013d72:	4562      	cmp	r2, ip
 8013d74:	eba0 0303 	sub.w	r3, r0, r3
 8013d78:	bfa8      	it	ge
 8013d7a:	4662      	movge	r2, ip
 8013d7c:	fb1e 3004 	smlabb	r0, lr, r4, r3
 8013d80:	1d0b      	adds	r3, r1, #4
 8013d82:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013d86:	b2d2      	uxtb	r2, r2
 8013d88:	4562      	cmp	r2, ip
 8013d8a:	f88b 20e0 	strb.w	r2, [fp, #224]	; 0xe0
 8013d8e:	f8ab 735c 	strh.w	r7, [fp, #860]	; 0x35c
 8013d92:	f88b 10e2 	strb.w	r1, [fp, #226]	; 0xe2
 8013d96:	f8a3 50e2 	strh.w	r5, [r3, #226]	; 0xe2
 8013d9a:	f8a3 60e4 	strh.w	r6, [r3, #228]	; 0xe4
 8013d9e:	f8a3 70e6 	strh.w	r7, [r3, #230]	; 0xe6
 8013da2:	f8a3 00e0 	strh.w	r0, [r3, #224]	; 0xe0
 8013da6:	f001 82ae 	beq.w	8015306 <MEMS_runMagCal.constprop.18+0x214e>
 8013daa:	9b01      	ldr	r3, [sp, #4]
 8013dac:	2b1f      	cmp	r3, #31
 8013dae:	f240 8195 	bls.w	80140dc <MEMS_runMagCal.constprop.18+0xf24>
 8013db2:	f8db 20e8 	ldr.w	r2, [fp, #232]	; 0xe8
 8013db6:	3b20      	subs	r3, #32
 8013db8:	2101      	movs	r1, #1
 8013dba:	fa01 f303 	lsl.w	r3, r1, r3
 8013dbe:	ea23 0302 	bic.w	r3, r3, r2
 8013dc2:	4053      	eors	r3, r2
 8013dc4:	f8cb 30e8 	str.w	r3, [fp, #232]	; 0xe8
 8013dc8:	9b02      	ldr	r3, [sp, #8]
 8013dca:	2b1f      	cmp	r3, #31
 8013dcc:	f240 817b 	bls.w	80140c6 <MEMS_runMagCal.constprop.18+0xf0e>
 8013dd0:	f8db 20f0 	ldr.w	r2, [fp, #240]	; 0xf0
 8013dd4:	3b20      	subs	r3, #32
 8013dd6:	2101      	movs	r1, #1
 8013dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8013ddc:	ea23 0302 	bic.w	r3, r3, r2
 8013de0:	4053      	eors	r3, r2
 8013de2:	f8cb 30f0 	str.w	r3, [fp, #240]	; 0xf0
 8013de6:	9b03      	ldr	r3, [sp, #12]
 8013de8:	e0ca      	b.n	8013f80 <MEMS_runMagCal.constprop.18+0xdc8>
 8013dea:	f99b 20e2 	ldrsb.w	r2, [fp, #226]	; 0xe2
 8013dee:	f89b c0e1 	ldrb.w	ip, [fp, #225]	; 0xe1
 8013df2:	1c53      	adds	r3, r2, #1
 8013df4:	9307      	str	r3, [sp, #28]
 8013df6:	45e1      	cmp	r9, ip
 8013df8:	9b07      	ldr	r3, [sp, #28]
 8013dfa:	f000 813c 	beq.w	8014076 <MEMS_runMagCal.constprop.18+0xebe>
 8013dfe:	eba3 0209 	sub.w	r2, r3, r9
 8013e02:	fb92 f3fc 	sdiv	r3, r2, ip
 8013e06:	fb0c 2313 	mls	r3, ip, r3, r2
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	fa0f fe83 	sxth.w	lr, r3
 8013e10:	bfbc      	itt	lt
 8013e12:	4463      	addlt	r3, ip
 8013e14:	fa0f fe83 	sxthlt.w	lr, r3
 8013e18:	2200      	movs	r2, #0
 8013e1a:	eb0e 0102 	add.w	r1, lr, r2
 8013e1e:	fb91 f3fc 	sdiv	r3, r1, ip
 8013e22:	fb0c 1313 	mls	r3, ip, r3, r1
 8013e26:	b2db      	uxtb	r3, r3
 8013e28:	3304      	adds	r3, #4
 8013e2a:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013e2e:	3201      	adds	r2, #1
 8013e30:	f9b3 00e2 	ldrsh.w	r0, [r3, #226]	; 0xe2
 8013e34:	f9b3 10e4 	ldrsh.w	r1, [r3, #228]	; 0xe4
 8013e38:	f9b3 30e6 	ldrsh.w	r3, [r3, #230]	; 0xe6
 8013e3c:	1a28      	subs	r0, r5, r0
 8013e3e:	1a71      	subs	r1, r6, r1
 8013e40:	ee06 0a90 	vmov	s13, r0
 8013e44:	ee07 1a10 	vmov	s14, r1
 8013e48:	1afb      	subs	r3, r7, r3
 8013e4a:	ee07 3a90 	vmov	s15, r3
 8013e4e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013e52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013e56:	eef0 6ae6 	vabs.f32	s13, s13
 8013e5a:	eeb0 7ac7 	vabs.f32	s14, s14
 8013e5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e62:	ee36 7a87 	vadd.f32	s14, s13, s14
 8013e66:	eef0 7ae7 	vabs.f32	s15, s15
 8013e6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013e6e:	b2d3      	uxtb	r3, r2
 8013e70:	eef4 9ae7 	vcmpe.f32	s19, s15
 8013e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e78:	f73f aed1 	bgt.w	8013c1e <MEMS_runMagCal.constprop.18+0xa66>
 8013e7c:	4599      	cmp	r9, r3
 8013e7e:	d8cc      	bhi.n	8013e1a <MEMS_runMagCal.constprop.18+0xc62>
 8013e80:	9a07      	ldr	r2, [sp, #28]
 8013e82:	e766      	b.n	8013d52 <MEMS_runMagCal.constprop.18+0xb9a>
 8013e84:	f8db 20e4 	ldr.w	r2, [fp, #228]	; 0xe4
 8013e88:	f88b 90e2 	strb.w	r9, [fp, #226]	; 0xe2
 8013e8c:	f04f 0101 	mov.w	r1, #1
 8013e90:	f88b 10e0 	strb.w	r1, [fp, #224]	; 0xe0
 8013e94:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8013e98:	2a00      	cmp	r2, #0
 8013e9a:	f040 80c5 	bne.w	8014028 <MEMS_runMagCal.constprop.18+0xe70>
 8013e9e:	9806      	ldr	r0, [sp, #24]
 8013ea0:	fb03 0301 	mla	r3, r3, r1, r0
 8013ea4:	f8cb 30e4 	str.w	r3, [fp, #228]	; 0xe4
 8013ea8:	fb95 f3f8 	sdiv	r3, r5, r8
 8013eac:	fb08 5313 	mls	r3, r8, r3, r5
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	bfb8      	it	lt
 8013eb4:	4443      	addlt	r3, r8
 8013eb6:	b21b      	sxth	r3, r3
 8013eb8:	ee00 3a10 	vmov	s0, r3
 8013ebc:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013ec0:	f8ab 2100 	strh.w	r2, [fp, #256]	; 0x100
 8013ec4:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013ec8:	f8ab 5102 	strh.w	r5, [fp, #258]	; 0x102
 8013ecc:	f8ab 5358 	strh.w	r5, [fp, #856]	; 0x358
 8013ed0:	f8ab 6104 	strh.w	r6, [fp, #260]	; 0x104
 8013ed4:	f8ab 635a 	strh.w	r6, [fp, #858]	; 0x35a
 8013ed8:	f8ab 7106 	strh.w	r7, [fp, #262]	; 0x106
 8013edc:	f8ab 735c 	strh.w	r7, [fp, #860]	; 0x35c
 8013ee0:	f006 f984 	bl	801a1ec <roundf>
 8013ee4:	fb96 f3f8 	sdiv	r3, r6, r8
 8013ee8:	fb08 6613 	mls	r6, r8, r3, r6
 8013eec:	2e00      	cmp	r6, #0
 8013eee:	bfb8      	it	lt
 8013ef0:	4446      	addlt	r6, r8
 8013ef2:	b233      	sxth	r3, r6
 8013ef4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013ef8:	ee00 3a10 	vmov	s0, r3
 8013efc:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013f00:	edcd 7a01 	vstr	s15, [sp, #4]
 8013f04:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013f08:	f006 f970 	bl	801a1ec <roundf>
 8013f0c:	fb97 f3f8 	sdiv	r3, r7, r8
 8013f10:	fb08 7713 	mls	r7, r8, r3, r7
 8013f14:	2f00      	cmp	r7, #0
 8013f16:	bfb8      	it	lt
 8013f18:	4447      	addlt	r7, r8
 8013f1a:	b23b      	sxth	r3, r7
 8013f1c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013f20:	ee00 3a10 	vmov	s0, r3
 8013f24:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013f28:	f89d 5004 	ldrb.w	r5, [sp, #4]
 8013f2c:	edcd 7a01 	vstr	s15, [sp, #4]
 8013f30:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013f34:	f006 f95a 	bl	801a1ec <roundf>
 8013f38:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013f3c:	f89d 6004 	ldrb.w	r6, [sp, #4]
 8013f40:	edcd 7a01 	vstr	s15, [sp, #4]
 8013f44:	2d1f      	cmp	r5, #31
 8013f46:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013f4a:	d97e      	bls.n	801404a <MEMS_runMagCal.constprop.18+0xe92>
 8013f4c:	f8db 10e8 	ldr.w	r1, [fp, #232]	; 0xe8
 8013f50:	f1a5 0220 	sub.w	r2, r5, #32
 8013f54:	2001      	movs	r0, #1
 8013f56:	fa00 f202 	lsl.w	r2, r0, r2
 8013f5a:	ea22 0201 	bic.w	r2, r2, r1
 8013f5e:	404a      	eors	r2, r1
 8013f60:	f8cb 20e8 	str.w	r2, [fp, #232]	; 0xe8
 8013f64:	2e1f      	cmp	r6, #31
 8013f66:	d966      	bls.n	8014036 <MEMS_runMagCal.constprop.18+0xe7e>
 8013f68:	f8db 10f0 	ldr.w	r1, [fp, #240]	; 0xf0
 8013f6c:	f1a6 0220 	sub.w	r2, r6, #32
 8013f70:	2001      	movs	r0, #1
 8013f72:	fa00 f202 	lsl.w	r2, r0, r2
 8013f76:	ea22 0201 	bic.w	r2, r2, r1
 8013f7a:	404a      	eors	r2, r1
 8013f7c:	f8cb 20f0 	str.w	r2, [fp, #240]	; 0xf0
 8013f80:	2b1f      	cmp	r3, #31
 8013f82:	d90c      	bls.n	8013f9e <MEMS_runMagCal.constprop.18+0xde6>
 8013f84:	f8db 20fc 	ldr.w	r2, [fp, #252]	; 0xfc
 8013f88:	2101      	movs	r1, #1
 8013f8a:	3b20      	subs	r3, #32
 8013f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8013f90:	ea23 0302 	bic.w	r3, r3, r2
 8013f94:	4053      	eors	r3, r2
 8013f96:	f8cb 30fc 	str.w	r3, [fp, #252]	; 0xfc
 8013f9a:	9104      	str	r1, [sp, #16]
 8013f9c:	e63f      	b.n	8013c1e <MEMS_runMagCal.constprop.18+0xa66>
 8013f9e:	f8db 20f8 	ldr.w	r2, [fp, #248]	; 0xf8
 8013fa2:	2101      	movs	r1, #1
 8013fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8013fa8:	ea23 0302 	bic.w	r3, r3, r2
 8013fac:	4053      	eors	r3, r2
 8013fae:	f8cb 30f8 	str.w	r3, [fp, #248]	; 0xf8
 8013fb2:	9104      	str	r1, [sp, #16]
 8013fb4:	e633      	b.n	8013c1e <MEMS_runMagCal.constprop.18+0xa66>
 8013fb6:	4602      	mov	r2, r0
 8013fb8:	2001      	movs	r0, #1
 8013fba:	fa00 f202 	lsl.w	r2, r0, r2
 8013fbe:	421a      	tst	r2, r3
 8013fc0:	bf14      	ite	ne
 8013fc2:	4603      	movne	r3, r0
 8013fc4:	2300      	moveq	r3, #0
 8013fc6:	e613      	b.n	8013bf0 <MEMS_runMagCal.constprop.18+0xa38>
 8013fc8:	460a      	mov	r2, r1
 8013fca:	2101      	movs	r1, #1
 8013fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8013fd0:	421a      	tst	r2, r3
 8013fd2:	bf08      	it	eq
 8013fd4:	2100      	moveq	r1, #0
 8013fd6:	e5fa      	b.n	8013bce <MEMS_runMagCal.constprop.18+0xa16>
 8013fd8:	ee07 3a90 	vmov	s15, r3
 8013fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013fe0:	ed1f 7ab3 	vldr	s14, [pc, #-716]	; 8013d18 <MEMS_runMagCal.constprop.18+0xb60>
 8013fe4:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013fe8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ff0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ff8:	dc31      	bgt.n	801405e <MEMS_runMagCal.constprop.18+0xea6>
 8013ffa:	ed1f 7ab8 	vldr	s14, [pc, #-736]	; 8013d1c <MEMS_runMagCal.constprop.18+0xb64>
 8013ffe:	f89b 80a4 	ldrb.w	r8, [fp, #164]	; 0xa4
 8014002:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801400a:	f341 8161 	ble.w	80152d0 <MEMS_runMagCal.constprop.18+0x2118>
 801400e:	f118 0800 	adds.w	r8, r8, #0
 8014012:	bf18      	it	ne
 8014014:	f04f 0801 	movne.w	r8, #1
 8014018:	f88b 80a4 	strb.w	r8, [fp, #164]	; 0xa4
 801401c:	f7ff bbc0 	b.w	80137a0 <MEMS_runMagCal.constprop.18+0x5e8>
 8014020:	2500      	movs	r5, #0
 8014022:	462a      	mov	r2, r5
 8014024:	f7ff bb8a 	b.w	801373c <MEMS_runMagCal.constprop.18+0x584>
 8014028:	9b06      	ldr	r3, [sp, #24]
 801402a:	fb11 f104 	smulbb	r1, r1, r4
 801402e:	1a9a      	subs	r2, r3, r2
 8014030:	440a      	add	r2, r1
 8014032:	b212      	sxth	r2, r2
 8014034:	e738      	b.n	8013ea8 <MEMS_runMagCal.constprop.18+0xcf0>
 8014036:	f8db 10f4 	ldr.w	r1, [fp, #244]	; 0xf4
 801403a:	2201      	movs	r2, #1
 801403c:	40b2      	lsls	r2, r6
 801403e:	ea22 0201 	bic.w	r2, r2, r1
 8014042:	404a      	eors	r2, r1
 8014044:	f8cb 20f4 	str.w	r2, [fp, #244]	; 0xf4
 8014048:	e79a      	b.n	8013f80 <MEMS_runMagCal.constprop.18+0xdc8>
 801404a:	f8db 10ec 	ldr.w	r1, [fp, #236]	; 0xec
 801404e:	2201      	movs	r2, #1
 8014050:	40aa      	lsls	r2, r5
 8014052:	ea22 0201 	bic.w	r2, r2, r1
 8014056:	404a      	eors	r2, r1
 8014058:	f8cb 20ec 	str.w	r2, [fp, #236]	; 0xec
 801405c:	e782      	b.n	8013f64 <MEMS_runMagCal.constprop.18+0xdac>
 801405e:	f04f 0800 	mov.w	r8, #0
 8014062:	f88b 80a4 	strb.w	r8, [fp, #164]	; 0xa4
 8014066:	f7ff bb9b 	b.w	80137a0 <MEMS_runMagCal.constprop.18+0x5e8>
 801406a:	fb92 f7f5 	sdiv	r7, r2, r5
 801406e:	fb05 2217 	mls	r2, r5, r7, r2
 8014072:	b217      	sxth	r7, r2
 8014074:	e466      	b.n	8013944 <MEMS_runMagCal.constprop.18+0x78c>
 8014076:	fb93 fef9 	sdiv	lr, r3, r9
 801407a:	fb09 3e1e 	mls	lr, r9, lr, r3
 801407e:	fa0f fe8e 	sxth.w	lr, lr
 8014082:	e6c9      	b.n	8013e18 <MEMS_runMagCal.constprop.18+0xc60>
 8014084:	f04f 0e01 	mov.w	lr, #1
 8014088:	e468      	b.n	801395c <MEMS_runMagCal.constprop.18+0x7a4>
 801408a:	f99b 3366 	ldrsb.w	r3, [fp, #870]	; 0x366
 801408e:	3301      	adds	r3, #1
 8014090:	fb93 f7f6 	sdiv	r7, r3, r6
 8014094:	fb06 3317 	mls	r3, r6, r7, r3
 8014098:	b29f      	uxth	r7, r3
 801409a:	f7ff bb89 	b.w	80137b0 <MEMS_runMagCal.constprop.18+0x5f8>
 801409e:	ed5f 7ae0 	vldr	s15, [pc, #-896]	; 8013d20 <MEMS_runMagCal.constprop.18+0xb68>
 80140a2:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80140a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140aa:	f77f ab19 	ble.w	80136e0 <MEMS_runMagCal.constprop.18+0x528>
 80140ae:	2201      	movs	r2, #1
 80140b0:	2300      	movs	r3, #0
 80140b2:	f88b 20a4 	strb.w	r2, [fp, #164]	; 0xa4
 80140b6:	f88b 3024 	strb.w	r3, [fp, #36]	; 0x24
 80140ba:	f7ff bb11 	b.w	80136e0 <MEMS_runMagCal.constprop.18+0x528>
 80140be:	2300      	movs	r3, #0
 80140c0:	9300      	str	r3, [sp, #0]
 80140c2:	f7ff ba39 	b.w	8013538 <MEMS_runMagCal.constprop.18+0x380>
 80140c6:	f8db 20f4 	ldr.w	r2, [fp, #244]	; 0xf4
 80140ca:	2101      	movs	r1, #1
 80140cc:	fa01 f303 	lsl.w	r3, r1, r3
 80140d0:	ea23 0302 	bic.w	r3, r3, r2
 80140d4:	4053      	eors	r3, r2
 80140d6:	f8cb 30f4 	str.w	r3, [fp, #244]	; 0xf4
 80140da:	e684      	b.n	8013de6 <MEMS_runMagCal.constprop.18+0xc2e>
 80140dc:	f8db 20ec 	ldr.w	r2, [fp, #236]	; 0xec
 80140e0:	2101      	movs	r1, #1
 80140e2:	fa01 f303 	lsl.w	r3, r1, r3
 80140e6:	ea23 0302 	bic.w	r3, r3, r2
 80140ea:	4053      	eors	r3, r2
 80140ec:	f8cb 30ec 	str.w	r3, [fp, #236]	; 0xec
 80140f0:	e66a      	b.n	8013dc8 <MEMS_runMagCal.constprop.18+0xc10>
 80140f2:	2d05      	cmp	r5, #5
 80140f4:	f241 80fd 	bls.w	80152f2 <MEMS_runMagCal.constprop.18+0x213a>
 80140f8:	2b05      	cmp	r3, #5
 80140fa:	f241 80fa 	bls.w	80152f2 <MEMS_runMagCal.constprop.18+0x213a>
 80140fe:	2805      	cmp	r0, #5
 8014100:	f241 80f7 	bls.w	80152f2 <MEMS_runMagCal.constprop.18+0x213a>
 8014104:	f89b 40e1 	ldrb.w	r4, [fp, #225]	; 0xe1
 8014108:	9a03      	ldr	r2, [sp, #12]
 801410a:	f99b 30e2 	ldrsb.w	r3, [fp, #226]	; 0xe2
 801410e:	9300      	str	r3, [sp, #0]
 8014110:	42a2      	cmp	r2, r4
 8014112:	f103 0301 	add.w	r3, r3, #1
 8014116:	f001 812b 	beq.w	8015370 <MEMS_runMagCal.constprop.18+0x21b8>
 801411a:	1a9a      	subs	r2, r3, r2
 801411c:	fb92 f3f4 	sdiv	r3, r2, r4
 8014120:	fb04 2313 	mls	r3, r4, r3, r2
 8014124:	2b00      	cmp	r3, #0
 8014126:	b21d      	sxth	r5, r3
 8014128:	bfbc      	itt	lt
 801412a:	191b      	addlt	r3, r3, r4
 801412c:	b21d      	sxthlt	r5, r3
 801412e:	f105 031d 	add.w	r3, r5, #29
 8014132:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8014136:	2600      	movs	r6, #0
 8014138:	f9b3 101a 	ldrsh.w	r1, [r3, #26]
 801413c:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8014140:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8014144:	4689      	mov	r9, r1
 8014146:	4694      	mov	ip, r2
 8014148:	461f      	mov	r7, r3
 801414a:	eb05 0e06 	add.w	lr, r5, r6
 801414e:	fb9e f0f4 	sdiv	r0, lr, r4
 8014152:	fb04 e010 	mls	r0, r4, r0, lr
 8014156:	b2c0      	uxtb	r0, r0
 8014158:	301d      	adds	r0, #29
 801415a:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 801415e:	3601      	adds	r6, #1
 8014160:	f9b0 801a 	ldrsh.w	r8, [r0, #26]
 8014164:	f9b0 e01c 	ldrsh.w	lr, [r0, #28]
 8014168:	f9b0 001e 	ldrsh.w	r0, [r0, #30]
 801416c:	4541      	cmp	r1, r8
 801416e:	bfb8      	it	lt
 8014170:	4641      	movlt	r1, r8
 8014172:	45c1      	cmp	r9, r8
 8014174:	bfa8      	it	ge
 8014176:	46c1      	movge	r9, r8
 8014178:	4572      	cmp	r2, lr
 801417a:	bfb8      	it	lt
 801417c:	4672      	movlt	r2, lr
 801417e:	45f4      	cmp	ip, lr
 8014180:	bfa8      	it	ge
 8014182:	46f4      	movge	ip, lr
 8014184:	4283      	cmp	r3, r0
 8014186:	bfb8      	it	lt
 8014188:	4603      	movlt	r3, r0
 801418a:	4287      	cmp	r7, r0
 801418c:	bfa8      	it	ge
 801418e:	4607      	movge	r7, r0
 8014190:	9803      	ldr	r0, [sp, #12]
 8014192:	fa5f f886 	uxtb.w	r8, r6
 8014196:	4540      	cmp	r0, r8
 8014198:	d8d7      	bhi.n	801414a <MEMS_runMagCal.constprop.18+0xf92>
 801419a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801419e:	ee87 8aa8 	vdiv.f32	s16, s15, s17
 80141a2:	f89b 0024 	ldrb.w	r0, [fp, #36]	; 0x24
 80141a6:	eba1 0109 	sub.w	r1, r1, r9
 80141aa:	eba2 020c 	sub.w	r2, r2, ip
 80141ae:	1bdb      	subs	r3, r3, r7
 80141b0:	b209      	sxth	r1, r1
 80141b2:	b212      	sxth	r2, r2
 80141b4:	b21b      	sxth	r3, r3
 80141b6:	ed9f 6ae1 	vldr	s12, [pc, #900]	; 801453c <MEMS_runMagCal.constprop.18+0x1384>
 80141ba:	ee28 6a06 	vmul.f32	s12, s16, s12
 80141be:	2800      	cmp	r0, #0
 80141c0:	f041 80d3 	bne.w	801536a <MEMS_runMagCal.constprop.18+0x21b2>
 80141c4:	f89b 00a4 	ldrb.w	r0, [fp, #164]	; 0xa4
 80141c8:	fab0 f080 	clz	r0, r0
 80141cc:	0940      	lsrs	r0, r0, #5
 80141ce:	ee07 1a90 	vmov	s15, r1
 80141d2:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80141d6:	ee66 6a26 	vmul.f32	s13, s12, s13
 80141da:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80141de:	eef4 5ae6 	vcmpe.f32	s11, s13
 80141e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141e6:	f301 80a3 	bgt.w	8015330 <MEMS_runMagCal.constprop.18+0x2178>
 80141ea:	ee07 2a90 	vmov	s15, r2
 80141ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80141f2:	eef4 6ac7 	vcmpe.f32	s13, s14
 80141f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141fa:	f101 8099 	bmi.w	8015330 <MEMS_runMagCal.constprop.18+0x2178>
 80141fe:	ee07 3a90 	vmov	s15, r3
 8014202:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014206:	eef4 6ae7 	vcmpe.f32	s13, s15
 801420a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801420e:	f101 808f 	bmi.w	8015330 <MEMS_runMagCal.constprop.18+0x2178>
 8014212:	2800      	cmp	r0, #0
 8014214:	f001 80b7 	beq.w	8015386 <MEMS_runMagCal.constprop.18+0x21ce>
 8014218:	eeb4 6ae5 	vcmpe.f32	s12, s11
 801421c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014220:	f301 80ad 	bgt.w	801537e <MEMS_runMagCal.constprop.18+0x21c6>
 8014224:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8014228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801422c:	f301 80a7 	bgt.w	801537e <MEMS_runMagCal.constprop.18+0x21c6>
 8014230:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8014234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014238:	bfcc      	ite	gt
 801423a:	f04f 0801 	movgt.w	r8, #1
 801423e:	f04f 0800 	movle.w	r8, #0
 8014242:	eef7 6a02 	vmov.f32	s13, #114	; 0x3f900000  1.125
 8014246:	ee65 5aa6 	vmul.f32	s11, s11, s13
 801424a:	eeb4 6ae5 	vcmpe.f32	s12, s11
 801424e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014252:	f301 804e 	bgt.w	80152f2 <MEMS_runMagCal.constprop.18+0x213a>
 8014256:	ee27 7a26 	vmul.f32	s14, s14, s13
 801425a:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801425e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014262:	f301 8046 	bgt.w	80152f2 <MEMS_runMagCal.constprop.18+0x213a>
 8014266:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801426a:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801426e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014272:	f301 803e 	bgt.w	80152f2 <MEMS_runMagCal.constprop.18+0x213a>
 8014276:	fa4f fc85 	sxtb.w	ip, r5
 801427a:	2300      	movs	r3, #0
 801427c:	f10c 0201 	add.w	r2, ip, #1
 8014280:	9201      	str	r2, [sp, #4]
 8014282:	469e      	mov	lr, r3
 8014284:	4699      	mov	r9, r3
 8014286:	2701      	movs	r7, #1
 8014288:	9a01      	ldr	r2, [sp, #4]
 801428a:	eb0c 0103 	add.w	r1, ip, r3
 801428e:	441a      	add	r2, r3
 8014290:	fb91 f3f4 	sdiv	r3, r1, r4
 8014294:	fb04 1313 	mls	r3, r4, r3, r1
 8014298:	b258      	sxtb	r0, r3
 801429a:	2800      	cmp	r0, #0
 801429c:	bfb8      	it	lt
 801429e:	191b      	addlt	r3, r3, r4
 80142a0:	fb92 f1f4 	sdiv	r1, r2, r4
 80142a4:	fb04 2111 	mls	r1, r4, r1, r2
 80142a8:	bfb8      	it	lt
 80142aa:	b258      	sxtblt	r0, r3
 80142ac:	b249      	sxtb	r1, r1
 80142ae:	3104      	adds	r1, #4
 80142b0:	3004      	adds	r0, #4
 80142b2:	eb0b 03c1 	add.w	r3, fp, r1, lsl #3
 80142b6:	eb0b 02c0 	add.w	r2, fp, r0, lsl #3
 80142ba:	f9b3 30e2 	ldrsh.w	r3, [r3, #226]	; 0xe2
 80142be:	f9b2 20e2 	ldrsh.w	r2, [r2, #226]	; 0xe2
 80142c2:	1a9d      	subs	r5, r3, r2
 80142c4:	2d00      	cmp	r5, #0
 80142c6:	b29b      	uxth	r3, r3
 80142c8:	b292      	uxth	r2, r2
 80142ca:	bfb4      	ite	lt
 80142cc:	1ad3      	sublt	r3, r2, r3
 80142ce:	1a9b      	subge	r3, r3, r2
 80142d0:	b21e      	sxth	r6, r3
 80142d2:	eb0b 02c0 	add.w	r2, fp, r0, lsl #3
 80142d6:	eb0b 03c1 	add.w	r3, fp, r1, lsl #3
 80142da:	f9b2 20e4 	ldrsh.w	r2, [r2, #228]	; 0xe4
 80142de:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 80142e2:	1a9d      	subs	r5, r3, r2
 80142e4:	2d00      	cmp	r5, #0
 80142e6:	b29b      	uxth	r3, r3
 80142e8:	b292      	uxth	r2, r2
 80142ea:	bfb4      	ite	lt
 80142ec:	1ad3      	sublt	r3, r2, r3
 80142ee:	1a9b      	subge	r3, r3, r2
 80142f0:	eb0b 05c0 	add.w	r5, fp, r0, lsl #3
 80142f4:	eb0b 02c1 	add.w	r2, fp, r1, lsl #3
 80142f8:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 80142fc:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 8014300:	f9b2 20e6 	ldrsh.w	r2, [r2, #230]	; 0xe6
 8014304:	f9b5 50e6 	ldrsh.w	r5, [r5, #230]	; 0xe6
 8014308:	f8b1 10e0 	ldrh.w	r1, [r1, #224]	; 0xe0
 801430c:	f8b0 00e0 	ldrh.w	r0, [r0, #224]	; 0xe0
 8014310:	b21b      	sxth	r3, r3
 8014312:	9300      	str	r3, [sp, #0]
 8014314:	1a09      	subs	r1, r1, r0
 8014316:	1b53      	subs	r3, r2, r5
 8014318:	2b00      	cmp	r3, #0
 801431a:	b292      	uxth	r2, r2
 801431c:	b2ad      	uxth	r5, r5
 801431e:	b209      	sxth	r1, r1
 8014320:	bfb4      	ite	lt
 8014322:	1aaa      	sublt	r2, r5, r2
 8014324:	1b52      	subge	r2, r2, r5
 8014326:	2900      	cmp	r1, #0
 8014328:	b212      	sxth	r2, r2
 801432a:	dd21      	ble.n	8014370 <MEMS_runMagCal.constprop.18+0x11b8>
 801432c:	9b00      	ldr	r3, [sp, #0]
 801432e:	4433      	add	r3, r6
 8014330:	441a      	add	r2, r3
 8014332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014336:	fb03 f202 	mul.w	r2, r3, r2
 801433a:	ee07 2a90 	vmov	s15, r2
 801433e:	ee07 1a10 	vmov	s14, r1
 8014342:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014346:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801434a:	ee67 7aa8 	vmul.f32	s15, s15, s17
 801434e:	f109 0901 	add.w	r9, r9, #1
 8014352:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8014356:	fa5f f989 	uxtb.w	r9, r9
 801435a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801435e:	ee17 3a90 	vmov	r3, s15
 8014362:	b21b      	sxth	r3, r3
 8014364:	2b64      	cmp	r3, #100	; 0x64
 8014366:	bfc4      	itt	gt
 8014368:	f10e 0e01 	addgt.w	lr, lr, #1
 801436c:	fa5f fe8e 	uxtbgt.w	lr, lr
 8014370:	463b      	mov	r3, r7
 8014372:	9903      	ldr	r1, [sp, #12]
 8014374:	3701      	adds	r7, #1
 8014376:	b2fa      	uxtb	r2, r7
 8014378:	4291      	cmp	r1, r2
 801437a:	d885      	bhi.n	8014288 <MEMS_runMagCal.constprop.18+0x10d0>
 801437c:	ebb9 0f8e 	cmp.w	r9, lr, lsl #2
 8014380:	f280 87b7 	bge.w	80152f2 <MEMS_runMagCal.constprop.18+0x213a>
 8014384:	f89b 30a4 	ldrb.w	r3, [fp, #164]	; 0xa4
 8014388:	3b02      	subs	r3, #2
 801438a:	2b01      	cmp	r3, #1
 801438c:	f201 8033 	bhi.w	80153f6 <MEMS_runMagCal.constprop.18+0x223e>
 8014390:	4e6b      	ldr	r6, [pc, #428]	; (8014540 <MEMS_runMagCal.constprop.18+0x1388>)
 8014392:	2400      	movs	r4, #0
 8014394:	ad16      	add	r5, sp, #88	; 0x58
 8014396:	ecb6 0a01 	vldmia	r6!, {s0}
 801439a:	f005 ff27 	bl	801a1ec <roundf>
 801439e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80143a2:	ee10 3a10 	vmov	r3, s0
 80143a6:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
 80143aa:	3401      	adds	r4, #1
 80143ac:	2c03      	cmp	r4, #3
 80143ae:	d1f2      	bne.n	8014396 <MEMS_runMagCal.constprop.18+0x11de>
 80143b0:	ab10      	add	r3, sp, #64	; 0x40
 80143b2:	aa13      	add	r2, sp, #76	; 0x4c
 80143b4:	eeb0 0a68 	vmov.f32	s0, s17
 80143b8:	4962      	ldr	r1, [pc, #392]	; (8014544 <MEMS_runMagCal.constprop.18+0x138c>)
 80143ba:	4628      	mov	r0, r5
 80143bc:	f7fd fca6 	bl	8011d0c <getMagStats.constprop.28>
 80143c0:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
 80143c4:	eddf 7a60 	vldr	s15, [pc, #384]	; 8014548 <MEMS_runMagCal.constprop.18+0x1390>
 80143c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80143cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143d0:	eefc baeb 	vcvt.u32.f32	s23, s23
 80143d4:	d50f      	bpl.n	80143f6 <MEMS_runMagCal.constprop.18+0x123e>
 80143d6:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 801454c <MEMS_runMagCal.constprop.18+0x1394>
 80143da:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 80143de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80143e2:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 80143e6:	eef0 7ae7 	vabs.f32	s15, s15
 80143ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80143ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143f2:	f101 8005 	bmi.w	8015400 <MEMS_runMagCal.constprop.18+0x2248>
 80143f6:	2300      	movs	r3, #0
 80143f8:	602b      	str	r3, [r5, #0]
 80143fa:	80ab      	strh	r3, [r5, #4]
 80143fc:	ae1f      	add	r6, sp, #124	; 0x7c
 80143fe:	aa0f      	add	r2, sp, #60	; 0x3c
 8014400:	4630      	mov	r0, r6
 8014402:	4629      	mov	r1, r5
 8014404:	eeb0 0a68 	vmov.f32	s0, s17
 8014408:	f7fd fd8a 	bl	8011f20 <MEMS_solveEllipsoid.constprop.25>
 801440c:	edcb ba28 	vstr	s23, [fp, #160]	; 0xa0
 8014410:	2800      	cmp	r0, #0
 8014412:	f000 876e 	beq.w	80152f2 <MEMS_runMagCal.constprop.18+0x213a>
 8014416:	eeb0 0a68 	vmov.f32	s0, s17
 801441a:	ab10      	add	r3, sp, #64	; 0x40
 801441c:	aa13      	add	r2, sp, #76	; 0x4c
 801441e:	4631      	mov	r1, r6
 8014420:	4628      	mov	r0, r5
 8014422:	f7fd fc73 	bl	8011d0c <getMagStats.constprop.28>
 8014426:	bb78      	cbnz	r0, 8014488 <MEMS_runMagCal.constprop.18+0x12d0>
 8014428:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 801442c:	ed9f 6a47 	vldr	s12, [pc, #284]	; 801454c <MEMS_runMagCal.constprop.18+0x1394>
 8014430:	eddf 6a47 	vldr	s13, [pc, #284]	; 8014550 <MEMS_runMagCal.constprop.18+0x1398>
 8014434:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8014438:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801443c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014440:	eef0 7ae7 	vabs.f32	s15, s15
 8014444:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801444c:	d51c      	bpl.n	8014488 <MEMS_runMagCal.constprop.18+0x12d0>
 801444e:	eddf 6a41 	vldr	s13, [pc, #260]	; 8014554 <MEMS_runMagCal.constprop.18+0x139c>
 8014452:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801445a:	dd15      	ble.n	8014488 <MEMS_runMagCal.constprop.18+0x12d0>
 801445c:	4633      	mov	r3, r6
 801445e:	ed93 6a00 	vldr	s12, [r3]
 8014462:	edd3 6a01 	vldr	s13, [r3, #4]
 8014466:	edd3 7a02 	vldr	s15, [r3, #8]
 801446a:	ee26 6a07 	vmul.f32	s12, s12, s14
 801446e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8014472:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014476:	ed83 6a00 	vstr	s12, [r3]
 801447a:	edc3 6a01 	vstr	s13, [r3, #4]
 801447e:	edc3 7a02 	vstr	s15, [r3, #8]
 8014482:	330c      	adds	r3, #12
 8014484:	459a      	cmp	sl, r3
 8014486:	d1ea      	bne.n	801445e <MEMS_runMagCal.constprop.18+0x12a6>
 8014488:	f89b 30e0 	ldrb.w	r3, [fp, #224]	; 0xe0
 801448c:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8014558 <MEMS_runMagCal.constprop.18+0x13a0>
 8014490:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
 8014494:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8014498:	005b      	lsls	r3, r3, #1
 801449a:	ee07 3a90 	vmov	s15, r3
 801449e:	ee06 0a90 	vmov	s13, r0
 80144a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80144a6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80144aa:	ee67 7a86 	vmul.f32	s15, s15, s12
 80144ae:	eef4 6ae7 	vcmpe.f32	s13, s15
 80144b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144b6:	f300 87ae 	bgt.w	8015416 <MEMS_runMagCal.constprop.18+0x225e>
 80144ba:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 80144be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80144c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144c6:	f341 85cd 	ble.w	8016064 <MEMS_runMagCal.constprop.18+0x2eac>
 80144ca:	f89b 7024 	ldrb.w	r7, [fp, #36]	; 0x24
 80144ce:	fab7 f787 	clz	r7, r7
 80144d2:	097f      	lsrs	r7, r7, #5
 80144d4:	ed96 6a04 	vldr	s12, [r6, #16]
 80144d8:	edd6 8a00 	vldr	s17, [r6]
 80144dc:	edd6 6a08 	vldr	s13, [r6, #32]
 80144e0:	ed9d 0a0f 	vldr	s0, [sp, #60]	; 0x3c
 80144e4:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801455c <MEMS_runMagCal.constprop.18+0x13a4>
 80144e8:	ed96 aa03 	vldr	s20, [r6, #12]
 80144ec:	edd6 9a06 	vldr	s19, [r6, #24]
 80144f0:	f8db 30a0 	ldr.w	r3, [fp, #160]	; 0xa0
 80144f4:	9300      	str	r3, [sp, #0]
 80144f6:	ee78 8a86 	vadd.f32	s17, s17, s12
 80144fa:	ee28 7a07 	vmul.f32	s14, s16, s14
 80144fe:	ee78 8aa6 	vadd.f32	s17, s17, s13
 8014502:	ee87 0a00 	vdiv.f32	s0, s14, s0
 8014506:	9319      	str	r3, [sp, #100]	; 0x64
 8014508:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801450c:	ed96 9a07 	vldr	s18, [r6, #28]
 8014510:	f005 fe6c 	bl	801a1ec <roundf>
 8014514:	eeb0 7ae9 	vabs.f32	s14, s19
 8014518:	eef0 7aca 	vabs.f32	s15, s20
 801451c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014520:	eeb0 7ac9 	vabs.f32	s14, s18
 8014524:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014528:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8014560 <MEMS_runMagCal.constprop.18+0x13a8>
 801452c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014530:	eebc 7ac0 	vcvt.u32.f32	s14, s0
 8014534:	ee87 0aa8 	vdiv.f32	s0, s15, s17
 8014538:	e016      	b.n	8014568 <MEMS_runMagCal.constprop.18+0x13b0>
 801453a:	bf00      	nop
 801453c:	42340000 	.word	0x42340000
 8014540:	200017b0 	.word	0x200017b0
 8014544:	200017bc 	.word	0x200017bc
 8014548:	3fd9999a 	.word	0x3fd9999a
 801454c:	423c0000 	.word	0x423c0000
 8014550:	3eb33333 	.word	0x3eb33333
 8014554:	3dcccccd 	.word	0x3dcccccd
 8014558:	3c23d70a 	.word	0x3c23d70a
 801455c:	3eaaaaab 	.word	0x3eaaaaab
 8014560:	42055556 	.word	0x42055556
 8014564:	447a0000 	.word	0x447a0000
 8014568:	ee17 3a10 	vmov	r3, s14
 801456c:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8014570:	f005 fe3c 	bl	801a1ec <roundf>
 8014574:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8014578:	ed1f 6a06 	vldr	s12, [pc, #-24]	; 8014564 <MEMS_runMagCal.constprop.18+0x13ac>
 801457c:	ee17 1a90 	vmov	r1, s15
 8014580:	f10d 026e 	add.w	r2, sp, #110	; 0x6e
 8014584:	2300      	movs	r3, #0
 8014586:	f88d 1069 	strb.w	r1, [sp, #105]	; 0x69
 801458a:	eb06 1103 	add.w	r1, r6, r3, lsl #4
 801458e:	edd1 7a00 	vldr	s15, [r1]
 8014592:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
 8014596:	f822 1c04 	strh.w	r1, [r2, #-4]
 801459a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801459e:	3301      	adds	r3, #1
 80145a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80145a4:	2b03      	cmp	r3, #3
 80145a6:	ee17 1a90 	vmov	r1, s15
 80145aa:	f822 1f02 	strh.w	r1, [r2, #2]!
 80145ae:	d1ec      	bne.n	801458a <MEMS_runMagCal.constprop.18+0x13d2>
 80145b0:	ee6a 6a06 	vmul.f32	s13, s20, s12
 80145b4:	ee29 7a86 	vmul.f32	s14, s19, s12
 80145b8:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80145bc:	ee69 7a06 	vmul.f32	s15, s18, s12
 80145c0:	ee16 3a90 	vmov	r3, s13
 80145c4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80145c8:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
 80145cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80145d0:	ee17 3a10 	vmov	r3, s14
 80145d4:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
 80145d8:	ee17 3a90 	vmov	r3, s15
 80145dc:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
 80145e0:	f1b8 0f00 	cmp.w	r8, #0
 80145e4:	d00b      	beq.n	80145fe <MEMS_runMagCal.constprop.18+0x1446>
 80145e6:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80145ea:	ee28 0a00 	vmul.f32	s0, s16, s0
 80145ee:	f005 fdfd 	bl	801a1ec <roundf>
 80145f2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80145f6:	ee17 3a90 	vmov	r3, s15
 80145fa:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 80145fe:	2300      	movs	r3, #0
 8014600:	f88b 30dc 	strb.w	r3, [fp, #220]	; 0xdc
 8014604:	2f00      	cmp	r7, #0
 8014606:	f43f a844 	beq.w	8013692 <MEMS_runMagCal.constprop.18+0x4da>
 801460a:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 801460e:	eddb ba01 	vldr	s23, [fp, #4]
 8014612:	f89b 4024 	ldrb.w	r4, [fp, #36]	; 0x24
 8014616:	ee05 3a90 	vmov	s11, r3
 801461a:	eeb8 eae5 	vcvt.f32.s32	s28, s11
 801461e:	ee2e 6a2b 	vmul.f32	s12, s28, s23
 8014622:	2c00      	cmp	r4, #0
 8014624:	f040 86fa 	bne.w	801541c <MEMS_runMagCal.constprop.18+0x2264>
 8014628:	eeb4 bac6 	vcmpe.f32	s22, s12
 801462c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014630:	d503      	bpl.n	801463a <MEMS_runMagCal.constprop.18+0x1482>
 8014632:	9b05      	ldr	r3, [sp, #20]
 8014634:	2b09      	cmp	r3, #9
 8014636:	f67f a82c 	bls.w	8013692 <MEMS_runMagCal.constprop.18+0x4da>
 801463a:	f8db 30d8 	ldr.w	r3, [fp, #216]	; 0xd8
 801463e:	2b00      	cmp	r3, #0
 8014640:	f040 86ec 	bne.w	801541c <MEMS_runMagCal.constprop.18+0x2264>
 8014644:	ac19      	add	r4, sp, #100	; 0x64
 8014646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014648:	4feb      	ldr	r7, [pc, #940]	; (80149f8 <MEMS_runMagCal.constprop.18+0x1840>)
 801464a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801464c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014650:	e887 0003 	stmia.w	r7, {r0, r1}
 8014654:	2401      	movs	r4, #1
 8014656:	f88b 4024 	strb.w	r4, [fp, #36]	; 0x24
 801465a:	2300      	movs	r3, #0
 801465c:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 8014660:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 8014664:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 8014668:	e9c5 3300 	strd	r3, r3, [r5]
 801466c:	e9cd 3321 	strd	r3, r3, [sp, #132]	; 0x84
 8014670:	e9cd 3323 	strd	r3, r3, [sp, #140]	; 0x8c
 8014674:	9320      	str	r3, [sp, #128]	; 0x80
 8014676:	60ab      	str	r3, [r5, #8]
 8014678:	f89b 202c 	ldrb.w	r2, [fp, #44]	; 0x2c
 801467c:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
 8014680:	ee07 2a10 	vmov	s14, r2
 8014684:	9a00      	ldr	r2, [sp, #0]
 8014686:	1ad3      	subs	r3, r2, r3
 8014688:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 801468c:	f0c1 81f1 	bcc.w	8015a72 <MEMS_runMagCal.constprop.18+0x28ba>
 8014690:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8014694:	f081 81d6 	bcs.w	8015a44 <MEMS_runMagCal.constprop.18+0x288c>
 8014698:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 801469c:	ee07 3a90 	vmov	s15, r3
 80146a0:	ed9f 6ad6 	vldr	s12, [pc, #856]	; 80149fc <MEMS_runMagCal.constprop.18+0x1844>
 80146a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80146a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80146ac:	eee7 6ac6 	vfms.f32	s13, s15, s12
 80146b0:	eef0 7a66 	vmov.f32	s15, s13
 80146b4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80146b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80146bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80146c0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80146c4:	ee27 7a2b 	vmul.f32	s14, s14, s23
 80146c8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80146cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146d0:	f101 8189 	bmi.w	80159e6 <MEMS_runMagCal.constprop.18+0x282e>
 80146d4:	eef0 6a0c 	vmov.f32	s13, #12	; 0x40600000  3.5
 80146d8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80146dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146e0:	f101 817b 	bmi.w	80159da <MEMS_runMagCal.constprop.18+0x2822>
 80146e4:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80146e8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80146ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146f0:	bf44      	itt	mi
 80146f2:	eeb7 7a00 	vmovmi.f32	s14, #112	; 0x3f800000  1.0
 80146f6:	ee77 7a87 	vaddmi.f32	s15, s15, s14
 80146fa:	2c01      	cmp	r4, #1
 80146fc:	edc6 7a00 	vstr	s15, [r6]
 8014700:	f240 8158 	bls.w	80149b4 <MEMS_runMagCal.constprop.18+0x17fc>
 8014704:	f8db 3040 	ldr.w	r3, [fp, #64]	; 0x40
 8014708:	9900      	ldr	r1, [sp, #0]
 801470a:	f89b 2044 	ldrb.w	r2, [fp, #68]	; 0x44
 801470e:	1acb      	subs	r3, r1, r3
 8014710:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8014714:	f0c1 8147 	bcc.w	80159a6 <MEMS_runMagCal.constprop.18+0x27ee>
 8014718:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 801471c:	f081 8423 	bcs.w	8015f66 <MEMS_runMagCal.constprop.18+0x2dae>
 8014720:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8014724:	ee07 3a10 	vmov	s14, r3
 8014728:	ed9f 6ab4 	vldr	s12, [pc, #720]	; 80149fc <MEMS_runMagCal.constprop.18+0x1844>
 801472c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8014730:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014734:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8014738:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 801473c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014740:	ee06 2a90 	vmov	s13, r2
 8014744:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014748:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801474c:	ee66 6aab 	vmul.f32	s13, s13, s23
 8014750:	eef4 6ac6 	vcmpe.f32	s13, s12
 8014754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014758:	f101 811f 	bmi.w	801599a <MEMS_runMagCal.constprop.18+0x27e2>
 801475c:	eeb0 6a0c 	vmov.f32	s12, #12	; 0x40600000  3.5
 8014760:	eef4 6ac6 	vcmpe.f32	s13, s12
 8014764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014768:	f101 83f7 	bmi.w	8015f5a <MEMS_runMagCal.constprop.18+0x2da2>
 801476c:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8014770:	eef4 6ac6 	vcmpe.f32	s13, s12
 8014774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014778:	bf44      	itt	mi
 801477a:	eef7 6a00 	vmovmi.f32	s13, #112	; 0x3f800000  1.0
 801477e:	ee37 7a26 	vaddmi.f32	s14, s14, s13
 8014782:	2c02      	cmp	r4, #2
 8014784:	ed86 7a01 	vstr	s14, [r6, #4]
 8014788:	ee77 7a87 	vadd.f32	s15, s15, s14
 801478c:	f000 8112 	beq.w	80149b4 <MEMS_runMagCal.constprop.18+0x17fc>
 8014790:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 8014794:	9900      	ldr	r1, [sp, #0]
 8014796:	f89b 205c 	ldrb.w	r2, [fp, #92]	; 0x5c
 801479a:	1acb      	subs	r3, r1, r3
 801479c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80147a0:	f0c1 80f7 	bcc.w	8015992 <MEMS_runMagCal.constprop.18+0x27da>
 80147a4:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80147a8:	f081 83f8 	bcs.w	8015f9c <MEMS_runMagCal.constprop.18+0x2de4>
 80147ac:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80147b0:	ee07 3a10 	vmov	s14, r3
 80147b4:	ed9f 6a91 	vldr	s12, [pc, #580]	; 80149fc <MEMS_runMagCal.constprop.18+0x1844>
 80147b8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80147bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80147c0:	eea6 7ac6 	vfms.f32	s14, s13, s12
 80147c4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80147c8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80147cc:	ee06 2a90 	vmov	s13, r2
 80147d0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80147d4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80147d8:	ee66 6aab 	vmul.f32	s13, s13, s23
 80147dc:	eef4 6ac6 	vcmpe.f32	s13, s12
 80147e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147e4:	f101 80cf 	bmi.w	8015986 <MEMS_runMagCal.constprop.18+0x27ce>
 80147e8:	eeb0 6a0c 	vmov.f32	s12, #12	; 0x40600000  3.5
 80147ec:	eef4 6ac6 	vcmpe.f32	s13, s12
 80147f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147f4:	f101 83cc 	bmi.w	8015f90 <MEMS_runMagCal.constprop.18+0x2dd8>
 80147f8:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 80147fc:	eef4 6ac6 	vcmpe.f32	s13, s12
 8014800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014804:	bf44      	itt	mi
 8014806:	eef7 6a00 	vmovmi.f32	s13, #112	; 0x3f800000  1.0
 801480a:	ee37 7a26 	vaddmi.f32	s14, s14, s13
 801480e:	2c03      	cmp	r4, #3
 8014810:	ed86 7a02 	vstr	s14, [r6, #8]
 8014814:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014818:	f000 80cc 	beq.w	80149b4 <MEMS_runMagCal.constprop.18+0x17fc>
 801481c:	f8db 3070 	ldr.w	r3, [fp, #112]	; 0x70
 8014820:	9900      	ldr	r1, [sp, #0]
 8014822:	f89b 2074 	ldrb.w	r2, [fp, #116]	; 0x74
 8014826:	1acb      	subs	r3, r1, r3
 8014828:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 801482c:	f0c1 80a7 	bcc.w	801597e <MEMS_runMagCal.constprop.18+0x27c6>
 8014830:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8014834:	f081 8401 	bcs.w	801603a <MEMS_runMagCal.constprop.18+0x2e82>
 8014838:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 801483c:	ee07 3a10 	vmov	s14, r3
 8014840:	ed9f 6a6e 	vldr	s12, [pc, #440]	; 80149fc <MEMS_runMagCal.constprop.18+0x1844>
 8014844:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8014848:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801484c:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8014850:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8014854:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014858:	ee06 2a90 	vmov	s13, r2
 801485c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014860:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8014864:	ee66 6aab 	vmul.f32	s13, s13, s23
 8014868:	eef4 6ac6 	vcmpe.f32	s13, s12
 801486c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014870:	f101 807f 	bmi.w	8015972 <MEMS_runMagCal.constprop.18+0x27ba>
 8014874:	eeb0 6a0c 	vmov.f32	s12, #12	; 0x40600000  3.5
 8014878:	eef4 6ac6 	vcmpe.f32	s13, s12
 801487c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014880:	f101 83d5 	bmi.w	801602e <MEMS_runMagCal.constprop.18+0x2e76>
 8014884:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8014888:	eef4 6ac6 	vcmpe.f32	s13, s12
 801488c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014890:	bf44      	itt	mi
 8014892:	eef7 6a00 	vmovmi.f32	s13, #112	; 0x3f800000  1.0
 8014896:	ee37 7a26 	vaddmi.f32	s14, s14, s13
 801489a:	2c04      	cmp	r4, #4
 801489c:	ed86 7a03 	vstr	s14, [r6, #12]
 80148a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80148a4:	f000 8086 	beq.w	80149b4 <MEMS_runMagCal.constprop.18+0x17fc>
 80148a8:	f8db 3088 	ldr.w	r3, [fp, #136]	; 0x88
 80148ac:	9900      	ldr	r1, [sp, #0]
 80148ae:	f89b 208c 	ldrb.w	r2, [fp, #140]	; 0x8c
 80148b2:	1acb      	subs	r3, r1, r3
 80148b4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80148b8:	f0c1 8057 	bcc.w	801596a <MEMS_runMagCal.constprop.18+0x27b2>
 80148bc:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80148c0:	f081 83e6 	bcs.w	8016090 <MEMS_runMagCal.constprop.18+0x2ed8>
 80148c4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80148c8:	ee07 3a10 	vmov	s14, r3
 80148cc:	ed9f 6a4b 	vldr	s12, [pc, #300]	; 80149fc <MEMS_runMagCal.constprop.18+0x1844>
 80148d0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80148d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80148d8:	eea6 7ac6 	vfms.f32	s14, s13, s12
 80148dc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80148e0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80148e4:	ee06 2a90 	vmov	s13, r2
 80148e8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80148ec:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80148f0:	ee66 6aab 	vmul.f32	s13, s13, s23
 80148f4:	eef4 6ac6 	vcmpe.f32	s13, s12
 80148f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148fc:	f101 83e3 	bmi.w	80160c6 <MEMS_runMagCal.constprop.18+0x2f0e>
 8014900:	eeb0 6a0c 	vmov.f32	s12, #12	; 0x40600000  3.5
 8014904:	eef4 6ac6 	vcmpe.f32	s13, s12
 8014908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801490c:	f101 83d5 	bmi.w	80160ba <MEMS_runMagCal.constprop.18+0x2f02>
 8014910:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8014914:	eef4 6ac6 	vcmpe.f32	s13, s12
 8014918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801491c:	bf44      	itt	mi
 801491e:	eef7 6a00 	vmovmi.f32	s13, #112	; 0x3f800000  1.0
 8014922:	ee37 7a26 	vaddmi.f32	s14, s14, s13
 8014926:	2c05      	cmp	r4, #5
 8014928:	ed86 7a04 	vstr	s14, [r6, #16]
 801492c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014930:	d040      	beq.n	80149b4 <MEMS_runMagCal.constprop.18+0x17fc>
 8014932:	f8db 30a0 	ldr.w	r3, [fp, #160]	; 0xa0
 8014936:	9900      	ldr	r1, [sp, #0]
 8014938:	f89b 20a4 	ldrb.w	r2, [fp, #164]	; 0xa4
 801493c:	1acb      	subs	r3, r1, r3
 801493e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8014942:	f0c1 8077 	bcc.w	8015a34 <MEMS_runMagCal.constprop.18+0x287c>
 8014946:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 801494a:	f081 805e 	bcs.w	8015a0a <MEMS_runMagCal.constprop.18+0x2852>
 801494e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8014952:	ee07 3a10 	vmov	s14, r3
 8014956:	ed9f 6a29 	vldr	s12, [pc, #164]	; 80149fc <MEMS_runMagCal.constprop.18+0x1844>
 801495a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801495e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014962:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8014966:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 801496a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801496e:	ee06 2a90 	vmov	s13, r2
 8014972:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014976:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801497a:	ee66 6aab 	vmul.f32	s13, s13, s23
 801497e:	eef4 6ac6 	vcmpe.f32	s13, s12
 8014982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014986:	f101 803a 	bmi.w	80159fe <MEMS_runMagCal.constprop.18+0x2846>
 801498a:	eeb0 6a0c 	vmov.f32	s12, #12	; 0x40600000  3.5
 801498e:	eef4 6ac6 	vcmpe.f32	s13, s12
 8014992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014996:	f101 802c 	bmi.w	80159f2 <MEMS_runMagCal.constprop.18+0x283a>
 801499a:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 801499e:	eef4 6ac6 	vcmpe.f32	s13, s12
 80149a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149a6:	bf44      	itt	mi
 80149a8:	eef7 6a00 	vmovmi.f32	s13, #112	; 0x3f800000  1.0
 80149ac:	ee37 7a26 	vaddmi.f32	s14, s14, s13
 80149b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80149b4:	eddf 6a12 	vldr	s13, [pc, #72]	; 8014a00 <MEMS_runMagCal.constprop.18+0x1848>
 80149b8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8014a04 <MEMS_runMagCal.constprop.18+0x184c>
 80149bc:	ed96 1a00 	vldr	s2, [r6]
 80149c0:	edd6 1a01 	vldr	s3, [r6, #4]
 80149c4:	ed96 2a02 	vldr	s4, [r6, #8]
 80149c8:	edd6 2a03 	vldr	s5, [r6, #12]
 80149cc:	ed96 3a04 	vldr	s6, [r6, #16]
 80149d0:	ee86 daa7 	vdiv.f32	s26, s13, s15
 80149d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80149d8:	ee2d 1a01 	vmul.f32	s2, s26, s2
 80149dc:	ee6d 1a21 	vmul.f32	s3, s26, s3
 80149e0:	ee2d 2a02 	vmul.f32	s4, s26, s4
 80149e4:	ee6d 2a22 	vmul.f32	s5, s26, s5
 80149e8:	ee2d 3a03 	vmul.f32	s6, s26, s6
 80149ec:	ee27 da8d 	vmul.f32	s26, s15, s26
 80149f0:	2c00      	cmp	r4, #0
 80149f2:	f001 804a 	beq.w	8015a8a <MEMS_runMagCal.constprop.18+0x28d2>
 80149f6:	e007      	b.n	8014a08 <MEMS_runMagCal.constprop.18+0x1850>
 80149f8:	20001730 	.word	0x20001730
 80149fc:	389ee00a 	.word	0x389ee00a
 8014a00:	3f68ba2e 	.word	0x3f68ba2e
 8014a04:	3dcccccd 	.word	0x3dcccccd
 8014a08:	f9bb 302e 	ldrsh.w	r3, [fp, #46]	; 0x2e
 8014a0c:	ee03 3a90 	vmov	s7, r3
 8014a10:	f8bb 3034 	ldrh.w	r3, [fp, #52]	; 0x34
 8014a14:	ee04 3a10 	vmov	s8, r3
 8014a18:	f9bb 303a 	ldrsh.w	r3, [fp, #58]	; 0x3a
 8014a1c:	ee04 3a90 	vmov	s9, r3
 8014a20:	f9bb 3030 	ldrsh.w	r3, [fp, #48]	; 0x30
 8014a24:	ee05 3a10 	vmov	s10, r3
 8014a28:	f8bb 3036 	ldrh.w	r3, [fp, #54]	; 0x36
 8014a2c:	ee05 3a90 	vmov	s11, r3
 8014a30:	f9bb 303c 	ldrsh.w	r3, [fp, #60]	; 0x3c
 8014a34:	ee06 3a10 	vmov	s12, r3
 8014a38:	f9bb 3032 	ldrsh.w	r3, [fp, #50]	; 0x32
 8014a3c:	ee06 3a90 	vmov	s13, r3
 8014a40:	f8bb 3038 	ldrh.w	r3, [fp, #56]	; 0x38
 8014a44:	ee07 3a10 	vmov	s14, r3
 8014a48:	f9bb 303e 	ldrsh.w	r3, [fp, #62]	; 0x3e
 8014a4c:	ee07 3a90 	vmov	s15, r3
 8014a50:	f89b 302c 	ldrb.w	r3, [fp, #44]	; 0x2c
 8014a54:	ee0d 3a90 	vmov	s27, r3
 8014a58:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8014a5c:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8014a60:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8014a64:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8014a68:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8014a6c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8014a70:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014a74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014a7c:	eef8 daed 	vcvt.f32.s32	s27, s27
 8014a80:	2c01      	cmp	r4, #1
 8014a82:	ee63 3a81 	vmul.f32	s7, s7, s2
 8014a86:	ee24 4a01 	vmul.f32	s8, s8, s2
 8014a8a:	ee64 4a81 	vmul.f32	s9, s9, s2
 8014a8e:	ee25 5a01 	vmul.f32	s10, s10, s2
 8014a92:	ee65 5a81 	vmul.f32	s11, s11, s2
 8014a96:	ee26 6a01 	vmul.f32	s12, s12, s2
 8014a9a:	ee66 6a81 	vmul.f32	s13, s13, s2
 8014a9e:	ee27 7a01 	vmul.f32	s14, s14, s2
 8014aa2:	ee67 7a81 	vmul.f32	s15, s15, s2
 8014aa6:	ee6d da81 	vmul.f32	s27, s27, s2
 8014aaa:	f240 819b 	bls.w	8014de4 <MEMS_runMagCal.constprop.18+0x1c2c>
 8014aae:	f9bb 3046 	ldrsh.w	r3, [fp, #70]	; 0x46
 8014ab2:	ee00 3a90 	vmov	s1, r3
 8014ab6:	f8bb 304c 	ldrh.w	r3, [fp, #76]	; 0x4c
 8014aba:	ee01 3a10 	vmov	s2, r3
 8014abe:	f9bb 3052 	ldrsh.w	r3, [fp, #82]	; 0x52
 8014ac2:	ee0a 3a10 	vmov	s20, r3
 8014ac6:	f9bb 3048 	ldrsh.w	r3, [fp, #72]	; 0x48
 8014aca:	ee09 3a90 	vmov	s19, r3
 8014ace:	f8bb 304e 	ldrh.w	r3, [fp, #78]	; 0x4e
 8014ad2:	ee09 3a10 	vmov	s18, r3
 8014ad6:	f9bb 3054 	ldrsh.w	r3, [fp, #84]	; 0x54
 8014ada:	ee08 3a90 	vmov	s17, r3
 8014ade:	f9bb 304a 	ldrsh.w	r3, [fp, #74]	; 0x4a
 8014ae2:	ee08 3a10 	vmov	s16, r3
 8014ae6:	f8bb 3050 	ldrh.w	r3, [fp, #80]	; 0x50
 8014aea:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8014aee:	ee00 3a10 	vmov	s0, r3
 8014af2:	f9bb 3056 	ldrsh.w	r3, [fp, #86]	; 0x56
 8014af6:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8014afa:	eee0 3aa1 	vfma.f32	s7, s1, s3
 8014afe:	2c02      	cmp	r4, #2
 8014b00:	ee00 3a90 	vmov	s1, r3
 8014b04:	f89b 3044 	ldrb.w	r3, [fp, #68]	; 0x44
 8014b08:	eea1 4a21 	vfma.f32	s8, s2, s3
 8014b0c:	ee01 3a10 	vmov	s2, r3
 8014b10:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 8014b14:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 8014b18:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8014b1c:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8014b20:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8014b24:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8014b28:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8014b2c:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8014b30:	eeea 4a21 	vfma.f32	s9, s20, s3
 8014b34:	eea9 5aa1 	vfma.f32	s10, s19, s3
 8014b38:	eee9 5a21 	vfma.f32	s11, s18, s3
 8014b3c:	eea8 6aa1 	vfma.f32	s12, s17, s3
 8014b40:	eee8 6a21 	vfma.f32	s13, s16, s3
 8014b44:	eea0 7a21 	vfma.f32	s14, s0, s3
 8014b48:	eee0 7aa1 	vfma.f32	s15, s1, s3
 8014b4c:	eee1 da21 	vfma.f32	s27, s2, s3
 8014b50:	f000 8148 	beq.w	8014de4 <MEMS_runMagCal.constprop.18+0x1c2c>
 8014b54:	f9bb 305e 	ldrsh.w	r3, [fp, #94]	; 0x5e
 8014b58:	ee01 3a10 	vmov	s2, r3
 8014b5c:	f8bb 3064 	ldrh.w	r3, [fp, #100]	; 0x64
 8014b60:	ee01 3a90 	vmov	s3, r3
 8014b64:	f9bb 306a 	ldrsh.w	r3, [fp, #106]	; 0x6a
 8014b68:	ee09 3a90 	vmov	s19, r3
 8014b6c:	f9bb 3060 	ldrsh.w	r3, [fp, #96]	; 0x60
 8014b70:	ee09 3a10 	vmov	s18, r3
 8014b74:	f8bb 3066 	ldrh.w	r3, [fp, #102]	; 0x66
 8014b78:	ee08 3a90 	vmov	s17, r3
 8014b7c:	f9bb 306c 	ldrsh.w	r3, [fp, #108]	; 0x6c
 8014b80:	ee08 3a10 	vmov	s16, r3
 8014b84:	f9bb 3062 	ldrsh.w	r3, [fp, #98]	; 0x62
 8014b88:	ee00 3a10 	vmov	s0, r3
 8014b8c:	f8bb 3068 	ldrh.w	r3, [fp, #104]	; 0x68
 8014b90:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8014b94:	ee00 3a90 	vmov	s1, r3
 8014b98:	f9bb 306e 	ldrsh.w	r3, [fp, #110]	; 0x6e
 8014b9c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8014ba0:	eee1 3a02 	vfma.f32	s7, s2, s4
 8014ba4:	2c03      	cmp	r4, #3
 8014ba6:	ee01 3a10 	vmov	s2, r3
 8014baa:	f89b 305c 	ldrb.w	r3, [fp, #92]	; 0x5c
 8014bae:	eea1 4a82 	vfma.f32	s8, s3, s4
 8014bb2:	ee01 3a90 	vmov	s3, r3
 8014bb6:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 8014bba:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8014bbe:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8014bc2:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8014bc6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8014bca:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8014bce:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8014bd2:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8014bd6:	eee9 4a82 	vfma.f32	s9, s19, s4
 8014bda:	eea9 5a02 	vfma.f32	s10, s18, s4
 8014bde:	eee2 5a28 	vfma.f32	s11, s4, s17
 8014be2:	eea8 6a02 	vfma.f32	s12, s16, s4
 8014be6:	eee0 6a02 	vfma.f32	s13, s0, s4
 8014bea:	eea0 7a82 	vfma.f32	s14, s1, s4
 8014bee:	eee1 7a02 	vfma.f32	s15, s2, s4
 8014bf2:	eee1 da82 	vfma.f32	s27, s3, s4
 8014bf6:	f000 80f5 	beq.w	8014de4 <MEMS_runMagCal.constprop.18+0x1c2c>
 8014bfa:	f9bb 3076 	ldrsh.w	r3, [fp, #118]	; 0x76
 8014bfe:	ee01 3a90 	vmov	s3, r3
 8014c02:	f8bb 307c 	ldrh.w	r3, [fp, #124]	; 0x7c
 8014c06:	ee02 3a10 	vmov	s4, r3
 8014c0a:	f9bb 3082 	ldrsh.w	r3, [fp, #130]	; 0x82
 8014c0e:	ee09 3a10 	vmov	s18, r3
 8014c12:	f9bb 3078 	ldrsh.w	r3, [fp, #120]	; 0x78
 8014c16:	ee08 3a90 	vmov	s17, r3
 8014c1a:	f8bb 307e 	ldrh.w	r3, [fp, #126]	; 0x7e
 8014c1e:	ee08 3a10 	vmov	s16, r3
 8014c22:	f9bb 3084 	ldrsh.w	r3, [fp, #132]	; 0x84
 8014c26:	ee00 3a10 	vmov	s0, r3
 8014c2a:	f9bb 307a 	ldrsh.w	r3, [fp, #122]	; 0x7a
 8014c2e:	ee00 3a90 	vmov	s1, r3
 8014c32:	f8bb 3080 	ldrh.w	r3, [fp, #128]	; 0x80
 8014c36:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8014c3a:	ee01 3a10 	vmov	s2, r3
 8014c3e:	f9bb 3086 	ldrsh.w	r3, [fp, #134]	; 0x86
 8014c42:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8014c46:	eee1 3aa2 	vfma.f32	s7, s3, s5
 8014c4a:	2c04      	cmp	r4, #4
 8014c4c:	ee01 3a90 	vmov	s3, r3
 8014c50:	f89b 3074 	ldrb.w	r3, [fp, #116]	; 0x74
 8014c54:	eea2 4a22 	vfma.f32	s8, s4, s5
 8014c58:	ee02 3a10 	vmov	s4, r3
 8014c5c:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8014c60:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8014c64:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8014c68:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8014c6c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8014c70:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8014c74:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8014c78:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8014c7c:	eee9 4a22 	vfma.f32	s9, s18, s5
 8014c80:	eea8 5aa2 	vfma.f32	s10, s17, s5
 8014c84:	eee8 5a22 	vfma.f32	s11, s16, s5
 8014c88:	eea0 6a22 	vfma.f32	s12, s0, s5
 8014c8c:	eee0 6aa2 	vfma.f32	s13, s1, s5
 8014c90:	eea1 7a22 	vfma.f32	s14, s2, s5
 8014c94:	eee1 7aa2 	vfma.f32	s15, s3, s5
 8014c98:	eee2 da82 	vfma.f32	s27, s5, s4
 8014c9c:	f000 80a2 	beq.w	8014de4 <MEMS_runMagCal.constprop.18+0x1c2c>
 8014ca0:	f9bb 308e 	ldrsh.w	r3, [fp, #142]	; 0x8e
 8014ca4:	ee09 3a90 	vmov	s19, r3
 8014ca8:	f8bb 3094 	ldrh.w	r3, [fp, #148]	; 0x94
 8014cac:	ee09 3a10 	vmov	s18, r3
 8014cb0:	f9bb 309a 	ldrsh.w	r3, [fp, #154]	; 0x9a
 8014cb4:	ee08 3a90 	vmov	s17, r3
 8014cb8:	f9bb 3090 	ldrsh.w	r3, [fp, #144]	; 0x90
 8014cbc:	ee08 3a10 	vmov	s16, r3
 8014cc0:	f8bb 3096 	ldrh.w	r3, [fp, #150]	; 0x96
 8014cc4:	ee00 3a10 	vmov	s0, r3
 8014cc8:	f9bb 309c 	ldrsh.w	r3, [fp, #156]	; 0x9c
 8014ccc:	ee00 3a90 	vmov	s1, r3
 8014cd0:	f9bb 3092 	ldrsh.w	r3, [fp, #146]	; 0x92
 8014cd4:	ee01 3a10 	vmov	s2, r3
 8014cd8:	f8bb 3098 	ldrh.w	r3, [fp, #152]	; 0x98
 8014cdc:	ee01 3a90 	vmov	s3, r3
 8014ce0:	f9bb 309e 	ldrsh.w	r3, [fp, #158]	; 0x9e
 8014ce4:	ee02 3a10 	vmov	s4, r3
 8014ce8:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8014cec:	ee02 3a90 	vmov	s5, r3
 8014cf0:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 8014cf4:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8014cf8:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8014cfc:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8014d00:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8014d04:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8014d08:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8014d0c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8014d10:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8014d14:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8014d18:	2c05      	cmp	r4, #5
 8014d1a:	eee9 3a83 	vfma.f32	s7, s19, s6
 8014d1e:	eea3 4a09 	vfma.f32	s8, s6, s18
 8014d22:	eee3 4a28 	vfma.f32	s9, s6, s17
 8014d26:	eea3 5a08 	vfma.f32	s10, s6, s16
 8014d2a:	eee3 5a00 	vfma.f32	s11, s6, s0
 8014d2e:	eea3 6a20 	vfma.f32	s12, s6, s1
 8014d32:	eee3 6a01 	vfma.f32	s13, s6, s2
 8014d36:	eea3 7a21 	vfma.f32	s14, s6, s3
 8014d3a:	eee3 7a02 	vfma.f32	s15, s6, s4
 8014d3e:	eee3 da22 	vfma.f32	s27, s6, s5
 8014d42:	d04f      	beq.n	8014de4 <MEMS_runMagCal.constprop.18+0x1c2c>
 8014d44:	f9bb 30a6 	ldrsh.w	r3, [fp, #166]	; 0xa6
 8014d48:	ee09 3a10 	vmov	s18, r3
 8014d4c:	f8bb 30ac 	ldrh.w	r3, [fp, #172]	; 0xac
 8014d50:	ee08 3a90 	vmov	s17, r3
 8014d54:	f9bb 30b2 	ldrsh.w	r3, [fp, #178]	; 0xb2
 8014d58:	ee08 3a10 	vmov	s16, r3
 8014d5c:	f9bb 30a8 	ldrsh.w	r3, [fp, #168]	; 0xa8
 8014d60:	ee00 3a10 	vmov	s0, r3
 8014d64:	f8bb 30ae 	ldrh.w	r3, [fp, #174]	; 0xae
 8014d68:	ee00 3a90 	vmov	s1, r3
 8014d6c:	f9bb 30b4 	ldrsh.w	r3, [fp, #180]	; 0xb4
 8014d70:	ee01 3a10 	vmov	s2, r3
 8014d74:	f9bb 30aa 	ldrsh.w	r3, [fp, #170]	; 0xaa
 8014d78:	ee01 3a90 	vmov	s3, r3
 8014d7c:	f8bb 30b0 	ldrh.w	r3, [fp, #176]	; 0xb0
 8014d80:	ee02 3a10 	vmov	s4, r3
 8014d84:	f9bb 30b6 	ldrsh.w	r3, [fp, #182]	; 0xb6
 8014d88:	ee02 3a90 	vmov	s5, r3
 8014d8c:	f89b 30a4 	ldrb.w	r3, [fp, #164]	; 0xa4
 8014d90:	ee03 3a10 	vmov	s6, r3
 8014d94:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8014d98:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8014d9c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8014da0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8014da4:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8014da8:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8014dac:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8014db0:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8014db4:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8014db8:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8014dbc:	eee9 3a0d 	vfma.f32	s7, s18, s26
 8014dc0:	eea8 4a8d 	vfma.f32	s8, s17, s26
 8014dc4:	eee8 4a0d 	vfma.f32	s9, s16, s26
 8014dc8:	eead 5a00 	vfma.f32	s10, s26, s0
 8014dcc:	eee0 5a8d 	vfma.f32	s11, s1, s26
 8014dd0:	eea1 6a0d 	vfma.f32	s12, s2, s26
 8014dd4:	eeed 6a21 	vfma.f32	s13, s26, s3
 8014dd8:	eead 7a02 	vfma.f32	s14, s26, s4
 8014ddc:	eee2 7a8d 	vfma.f32	s15, s5, s26
 8014de0:	eeed da03 	vfma.f32	s27, s26, s6
 8014de4:	edcd 3a10 	vstr	s7, [sp, #64]	; 0x40
 8014de8:	ed8d 4a13 	vstr	s8, [sp, #76]	; 0x4c
 8014dec:	edc5 4a00 	vstr	s9, [r5]
 8014df0:	ed8d 5a11 	vstr	s10, [sp, #68]	; 0x44
 8014df4:	edcd 5a14 	vstr	s11, [sp, #80]	; 0x50
 8014df8:	ed85 6a01 	vstr	s12, [r5, #4]
 8014dfc:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8014e00:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
 8014e04:	edc5 7a02 	vstr	s15, [r5, #8]
 8014e08:	eeb0 ba44 	vmov.f32	s22, s8
 8014e0c:	eeb0 0a63 	vmov.f32	s0, s7
 8014e10:	eeb0 ca64 	vmov.f32	s24, s9
 8014e14:	eef0 9a45 	vmov.f32	s19, s10
 8014e18:	eeb0 aa65 	vmov.f32	s20, s11
 8014e1c:	eeb0 8a46 	vmov.f32	s16, s12
 8014e20:	eef0 8a66 	vmov.f32	s17, s13
 8014e24:	eeb0 9a47 	vmov.f32	s18, s14
 8014e28:	eef0 ea67 	vmov.f32	s29, s15
 8014e2c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8014e30:	eddf cae5 	vldr	s25, [pc, #916]	; 80151c8 <MEMS_runMagCal.constprop.18+0x2010>
 8014e34:	ee07 3a90 	vmov	s15, r3
 8014e38:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 8014e3c:	ee04 3a10 	vmov	s8, r3
 8014e40:	f9bd 3076 	ldrsh.w	r3, [sp, #118]	; 0x76
 8014e44:	ee04 3a90 	vmov	s9, r3
 8014e48:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 8014e4c:	ee05 3a10 	vmov	s10, r3
 8014e50:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
 8014e54:	ee05 3a90 	vmov	s11, r3
 8014e58:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
 8014e5c:	ee06 3a10 	vmov	s12, r3
 8014e60:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 8014e64:	ee06 3a90 	vmov	s13, r3
 8014e68:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
 8014e6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014e70:	ee07 3a10 	vmov	s14, r3
 8014e74:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
 8014e78:	eead ba27 	vfma.f32	s22, s26, s15
 8014e7c:	ee07 3a90 	vmov	s15, r3
 8014e80:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8014e84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014e88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014e8c:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8014e90:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8014e94:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8014e98:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8014e9c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014ea0:	eea4 0a0d 	vfma.f32	s0, s8, s26
 8014ea4:	2300      	movs	r3, #0
 8014ea6:	f88b 30a5 	strb.w	r3, [fp, #165]	; 0xa5
 8014eaa:	eead 9a07 	vfma.f32	s18, s26, s14
 8014eae:	eead ca24 	vfma.f32	s24, s26, s9
 8014eb2:	eeed 9a05 	vfma.f32	s19, s26, s10
 8014eb6:	eead aa25 	vfma.f32	s20, s26, s11
 8014eba:	eead 8a06 	vfma.f32	s16, s26, s12
 8014ebe:	eeed 8a26 	vfma.f32	s17, s26, s13
 8014ec2:	eeed ea27 	vfma.f32	s29, s26, s15
 8014ec6:	f005 f991 	bl	801a1ec <roundf>
 8014eca:	eef0 aa40 	vmov.f32	s21, s0
 8014ece:	ee2b 0a2c 	vmul.f32	s0, s22, s25
 8014ed2:	edcb aa2a 	vstr	s21, [fp, #168]	; 0xa8
 8014ed6:	f005 f989 	bl	801a1ec <roundf>
 8014eda:	ee10 0a10 	vmov	r0, s0
 8014ede:	f7eb fb3b 	bl	8000558 <__aeabi_f2d>
 8014ee2:	a3b7      	add	r3, pc, #732	; (adr r3, 80151c0 <MEMS_runMagCal.constprop.18+0x2008>)
 8014ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ee8:	f7eb fb8e 	bl	8000608 <__aeabi_dmul>
 8014eec:	f7eb fe64 	bl	8000bb8 <__aeabi_d2f>
 8014ef0:	eeb0 0a69 	vmov.f32	s0, s19
 8014ef4:	ee0b 0a10 	vmov	s22, r0
 8014ef8:	f8cb 00b4 	str.w	r0, [fp, #180]	; 0xb4
 8014efc:	f005 f976 	bl	801a1ec <roundf>
 8014f00:	eef0 9a40 	vmov.f32	s19, s0
 8014f04:	ee2a 0a2c 	vmul.f32	s0, s20, s25
 8014f08:	edcb 9a2b 	vstr	s19, [fp, #172]	; 0xac
 8014f0c:	f005 f96e 	bl	801a1ec <roundf>
 8014f10:	ee10 0a10 	vmov	r0, s0
 8014f14:	f7eb fb20 	bl	8000558 <__aeabi_f2d>
 8014f18:	a3a9      	add	r3, pc, #676	; (adr r3, 80151c0 <MEMS_runMagCal.constprop.18+0x2008>)
 8014f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f1e:	f7eb fb73 	bl	8000608 <__aeabi_dmul>
 8014f22:	f7eb fe49 	bl	8000bb8 <__aeabi_d2f>
 8014f26:	eeb0 0a68 	vmov.f32	s0, s17
 8014f2a:	ee0a 0a10 	vmov	s20, r0
 8014f2e:	f8cb 00c4 	str.w	r0, [fp, #196]	; 0xc4
 8014f32:	f005 f95b 	bl	801a1ec <roundf>
 8014f36:	eef0 8a40 	vmov.f32	s17, s0
 8014f3a:	ee29 0a2c 	vmul.f32	s0, s18, s25
 8014f3e:	edcb 8a2c 	vstr	s17, [fp, #176]	; 0xb0
 8014f42:	f005 f953 	bl	801a1ec <roundf>
 8014f46:	ee10 0a10 	vmov	r0, s0
 8014f4a:	f7eb fb05 	bl	8000558 <__aeabi_f2d>
 8014f4e:	a39c      	add	r3, pc, #624	; (adr r3, 80151c0 <MEMS_runMagCal.constprop.18+0x2008>)
 8014f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f54:	f7eb fb58 	bl	8000608 <__aeabi_dmul>
 8014f58:	f7eb fe2e 	bl	8000bb8 <__aeabi_d2f>
 8014f5c:	ee2c 0a2c 	vmul.f32	s0, s24, s25
 8014f60:	ee09 0a10 	vmov	s18, r0
 8014f64:	f8cb 00d4 	str.w	r0, [fp, #212]	; 0xd4
 8014f68:	f005 f940 	bl	801a1ec <roundf>
 8014f6c:	ee10 0a10 	vmov	r0, s0
 8014f70:	f7eb faf2 	bl	8000558 <__aeabi_f2d>
 8014f74:	a392      	add	r3, pc, #584	; (adr r3, 80151c0 <MEMS_runMagCal.constprop.18+0x2008>)
 8014f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f7a:	f7eb fb45 	bl	8000608 <__aeabi_dmul>
 8014f7e:	f7eb fe1b 	bl	8000bb8 <__aeabi_d2f>
 8014f82:	ee28 0a2c 	vmul.f32	s0, s16, s25
 8014f86:	ee0c 0a10 	vmov	s24, r0
 8014f8a:	f8cb 00c0 	str.w	r0, [fp, #192]	; 0xc0
 8014f8e:	f005 f92d 	bl	801a1ec <roundf>
 8014f92:	ee10 0a10 	vmov	r0, s0
 8014f96:	f7eb fadf 	bl	8000558 <__aeabi_f2d>
 8014f9a:	a389      	add	r3, pc, #548	; (adr r3, 80151c0 <MEMS_runMagCal.constprop.18+0x2008>)
 8014f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fa0:	f7eb fb32 	bl	8000608 <__aeabi_dmul>
 8014fa4:	f7eb fe08 	bl	8000bb8 <__aeabi_d2f>
 8014fa8:	ee2e 0aac 	vmul.f32	s0, s29, s25
 8014fac:	ee08 0a10 	vmov	s16, r0
 8014fb0:	f8cb 00cc 	str.w	r0, [fp, #204]	; 0xcc
 8014fb4:	f005 f91a 	bl	801a1ec <roundf>
 8014fb8:	ee10 0a10 	vmov	r0, s0
 8014fbc:	f7eb facc 	bl	8000558 <__aeabi_f2d>
 8014fc0:	a37f      	add	r3, pc, #508	; (adr r3, 80151c0 <MEMS_runMagCal.constprop.18+0x2008>)
 8014fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fc6:	f7eb fb1f 	bl	8000608 <__aeabi_dmul>
 8014fca:	f7eb fdf5 	bl	8000bb8 <__aeabi_d2f>
 8014fce:	eef0 7a6d 	vmov.f32	s15, s27
 8014fd2:	eeed 7a0e 	vfma.f32	s15, s26, s28
 8014fd6:	f8cb 00d0 	str.w	r0, [fp, #208]	; 0xd0
 8014fda:	f8cb 00c8 	str.w	r0, [fp, #200]	; 0xc8
 8014fde:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8014fe2:	ee67 7aab 	vmul.f32	s15, s15, s23
 8014fe6:	ee0c 0a90 	vmov	s25, r0
 8014fea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ff2:	ed8b ca2e 	vstr	s24, [fp, #184]	; 0xb8
 8014ff6:	ed8b 8a2f 	vstr	s16, [fp, #188]	; 0xbc
 8014ffa:	f100 84e9 	bmi.w	80159d0 <MEMS_runMagCal.constprop.18+0x2818>
 8014ffe:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8015002:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801500a:	bf4c      	ite	mi
 801500c:	2302      	movmi	r3, #2
 801500e:	2301      	movpl	r3, #1
 8015010:	f88b 30a4 	strb.w	r3, [fp, #164]	; 0xa4
 8015014:	f89b 50e0 	ldrb.w	r5, [fp, #224]	; 0xe0
 8015018:	f89b 80e1 	ldrb.w	r8, [fp, #225]	; 0xe1
 801501c:	9a00      	ldr	r2, [sp, #0]
 801501e:	f99b 30e2 	ldrsb.w	r3, [fp, #226]	; 0xe2
 8015022:	f8cb 20d8 	str.w	r2, [fp, #216]	; 0xd8
 8015026:	2100      	movs	r1, #0
 8015028:	22ff      	movs	r2, #255	; 0xff
 801502a:	4545      	cmp	r5, r8
 801502c:	f103 0301 	add.w	r3, r3, #1
 8015030:	f88b 1364 	strb.w	r1, [fp, #868]	; 0x364
 8015034:	f88b 2366 	strb.w	r2, [fp, #870]	; 0x366
 8015038:	f000 84c3 	beq.w	80159c2 <MEMS_runMagCal.constprop.18+0x280a>
 801503c:	1b5b      	subs	r3, r3, r5
 801503e:	fb93 f2f8 	sdiv	r2, r3, r8
 8015042:	fb08 3312 	mls	r3, r8, r2, r3
 8015046:	2b00      	cmp	r3, #0
 8015048:	b21f      	sxth	r7, r3
 801504a:	bfbc      	itt	lt
 801504c:	4443      	addlt	r3, r8
 801504e:	b21f      	sxthlt	r7, r3
 8015050:	f89b 9365 	ldrb.w	r9, [fp, #869]	; 0x365
 8015054:	2d00      	cmp	r5, #0
 8015056:	f000 8514 	beq.w	8015a82 <MEMS_runMagCal.constprop.18+0x28ca>
 801505a:	eddf 7a5c 	vldr	s15, [pc, #368]	; 80151cc <MEMS_runMagCal.constprop.18+0x2014>
 801505e:	2600      	movs	r6, #0
 8015060:	ee6b baa7 	vmul.f32	s23, s23, s15
 8015064:	4633      	mov	r3, r6
 8015066:	f04f 34ff 	mov.w	r4, #4294967295
 801506a:	19da      	adds	r2, r3, r7
 801506c:	fb92 f3f8 	sdiv	r3, r2, r8
 8015070:	fb08 2313 	mls	r3, r8, r3, r2
 8015074:	b2db      	uxtb	r3, r3
 8015076:	331d      	adds	r3, #29
 8015078:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801507c:	1c62      	adds	r2, r4, #1
 801507e:	f9b3 101e 	ldrsh.w	r1, [r3, #30]
 8015082:	fb92 f4f9 	sdiv	r4, r2, r9
 8015086:	ee07 1a90 	vmov	s15, r1
 801508a:	f9b3 101c 	ldrsh.w	r1, [r3, #28]
 801508e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8015092:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015096:	ee07 1a10 	vmov	s14, r1
 801509a:	ee77 7ae8 	vsub.f32	s15, s15, s17
 801509e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80150a2:	ee06 3a90 	vmov	s13, r3
 80150a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80150aa:	ee37 7a69 	vsub.f32	s14, s14, s19
 80150ae:	ee17 3a90 	vmov	r3, s15
 80150b2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80150b6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80150ba:	b21b      	sxth	r3, r3
 80150bc:	ee76 6aea 	vsub.f32	s13, s13, s21
 80150c0:	ee07 3a90 	vmov	s15, r3
 80150c4:	ee17 3a10 	vmov	r3, s14
 80150c8:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80150cc:	b21b      	sxth	r3, r3
 80150ce:	ee07 3a10 	vmov	s14, r3
 80150d2:	ee16 3a90 	vmov	r3, s13
 80150d6:	b21b      	sxth	r3, r3
 80150d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80150dc:	ee06 3a90 	vmov	s13, r3
 80150e0:	ee67 5aac 	vmul.f32	s11, s15, s25
 80150e4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80150e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80150ec:	ee27 5a88 	vmul.f32	s10, s15, s16
 80150f0:	eee6 5a8c 	vfma.f32	s11, s13, s24
 80150f4:	fb09 2414 	mls	r4, r9, r4, r2
 80150f8:	b264      	sxtb	r4, r4
 80150fa:	ee27 6a2c 	vmul.f32	s12, s14, s25
 80150fe:	eea7 5a0c 	vfma.f32	s10, s14, s24
 8015102:	3601      	adds	r6, #1
 8015104:	b236      	sxth	r6, r6
 8015106:	ee27 7a0a 	vmul.f32	s14, s14, s20
 801510a:	eea6 6a8c 	vfma.f32	s12, s13, s24
 801510e:	ee66 6a8b 	vmul.f32	s13, s13, s22
 8015112:	eefd 5ae5 	vcvt.s32.f32	s11, s11
 8015116:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801511a:	eebd 5ac5 	vcvt.s32.f32	s10, s10
 801511e:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8015122:	ee67 7a89 	vmul.f32	s15, s15, s18
 8015126:	ee17 0a10 	vmov	r0, s14
 801512a:	ee15 2a90 	vmov	r2, s11
 801512e:	ee16 3a90 	vmov	r3, s13
 8015132:	ee15 1a10 	vmov	r1, s10
 8015136:	eebd 7ac6 	vcvt.s32.f32	s14, s12
 801513a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801513e:	4402      	add	r2, r0
 8015140:	4419      	add	r1, r3
 8015142:	4610      	mov	r0, r2
 8015144:	ee17 3a10 	vmov	r3, s14
 8015148:	ee17 2a90 	vmov	r2, s15
 801514c:	fb10 f000 	smulbb	r0, r0, r0
 8015150:	441a      	add	r2, r3
 8015152:	b209      	sxth	r1, r1
 8015154:	fb01 0101 	mla	r1, r1, r1, r0
 8015158:	b213      	sxth	r3, r2
 801515a:	fb03 1303 	mla	r3, r3, r3, r1
 801515e:	ee07 3a90 	vmov	s15, r3
 8015162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015166:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801516a:	ee20 0a2b 	vmul.f32	s0, s0, s23
 801516e:	f005 f83d 	bl	801a1ec <roundf>
 8015172:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8015176:	eb0b 0344 	add.w	r3, fp, r4, lsl #1
 801517a:	ee10 1a10 	vmov	r1, s0
 801517e:	42ae      	cmp	r6, r5
 8015180:	f8a3 1368 	strh.w	r1, [r3, #872]	; 0x368
 8015184:	4622      	mov	r2, r4
 8015186:	4633      	mov	r3, r6
 8015188:	f6ff af6f 	blt.w	801506a <MEMS_runMagCal.constprop.18+0x1eb2>
 801518c:	f88b 4366 	strb.w	r4, [fp, #870]	; 0x366
 8015190:	454d      	cmp	r5, r9
 8015192:	4629      	mov	r1, r5
 8015194:	bf28      	it	cs
 8015196:	4649      	movcs	r1, r9
 8015198:	454d      	cmp	r5, r9
 801519a:	f88b 1364 	strb.w	r1, [fp, #868]	; 0x364
 801519e:	f080 8408 	bcs.w	80159b2 <MEMS_runMagCal.constprop.18+0x27fa>
 80151a2:	2000      	movs	r0, #0
 80151a4:	b28e      	uxth	r6, r1
 80151a6:	2900      	cmp	r1, #0
 80151a8:	f43e aa73 	beq.w	8013692 <MEMS_runMagCal.constprop.18+0x4da>
 80151ac:	eddf 6a08 	vldr	s13, [pc, #32]	; 80151d0 <MEMS_runMagCal.constprop.18+0x2018>
 80151b0:	2400      	movs	r4, #0
 80151b2:	eeb0 7a66 	vmov.f32	s14, s13
 80151b6:	f241 255c 	movw	r5, #4700	; 0x125c
 80151ba:	e017      	b.n	80151ec <MEMS_runMagCal.constprop.18+0x2034>
 80151bc:	f3af 8000 	nop.w
 80151c0:	a0b5ed8d 	.word	0xa0b5ed8d
 80151c4:	3eb0c6f7 	.word	0x3eb0c6f7
 80151c8:	447a0000 	.word	0x447a0000
 80151cc:	42c80000 	.word	0x42c80000
 80151d0:	00000000 	.word	0x00000000
 80151d4:	3c23d70a 	.word	0x3c23d70a
 80151d8:	c23c0000 	.word	0xc23c0000
 80151dc:	3fd9999a 	.word	0x3fd9999a
 80151e0:	4752f000 	.word	0x4752f000
 80151e4:	3eaaaaab 	.word	0x3eaaaaab
 80151e8:	40233334 	.word	0x40233334
 80151ec:	1902      	adds	r2, r0, r4
 80151ee:	fb92 f3f9 	sdiv	r3, r2, r9
 80151f2:	fb09 2313 	mls	r3, r9, r3, r2
 80151f6:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 80151fa:	3401      	adds	r4, #1
 80151fc:	f8b3 3368 	ldrh.w	r3, [r3, #872]	; 0x368
 8015200:	ee07 3a90 	vmov	s15, r3
 8015204:	f5a3 5292 	sub.w	r2, r3, #4672	; 0x1240
 8015208:	42ab      	cmp	r3, r5
 801520a:	bf98      	it	ls
 801520c:	1aeb      	subls	r3, r5, r3
 801520e:	f1a2 021c 	sub.w	r2, r2, #28
 8015212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015216:	bf8c      	ite	hi
 8015218:	b293      	uxthhi	r3, r2
 801521a:	b29b      	uxthls	r3, r3
 801521c:	fb03 f303 	mul.w	r3, r3, r3
 8015220:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8015224:	ee07 3a90 	vmov	s15, r3
 8015228:	b2a3      	uxth	r3, r4
 801522a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801522e:	429e      	cmp	r6, r3
 8015230:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015234:	d8da      	bhi.n	80151ec <MEMS_runMagCal.constprop.18+0x2034>
 8015236:	ee07 1a90 	vmov	s15, r1
 801523a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801523e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8015242:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8015246:	293b      	cmp	r1, #59	; 0x3b
 8015248:	eeb1 7ac6 	vsqrt.f32	s14, s12
 801524c:	f77e aa21 	ble.w	8013692 <MEMS_runMagCal.constprop.18+0x4da>
 8015250:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8015254:	ed5f 6a21 	vldr	s13, [pc, #-132]	; 80151d4 <MEMS_runMagCal.constprop.18+0x201c>
 8015258:	ed5f 7a21 	vldr	s15, [pc, #-132]	; 80151d8 <MEMS_runMagCal.constprop.18+0x2020>
 801525c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8015260:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8015264:	eef0 7ae7 	vabs.f32	s15, s15
 8015268:	eef4 7ac6 	vcmpe.f32	s15, s12
 801526c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015270:	f100 839d 	bmi.w	80159ae <MEMS_runMagCal.constprop.18+0x27f6>
 8015274:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8015278:	eef4 7ac6 	vcmpe.f32	s15, s12
 801527c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015280:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015284:	d507      	bpl.n	8015296 <MEMS_runMagCal.constprop.18+0x20de>
 8015286:	ed5f 6a2b 	vldr	s13, [pc, #-172]	; 80151dc <MEMS_runMagCal.constprop.18+0x2024>
 801528a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801528e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015292:	f100 838c 	bmi.w	80159ae <MEMS_runMagCal.constprop.18+0x27f6>
 8015296:	eef1 6a05 	vmov.f32	s13, #21	; 0x40a80000  5.250
 801529a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801529e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152a2:	f100 840a 	bmi.w	8015aba <MEMS_runMagCal.constprop.18+0x2902>
 80152a6:	eef2 6a05 	vmov.f32	s13, #37	; 0x41280000  10.5
 80152aa:	eef4 7ae6 	vcmpe.f32	s15, s13
 80152ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152b2:	f140 8400 	bpl.w	8015ab6 <MEMS_runMagCal.constprop.18+0x28fe>
 80152b6:	ed5f 7a34 	vldr	s15, [pc, #-208]	; 80151e8 <MEMS_runMagCal.constprop.18+0x2030>
 80152ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80152be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152c2:	bf4c      	ite	mi
 80152c4:	2302      	movmi	r3, #2
 80152c6:	2301      	movpl	r3, #1
 80152c8:	f88b 30a4 	strb.w	r3, [fp, #164]	; 0xa4
 80152cc:	f7fe b9e1 	b.w	8013692 <MEMS_runMagCal.constprop.18+0x4da>
 80152d0:	ed1f 7a3d 	vldr	s14, [pc, #-244]	; 80151e0 <MEMS_runMagCal.constprop.18+0x2028>
 80152d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80152d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152dc:	f77e aa60 	ble.w	80137a0 <MEMS_runMagCal.constprop.18+0x5e8>
 80152e0:	f1b8 0f02 	cmp.w	r8, #2
 80152e4:	bf28      	it	cs
 80152e6:	f04f 0802 	movcs.w	r8, #2
 80152ea:	f88b 80a4 	strb.w	r8, [fp, #164]	; 0xa4
 80152ee:	f7fe ba57 	b.w	80137a0 <MEMS_runMagCal.constprop.18+0x5e8>
 80152f2:	2300      	movs	r3, #0
 80152f4:	f88b 30dc 	strb.w	r3, [fp, #220]	; 0xdc
 80152f8:	f7fe b9cb 	b.w	8013692 <MEMS_runMagCal.constprop.18+0x4da>
 80152fc:	2303      	movs	r3, #3
 80152fe:	f88b 30a4 	strb.w	r3, [fp, #164]	; 0xa4
 8015302:	f7fe bb7b 	b.w	80139fc <MEMS_runMagCal.constprop.18+0x844>
 8015306:	eeb0 0a49 	vmov.f32	s0, s18
 801530a:	4640      	mov	r0, r8
 801530c:	f7fc fc0c 	bl	8011b28 <MEMS_updateMagBufferIndex.constprop.22>
 8015310:	f7fe bd4b 	b.w	8013daa <MEMS_runMagCal.constprop.18+0xbf2>
 8015314:	2302      	movs	r3, #2
 8015316:	f88b 30a4 	strb.w	r3, [fp, #164]	; 0xa4
 801531a:	f7fe bad5 	b.w	80138c8 <MEMS_runMagCal.constprop.18+0x710>
 801531e:	1c50      	adds	r0, r2, #1
 8015320:	fb90 f4f6 	sdiv	r4, r0, r6
 8015324:	fb06 0014 	mls	r0, r6, r4, r0
 8015328:	b2c0      	uxtb	r0, r0
 801532a:	9001      	str	r0, [sp, #4]
 801532c:	f7fe b929 	b.w	8013582 <MEMS_runMagCal.constprop.18+0x3ca>
 8015330:	9b00      	ldr	r3, [sp, #0]
 8015332:	f8db 20e4 	ldr.w	r2, [fp, #228]	; 0xe4
 8015336:	f8db 1360 	ldr.w	r1, [fp, #864]	; 0x360
 801533a:	eb0b 0ac3 	add.w	sl, fp, r3, lsl #3
 801533e:	f9ba 3100 	ldrsh.w	r3, [sl, #256]	; 0x100
 8015342:	4413      	add	r3, r2
 8015344:	4299      	cmp	r1, r3
 8015346:	d2d4      	bcs.n	80152f2 <MEMS_runMagCal.constprop.18+0x213a>
 8015348:	f8db 10d8 	ldr.w	r1, [fp, #216]	; 0xd8
 801534c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015350:	fb03 f301 	mul.w	r3, r3, r1
 8015354:	3364      	adds	r3, #100	; 0x64
 8015356:	4293      	cmp	r3, r2
 8015358:	bf38      	it	cc
 801535a:	4613      	movcc	r3, r2
 801535c:	2200      	movs	r2, #0
 801535e:	f8cb 3360 	str.w	r3, [fp, #864]	; 0x360
 8015362:	f88b 20dc 	strb.w	r2, [fp, #220]	; 0xdc
 8015366:	f7fe b994 	b.w	8013692 <MEMS_runMagCal.constprop.18+0x4da>
 801536a:	2000      	movs	r0, #0
 801536c:	f7fe bf2f 	b.w	80141ce <MEMS_runMagCal.constprop.18+0x1016>
 8015370:	fb93 f5f2 	sdiv	r5, r3, r2
 8015374:	fb02 3315 	mls	r3, r2, r5, r3
 8015378:	b21d      	sxth	r5, r3
 801537a:	f7fe bed8 	b.w	801412e <MEMS_runMagCal.constprop.18+0xf76>
 801537e:	f04f 0801 	mov.w	r8, #1
 8015382:	f7fe bf5e 	b.w	8014242 <MEMS_runMagCal.constprop.18+0x108a>
 8015386:	eddb 4a31 	vldr	s9, [fp, #196]	; 0xc4
 801538a:	eddb 6a2d 	vldr	s13, [fp, #180]	; 0xb4
 801538e:	ed9b 5a35 	vldr	s10, [fp, #212]	; 0xd4
 8015392:	ed1f 4a6c 	vldr	s8, [pc, #-432]	; 80151e4 <MEMS_runMagCal.constprop.18+0x202c>
 8015396:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801539a:	eef7 4a02 	vmov.f32	s9, #114	; 0x3f900000  1.125
 801539e:	ee76 6a85 	vadd.f32	s13, s13, s10
 80153a2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80153a6:	ee66 6a84 	vmul.f32	s13, s13, s8
 80153aa:	eef4 6ae4 	vcmpe.f32	s13, s9
 80153ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153b2:	bf88      	it	hi
 80153b4:	eef0 6a64 	vmovhi.f32	s13, s9
 80153b8:	eef4 6ac5 	vcmpe.f32	s13, s10
 80153bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153c0:	bfb8      	it	lt
 80153c2:	eef0 6a45 	vmovlt.f32	s13, s10
 80153c6:	ee65 5aa6 	vmul.f32	s11, s11, s13
 80153ca:	eeb4 6ae5 	vcmpe.f32	s12, s11
 80153ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153d2:	dc8e      	bgt.n	80152f2 <MEMS_runMagCal.constprop.18+0x213a>
 80153d4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80153d8:	eeb4 6ac7 	vcmpe.f32	s12, s14
 80153dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153e0:	dc87      	bgt.n	80152f2 <MEMS_runMagCal.constprop.18+0x213a>
 80153e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80153e6:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80153ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153ee:	dc80      	bgt.n	80152f2 <MEMS_runMagCal.constprop.18+0x213a>
 80153f0:	4680      	mov	r8, r0
 80153f2:	f7fe bf40 	b.w	8014276 <MEMS_runMagCal.constprop.18+0x10be>
 80153f6:	ad16      	add	r5, sp, #88	; 0x58
 80153f8:	eefc baeb 	vcvt.u32.f32	s23, s23
 80153fc:	f7fe bffe 	b.w	80143fc <MEMS_runMagCal.constprop.18+0x1244>
 8015400:	2800      	cmp	r0, #0
 8015402:	f47e aff8 	bne.w	80143f6 <MEMS_runMagCal.constprop.18+0x123e>
 8015406:	f88b 40a4 	strb.w	r4, [fp, #164]	; 0xa4
 801540a:	edcb ba28 	vstr	s23, [fp, #160]	; 0xa0
 801540e:	f88b 00dc 	strb.w	r0, [fp, #220]	; 0xdc
 8015412:	f7fe b93e 	b.w	8013692 <MEMS_runMagCal.constprop.18+0x4da>
 8015416:	2700      	movs	r7, #0
 8015418:	f7ff b85c 	b.w	80144d4 <MEMS_runMagCal.constprop.18+0x131c>
 801541c:	f89b 3364 	ldrb.w	r3, [fp, #868]	; 0x364
 8015420:	9a05      	ldr	r2, [sp, #20]
 8015422:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8015426:	f280 8082 	bge.w	801552e <MEMS_runMagCal.constprop.18+0x2376>
 801542a:	005b      	lsls	r3, r3, #1
 801542c:	2b3b      	cmp	r3, #59	; 0x3b
 801542e:	bfd4      	ite	le
 8015430:	2300      	movle	r3, #0
 8015432:	2301      	movgt	r3, #1
 8015434:	9309      	str	r3, [sp, #36]	; 0x24
 8015436:	ed5f 7a94 	vldr	s15, [pc, #-592]	; 80151e8 <MEMS_runMagCal.constprop.18+0x2030>
 801543a:	eddb 6ad8 	vldr	s13, [fp, #864]	; 0x360
 801543e:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8015442:	f04f 0800 	mov.w	r8, #0
 8015446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801544a:	f8c5 8000 	str.w	r8, [r5]
 801544e:	f885 8004 	strb.w	r8, [r5, #4]
 8015452:	f300 8283 	bgt.w	801595c <MEMS_runMagCal.constprop.18+0x27a4>
 8015456:	2c00      	cmp	r4, #0
 8015458:	f43f a8f4 	beq.w	8014644 <MEMS_runMagCal.constprop.18+0x148c>
 801545c:	4ba3      	ldr	r3, [pc, #652]	; (80156ec <MEMS_runMagCal.constprop.18+0x2534>)
 801545e:	9301      	str	r3, [sp, #4]
 8015460:	eeb0 0a6b 	vmov.f32	s0, s23
 8015464:	4619      	mov	r1, r3
 8015466:	a819      	add	r0, sp, #100	; 0x64
 8015468:	f7fc fada 	bl	8011a20 <MEMS_checkConsistency.constprop.32>
 801546c:	2801      	cmp	r0, #1
 801546e:	f000 8609 	beq.w	8016084 <MEMS_runMagCal.constprop.18+0x2ecc>
 8015472:	2c01      	cmp	r4, #1
 8015474:	d95e      	bls.n	8015534 <MEMS_runMagCal.constprop.18+0x237c>
 8015476:	eeb0 0a6b 	vmov.f32	s0, s23
 801547a:	499d      	ldr	r1, [pc, #628]	; (80156f0 <MEMS_runMagCal.constprop.18+0x2538>)
 801547c:	a819      	add	r0, sp, #100	; 0x64
 801547e:	f7fc facf 	bl	8011a20 <MEMS_checkConsistency.constprop.32>
 8015482:	2801      	cmp	r0, #1
 8015484:	f000 85f1 	beq.w	801606a <MEMS_runMagCal.constprop.18+0x2eb2>
 8015488:	2c02      	cmp	r4, #2
 801548a:	f000 85bf 	beq.w	801600c <MEMS_runMagCal.constprop.18+0x2e54>
 801548e:	eeb0 0a6b 	vmov.f32	s0, s23
 8015492:	4998      	ldr	r1, [pc, #608]	; (80156f4 <MEMS_runMagCal.constprop.18+0x253c>)
 8015494:	a819      	add	r0, sp, #100	; 0x64
 8015496:	f7fc fac3 	bl	8011a20 <MEMS_checkConsistency.constprop.32>
 801549a:	2801      	cmp	r0, #1
 801549c:	f000 85ad 	beq.w	8015ffa <MEMS_runMagCal.constprop.18+0x2e42>
 80154a0:	2c03      	cmp	r4, #3
 80154a2:	f000 85b3 	beq.w	801600c <MEMS_runMagCal.constprop.18+0x2e54>
 80154a6:	eeb0 0a6b 	vmov.f32	s0, s23
 80154aa:	4993      	ldr	r1, [pc, #588]	; (80156f8 <MEMS_runMagCal.constprop.18+0x2540>)
 80154ac:	a819      	add	r0, sp, #100	; 0x64
 80154ae:	f7fc fab7 	bl	8011a20 <MEMS_checkConsistency.constprop.32>
 80154b2:	2801      	cmp	r0, #1
 80154b4:	f000 8598 	beq.w	8015fe8 <MEMS_runMagCal.constprop.18+0x2e30>
 80154b8:	2c04      	cmp	r4, #4
 80154ba:	f000 85a7 	beq.w	801600c <MEMS_runMagCal.constprop.18+0x2e54>
 80154be:	eeb0 0a6b 	vmov.f32	s0, s23
 80154c2:	498e      	ldr	r1, [pc, #568]	; (80156fc <MEMS_runMagCal.constprop.18+0x2544>)
 80154c4:	a819      	add	r0, sp, #100	; 0x64
 80154c6:	f7fc faab 	bl	8011a20 <MEMS_checkConsistency.constprop.32>
 80154ca:	2801      	cmp	r0, #1
 80154cc:	f000 8583 	beq.w	8015fd6 <MEMS_runMagCal.constprop.18+0x2e1e>
 80154d0:	2c05      	cmp	r4, #5
 80154d2:	f000 859b 	beq.w	801600c <MEMS_runMagCal.constprop.18+0x2e54>
 80154d6:	eeb0 0a6b 	vmov.f32	s0, s23
 80154da:	4989      	ldr	r1, [pc, #548]	; (8015700 <MEMS_runMagCal.constprop.18+0x2548>)
 80154dc:	a819      	add	r0, sp, #100	; 0x64
 80154de:	f7fc fa9f 	bl	8011a20 <MEMS_checkConsistency.constprop.32>
 80154e2:	2801      	cmp	r0, #1
 80154e4:	f000 852b 	beq.w	8015f3e <MEMS_runMagCal.constprop.18+0x2d86>
 80154e8:	2c06      	cmp	r4, #6
 80154ea:	f000 858f 	beq.w	801600c <MEMS_runMagCal.constprop.18+0x2e54>
 80154ee:	f04f 0906 	mov.w	r9, #6
 80154f2:	e006      	b.n	8015502 <MEMS_runMagCal.constprop.18+0x234a>
 80154f4:	f109 0901 	add.w	r9, r9, #1
 80154f8:	fa5f f389 	uxtb.w	r3, r9
 80154fc:	429c      	cmp	r4, r3
 80154fe:	f240 8585 	bls.w	801600c <MEMS_runMagCal.constprop.18+0x2e54>
 8015502:	9b01      	ldr	r3, [sp, #4]
 8015504:	eb09 0149 	add.w	r1, r9, r9, lsl #1
 8015508:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801550c:	eeb0 0a6b 	vmov.f32	s0, s23
 8015510:	a819      	add	r0, sp, #100	; 0x64
 8015512:	f7fc fa85 	bl	8011a20 <MEMS_checkConsistency.constprop.32>
 8015516:	2801      	cmp	r0, #1
 8015518:	d1ec      	bne.n	80154f4 <MEMS_runMagCal.constprop.18+0x233c>
 801551a:	f815 3009 	ldrb.w	r3, [r5, r9]
 801551e:	f108 0801 	add.w	r8, r8, #1
 8015522:	3301      	adds	r3, #1
 8015524:	f805 3009 	strb.w	r3, [r5, r9]
 8015528:	fa4f f888 	sxtb.w	r8, r8
 801552c:	e7e2      	b.n	80154f4 <MEMS_runMagCal.constprop.18+0x233c>
 801552e:	2300      	movs	r3, #0
 8015530:	9309      	str	r3, [sp, #36]	; 0x24
 8015532:	e780      	b.n	8015436 <MEMS_runMagCal.constprop.18+0x227e>
 8015534:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8015704 <MEMS_runMagCal.constprop.18+0x254c>
 8015538:	eef8 7a66 	vcvt.f32.u32	s15, s13
 801553c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015540:	ed9b 7a0a 	vldr	s14, [fp, #40]	; 0x28
 8015544:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8015548:	eef4 7ac7 	vcmpe.f32	s15, s14
 801554c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015550:	f340 80bd 	ble.w	80156ce <MEMS_runMagCal.constprop.18+0x2516>
 8015554:	45a0      	cmp	r8, r4
 8015556:	f280 83b2 	bge.w	8015cbe <MEMS_runMagCal.constprop.18+0x2b06>
 801555a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801555e:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
 8015562:	9306      	str	r3, [sp, #24]
 8015564:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
 8015568:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 801556c:	9307      	str	r3, [sp, #28]
 801556e:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
 8015572:	f9bd 006e 	ldrsh.w	r0, [sp, #110]	; 0x6e
 8015576:	9308      	str	r3, [sp, #32]
 8015578:	b293      	uxth	r3, r2
 801557a:	9303      	str	r3, [sp, #12]
 801557c:	b28b      	uxth	r3, r1
 801557e:	f04f 0c00 	mov.w	ip, #0
 8015582:	9304      	str	r3, [sp, #16]
 8015584:	b283      	uxth	r3, r0
 8015586:	920a      	str	r2, [sp, #40]	; 0x28
 8015588:	910b      	str	r1, [sp, #44]	; 0x2c
 801558a:	900c      	str	r0, [sp, #48]	; 0x30
 801558c:	f8df a17c 	ldr.w	sl, [pc, #380]	; 801570c <MEMS_runMagCal.constprop.18+0x2554>
 8015590:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 8015708 <MEMS_runMagCal.constprop.18+0x2550>
 8015594:	f8c6 c000 	str.w	ip, [r6]
 8015598:	46e1      	mov	r9, ip
 801559a:	f886 c004 	strb.w	ip, [r6, #4]
 801559e:	f8cd c008 	str.w	ip, [sp, #8]
 80155a2:	9305      	str	r3, [sp, #20]
 80155a4:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80155a8:	950d      	str	r5, [sp, #52]	; 0x34
 80155aa:	e06f      	b.n	801568c <MEMS_runMagCal.constprop.18+0x24d4>
 80155ac:	9b03      	ldr	r3, [sp, #12]
 80155ae:	b292      	uxth	r2, r2
 80155b0:	2800      	cmp	r0, #0
 80155b2:	bfb4      	ite	lt
 80155b4:	1ad2      	sublt	r2, r2, r3
 80155b6:	1a9a      	subge	r2, r3, r2
 80155b8:	b213      	sxth	r3, r2
 80155ba:	f9ba 2032 	ldrsh.w	r2, [sl, #50]	; 0x32
 80155be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80155c0:	1a89      	subs	r1, r1, r2
 80155c2:	ea81 70e1 	eor.w	r0, r1, r1, asr #31
 80155c6:	eba0 70e1 	sub.w	r0, r0, r1, asr #31
 80155ca:	4283      	cmp	r3, r0
 80155cc:	dc06      	bgt.n	80155dc <MEMS_runMagCal.constprop.18+0x2424>
 80155ce:	9b05      	ldr	r3, [sp, #20]
 80155d0:	b292      	uxth	r2, r2
 80155d2:	2900      	cmp	r1, #0
 80155d4:	bfb4      	ite	lt
 80155d6:	1ad2      	sublt	r2, r2, r3
 80155d8:	1a9a      	subge	r2, r3, r2
 80155da:	b213      	sxth	r3, r2
 80155dc:	9806      	ldr	r0, [sp, #24]
 80155de:	f8ba 1034 	ldrh.w	r1, [sl, #52]	; 0x34
 80155e2:	f8ba 2036 	ldrh.w	r2, [sl, #54]	; 0x36
 80155e6:	eba0 0c01 	sub.w	ip, r0, r1
 80155ea:	9807      	ldr	r0, [sp, #28]
 80155ec:	1a80      	subs	r0, r0, r2
 80155ee:	ea8c 75ec 	eor.w	r5, ip, ip, asr #31
 80155f2:	ea80 7ee0 	eor.w	lr, r0, r0, asr #31
 80155f6:	eba5 75ec 	sub.w	r5, r5, ip, asr #31
 80155fa:	ebae 7ee0 	sub.w	lr, lr, r0, asr #31
 80155fe:	4575      	cmp	r5, lr
 8015600:	dd5f      	ble.n	80156c2 <MEMS_runMagCal.constprop.18+0x250a>
 8015602:	f1bc 0f00 	cmp.w	ip, #0
 8015606:	bfbd      	ittte	lt
 8015608:	9a06      	ldrlt	r2, [sp, #24]
 801560a:	1a88      	sublt	r0, r1, r2
 801560c:	b200      	sxthlt	r0, r0
 801560e:	fa0f f08c 	sxthge.w	r0, ip
 8015612:	f8ba 2038 	ldrh.w	r2, [sl, #56]	; 0x38
 8015616:	9908      	ldr	r1, [sp, #32]
 8015618:	1a89      	subs	r1, r1, r2
 801561a:	ea81 7ce1 	eor.w	ip, r1, r1, asr #31
 801561e:	ebac 7ce1 	sub.w	ip, ip, r1, asr #31
 8015622:	4560      	cmp	r0, ip
 8015624:	dc05      	bgt.n	8015632 <MEMS_runMagCal.constprop.18+0x247a>
 8015626:	2900      	cmp	r1, #0
 8015628:	bfbd      	ittte	lt
 801562a:	9908      	ldrlt	r1, [sp, #32]
 801562c:	1a50      	sublt	r0, r2, r1
 801562e:	b200      	sxthlt	r0, r0
 8015630:	b208      	sxthge	r0, r1
 8015632:	ee07 3a10 	vmov	s14, r3
 8015636:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801563a:	ee27 7a2b 	vmul.f32	s14, s14, s23
 801563e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015646:	dd18      	ble.n	801567a <MEMS_runMagCal.constprop.18+0x24c2>
 8015648:	ee07 0a10 	vmov	s14, r0
 801564c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015650:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8015654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015658:	d50f      	bpl.n	801567a <MEMS_runMagCal.constprop.18+0x24c2>
 801565a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801565c:	b943      	cbnz	r3, 8015670 <MEMS_runMagCal.constprop.18+0x24b8>
 801565e:	ed9a 7a0a 	vldr	s14, [sl, #40]	; 0x28
 8015662:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8015666:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801566a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801566e:	d504      	bpl.n	801567a <MEMS_runMagCal.constprop.18+0x24c2>
 8015670:	f04f 0301 	mov.w	r3, #1
 8015674:	f806 3009 	strb.w	r3, [r6, r9]
 8015678:	9702      	str	r7, [sp, #8]
 801567a:	f109 0901 	add.w	r9, r9, #1
 801567e:	fa5f f389 	uxtb.w	r3, r9
 8015682:	429c      	cmp	r4, r3
 8015684:	f10a 0a18 	add.w	sl, sl, #24
 8015688:	f240 8315 	bls.w	8015cb6 <MEMS_runMagCal.constprop.18+0x2afe>
 801568c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801568e:	f9ba 202e 	ldrsh.w	r2, [sl, #46]	; 0x2e
 8015692:	f9ba 3030 	ldrsh.w	r3, [sl, #48]	; 0x30
 8015696:	1a88      	subs	r0, r1, r2
 8015698:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801569a:	1ac9      	subs	r1, r1, r3
 801569c:	ea80 7ee0 	eor.w	lr, r0, r0, asr #31
 80156a0:	ea81 7ce1 	eor.w	ip, r1, r1, asr #31
 80156a4:	ebae 7ee0 	sub.w	lr, lr, r0, asr #31
 80156a8:	ebac 7ce1 	sub.w	ip, ip, r1, asr #31
 80156ac:	45e6      	cmp	lr, ip
 80156ae:	f73f af7d 	bgt.w	80155ac <MEMS_runMagCal.constprop.18+0x23f4>
 80156b2:	9a04      	ldr	r2, [sp, #16]
 80156b4:	b29b      	uxth	r3, r3
 80156b6:	2900      	cmp	r1, #0
 80156b8:	bfb4      	ite	lt
 80156ba:	1a9b      	sublt	r3, r3, r2
 80156bc:	1ad3      	subge	r3, r2, r3
 80156be:	b21b      	sxth	r3, r3
 80156c0:	e77b      	b.n	80155ba <MEMS_runMagCal.constprop.18+0x2402>
 80156c2:	2800      	cmp	r0, #0
 80156c4:	bfbc      	itt	lt
 80156c6:	9907      	ldrlt	r1, [sp, #28]
 80156c8:	1a50      	sublt	r0, r2, r1
 80156ca:	b200      	sxth	r0, r0
 80156cc:	e7a1      	b.n	8015612 <MEMS_runMagCal.constprop.18+0x245a>
 80156ce:	2401      	movs	r4, #1
 80156d0:	2700      	movs	r7, #0
 80156d2:	9702      	str	r7, [sp, #8]
 80156d4:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
 80156d8:	9a00      	ldr	r2, [sp, #0]
 80156da:	1ad3      	subs	r3, r2, r3
 80156dc:	f100 812c 	bmi.w	8015938 <MEMS_runMagCal.constprop.18+0x2780>
 80156e0:	f04f 37ff 	mov.w	r7, #4294967295
 80156e4:	4639      	mov	r1, r7
 80156e6:	2200      	movs	r2, #0
 80156e8:	e01b      	b.n	8015722 <MEMS_runMagCal.constprop.18+0x256a>
 80156ea:	bf00      	nop
 80156ec:	20001730 	.word	0x20001730
 80156f0:	20001748 	.word	0x20001748
 80156f4:	20001760 	.word	0x20001760
 80156f8:	20001778 	.word	0x20001778
 80156fc:	20001790 	.word	0x20001790
 8015700:	200017a8 	.word	0x200017a8
 8015704:	3a83126f 	.word	0x3a83126f
 8015708:	43c80000 	.word	0x43c80000
 801570c:	20001708 	.word	0x20001708
 8015710:	43480000 	.word	0x43480000
 8015714:	00000000 	.word	0x00000000
 8015718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801571a:	9800      	ldr	r0, [sp, #0]
 801571c:	1ac3      	subs	r3, r0, r3
 801571e:	f100 810d 	bmi.w	801593c <MEMS_runMagCal.constprop.18+0x2784>
 8015722:	4299      	cmp	r1, r3
 8015724:	f102 0001 	add.w	r0, r2, #1
 8015728:	bf88      	it	hi
 801572a:	4617      	movhi	r7, r2
 801572c:	b242      	sxtb	r2, r0
 801572e:	bf88      	it	hi
 8015730:	4619      	movhi	r1, r3
 8015732:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8015736:	4294      	cmp	r4, r2
 8015738:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801573c:	4694      	mov	ip, r2
 801573e:	dceb      	bgt.n	8015718 <MEMS_runMagCal.constprop.18+0x2560>
 8015740:	2904      	cmp	r1, #4
 8015742:	f200 80bd 	bhi.w	80158c0 <MEMS_runMagCal.constprop.18+0x2708>
 8015746:	2f00      	cmp	r7, #0
 8015748:	f2c0 80ba 	blt.w	80158c0 <MEMS_runMagCal.constprop.18+0x2708>
 801574c:	2318      	movs	r3, #24
 801574e:	fb03 b307 	mla	r3, r3, r7, fp
 8015752:	ee15 1a90 	vmov	r1, s11
 8015756:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801575a:	428a      	cmp	r2, r1
 801575c:	f0c0 8093 	bcc.w	8015886 <MEMS_runMagCal.constprop.18+0x26ce>
 8015760:	f9b3 002e 	ldrsh.w	r0, [r3, #46]	; 0x2e
 8015764:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8015768:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	; 0x6a
 801576c:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 8015770:	eba1 0e00 	sub.w	lr, r1, r0
 8015774:	eba3 0c02 	sub.w	ip, r3, r2
 8015778:	ea8e 79ee 	eor.w	r9, lr, lr, asr #31
 801577c:	ea8c 78ec 	eor.w	r8, ip, ip, asr #31
 8015780:	eba9 79ee 	sub.w	r9, r9, lr, asr #31
 8015784:	eba8 78ec 	sub.w	r8, r8, ip, asr #31
 8015788:	45c1      	cmp	r9, r8
 801578a:	f340 828b 	ble.w	8015ca4 <MEMS_runMagCal.constprop.18+0x2aec>
 801578e:	b289      	uxth	r1, r1
 8015790:	b283      	uxth	r3, r0
 8015792:	f1be 0f00 	cmp.w	lr, #0
 8015796:	bfb4      	ite	lt
 8015798:	1a59      	sublt	r1, r3, r1
 801579a:	1ac9      	subge	r1, r1, r3
 801579c:	b20b      	sxth	r3, r1
 801579e:	2118      	movs	r1, #24
 80157a0:	fb01 b107 	mla	r1, r1, r7, fp
 80157a4:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
 80157a8:	f9b1 1032 	ldrsh.w	r1, [r1, #50]	; 0x32
 80157ac:	1a50      	subs	r0, r2, r1
 80157ae:	ea80 7ce0 	eor.w	ip, r0, r0, asr #31
 80157b2:	ebac 7ce0 	sub.w	ip, ip, r0, asr #31
 80157b6:	4563      	cmp	r3, ip
 80157b8:	dc06      	bgt.n	80157c8 <MEMS_runMagCal.constprop.18+0x2610>
 80157ba:	b293      	uxth	r3, r2
 80157bc:	2800      	cmp	r0, #0
 80157be:	b28a      	uxth	r2, r1
 80157c0:	bfb4      	ite	lt
 80157c2:	1ad3      	sublt	r3, r2, r3
 80157c4:	1a9b      	subge	r3, r3, r2
 80157c6:	b21b      	sxth	r3, r3
 80157c8:	2218      	movs	r2, #24
 80157ca:	fb02 b207 	mla	r2, r2, r7, fp
 80157ce:	f8bd 8070 	ldrh.w	r8, [sp, #112]	; 0x70
 80157d2:	8e91      	ldrh	r1, [r2, #52]	; 0x34
 80157d4:	f8bd e072 	ldrh.w	lr, [sp, #114]	; 0x72
 80157d8:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 80157da:	eba8 0c01 	sub.w	ip, r8, r1
 80157de:	ebae 0002 	sub.w	r0, lr, r2
 80157e2:	ea8c 7aec 	eor.w	sl, ip, ip, asr #31
 80157e6:	ea80 79e0 	eor.w	r9, r0, r0, asr #31
 80157ea:	ebaa 7aec 	sub.w	sl, sl, ip, asr #31
 80157ee:	eba9 79e0 	sub.w	r9, r9, r0, asr #31
 80157f2:	45ca      	cmp	sl, r9
 80157f4:	f340 8250 	ble.w	8015c98 <MEMS_runMagCal.constprop.18+0x2ae0>
 80157f8:	f1bc 0f00 	cmp.w	ip, #0
 80157fc:	bfba      	itte	lt
 80157fe:	eba1 0008 	sublt.w	r0, r1, r8
 8015802:	b200      	sxthlt	r0, r0
 8015804:	fa0f f08c 	sxthge.w	r0, ip
 8015808:	2218      	movs	r2, #24
 801580a:	fb02 b207 	mla	r2, r2, r7, fp
 801580e:	f8bd c074 	ldrh.w	ip, [sp, #116]	; 0x74
 8015812:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 8015814:	ebac 0102 	sub.w	r1, ip, r2
 8015818:	ea81 7ee1 	eor.w	lr, r1, r1, asr #31
 801581c:	ebae 7ee1 	sub.w	lr, lr, r1, asr #31
 8015820:	4570      	cmp	r0, lr
 8015822:	dc05      	bgt.n	8015830 <MEMS_runMagCal.constprop.18+0x2678>
 8015824:	2900      	cmp	r1, #0
 8015826:	bfba      	itte	lt
 8015828:	eba2 000c 	sublt.w	r0, r2, ip
 801582c:	b200      	sxthlt	r0, r0
 801582e:	b208      	sxthge	r0, r1
 8015830:	ee07 3a90 	vmov	s15, r3
 8015834:	ee3b 7aab 	vadd.f32	s14, s23, s23
 8015838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801583c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8015840:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015844:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801584c:	d50b      	bpl.n	8015866 <MEMS_runMagCal.constprop.18+0x26ae>
 801584e:	0043      	lsls	r3, r0, #1
 8015850:	ee07 3a90 	vmov	s15, r3
 8015854:	ed1f 7a52 	vldr	s14, [pc, #-328]	; 8015710 <MEMS_runMagCal.constprop.18+0x2558>
 8015858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801585c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015864:	d40f      	bmi.n	8015886 <MEMS_runMagCal.constprop.18+0x26ce>
 8015866:	f10d 0e64 	add.w	lr, sp, #100	; 0x64
 801586a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801586e:	f04f 0c18 	mov.w	ip, #24
 8015872:	fb0c b707 	mla	r7, ip, r7, fp
 8015876:	3728      	adds	r7, #40	; 0x28
 8015878:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801587a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801587e:	e887 0003 	stmia.w	r7, {r0, r1}
 8015882:	f7fe beea 	b.w	801465a <MEMS_runMagCal.constprop.18+0x14a2>
 8015886:	9b02      	ldr	r3, [sp, #8]
 8015888:	2b01      	cmp	r3, #1
 801588a:	f47d af02 	bne.w	8013692 <MEMS_runMagCal.constprop.18+0x4da>
 801588e:	f89b 4024 	ldrb.w	r4, [fp, #36]	; 0x24
 8015892:	2300      	movs	r3, #0
 8015894:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 8015898:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 801589c:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 80158a0:	e9c5 3300 	strd	r3, r3, [r5]
 80158a4:	60ab      	str	r3, [r5, #8]
 80158a6:	e9c6 3300 	strd	r3, r3, [r6]
 80158aa:	e9c6 3302 	strd	r3, r3, [r6, #8]
 80158ae:	e9c6 3304 	strd	r3, r3, [r6, #16]
 80158b2:	2c00      	cmp	r4, #0
 80158b4:	f47e aee0 	bne.w	8014678 <MEMS_runMagCal.constprop.18+0x14c0>
 80158b8:	ed5f 7a6a 	vldr	s15, [pc, #-424]	; 8015714 <MEMS_runMagCal.constprop.18+0x255c>
 80158bc:	f7ff b87a 	b.w	80149b4 <MEMS_runMagCal.constprop.18+0x17fc>
 80158c0:	f89b 3025 	ldrb.w	r3, [fp, #37]	; 0x25
 80158c4:	42a3      	cmp	r3, r4
 80158c6:	f240 80fa 	bls.w	8015abe <MEMS_runMagCal.constprop.18+0x2906>
 80158ca:	2300      	movs	r3, #0
 80158cc:	ed5f 7a6f 	vldr	s15, [pc, #-444]	; 8015714 <MEMS_runMagCal.constprop.18+0x255c>
 80158d0:	461a      	mov	r2, r3
 80158d2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80158d6:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 80158da:	3301      	adds	r3, #1
 80158dc:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80158e0:	ee07 2a10 	vmov	s14, r2
 80158e4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80158e8:	b25b      	sxtb	r3, r3
 80158ea:	eef4 6ae7 	vcmpe.f32	s13, s15
 80158ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158f2:	bfc8      	it	gt
 80158f4:	eef8 7a47 	vcvtgt.f32.u32	s15, s14
 80158f8:	429c      	cmp	r4, r3
 80158fa:	461a      	mov	r2, r3
 80158fc:	dce9      	bgt.n	80158d2 <MEMS_runMagCal.constprop.18+0x271a>
 80158fe:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8015902:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015906:	eef4 7ace 	vcmpe.f32	s15, s28
 801590a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801590e:	d4ba      	bmi.n	8015886 <MEMS_runMagCal.constprop.18+0x26ce>
 8015910:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8015914:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015918:	3401      	adds	r4, #1
 801591a:	b2e4      	uxtb	r4, r4
 801591c:	1e67      	subs	r7, r4, #1
 801591e:	f04f 0e18 	mov.w	lr, #24
 8015922:	fb0e b707 	mla	r7, lr, r7, fp
 8015926:	3728      	adds	r7, #40	; 0x28
 8015928:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801592a:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801592e:	f88b 4024 	strb.w	r4, [fp, #36]	; 0x24
 8015932:	e887 0003 	stmia.w	r7, {r0, r1}
 8015936:	e7ac      	b.n	8015892 <MEMS_runMagCal.constprop.18+0x26da>
 8015938:	f04f 0c00 	mov.w	ip, #0
 801593c:	f10d 0e64 	add.w	lr, sp, #100	; 0x64
 8015940:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015944:	eb0c 074c 	add.w	r7, ip, ip, lsl #1
 8015948:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 801594c:	3728      	adds	r7, #40	; 0x28
 801594e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015950:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015954:	e887 0003 	stmia.w	r7, {r0, r1}
 8015958:	f7fe be7f 	b.w	801465a <MEMS_runMagCal.constprop.18+0x14a2>
 801595c:	f8cd 8008 	str.w	r8, [sp, #8]
 8015960:	2c00      	cmp	r4, #0
 8015962:	f47f aeb7 	bne.w	80156d4 <MEMS_runMagCal.constprop.18+0x251c>
 8015966:	f7fe be6d 	b.w	8014644 <MEMS_runMagCal.constprop.18+0x148c>
 801596a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 801596e:	f7fe bfb9 	b.w	80148e4 <MEMS_runMagCal.constprop.18+0x172c>
 8015972:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8015976:	ee37 7a26 	vadd.f32	s14, s14, s13
 801597a:	f7fe bf8e 	b.w	801489a <MEMS_runMagCal.constprop.18+0x16e2>
 801597e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8015982:	f7fe bf69 	b.w	8014858 <MEMS_runMagCal.constprop.18+0x16a0>
 8015986:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 801598a:	ee37 7a26 	vadd.f32	s14, s14, s13
 801598e:	f7fe bf3e 	b.w	801480e <MEMS_runMagCal.constprop.18+0x1656>
 8015992:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8015996:	f7fe bf19 	b.w	80147cc <MEMS_runMagCal.constprop.18+0x1614>
 801599a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 801599e:	ee37 7a26 	vadd.f32	s14, s14, s13
 80159a2:	f7fe beee 	b.w	8014782 <MEMS_runMagCal.constprop.18+0x15ca>
 80159a6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80159aa:	f7fe bec9 	b.w	8014740 <MEMS_runMagCal.constprop.18+0x1588>
 80159ae:	2303      	movs	r3, #3
 80159b0:	e48a      	b.n	80152c8 <MEMS_runMagCal.constprop.18+0x2110>
 80159b2:	3201      	adds	r2, #1
 80159b4:	fb92 f0f1 	sdiv	r0, r2, r1
 80159b8:	fb01 2210 	mls	r2, r1, r0, r2
 80159bc:	b290      	uxth	r0, r2
 80159be:	f7ff bbf1 	b.w	80151a4 <MEMS_runMagCal.constprop.18+0x1fec>
 80159c2:	fb93 f7f5 	sdiv	r7, r3, r5
 80159c6:	fb05 3317 	mls	r3, r5, r7, r3
 80159ca:	b21f      	sxth	r7, r3
 80159cc:	f7ff bb40 	b.w	8015050 <MEMS_runMagCal.constprop.18+0x1e98>
 80159d0:	2303      	movs	r3, #3
 80159d2:	f88b 30a4 	strb.w	r3, [fp, #164]	; 0xa4
 80159d6:	f7ff bb1d 	b.w	8015014 <MEMS_runMagCal.constprop.18+0x1e5c>
 80159da:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80159de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80159e2:	f7fe be8a 	b.w	80146fa <MEMS_runMagCal.constprop.18+0x1542>
 80159e6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80159ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80159ee:	f7fe be84 	b.w	80146fa <MEMS_runMagCal.constprop.18+0x1542>
 80159f2:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80159f6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80159fa:	f7fe bfd9 	b.w	80149b0 <MEMS_runMagCal.constprop.18+0x17f8>
 80159fe:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8015a02:	ee37 7a26 	vadd.f32	s14, s14, s13
 8015a06:	f7fe bfd3 	b.w	80149b0 <MEMS_runMagCal.constprop.18+0x17f8>
 8015a0a:	49b5      	ldr	r1, [pc, #724]	; (8015ce0 <MEMS_runMagCal.constprop.18+0x2b28>)
 8015a0c:	428b      	cmp	r3, r1
 8015a0e:	d815      	bhi.n	8015a3c <MEMS_runMagCal.constprop.18+0x2884>
 8015a10:	f5a3 53e1 	sub.w	r3, r3, #7200	; 0x1c20
 8015a14:	ee07 3a10 	vmov	s14, r3
 8015a18:	ed9f 6ab2 	vldr	s12, [pc, #712]	; 8015ce4 <MEMS_runMagCal.constprop.18+0x2b2c>
 8015a1c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8015a20:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015a24:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8015a28:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8015a2c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015a30:	f7fe bf9d 	b.w	801496e <MEMS_runMagCal.constprop.18+0x17b6>
 8015a34:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8015a38:	f7fe bf99 	b.w	801496e <MEMS_runMagCal.constprop.18+0x17b6>
 8015a3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015a40:	f7fe bf95 	b.w	801496e <MEMS_runMagCal.constprop.18+0x17b6>
 8015a44:	4aa6      	ldr	r2, [pc, #664]	; (8015ce0 <MEMS_runMagCal.constprop.18+0x2b28>)
 8015a46:	4293      	cmp	r3, r2
 8015a48:	d817      	bhi.n	8015a7a <MEMS_runMagCal.constprop.18+0x28c2>
 8015a4a:	f5a3 53e1 	sub.w	r3, r3, #7200	; 0x1c20
 8015a4e:	ee07 3a90 	vmov	s15, r3
 8015a52:	ed9f 6aa4 	vldr	s12, [pc, #656]	; 8015ce4 <MEMS_runMagCal.constprop.18+0x2b2c>
 8015a56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015a5a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8015a5e:	eee7 6ac6 	vfms.f32	s13, s15, s12
 8015a62:	eef0 7a66 	vmov.f32	s15, s13
 8015a66:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8015a6a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015a6e:	f7fe be25 	b.w	80146bc <MEMS_runMagCal.constprop.18+0x1504>
 8015a72:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8015a76:	f7fe be21 	b.w	80146bc <MEMS_runMagCal.constprop.18+0x1504>
 8015a7a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015a7e:	f7fe be1d 	b.w	80146bc <MEMS_runMagCal.constprop.18+0x1504>
 8015a82:	f04f 32ff 	mov.w	r2, #4294967295
 8015a86:	f7ff bb83 	b.w	8015190 <MEMS_runMagCal.constprop.18+0x1fd8>
 8015a8a:	eddf da97 	vldr	s27, [pc, #604]	; 8015ce8 <MEMS_runMagCal.constprop.18+0x2b30>
 8015a8e:	ed9d ba13 	vldr	s22, [sp, #76]	; 0x4c
 8015a92:	ed9d 0a10 	vldr	s0, [sp, #64]	; 0x40
 8015a96:	ed95 ca00 	vldr	s24, [r5]
 8015a9a:	eddd 9a11 	vldr	s19, [sp, #68]	; 0x44
 8015a9e:	ed9d aa14 	vldr	s20, [sp, #80]	; 0x50
 8015aa2:	ed95 8a01 	vldr	s16, [r5, #4]
 8015aa6:	eddd 8a12 	vldr	s17, [sp, #72]	; 0x48
 8015aaa:	ed9d 9a15 	vldr	s18, [sp, #84]	; 0x54
 8015aae:	edd5 ea02 	vldr	s29, [r5, #8]
 8015ab2:	f7ff b9bb 	b.w	8014e2c <MEMS_runMagCal.constprop.18+0x1c74>
 8015ab6:	2301      	movs	r3, #1
 8015ab8:	e406      	b.n	80152c8 <MEMS_runMagCal.constprop.18+0x2110>
 8015aba:	2302      	movs	r3, #2
 8015abc:	e404      	b.n	80152c8 <MEMS_runMagCal.constprop.18+0x2110>
 8015abe:	4b8b      	ldr	r3, [pc, #556]	; (8015cec <MEMS_runMagCal.constprop.18+0x2b34>)
 8015ac0:	f8dd 8000 	ldr.w	r8, [sp]
 8015ac4:	9301      	str	r3, [sp, #4]
 8015ac6:	eeb0 0a6b 	vmov.f32	s0, s23
 8015aca:	4619      	mov	r1, r3
 8015acc:	4642      	mov	r2, r8
 8015ace:	a819      	add	r0, sp, #100	; 0x64
 8015ad0:	4699      	mov	r9, r3
 8015ad2:	f7fd f9bf 	bl	8012e54 <MEMS_compareCalScore>
 8015ad6:	2c01      	cmp	r4, #1
 8015ad8:	4607      	mov	r7, r0
 8015ada:	7030      	strb	r0, [r6, #0]
 8015adc:	d937      	bls.n	8015b4e <MEMS_runMagCal.constprop.18+0x2996>
 8015ade:	eeb0 0a6b 	vmov.f32	s0, s23
 8015ae2:	4642      	mov	r2, r8
 8015ae4:	f109 0118 	add.w	r1, r9, #24
 8015ae8:	a819      	add	r0, sp, #100	; 0x64
 8015aea:	f8cd 9004 	str.w	r9, [sp, #4]
 8015aee:	f7fd f9b1 	bl	8012e54 <MEMS_compareCalScore>
 8015af2:	2c02      	cmp	r4, #2
 8015af4:	4407      	add	r7, r0
 8015af6:	b2ff      	uxtb	r7, r7
 8015af8:	7070      	strb	r0, [r6, #1]
 8015afa:	d028      	beq.n	8015b4e <MEMS_runMagCal.constprop.18+0x2996>
 8015afc:	eeb0 0a6b 	vmov.f32	s0, s23
 8015b00:	4642      	mov	r2, r8
 8015b02:	f109 0130 	add.w	r1, r9, #48	; 0x30
 8015b06:	a819      	add	r0, sp, #100	; 0x64
 8015b08:	f8cd 9004 	str.w	r9, [sp, #4]
 8015b0c:	f7fd f9a2 	bl	8012e54 <MEMS_compareCalScore>
 8015b10:	2c03      	cmp	r4, #3
 8015b12:	4407      	add	r7, r0
 8015b14:	b2ff      	uxtb	r7, r7
 8015b16:	70b0      	strb	r0, [r6, #2]
 8015b18:	d019      	beq.n	8015b4e <MEMS_runMagCal.constprop.18+0x2996>
 8015b1a:	9b01      	ldr	r3, [sp, #4]
 8015b1c:	eeb0 0a6b 	vmov.f32	s0, s23
 8015b20:	4642      	mov	r2, r8
 8015b22:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8015b26:	a819      	add	r0, sp, #100	; 0x64
 8015b28:	f7fd f994 	bl	8012e54 <MEMS_compareCalScore>
 8015b2c:	2c04      	cmp	r4, #4
 8015b2e:	4407      	add	r7, r0
 8015b30:	b2ff      	uxtb	r7, r7
 8015b32:	70f0      	strb	r0, [r6, #3]
 8015b34:	d00b      	beq.n	8015b4e <MEMS_runMagCal.constprop.18+0x2996>
 8015b36:	9b01      	ldr	r3, [sp, #4]
 8015b38:	eeb0 0a6b 	vmov.f32	s0, s23
 8015b3c:	4642      	mov	r2, r8
 8015b3e:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8015b42:	a819      	add	r0, sp, #100	; 0x64
 8015b44:	f7fd f986 	bl	8012e54 <MEMS_compareCalScore>
 8015b48:	4407      	add	r7, r0
 8015b4a:	b2ff      	uxtb	r7, r7
 8015b4c:	7130      	strb	r0, [r6, #4]
 8015b4e:	2f00      	cmp	r7, #0
 8015b50:	f43f ae99 	beq.w	8015886 <MEMS_runMagCal.constprop.18+0x26ce>
 8015b54:	9503      	str	r5, [sp, #12]
 8015b56:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 8015cfc <MEMS_runMagCal.constprop.18+0x2b44>
 8015b5a:	f04f 0901 	mov.w	r9, #1
 8015b5e:	2700      	movs	r7, #0
 8015b60:	4625      	mov	r5, r4
 8015b62:	e005      	b.n	8015b70 <MEMS_runMagCal.constprop.18+0x29b8>
 8015b64:	fa5f f289 	uxtb.w	r2, r9
 8015b68:	4295      	cmp	r5, r2
 8015b6a:	d95e      	bls.n	8015c2a <MEMS_runMagCal.constprop.18+0x2a72>
 8015b6c:	f109 0901 	add.w	r9, r9, #1
 8015b70:	eb06 0409 	add.w	r4, r6, r9
 8015b74:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8015b78:	2a00      	cmp	r2, #0
 8015b7a:	d0f3      	beq.n	8015b64 <MEMS_runMagCal.constprop.18+0x29ac>
 8015b7c:	fa5f f889 	uxtb.w	r8, r9
 8015b80:	4545      	cmp	r5, r8
 8015b82:	d952      	bls.n	8015c2a <MEMS_runMagCal.constprop.18+0x2a72>
 8015b84:	f816 2009 	ldrb.w	r2, [r6, r9]
 8015b88:	b17a      	cbz	r2, 8015baa <MEMS_runMagCal.constprop.18+0x29f2>
 8015b8a:	2318      	movs	r3, #24
 8015b8c:	fb03 f009 	mul.w	r0, r3, r9
 8015b90:	9b01      	ldr	r3, [sp, #4]
 8015b92:	9a00      	ldr	r2, [sp, #0]
 8015b94:	eb0a 0100 	add.w	r1, sl, r0
 8015b98:	eeb0 0a6b 	vmov.f32	s0, s23
 8015b9c:	4418      	add	r0, r3
 8015b9e:	f7fd f959 	bl	8012e54 <MEMS_compareCalScore>
 8015ba2:	2800      	cmp	r0, #0
 8015ba4:	d06d      	beq.n	8015c82 <MEMS_runMagCal.constprop.18+0x2aca>
 8015ba6:	f806 7009 	strb.w	r7, [r6, r9]
 8015baa:	f108 0201 	add.w	r2, r8, #1
 8015bae:	b2d2      	uxtb	r2, r2
 8015bb0:	4295      	cmp	r5, r2
 8015bb2:	d9db      	bls.n	8015b6c <MEMS_runMagCal.constprop.18+0x29b4>
 8015bb4:	7862      	ldrb	r2, [r4, #1]
 8015bb6:	b172      	cbz	r2, 8015bd6 <MEMS_runMagCal.constprop.18+0x2a1e>
 8015bb8:	2318      	movs	r3, #24
 8015bba:	fb03 f009 	mul.w	r0, r3, r9
 8015bbe:	4b4c      	ldr	r3, [pc, #304]	; (8015cf0 <MEMS_runMagCal.constprop.18+0x2b38>)
 8015bc0:	9a00      	ldr	r2, [sp, #0]
 8015bc2:	eb0a 0100 	add.w	r1, sl, r0
 8015bc6:	eeb0 0a6b 	vmov.f32	s0, s23
 8015bca:	4418      	add	r0, r3
 8015bcc:	f7fd f942 	bl	8012e54 <MEMS_compareCalScore>
 8015bd0:	2800      	cmp	r0, #0
 8015bd2:	d056      	beq.n	8015c82 <MEMS_runMagCal.constprop.18+0x2aca>
 8015bd4:	7067      	strb	r7, [r4, #1]
 8015bd6:	f108 0202 	add.w	r2, r8, #2
 8015bda:	b2d2      	uxtb	r2, r2
 8015bdc:	4295      	cmp	r5, r2
 8015bde:	d9c5      	bls.n	8015b6c <MEMS_runMagCal.constprop.18+0x29b4>
 8015be0:	78a2      	ldrb	r2, [r4, #2]
 8015be2:	b172      	cbz	r2, 8015c02 <MEMS_runMagCal.constprop.18+0x2a4a>
 8015be4:	2318      	movs	r3, #24
 8015be6:	fb03 f009 	mul.w	r0, r3, r9
 8015bea:	4b42      	ldr	r3, [pc, #264]	; (8015cf4 <MEMS_runMagCal.constprop.18+0x2b3c>)
 8015bec:	9a00      	ldr	r2, [sp, #0]
 8015bee:	eb0a 0100 	add.w	r1, sl, r0
 8015bf2:	eeb0 0a6b 	vmov.f32	s0, s23
 8015bf6:	4418      	add	r0, r3
 8015bf8:	f7fd f92c 	bl	8012e54 <MEMS_compareCalScore>
 8015bfc:	2800      	cmp	r0, #0
 8015bfe:	d040      	beq.n	8015c82 <MEMS_runMagCal.constprop.18+0x2aca>
 8015c00:	70a7      	strb	r7, [r4, #2]
 8015c02:	f108 0203 	add.w	r2, r8, #3
 8015c06:	b2d2      	uxtb	r2, r2
 8015c08:	4295      	cmp	r5, r2
 8015c0a:	d9af      	bls.n	8015b6c <MEMS_runMagCal.constprop.18+0x29b4>
 8015c0c:	7932      	ldrb	r2, [r6, #4]
 8015c0e:	2a00      	cmp	r2, #0
 8015c10:	d0ac      	beq.n	8015b6c <MEMS_runMagCal.constprop.18+0x29b4>
 8015c12:	2318      	movs	r3, #24
 8015c14:	eeb0 0a6b 	vmov.f32	s0, s23
 8015c18:	9a00      	ldr	r2, [sp, #0]
 8015c1a:	4837      	ldr	r0, [pc, #220]	; (8015cf8 <MEMS_runMagCal.constprop.18+0x2b40>)
 8015c1c:	fb03 a109 	mla	r1, r3, r9, sl
 8015c20:	f7fd f918 	bl	8012e54 <MEMS_compareCalScore>
 8015c24:	b368      	cbz	r0, 8015c82 <MEMS_runMagCal.constprop.18+0x2aca>
 8015c26:	7137      	strb	r7, [r6, #4]
 8015c28:	e7a0      	b.n	8015b6c <MEMS_runMagCal.constprop.18+0x29b4>
 8015c2a:	7833      	ldrb	r3, [r6, #0]
 8015c2c:	462c      	mov	r4, r5
 8015c2e:	9d03      	ldr	r5, [sp, #12]
 8015c30:	bb83      	cbnz	r3, 8015c94 <MEMS_runMagCal.constprop.18+0x2adc>
 8015c32:	2c01      	cmp	r4, #1
 8015c34:	f67f ae27 	bls.w	8015886 <MEMS_runMagCal.constprop.18+0x26ce>
 8015c38:	7873      	ldrb	r3, [r6, #1]
 8015c3a:	bb4b      	cbnz	r3, 8015c90 <MEMS_runMagCal.constprop.18+0x2ad8>
 8015c3c:	2c02      	cmp	r4, #2
 8015c3e:	f43f ae22 	beq.w	8015886 <MEMS_runMagCal.constprop.18+0x26ce>
 8015c42:	78b3      	ldrb	r3, [r6, #2]
 8015c44:	bb13      	cbnz	r3, 8015c8c <MEMS_runMagCal.constprop.18+0x2ad4>
 8015c46:	2c03      	cmp	r4, #3
 8015c48:	f43f ae1d 	beq.w	8015886 <MEMS_runMagCal.constprop.18+0x26ce>
 8015c4c:	78f3      	ldrb	r3, [r6, #3]
 8015c4e:	b9db      	cbnz	r3, 8015c88 <MEMS_runMagCal.constprop.18+0x2ad0>
 8015c50:	2c04      	cmp	r4, #4
 8015c52:	f43f ae18 	beq.w	8015886 <MEMS_runMagCal.constprop.18+0x26ce>
 8015c56:	7933      	ldrb	r3, [r6, #4]
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	f43f ae14 	beq.w	8015886 <MEMS_runMagCal.constprop.18+0x26ce>
 8015c5e:	2404      	movs	r4, #4
 8015c60:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8015c64:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015c68:	2718      	movs	r7, #24
 8015c6a:	fb07 b404 	mla	r4, r7, r4, fp
 8015c6e:	f104 0728 	add.w	r7, r4, #40	; 0x28
 8015c72:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015c74:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8015c78:	f89b 4024 	ldrb.w	r4, [fp, #36]	; 0x24
 8015c7c:	e887 0003 	stmia.w	r7, {r0, r1}
 8015c80:	e607      	b.n	8015892 <MEMS_runMagCal.constprop.18+0x26da>
 8015c82:	f804 7c01 	strb.w	r7, [r4, #-1]
 8015c86:	e771      	b.n	8015b6c <MEMS_runMagCal.constprop.18+0x29b4>
 8015c88:	2403      	movs	r4, #3
 8015c8a:	e7e9      	b.n	8015c60 <MEMS_runMagCal.constprop.18+0x2aa8>
 8015c8c:	2402      	movs	r4, #2
 8015c8e:	e7e7      	b.n	8015c60 <MEMS_runMagCal.constprop.18+0x2aa8>
 8015c90:	2401      	movs	r4, #1
 8015c92:	e7e5      	b.n	8015c60 <MEMS_runMagCal.constprop.18+0x2aa8>
 8015c94:	2400      	movs	r4, #0
 8015c96:	e7e3      	b.n	8015c60 <MEMS_runMagCal.constprop.18+0x2aa8>
 8015c98:	2800      	cmp	r0, #0
 8015c9a:	bfb8      	it	lt
 8015c9c:	eba2 000e 	sublt.w	r0, r2, lr
 8015ca0:	b200      	sxth	r0, r0
 8015ca2:	e5b1      	b.n	8015808 <MEMS_runMagCal.constprop.18+0x2650>
 8015ca4:	b29b      	uxth	r3, r3
 8015ca6:	b292      	uxth	r2, r2
 8015ca8:	f1bc 0f00 	cmp.w	ip, #0
 8015cac:	bfb4      	ite	lt
 8015cae:	1ad3      	sublt	r3, r2, r3
 8015cb0:	1a9b      	subge	r3, r3, r2
 8015cb2:	b21b      	sxth	r3, r3
 8015cb4:	e573      	b.n	801579e <MEMS_runMagCal.constprop.18+0x25e6>
 8015cb6:	9b02      	ldr	r3, [sp, #8]
 8015cb8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8015cba:	2b01      	cmp	r3, #1
 8015cbc:	d04e      	beq.n	8015d5c <MEMS_runMagCal.constprop.18+0x2ba4>
 8015cbe:	2c01      	cmp	r4, #1
 8015cc0:	f67f ad05 	bls.w	80156ce <MEMS_runMagCal.constprop.18+0x2516>
 8015cc4:	f04f 0a00 	mov.w	sl, #0
 8015cc8:	2301      	movs	r3, #1
 8015cca:	9703      	str	r7, [sp, #12]
 8015ccc:	f8cd 8010 	str.w	r8, [sp, #16]
 8015cd0:	f8cd a008 	str.w	sl, [sp, #8]
 8015cd4:	46a0      	mov	r8, r4
 8015cd6:	4699      	mov	r9, r3
 8015cd8:	461f      	mov	r7, r3
 8015cda:	4654      	mov	r4, sl
 8015cdc:	e014      	b.n	8015d08 <MEMS_runMagCal.constprop.18+0x2b50>
 8015cde:	bf00      	nop
 8015ce0:	0001517f 	.word	0x0001517f
 8015ce4:	367e3344 	.word	0x367e3344
 8015ce8:	00000000 	.word	0x00000000
 8015cec:	20001730 	.word	0x20001730
 8015cf0:	20001748 	.word	0x20001748
 8015cf4:	20001760 	.word	0x20001760
 8015cf8:	20001790 	.word	0x20001790
 8015cfc:	20001718 	.word	0x20001718
 8015d00:	fa5f f98c 	uxtb.w	r9, ip
 8015d04:	45c8      	cmp	r8, r9
 8015d06:	d920      	bls.n	8015d4a <MEMS_runMagCal.constprop.18+0x2b92>
 8015d08:	2318      	movs	r3, #24
 8015d0a:	2228      	movs	r2, #40	; 0x28
 8015d0c:	fb13 210a 	smlabb	r1, r3, sl, r2
 8015d10:	fb13 2009 	smlabb	r0, r3, r9, r2
 8015d14:	4459      	add	r1, fp
 8015d16:	4458      	add	r0, fp
 8015d18:	eeb0 0a6b 	vmov.f32	s0, s23
 8015d1c:	f7fb fe80 	bl	8011a20 <MEMS_checkConsistency.constprop.32>
 8015d20:	9902      	ldr	r1, [sp, #8]
 8015d22:	3101      	adds	r1, #1
 8015d24:	b24b      	sxtb	r3, r1
 8015d26:	2801      	cmp	r0, #1
 8015d28:	f109 0c01 	add.w	ip, r9, #1
 8015d2c:	9302      	str	r3, [sp, #8]
 8015d2e:	d1e7      	bne.n	8015d00 <MEMS_runMagCal.constprop.18+0x2b48>
 8015d30:	f815 100a 	ldrb.w	r1, [r5, sl]
 8015d34:	3101      	adds	r1, #1
 8015d36:	f805 100a 	strb.w	r1, [r5, sl]
 8015d3a:	f815 1009 	ldrb.w	r1, [r5, r9]
 8015d3e:	3401      	adds	r4, #1
 8015d40:	3101      	adds	r1, #1
 8015d42:	f805 1009 	strb.w	r1, [r5, r9]
 8015d46:	b264      	sxtb	r4, r4
 8015d48:	e7da      	b.n	8015d00 <MEMS_runMagCal.constprop.18+0x2b48>
 8015d4a:	f107 0901 	add.w	r9, r7, #1
 8015d4e:	fa5f f989 	uxtb.w	r9, r9
 8015d52:	45c8      	cmp	r8, r9
 8015d54:	d926      	bls.n	8015da4 <MEMS_runMagCal.constprop.18+0x2bec>
 8015d56:	46ba      	mov	sl, r7
 8015d58:	464f      	mov	r7, r9
 8015d5a:	e7d5      	b.n	8015d08 <MEMS_runMagCal.constprop.18+0x2b50>
 8015d5c:	f04f 0c00 	mov.w	ip, #0
 8015d60:	46e6      	mov	lr, ip
 8015d62:	46e1      	mov	r9, ip
 8015d64:	f04f 0818 	mov.w	r8, #24
 8015d68:	e006      	b.n	8015d78 <MEMS_runMagCal.constprop.18+0x2bc0>
 8015d6a:	f10e 0e01 	add.w	lr, lr, #1
 8015d6e:	fa5f fe8e 	uxtb.w	lr, lr
 8015d72:	45a6      	cmp	lr, r4
 8015d74:	f080 80bd 	bcs.w	8015ef2 <MEMS_runMagCal.constprop.18+0x2d3a>
 8015d78:	f816 300e 	ldrb.w	r3, [r6, lr]
 8015d7c:	2b01      	cmp	r3, #1
 8015d7e:	d1f4      	bne.n	8015d6a <MEMS_runMagCal.constprop.18+0x2bb2>
 8015d80:	ebae 070c 	sub.w	r7, lr, ip
 8015d84:	b2ff      	uxtb	r7, r7
 8015d86:	b27b      	sxtb	r3, r7
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	db04      	blt.n	8015d96 <MEMS_runMagCal.constprop.18+0x2bde>
 8015d8c:	f89b 2025 	ldrb.w	r2, [fp, #37]	; 0x25
 8015d90:	4293      	cmp	r3, r2
 8015d92:	f2c0 80b5 	blt.w	8015f00 <MEMS_runMagCal.constprop.18+0x2d48>
 8015d96:	f10c 0c01 	add.w	ip, ip, #1
 8015d9a:	f89b 4024 	ldrb.w	r4, [fp, #36]	; 0x24
 8015d9e:	fa5f fc8c 	uxtb.w	ip, ip
 8015da2:	e7e2      	b.n	8015d6a <MEMS_runMagCal.constprop.18+0x2bb2>
 8015da4:	9b02      	ldr	r3, [sp, #8]
 8015da6:	9f03      	ldr	r7, [sp, #12]
 8015da8:	4622      	mov	r2, r4
 8015daa:	1a9b      	subs	r3, r3, r2
 8015dac:	429a      	cmp	r2, r3
 8015dae:	4644      	mov	r4, r8
 8015db0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8015db4:	da5c      	bge.n	8015e70 <MEMS_runMagCal.constprop.18+0x2cb8>
 8015db6:	eba4 0308 	sub.w	r3, r4, r8
 8015dba:	4598      	cmp	r8, r3
 8015dbc:	da58      	bge.n	8015e70 <MEMS_runMagCal.constprop.18+0x2cb8>
 8015dbe:	782b      	ldrb	r3, [r5, #0]
 8015dc0:	786a      	ldrb	r2, [r5, #1]
 8015dc2:	429a      	cmp	r2, r3
 8015dc4:	bf38      	it	cc
 8015dc6:	461a      	movcc	r2, r3
 8015dc8:	2c02      	cmp	r4, #2
 8015dca:	d90f      	bls.n	8015dec <MEMS_runMagCal.constprop.18+0x2c34>
 8015dcc:	78a9      	ldrb	r1, [r5, #2]
 8015dce:	428a      	cmp	r2, r1
 8015dd0:	bf38      	it	cc
 8015dd2:	460a      	movcc	r2, r1
 8015dd4:	2c03      	cmp	r4, #3
 8015dd6:	d009      	beq.n	8015dec <MEMS_runMagCal.constprop.18+0x2c34>
 8015dd8:	78e9      	ldrb	r1, [r5, #3]
 8015dda:	428a      	cmp	r2, r1
 8015ddc:	bf38      	it	cc
 8015dde:	460a      	movcc	r2, r1
 8015de0:	2c04      	cmp	r4, #4
 8015de2:	d003      	beq.n	8015dec <MEMS_runMagCal.constprop.18+0x2c34>
 8015de4:	7929      	ldrb	r1, [r5, #4]
 8015de6:	428a      	cmp	r2, r1
 8015de8:	bf38      	it	cc
 8015dea:	460a      	movcc	r2, r1
 8015dec:	4293      	cmp	r3, r2
 8015dee:	7869      	ldrb	r1, [r5, #1]
 8015df0:	bf36      	itet	cc
 8015df2:	461a      	movcc	r2, r3
 8015df4:	f04f 33ff 	movcs.w	r3, #4294967295
 8015df8:	2300      	movcc	r3, #0
 8015dfa:	4291      	cmp	r1, r2
 8015dfc:	d276      	bcs.n	8015eec <MEMS_runMagCal.constprop.18+0x2d34>
 8015dfe:	2c02      	cmp	r4, #2
 8015e00:	d972      	bls.n	8015ee8 <MEMS_runMagCal.constprop.18+0x2d30>
 8015e02:	460a      	mov	r2, r1
 8015e04:	2301      	movs	r3, #1
 8015e06:	78a9      	ldrb	r1, [r5, #2]
 8015e08:	428a      	cmp	r2, r1
 8015e0a:	d96a      	bls.n	8015ee2 <MEMS_runMagCal.constprop.18+0x2d2a>
 8015e0c:	2c03      	cmp	r4, #3
 8015e0e:	d066      	beq.n	8015ede <MEMS_runMagCal.constprop.18+0x2d26>
 8015e10:	460a      	mov	r2, r1
 8015e12:	2302      	movs	r3, #2
 8015e14:	78e9      	ldrb	r1, [r5, #3]
 8015e16:	428a      	cmp	r2, r1
 8015e18:	d95e      	bls.n	8015ed8 <MEMS_runMagCal.constprop.18+0x2d20>
 8015e1a:	2c04      	cmp	r4, #4
 8015e1c:	d05a      	beq.n	8015ed4 <MEMS_runMagCal.constprop.18+0x2d1c>
 8015e1e:	460a      	mov	r2, r1
 8015e20:	2303      	movs	r3, #3
 8015e22:	7929      	ldrb	r1, [r5, #4]
 8015e24:	4291      	cmp	r1, r2
 8015e26:	d350      	bcc.n	8015eca <MEMS_runMagCal.constprop.18+0x2d12>
 8015e28:	1c5a      	adds	r2, r3, #1
 8015e2a:	d032      	beq.n	8015e92 <MEMS_runMagCal.constprop.18+0x2cda>
 8015e2c:	f89b 2025 	ldrb.w	r2, [fp, #37]	; 0x25
 8015e30:	4293      	cmp	r3, r2
 8015e32:	f6bf ac4e 	bge.w	80156d2 <MEMS_runMagCal.constprop.18+0x251a>
 8015e36:	3c01      	subs	r4, #1
 8015e38:	f88b 4024 	strb.w	r4, [fp, #36]	; 0x24
 8015e3c:	b2dc      	uxtb	r4, r3
 8015e3e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8015e42:	00db      	lsls	r3, r3, #3
 8015e44:	f103 0e40 	add.w	lr, r3, #64	; 0x40
 8015e48:	3328      	adds	r3, #40	; 0x28
 8015e4a:	eb0b 0c03 	add.w	ip, fp, r3
 8015e4e:	f89b 3025 	ldrb.w	r3, [fp, #37]	; 0x25
 8015e52:	1e5a      	subs	r2, r3, #1
 8015e54:	4294      	cmp	r4, r2
 8015e56:	44de      	add	lr, fp
 8015e58:	da0c      	bge.n	8015e74 <MEMS_runMagCal.constprop.18+0x2cbc>
 8015e5a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015e5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015e62:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015e66:	3401      	adds	r4, #1
 8015e68:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015e6c:	b2e4      	uxtb	r4, r4
 8015e6e:	e7e6      	b.n	8015e3e <MEMS_runMagCal.constprop.18+0x2c86>
 8015e70:	2700      	movs	r7, #0
 8015e72:	e42e      	b.n	80156d2 <MEMS_runMagCal.constprop.18+0x251a>
 8015e74:	2218      	movs	r2, #24
 8015e76:	fb02 b303 	mla	r3, r2, r3, fp
 8015e7a:	f89b 4024 	ldrb.w	r4, [fp, #36]	; 0x24
 8015e7e:	9702      	str	r7, [sp, #8]
 8015e80:	2200      	movs	r2, #0
 8015e82:	629a      	str	r2, [r3, #40]	; 0x28
 8015e84:	eddb ba01 	vldr	s23, [fp, #4]
 8015e88:	2c00      	cmp	r4, #0
 8015e8a:	f47f ac23 	bne.w	80156d4 <MEMS_runMagCal.constprop.18+0x251c>
 8015e8e:	f7fe bbd9 	b.w	8014644 <MEMS_runMagCal.constprop.18+0x148c>
 8015e92:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8015e96:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8015e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e9e:	d8e7      	bhi.n	8015e70 <MEMS_runMagCal.constprop.18+0x2cb8>
 8015ea0:	f04f 0800 	mov.w	r8, #0
 8015ea4:	f04f 0918 	mov.w	r9, #24
 8015ea8:	9b01      	ldr	r3, [sp, #4]
 8015eaa:	fb09 3108 	mla	r1, r9, r8, r3
 8015eae:	fa5f f388 	uxtb.w	r3, r8
 8015eb2:	429c      	cmp	r4, r3
 8015eb4:	eeb0 0a6b 	vmov.f32	s0, s23
 8015eb8:	a819      	add	r0, sp, #100	; 0x64
 8015eba:	d9d9      	bls.n	8015e70 <MEMS_runMagCal.constprop.18+0x2cb8>
 8015ebc:	f7fb fdb0 	bl	8011a20 <MEMS_checkConsistency.constprop.32>
 8015ec0:	f108 0301 	add.w	r3, r8, #1
 8015ec4:	b118      	cbz	r0, 8015ece <MEMS_runMagCal.constprop.18+0x2d16>
 8015ec6:	4698      	mov	r8, r3
 8015ec8:	e7ee      	b.n	8015ea8 <MEMS_runMagCal.constprop.18+0x2cf0>
 8015eca:	2304      	movs	r3, #4
 8015ecc:	e7ae      	b.n	8015e2c <MEMS_runMagCal.constprop.18+0x2c74>
 8015ece:	fa4f f388 	sxtb.w	r3, r8
 8015ed2:	e7ab      	b.n	8015e2c <MEMS_runMagCal.constprop.18+0x2c74>
 8015ed4:	2303      	movs	r3, #3
 8015ed6:	e7a9      	b.n	8015e2c <MEMS_runMagCal.constprop.18+0x2c74>
 8015ed8:	2c04      	cmp	r4, #4
 8015eda:	d1a2      	bne.n	8015e22 <MEMS_runMagCal.constprop.18+0x2c6a>
 8015edc:	e7a4      	b.n	8015e28 <MEMS_runMagCal.constprop.18+0x2c70>
 8015ede:	2302      	movs	r3, #2
 8015ee0:	e7a4      	b.n	8015e2c <MEMS_runMagCal.constprop.18+0x2c74>
 8015ee2:	2c03      	cmp	r4, #3
 8015ee4:	d196      	bne.n	8015e14 <MEMS_runMagCal.constprop.18+0x2c5c>
 8015ee6:	e79f      	b.n	8015e28 <MEMS_runMagCal.constprop.18+0x2c70>
 8015ee8:	2301      	movs	r3, #1
 8015eea:	e79f      	b.n	8015e2c <MEMS_runMagCal.constprop.18+0x2c74>
 8015eec:	2c02      	cmp	r4, #2
 8015eee:	d88a      	bhi.n	8015e06 <MEMS_runMagCal.constprop.18+0x2c4e>
 8015ef0:	e79a      	b.n	8015e28 <MEMS_runMagCal.constprop.18+0x2c70>
 8015ef2:	eddb ba01 	vldr	s23, [fp, #4]
 8015ef6:	2c00      	cmp	r4, #0
 8015ef8:	f47f abec 	bne.w	80156d4 <MEMS_runMagCal.constprop.18+0x251c>
 8015efc:	f7fe bba2 	b.w	8014644 <MEMS_runMagCal.constprop.18+0x148c>
 8015f00:	2c01      	cmp	r4, #1
 8015f02:	4623      	mov	r3, r4
 8015f04:	bf38      	it	cc
 8015f06:	2301      	movcc	r3, #1
 8015f08:	3b01      	subs	r3, #1
 8015f0a:	f88b 3024 	strb.w	r3, [fp, #36]	; 0x24
 8015f0e:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8015f12:	00db      	lsls	r3, r3, #3
 8015f14:	f103 0a40 	add.w	sl, r3, #64	; 0x40
 8015f18:	3328      	adds	r3, #40	; 0x28
 8015f1a:	eb0b 0403 	add.w	r4, fp, r3
 8015f1e:	f89b 3025 	ldrb.w	r3, [fp, #37]	; 0x25
 8015f22:	1e5a      	subs	r2, r3, #1
 8015f24:	4297      	cmp	r7, r2
 8015f26:	44da      	add	sl, fp
 8015f28:	da12      	bge.n	8015f50 <MEMS_runMagCal.constprop.18+0x2d98>
 8015f2a:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8015f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015f30:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8015f34:	3701      	adds	r7, #1
 8015f36:	e884 0003 	stmia.w	r4, {r0, r1}
 8015f3a:	b2ff      	uxtb	r7, r7
 8015f3c:	e7e7      	b.n	8015f0e <MEMS_runMagCal.constprop.18+0x2d56>
 8015f3e:	796b      	ldrb	r3, [r5, #5]
 8015f40:	f108 0801 	add.w	r8, r8, #1
 8015f44:	3301      	adds	r3, #1
 8015f46:	fa4f f888 	sxtb.w	r8, r8
 8015f4a:	716b      	strb	r3, [r5, #5]
 8015f4c:	f7ff bacc 	b.w	80154e8 <MEMS_runMagCal.constprop.18+0x2330>
 8015f50:	fb08 b303 	mla	r3, r8, r3, fp
 8015f54:	f8c3 9028 	str.w	r9, [r3, #40]	; 0x28
 8015f58:	e71d      	b.n	8015d96 <MEMS_runMagCal.constprop.18+0x2bde>
 8015f5a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8015f5e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8015f62:	f7fe bc0e 	b.w	8014782 <MEMS_runMagCal.constprop.18+0x15ca>
 8015f66:	495d      	ldr	r1, [pc, #372]	; (80160dc <MEMS_runMagCal.constprop.18+0x2f24>)
 8015f68:	428b      	cmp	r3, r1
 8015f6a:	d82c      	bhi.n	8015fc6 <MEMS_runMagCal.constprop.18+0x2e0e>
 8015f6c:	f5a3 53e1 	sub.w	r3, r3, #7200	; 0x1c20
 8015f70:	ee07 3a10 	vmov	s14, r3
 8015f74:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 80160e0 <MEMS_runMagCal.constprop.18+0x2f28>
 8015f78:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8015f7c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015f80:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8015f84:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8015f88:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015f8c:	f7fe bbd8 	b.w	8014740 <MEMS_runMagCal.constprop.18+0x1588>
 8015f90:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8015f94:	ee37 7a26 	vadd.f32	s14, s14, s13
 8015f98:	f7fe bc39 	b.w	801480e <MEMS_runMagCal.constprop.18+0x1656>
 8015f9c:	494f      	ldr	r1, [pc, #316]	; (80160dc <MEMS_runMagCal.constprop.18+0x2f24>)
 8015f9e:	428b      	cmp	r3, r1
 8015fa0:	d815      	bhi.n	8015fce <MEMS_runMagCal.constprop.18+0x2e16>
 8015fa2:	f5a3 53e1 	sub.w	r3, r3, #7200	; 0x1c20
 8015fa6:	ee07 3a10 	vmov	s14, r3
 8015faa:	ed9f 6a4d 	vldr	s12, [pc, #308]	; 80160e0 <MEMS_runMagCal.constprop.18+0x2f28>
 8015fae:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8015fb2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015fb6:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8015fba:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8015fbe:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015fc2:	f7fe bc03 	b.w	80147cc <MEMS_runMagCal.constprop.18+0x1614>
 8015fc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015fca:	f7fe bbb9 	b.w	8014740 <MEMS_runMagCal.constprop.18+0x1588>
 8015fce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015fd2:	f7fe bbfb 	b.w	80147cc <MEMS_runMagCal.constprop.18+0x1614>
 8015fd6:	792b      	ldrb	r3, [r5, #4]
 8015fd8:	f108 0801 	add.w	r8, r8, #1
 8015fdc:	3301      	adds	r3, #1
 8015fde:	fa4f f888 	sxtb.w	r8, r8
 8015fe2:	712b      	strb	r3, [r5, #4]
 8015fe4:	f7ff ba74 	b.w	80154d0 <MEMS_runMagCal.constprop.18+0x2318>
 8015fe8:	78eb      	ldrb	r3, [r5, #3]
 8015fea:	f108 0801 	add.w	r8, r8, #1
 8015fee:	3301      	adds	r3, #1
 8015ff0:	fa4f f888 	sxtb.w	r8, r8
 8015ff4:	70eb      	strb	r3, [r5, #3]
 8015ff6:	f7ff ba5f 	b.w	80154b8 <MEMS_runMagCal.constprop.18+0x2300>
 8015ffa:	78ab      	ldrb	r3, [r5, #2]
 8015ffc:	f108 0801 	add.w	r8, r8, #1
 8016000:	3301      	adds	r3, #1
 8016002:	fa4f f888 	sxtb.w	r8, r8
 8016006:	70ab      	strb	r3, [r5, #2]
 8016008:	f7ff ba4a 	b.w	80154a0 <MEMS_runMagCal.constprop.18+0x22e8>
 801600c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80160e4 <MEMS_runMagCal.constprop.18+0x2f2c>
 8016010:	eef8 7a66 	vcvt.f32.u32	s15, s13
 8016014:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016018:	ed9b 7a0a 	vldr	s14, [fp, #40]	; 0x28
 801601c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8016020:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016028:	f53f aa94 	bmi.w	8015554 <MEMS_runMagCal.constprop.18+0x239c>
 801602c:	e64a      	b.n	8015cc4 <MEMS_runMagCal.constprop.18+0x2b0c>
 801602e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8016032:	ee37 7a26 	vadd.f32	s14, s14, s13
 8016036:	f7fe bc30 	b.w	801489a <MEMS_runMagCal.constprop.18+0x16e2>
 801603a:	4928      	ldr	r1, [pc, #160]	; (80160dc <MEMS_runMagCal.constprop.18+0x2f24>)
 801603c:	428b      	cmp	r3, r1
 801603e:	d81d      	bhi.n	801607c <MEMS_runMagCal.constprop.18+0x2ec4>
 8016040:	f5a3 53e1 	sub.w	r3, r3, #7200	; 0x1c20
 8016044:	ee07 3a10 	vmov	s14, r3
 8016048:	ed9f 6a25 	vldr	s12, [pc, #148]	; 80160e0 <MEMS_runMagCal.constprop.18+0x2f28>
 801604c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8016050:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016054:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8016058:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 801605c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016060:	f7fe bbfa 	b.w	8014858 <MEMS_runMagCal.constprop.18+0x16a0>
 8016064:	2701      	movs	r7, #1
 8016066:	f7fe ba35 	b.w	80144d4 <MEMS_runMagCal.constprop.18+0x131c>
 801606a:	786b      	ldrb	r3, [r5, #1]
 801606c:	f108 0801 	add.w	r8, r8, #1
 8016070:	3301      	adds	r3, #1
 8016072:	fa4f f888 	sxtb.w	r8, r8
 8016076:	706b      	strb	r3, [r5, #1]
 8016078:	f7ff ba06 	b.w	8015488 <MEMS_runMagCal.constprop.18+0x22d0>
 801607c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016080:	f7fe bbea 	b.w	8014858 <MEMS_runMagCal.constprop.18+0x16a0>
 8016084:	782b      	ldrb	r3, [r5, #0]
 8016086:	3301      	adds	r3, #1
 8016088:	4680      	mov	r8, r0
 801608a:	702b      	strb	r3, [r5, #0]
 801608c:	f7ff b9f1 	b.w	8015472 <MEMS_runMagCal.constprop.18+0x22ba>
 8016090:	4912      	ldr	r1, [pc, #72]	; (80160dc <MEMS_runMagCal.constprop.18+0x2f24>)
 8016092:	428b      	cmp	r3, r1
 8016094:	d81d      	bhi.n	80160d2 <MEMS_runMagCal.constprop.18+0x2f1a>
 8016096:	f5a3 53e1 	sub.w	r3, r3, #7200	; 0x1c20
 801609a:	ee07 3a10 	vmov	s14, r3
 801609e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80160e0 <MEMS_runMagCal.constprop.18+0x2f28>
 80160a2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80160a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80160aa:	eea6 7ac6 	vfms.f32	s14, s13, s12
 80160ae:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80160b2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80160b6:	f7fe bc15 	b.w	80148e4 <MEMS_runMagCal.constprop.18+0x172c>
 80160ba:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80160be:	ee37 7a26 	vadd.f32	s14, s14, s13
 80160c2:	f7fe bc30 	b.w	8014926 <MEMS_runMagCal.constprop.18+0x176e>
 80160c6:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80160ca:	ee37 7a26 	vadd.f32	s14, s14, s13
 80160ce:	f7fe bc2a 	b.w	8014926 <MEMS_runMagCal.constprop.18+0x176e>
 80160d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80160d6:	f7fe bc05 	b.w	80148e4 <MEMS_runMagCal.constprop.18+0x172c>
 80160da:	bf00      	nop
 80160dc:	0001517f 	.word	0x0001517f
 80160e0:	367e3344 	.word	0x367e3344
 80160e4:	3a83126f 	.word	0x3a83126f

080160e8 <MotionMC_Initialize>:
 80160e8:	4a93      	ldr	r2, [pc, #588]	; (8016338 <MotionMC_Initialize+0x250>)
 80160ea:	6813      	ldr	r3, [r2, #0]
 80160ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80160f0:	f023 0301 	bic.w	r3, r3, #1
 80160f4:	4c91      	ldr	r4, [pc, #580]	; (801633c <MotionMC_Initialize+0x254>)
 80160f6:	6013      	str	r3, [r2, #0]
 80160f8:	6823      	ldr	r3, [r4, #0]
 80160fa:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80160fe:	4013      	ands	r3, r2
 8016100:	f24c 2540 	movw	r5, #49728	; 0xc240
 8016104:	42ab      	cmp	r3, r5
 8016106:	b0ae      	sub	sp, #184	; 0xb8
 8016108:	d013      	beq.n	8016132 <MotionMC_Initialize+0x4a>
 801610a:	6823      	ldr	r3, [r4, #0]
 801610c:	f24c 2470 	movw	r4, #49776	; 0xc270
 8016110:	4013      	ands	r3, r2
 8016112:	42a3      	cmp	r3, r4
 8016114:	d00d      	beq.n	8016132 <MotionMC_Initialize+0x4a>
 8016116:	4b8a      	ldr	r3, [pc, #552]	; (8016340 <MotionMC_Initialize+0x258>)
 8016118:	2201      	movs	r2, #1
 801611a:	601a      	str	r2, [r3, #0]
 801611c:	681a      	ldr	r2, [r3, #0]
 801611e:	2a00      	cmp	r2, #0
 8016120:	d1fc      	bne.n	801611c <MotionMC_Initialize+0x34>
 8016122:	4b88      	ldr	r3, [pc, #544]	; (8016344 <MotionMC_Initialize+0x25c>)
 8016124:	4a88      	ldr	r2, [pc, #544]	; (8016348 <MotionMC_Initialize+0x260>)
 8016126:	601a      	str	r2, [r3, #0]
 8016128:	681a      	ldr	r2, [r3, #0]
 801612a:	4b88      	ldr	r3, [pc, #544]	; (801634c <MotionMC_Initialize+0x264>)
 801612c:	429a      	cmp	r2, r3
 801612e:	d01f      	beq.n	8016170 <MotionMC_Initialize+0x88>
 8016130:	e7fe      	b.n	8016130 <MotionMC_Initialize+0x48>
 8016132:	4b87      	ldr	r3, [pc, #540]	; (8016350 <MotionMC_Initialize+0x268>)
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	2b00      	cmp	r3, #0
 8016138:	d1ed      	bne.n	8016116 <MotionMC_Initialize+0x2e>
 801613a:	4a86      	ldr	r2, [pc, #536]	; (8016354 <MotionMC_Initialize+0x26c>)
 801613c:	6813      	ldr	r3, [r2, #0]
 801613e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016142:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8016146:	d006      	beq.n	8016156 <MotionMC_Initialize+0x6e>
 8016148:	6813      	ldr	r3, [r2, #0]
 801614a:	f240 4283 	movw	r2, #1155	; 0x483
 801614e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016152:	4293      	cmp	r3, r2
 8016154:	d1df      	bne.n	8016116 <MotionMC_Initialize+0x2e>
 8016156:	4b80      	ldr	r3, [pc, #512]	; (8016358 <MotionMC_Initialize+0x270>)
 8016158:	2201      	movs	r2, #1
 801615a:	601a      	str	r2, [r3, #0]
 801615c:	681a      	ldr	r2, [r3, #0]
 801615e:	2a00      	cmp	r2, #0
 8016160:	d1fc      	bne.n	801615c <MotionMC_Initialize+0x74>
 8016162:	4b7e      	ldr	r3, [pc, #504]	; (801635c <MotionMC_Initialize+0x274>)
 8016164:	4a78      	ldr	r2, [pc, #480]	; (8016348 <MotionMC_Initialize+0x260>)
 8016166:	601a      	str	r2, [r3, #0]
 8016168:	681a      	ldr	r2, [r3, #0]
 801616a:	4b78      	ldr	r3, [pc, #480]	; (801634c <MotionMC_Initialize+0x264>)
 801616c:	429a      	cmp	r2, r3
 801616e:	d1df      	bne.n	8016130 <MotionMC_Initialize+0x48>
 8016170:	4c7b      	ldr	r4, [pc, #492]	; (8016360 <MotionMC_Initialize+0x278>)
 8016172:	1e43      	subs	r3, r0, #1
 8016174:	f04f 0901 	mov.w	r9, #1
 8016178:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801617c:	f884 93e0 	strb.w	r9, [r4, #992]	; 0x3e0
 8016180:	d302      	bcc.n	8016188 <MotionMC_Initialize+0xa0>
 8016182:	b02e      	add	sp, #184	; 0xb8
 8016184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016188:	468a      	mov	sl, r1
 801618a:	4607      	mov	r7, r0
 801618c:	fa0f f880 	sxth.w	r8, r0
 8016190:	2900      	cmp	r1, #0
 8016192:	d154      	bne.n	801623e <MotionMC_Initialize+0x156>
 8016194:	f104 06a4 	add.w	r6, r4, #164	; 0xa4
 8016198:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801619a:	ad02      	add	r5, sp, #8
 801619c:	f88d 9000 	strb.w	r9, [sp]
 80161a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80161a2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80161a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80161a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80161a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80161aa:	4631      	mov	r1, r6
 80161ac:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 80161b0:	f851 29b0 	ldr.w	r2, [r1], #-176
 80161b4:	602a      	str	r2, [r5, #0]
 80161b6:	a80f      	add	r0, sp, #60	; 0x3c
 80161b8:	227c      	movs	r2, #124	; 0x7c
 80161ba:	9301      	str	r3, [sp, #4]
 80161bc:	f001 f8ba 	bl	8017334 <memcpy>
 80161c0:	4669      	mov	r1, sp
 80161c2:	20b8      	movs	r0, #184	; 0xb8
 80161c4:	f7f9 fd07 	bl	800fbd6 <MotionMC_SaveCalInNVM>
 80161c8:	f884 a014 	strb.w	sl, [r4, #20]
 80161cc:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80161d0:	4a64      	ldr	r2, [pc, #400]	; (8016364 <MotionMC_Initialize+0x27c>)
 80161d2:	1bdb      	subs	r3, r3, r7
 80161d4:	ee07 3a90 	vmov	s15, r3
 80161d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80161dc:	23c8      	movs	r3, #200	; 0xc8
 80161de:	eef0 7ae7 	vabs.f32	s15, s15
 80161e2:	fb93 f3f7 	sdiv	r3, r3, r7
 80161e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80161ea:	b2db      	uxtb	r3, r3
 80161ec:	2b32      	cmp	r3, #50	; 0x32
 80161ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80161f2:	bf28      	it	cs
 80161f4:	2332      	movcs	r3, #50	; 0x32
 80161f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161fa:	f884 33ea 	strb.w	r3, [r4, #1002]	; 0x3ea
 80161fe:	6017      	str	r7, [r2, #0]
 8016200:	dd0d      	ble.n	801621e <MotionMC_Initialize+0x136>
 8016202:	2300      	movs	r3, #0
 8016204:	4958      	ldr	r1, [pc, #352]	; (8016368 <MotionMC_Initialize+0x280>)
 8016206:	f8a4 8002 	strh.w	r8, [r4, #2]
 801620a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 801620e:	6061      	str	r1, [r4, #4]
 8016210:	8123      	strh	r3, [r4, #8]
 8016212:	60e3      	str	r3, [r4, #12]
 8016214:	8022      	strh	r2, [r4, #0]
 8016216:	2300      	movs	r3, #0
 8016218:	f884 357c 	strb.w	r3, [r4, #1404]	; 0x57c
 801621c:	e7b1      	b.n	8016182 <MotionMC_Initialize+0x9a>
 801621e:	edd4 7a01 	vldr	s15, [r4, #4]
 8016222:	eddf 6a52 	vldr	s13, [pc, #328]	; 801636c <MotionMC_Initialize+0x284>
 8016226:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8016370 <MotionMC_Initialize+0x288>
 801622a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801622e:	eef0 7ae7 	vabs.f32	s15, s15
 8016232:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801623a:	dce2      	bgt.n	8016202 <MotionMC_Initialize+0x11a>
 801623c:	e7eb      	b.n	8016216 <MotionMC_Initialize+0x12e>
 801623e:	2500      	movs	r5, #0
 8016240:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016244:	f44f 0202 	mov.w	r2, #8519680	; 0x820000
 8016248:	484a      	ldr	r0, [pc, #296]	; (8016374 <MotionMC_Initialize+0x28c>)
 801624a:	60e5      	str	r5, [r4, #12]
 801624c:	4629      	mov	r1, r5
 801624e:	7525      	strb	r5, [r4, #20]
 8016250:	61a5      	str	r5, [r4, #24]
 8016252:	f884 50dc 	strb.w	r5, [r4, #220]	; 0xdc
 8016256:	f884 5020 	strb.w	r5, [r4, #32]
 801625a:	60a2      	str	r2, [r4, #8]
 801625c:	6120      	str	r0, [r4, #16]
 801625e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016262:	83a3      	strh	r3, [r4, #28]
 8016264:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 8016268:	f001 f872 	bl	8017350 <memset>
 801626c:	f44f 66a0 	mov.w	r6, #1280	; 0x500
 8016270:	23ff      	movs	r3, #255	; 0xff
 8016272:	224b      	movs	r2, #75	; 0x4b
 8016274:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 8016278:	4629      	mov	r1, r5
 801627a:	f8c4 5360 	str.w	r5, [r4, #864]	; 0x360
 801627e:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
 8016282:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
 8016286:	f884 20e1 	strb.w	r2, [r4, #225]	; 0xe1
 801628a:	f884 30e2 	strb.w	r3, [r4, #226]	; 0xe2
 801628e:	f884 3366 	strb.w	r3, [r4, #870]	; 0x366
 8016292:	222e      	movs	r2, #46	; 0x2e
 8016294:	f8a4 0364 	strh.w	r0, [r4, #868]	; 0x364
 8016298:	84a6      	strh	r6, [r4, #36]	; 0x24
 801629a:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
 801629e:	f001 f857 	bl	8017350 <memset>
 80162a2:	f1a7 030a 	sub.w	r3, r7, #10
 80162a6:	b29b      	uxth	r3, r3
 80162a8:	a92e      	add	r1, sp, #184	; 0xb8
 80162aa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80162ae:	2b32      	cmp	r3, #50	; 0x32
 80162b0:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
 80162b4:	f04f 0500 	mov.w	r5, #0
 80162b8:	bf98      	it	ls
 80162ba:	f884 9014 	strbls.w	r9, [r4, #20]
 80162be:	2305      	movs	r3, #5
 80162c0:	f884 90a5 	strb.w	r9, [r4, #165]	; 0xa5
 80162c4:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 80162c8:	f8c4 20c4 	str.w	r2, [r4, #196]	; 0xc4
 80162cc:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
 80162d0:	f801 5db8 	strb.w	r5, [r1, #-184]!
 80162d4:	20b8      	movs	r0, #184	; 0xb8
 80162d6:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 80162da:	f7f9 fc6f 	bl	800fbbc <MotionMC_LoadCalFromNVM>
 80162de:	2801      	cmp	r0, #1
 80162e0:	f43f af74 	beq.w	80161cc <MotionMC_Initialize+0xe4>
 80162e4:	f8dd c004 	ldr.w	ip, [sp, #4]
 80162e8:	f88d 5000 	strb.w	r5, [sp]
 80162ec:	f1bc 0f00 	cmp.w	ip, #0
 80162f0:	f43f af6c 	beq.w	80161cc <MotionMC_Initialize+0xe4>
 80162f4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	f43f af67 	beq.w	80161cc <MotionMC_Initialize+0xe4>
 80162fe:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8016302:	2b00      	cmp	r3, #0
 8016304:	f43f af62 	beq.w	80161cc <MotionMC_Initialize+0xe4>
 8016308:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 801630c:	429a      	cmp	r2, r3
 801630e:	f4ff af5d 	bcc.w	80161cc <MotionMC_Initialize+0xe4>
 8016312:	ad02      	add	r5, sp, #8
 8016314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016316:	4e18      	ldr	r6, [pc, #96]	; (8016378 <MotionMC_Initialize+0x290>)
 8016318:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801631a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801631c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801631e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016320:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8016322:	4630      	mov	r0, r6
 8016324:	682b      	ldr	r3, [r5, #0]
 8016326:	f840 39b0 	str.w	r3, [r0], #-176
 801632a:	227c      	movs	r2, #124	; 0x7c
 801632c:	a90f      	add	r1, sp, #60	; 0x3c
 801632e:	f8c4 c0d8 	str.w	ip, [r4, #216]	; 0xd8
 8016332:	f000 ffff 	bl	8017334 <memcpy>
 8016336:	e749      	b.n	80161cc <MotionMC_Initialize+0xe4>
 8016338:	e0002000 	.word	0xe0002000
 801633c:	e000ed00 	.word	0xe000ed00
 8016340:	40023008 	.word	0x40023008
 8016344:	40023000 	.word	0x40023000
 8016348:	f407a5c2 	.word	0xf407a5c2
 801634c:	b5e8b5cd 	.word	0xb5e8b5cd
 8016350:	e0042000 	.word	0xe0042000
 8016354:	5c001000 	.word	0x5c001000
 8016358:	58024c08 	.word	0x58024c08
 801635c:	58024c00 	.word	0x58024c00
 8016360:	20001708 	.word	0x20001708
 8016364:	20000044 	.word	0x20000044
 8016368:	3dcccccd 	.word	0x3dcccccd
 801636c:	3dcccccd 	.word	0x3dcccccd
 8016370:	3c23d70a 	.word	0x3c23d70a
 8016374:	2000c378 	.word	0x2000c378
 8016378:	200017ac 	.word	0x200017ac

0801637c <MotionMC_Update>:
 801637c:	4b74      	ldr	r3, [pc, #464]	; (8016550 <MotionMC_Update+0x1d4>)
 801637e:	f893 23e0 	ldrb.w	r2, [r3, #992]	; 0x3e0
 8016382:	2a00      	cmp	r2, #0
 8016384:	d07b      	beq.n	801647e <MotionMC_Update+0x102>
 8016386:	ed90 7a00 	vldr	s14, [r0]
 801638a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801638e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016392:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8016396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801639a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801639e:	bfac      	ite	ge
 80163a0:	ee77 7a87 	vaddge.f32	s15, s15, s14
 80163a4:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 80163a8:	ed90 7a01 	vldr	s14, [r0, #4]
 80163ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80163b0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80163b4:	ee17 1a90 	vmov	r1, s15
 80163b8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80163bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80163c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80163c8:	bfac      	ite	ge
 80163ca:	ee77 7a87 	vaddge.f32	s15, s15, s14
 80163ce:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 80163d2:	ed90 7a02 	vldr	s14, [r0, #8]
 80163d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80163da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163de:	ee17 4a90 	vmov	r4, s15
 80163e2:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80163e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80163ea:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80163ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163f2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80163f6:	bfac      	ite	ge
 80163f8:	ee77 7a87 	vaddge.f32	s15, s15, s14
 80163fc:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 8016400:	f893 657c 	ldrb.w	r6, [r3, #1404]	; 0x57c
 8016404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016408:	ee17 2a90 	vmov	r2, s15
 801640c:	b37e      	cbz	r6, 801646e <MotionMC_Update+0xf2>
 801640e:	4d51      	ldr	r5, [pc, #324]	; (8016554 <MotionMC_Update+0x1d8>)
 8016410:	00f0      	lsls	r0, r6, #3
 8016412:	682d      	ldr	r5, [r5, #0]
 8016414:	181f      	adds	r7, r3, r0
 8016416:	fb15 f506 	smulbb	r5, r5, r6
 801641a:	f8a7 53ec 	strh.w	r5, [r7, #1004]	; 0x3ec
 801641e:	f647 75fe 	movw	r5, #32766	; 0x7ffe
 8016422:	4f4d      	ldr	r7, [pc, #308]	; (8016558 <MotionMC_Update+0x1dc>)
 8016424:	42a9      	cmp	r1, r5
 8016426:	bfa8      	it	ge
 8016428:	4629      	movge	r1, r5
 801642a:	42aa      	cmp	r2, r5
 801642c:	bfa8      	it	ge
 801642e:	462a      	movge	r2, r5
 8016430:	42b9      	cmp	r1, r7
 8016432:	bfb8      	it	lt
 8016434:	4639      	movlt	r1, r7
 8016436:	42bc      	cmp	r4, r7
 8016438:	db22      	blt.n	8016480 <MotionMC_Update+0x104>
 801643a:	42ac      	cmp	r4, r5
 801643c:	bfa8      	it	ge
 801643e:	462c      	movge	r4, r5
 8016440:	b224      	sxth	r4, r4
 8016442:	4d45      	ldr	r5, [pc, #276]	; (8016558 <MotionMC_Update+0x1dc>)
 8016444:	f893 c3ea 	ldrb.w	ip, [r3, #1002]	; 0x3ea
 8016448:	42aa      	cmp	r2, r5
 801644a:	f106 0701 	add.w	r7, r6, #1
 801644e:	bfb8      	it	lt
 8016450:	462a      	movlt	r2, r5
 8016452:	b2ff      	uxtb	r7, r7
 8016454:	181d      	adds	r5, r3, r0
 8016456:	45bc      	cmp	ip, r7
 8016458:	f8a5 23f2 	strh.w	r2, [r5, #1010]	; 0x3f2
 801645c:	f8a5 13ee 	strh.w	r1, [r5, #1006]	; 0x3ee
 8016460:	f8a5 43f0 	strh.w	r4, [r5, #1008]	; 0x3f0
 8016464:	f883 757c 	strb.w	r7, [r3, #1404]	; 0x57c
 8016468:	d00c      	beq.n	8016484 <MotionMC_Update+0x108>
 801646a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801646e:	68c0      	ldr	r0, [r0, #12]
 8016470:	f8c3 03e4 	str.w	r0, [r3, #996]	; 0x3e4
 8016474:	2001      	movs	r0, #1
 8016476:	f883 03e8 	strb.w	r0, [r3, #1000]	; 0x3e8
 801647a:	4630      	mov	r0, r6
 801647c:	e7cf      	b.n	801641e <MotionMC_Update+0xa2>
 801647e:	4770      	bx	lr
 8016480:	462c      	mov	r4, r5
 8016482:	e7de      	b.n	8016442 <MotionMC_Update+0xc6>
 8016484:	f893 23e8 	ldrb.w	r2, [r3, #1000]	; 0x3e8
 8016488:	f8d3 83e4 	ldr.w	r8, [r3, #996]	; 0x3e4
 801648c:	2100      	movs	r1, #0
 801648e:	f883 157c 	strb.w	r1, [r3, #1404]	; 0x57c
 8016492:	b382      	cbz	r2, 80164f6 <MotionMC_Update+0x17a>
 8016494:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
 8016498:	891a      	ldrh	r2, [r3, #8]
 801649a:	e9d3 1703 	ldrd	r1, r7, [r3, #12]
 801649e:	f1bc 0f00 	cmp.w	ip, #0
 80164a2:	d026      	beq.n	80164f2 <MotionMC_Update+0x176>
 80164a4:	f1be 0f00 	cmp.w	lr, #0
 80164a8:	d023      	beq.n	80164f2 <MotionMC_Update+0x176>
 80164aa:	492c      	ldr	r1, [pc, #176]	; (801655c <MotionMC_Update+0x1e0>)
 80164ac:	4572      	cmp	r2, lr
 80164ae:	f101 0408 	add.w	r4, r1, #8
 80164b2:	bf28      	it	cs
 80164b4:	4672      	movcs	r2, lr
 80164b6:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 80164ba:	f06f 4960 	mvn.w	r9, #3758096384	; 0xe0000000
 80164be:	f04f 0c01 	mov.w	ip, #1
 80164c2:	3201      	adds	r2, #1
 80164c4:	b292      	uxth	r2, r2
 80164c6:	4572      	cmp	r2, lr
 80164c8:	bf28      	it	cs
 80164ca:	4672      	movcs	r2, lr
 80164cc:	eb02 0509 	add.w	r5, r2, r9
 80164d0:	eb07 04c5 	add.w	r4, r7, r5, lsl #3
 80164d4:	f8d1 a00a 	ldr.w	sl, [r1, #10]
 80164d8:	f807 c035 	strb.w	ip, [r7, r5, lsl #3]
 80164dc:	f8c4 a002 	str.w	sl, [r4, #2]
 80164e0:	89cd      	ldrh	r5, [r1, #14]
 80164e2:	80e5      	strh	r5, [r4, #6]
 80164e4:	3108      	adds	r1, #8
 80164e6:	42b1      	cmp	r1, r6
 80164e8:	d1eb      	bne.n	80164c2 <MotionMC_Update+0x146>
 80164ea:	4418      	add	r0, r3
 80164ec:	f8b0 13ec 	ldrh.w	r1, [r0, #1004]	; 0x3ec
 80164f0:	4441      	add	r1, r8
 80164f2:	811a      	strh	r2, [r3, #8]
 80164f4:	60d9      	str	r1, [r3, #12]
 80164f6:	7d1a      	ldrb	r2, [r3, #20]
 80164f8:	2a00      	cmp	r2, #0
 80164fa:	d0b6      	beq.n	801646a <MotionMC_Update+0xee>
 80164fc:	8919      	ldrh	r1, [r3, #8]
 80164fe:	895a      	ldrh	r2, [r3, #10]
 8016500:	428a      	cmp	r2, r1
 8016502:	d01d      	beq.n	8016540 <MotionMC_Update+0x1c4>
 8016504:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 8016508:	b1f1      	cbz	r1, 8016548 <MotionMC_Update+0x1cc>
 801650a:	68da      	ldr	r2, [r3, #12]
 801650c:	3201      	adds	r2, #1
 801650e:	442a      	add	r2, r5
 8016510:	1c50      	adds	r0, r2, #1
 8016512:	d019      	beq.n	8016548 <MotionMC_Update+0x1cc>
 8016514:	f502 541c 	add.w	r4, r2, #9984	; 0x2700
 8016518:	3410      	adds	r4, #16
 801651a:	6998      	ldr	r0, [r3, #24]
 801651c:	42a0      	cmp	r0, r4
 801651e:	8b9c      	ldrh	r4, [r3, #28]
 8016520:	bf84      	itt	hi
 8016522:	619a      	strhi	r2, [r3, #24]
 8016524:	4610      	movhi	r0, r2
 8016526:	4420      	add	r0, r4
 8016528:	4282      	cmp	r2, r0
 801652a:	d39e      	bcc.n	801646a <MotionMC_Update+0xee>
 801652c:	b121      	cbz	r1, 8016538 <MotionMC_Update+0x1bc>
 801652e:	68db      	ldr	r3, [r3, #12]
 8016530:	3901      	subs	r1, #1
 8016532:	fb05 3111 	mls	r1, r5, r1, r3
 8016536:	b289      	uxth	r1, r1
 8016538:	1a53      	subs	r3, r2, r1
 801653a:	b21b      	sxth	r3, r3
 801653c:	42a3      	cmp	r3, r4
 801653e:	db94      	blt.n	801646a <MotionMC_Update+0xee>
 8016540:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016544:	f7fc be38 	b.w	80131b8 <MEMS_runMagCal.constprop.18>
 8016548:	f242 7410 	movw	r4, #10000	; 0x2710
 801654c:	2200      	movs	r2, #0
 801654e:	e7e4      	b.n	801651a <MotionMC_Update+0x19e>
 8016550:	20001708 	.word	0x20001708
 8016554:	20000044 	.word	0x20000044
 8016558:	ffff8002 	.word	0xffff8002
 801655c:	20001aec 	.word	0x20001aec

08016560 <MotionMC_GetCalParams>:
 8016560:	b4f0      	push	{r4, r5, r6, r7}
 8016562:	4f26      	ldr	r7, [pc, #152]	; (80165fc <MotionMC_GetCalParams+0x9c>)
 8016564:	f897 33e0 	ldrb.w	r3, [r7, #992]	; 0x3e0
 8016568:	b08e      	sub	sp, #56	; 0x38
 801656a:	b913      	cbnz	r3, 8016572 <MotionMC_GetCalParams+0x12>
 801656c:	b00e      	add	sp, #56	; 0x38
 801656e:	bcf0      	pop	{r4, r5, r6, r7}
 8016570:	4770      	bx	lr
 8016572:	f107 05a4 	add.w	r5, r7, #164	; 0xa4
 8016576:	4606      	mov	r6, r0
 8016578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801657a:	ac01      	add	r4, sp, #4
 801657c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801657e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016586:	682b      	ldr	r3, [r5, #0]
 8016588:	6023      	str	r3, [r4, #0]
 801658a:	9905      	ldr	r1, [sp, #20]
 801658c:	9a06      	ldr	r2, [sp, #24]
 801658e:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8016592:	eddd 6a02 	vldr	s13, [sp, #8]
 8016596:	60f1      	str	r1, [r6, #12]
 8016598:	6132      	str	r2, [r6, #16]
 801659a:	9f07      	ldr	r7, [sp, #28]
 801659c:	ed9d 7a03 	vldr	s14, [sp, #12]
 80165a0:	eddd 7a04 	vldr	s15, [sp, #16]
 80165a4:	ed9f 6a16 	vldr	s12, [pc, #88]	; 8016600 <MotionMC_GetCalParams+0xa0>
 80165a8:	9d08      	ldr	r5, [sp, #32]
 80165aa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80165ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 80165ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80165b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80165b2:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
 80165b6:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80165ba:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80165be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80165c2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80165c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80165ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80165ce:	ee66 6a86 	vmul.f32	s13, s13, s12
 80165d2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80165d6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80165da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80165dc:	6177      	str	r7, [r6, #20]
 80165de:	edc6 6a00 	vstr	s13, [r6]
 80165e2:	ed86 7a01 	vstr	s14, [r6, #4]
 80165e6:	edc6 7a02 	vstr	s15, [r6, #8]
 80165ea:	61b5      	str	r5, [r6, #24]
 80165ec:	61f4      	str	r4, [r6, #28]
 80165ee:	6230      	str	r0, [r6, #32]
 80165f0:	6271      	str	r1, [r6, #36]	; 0x24
 80165f2:	62b2      	str	r2, [r6, #40]	; 0x28
 80165f4:	62f3      	str	r3, [r6, #44]	; 0x2c
 80165f6:	b00e      	add	sp, #56	; 0x38
 80165f8:	bcf0      	pop	{r4, r5, r6, r7}
 80165fa:	4770      	bx	lr
 80165fc:	20001708 	.word	0x20001708
 8016600:	3dcccccd 	.word	0x3dcccccd

08016604 <MotionMC_GetLibVersion>:
 8016604:	4b10      	ldr	r3, [pc, #64]	; (8016648 <MotionMC_GetLibVersion+0x44>)
 8016606:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 801660a:	b90b      	cbnz	r3, 8016610 <MotionMC_GetLibVersion+0xc>
 801660c:	4618      	mov	r0, r3
 801660e:	4770      	bx	lr
 8016610:	b470      	push	{r4, r5, r6}
 8016612:	4e0e      	ldr	r6, [pc, #56]	; (801664c <MotionMC_GetLibVersion+0x48>)
 8016614:	4605      	mov	r5, r0
 8016616:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016618:	b08b      	sub	sp, #44	; 0x2c
 801661a:	ac01      	add	r4, sp, #4
 801661c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801661e:	6833      	ldr	r3, [r6, #0]
 8016620:	f824 3b02 	strh.w	r3, [r4], #2
 8016624:	0c1b      	lsrs	r3, r3, #16
 8016626:	7023      	strb	r3, [r4, #0]
 8016628:	ac01      	add	r4, sp, #4
 801662a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801662c:	8826      	ldrh	r6, [r4, #0]
 801662e:	60eb      	str	r3, [r5, #12]
 8016630:	78a4      	ldrb	r4, [r4, #2]
 8016632:	6028      	str	r0, [r5, #0]
 8016634:	2312      	movs	r3, #18
 8016636:	4618      	mov	r0, r3
 8016638:	6069      	str	r1, [r5, #4]
 801663a:	60aa      	str	r2, [r5, #8]
 801663c:	822e      	strh	r6, [r5, #16]
 801663e:	74ac      	strb	r4, [r5, #18]
 8016640:	b00b      	add	sp, #44	; 0x2c
 8016642:	bc70      	pop	{r4, r5, r6}
 8016644:	4770      	bx	lr
 8016646:	bf00      	nop
 8016648:	20001708 	.word	0x20001708
 801664c:	0801cdd8 	.word	0x0801cdd8

08016650 <rt_InitInfAndNaN.isra.3>:
 8016650:	4b05      	ldr	r3, [pc, #20]	; (8016668 <rt_InitInfAndNaN.isra.3+0x18>)
 8016652:	4a06      	ldr	r2, [pc, #24]	; (801666c <rt_InitInfAndNaN.isra.3+0x1c>)
 8016654:	f503 6182 	add.w	r1, r3, #1040	; 0x410
 8016658:	f203 4314 	addw	r3, r3, #1044	; 0x414
 801665c:	f04f 40ff 	mov.w	r0, #2139095040	; 0x7f800000
 8016660:	6008      	str	r0, [r1, #0]
 8016662:	601a      	str	r2, [r3, #0]
 8016664:	4770      	bx	lr
 8016666:	bf00      	nop
 8016668:	20001c88 	.word	0x20001c88
 801666c:	ff800000 	.word	0xff800000

08016670 <iNemo_setOrientation.constprop.40>:
 8016670:	b4f0      	push	{r4, r5, r6, r7}
 8016672:	4973      	ldr	r1, [pc, #460]	; (8016840 <iNemo_setOrientation.constprop.40+0x1d0>)
 8016674:	4b73      	ldr	r3, [pc, #460]	; (8016844 <iNemo_setOrientation.constprop.40+0x1d4>)
 8016676:	7808      	ldrb	r0, [r1, #0]
 8016678:	2200      	movs	r2, #0
 801667a:	f1a0 0742 	sub.w	r7, r0, #66	; 0x42
 801667e:	b084      	sub	sp, #16
 8016680:	2f17      	cmp	r7, #23
 8016682:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8016686:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 801668a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 801668e:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
 8016692:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8016696:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 801669a:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 801669e:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
 80166a2:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 80166a6:	790a      	ldrb	r2, [r1, #4]
 80166a8:	bf98      	it	ls
 80166aa:	3020      	addls	r0, #32
 80166ac:	f88d 0004 	strb.w	r0, [sp, #4]
 80166b0:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 80166b4:	2817      	cmp	r0, #23
 80166b6:	bf98      	it	ls
 80166b8:	3220      	addls	r2, #32
 80166ba:	f88d 2008 	strb.w	r2, [sp, #8]
 80166be:	7a0a      	ldrb	r2, [r1, #8]
 80166c0:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 80166c4:	2817      	cmp	r0, #23
 80166c6:	bf98      	it	ls
 80166c8:	3220      	addls	r2, #32
 80166ca:	f88d 200c 	strb.w	r2, [sp, #12]
 80166ce:	784a      	ldrb	r2, [r1, #1]
 80166d0:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 80166d4:	2817      	cmp	r0, #23
 80166d6:	bf98      	it	ls
 80166d8:	3220      	addls	r2, #32
 80166da:	f88d 2005 	strb.w	r2, [sp, #5]
 80166de:	794a      	ldrb	r2, [r1, #5]
 80166e0:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 80166e4:	2817      	cmp	r0, #23
 80166e6:	bf98      	it	ls
 80166e8:	3220      	addls	r2, #32
 80166ea:	f88d 2009 	strb.w	r2, [sp, #9]
 80166ee:	7a4a      	ldrb	r2, [r1, #9]
 80166f0:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 80166f4:	2817      	cmp	r0, #23
 80166f6:	bf98      	it	ls
 80166f8:	3220      	addls	r2, #32
 80166fa:	f88d 200d 	strb.w	r2, [sp, #13]
 80166fe:	788a      	ldrb	r2, [r1, #2]
 8016700:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8016704:	2817      	cmp	r0, #23
 8016706:	bf98      	it	ls
 8016708:	3220      	addls	r2, #32
 801670a:	f88d 2006 	strb.w	r2, [sp, #6]
 801670e:	798a      	ldrb	r2, [r1, #6]
 8016710:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8016714:	2817      	cmp	r0, #23
 8016716:	bf98      	it	ls
 8016718:	3220      	addls	r2, #32
 801671a:	f88d 200a 	strb.w	r2, [sp, #10]
 801671e:	7a8a      	ldrb	r2, [r1, #10]
 8016720:	f1a2 0142 	sub.w	r1, r2, #66	; 0x42
 8016724:	2917      	cmp	r1, #23
 8016726:	bf98      	it	ls
 8016728:	3220      	addls	r2, #32
 801672a:	f88d 200e 	strb.w	r2, [sp, #14]
 801672e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8016732:	3a64      	subs	r2, #100	; 0x64
 8016734:	2a13      	cmp	r2, #19
 8016736:	d80e      	bhi.n	8016756 <iNemo_setOrientation.constprop.40+0xe6>
 8016738:	e8df f002 	tbb	[pc, r2]
 801673c:	0d0dba0a 	.word	0x0d0dba0a
 8016740:	0d0d0d0d 	.word	0x0d0d0d0d
 8016744:	0dbe0d0d 	.word	0x0dbe0d0d
 8016748:	c20d0d0d 	.word	0xc20d0d0d
 801674c:	ca0dc60d 	.word	0xca0dc60d
 8016750:	22ff      	movs	r2, #255	; 0xff
 8016752:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 8016756:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801675a:	3a64      	subs	r2, #100	; 0x64
 801675c:	2a13      	cmp	r2, #19
 801675e:	d80e      	bhi.n	801677e <iNemo_setOrientation.constprop.40+0x10e>
 8016760:	e8df f002 	tbb	[pc, r2]
 8016764:	0d0dba0a 	.word	0x0d0dba0a
 8016768:	0d0d0d0d 	.word	0x0d0d0d0d
 801676c:	0dbe0d0d 	.word	0x0dbe0d0d
 8016770:	c20d0d0d 	.word	0xc20d0d0d
 8016774:	ca0dc60d 	.word	0xca0dc60d
 8016778:	22ff      	movs	r2, #255	; 0xff
 801677a:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
 801677e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8016782:	3a64      	subs	r2, #100	; 0x64
 8016784:	2a13      	cmp	r2, #19
 8016786:	d80e      	bhi.n	80167a6 <iNemo_setOrientation.constprop.40+0x136>
 8016788:	e8df f002 	tbb	[pc, r2]
 801678c:	0d0dba0a 	.word	0x0d0dba0a
 8016790:	0d0d0d0d 	.word	0x0d0d0d0d
 8016794:	0dbe0d0d 	.word	0x0dbe0d0d
 8016798:	c20d0d0d 	.word	0xc20d0d0d
 801679c:	ca0dc60d 	.word	0xca0dc60d
 80167a0:	22ff      	movs	r2, #255	; 0xff
 80167a2:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 80167a6:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80167aa:	3a64      	subs	r2, #100	; 0x64
 80167ac:	2a13      	cmp	r2, #19
 80167ae:	d80e      	bhi.n	80167ce <iNemo_setOrientation.constprop.40+0x15e>
 80167b0:	e8df f002 	tbb	[pc, r2]
 80167b4:	0d0dba0a 	.word	0x0d0dba0a
 80167b8:	0d0d0d0d 	.word	0x0d0d0d0d
 80167bc:	0dbe0d0d 	.word	0x0dbe0d0d
 80167c0:	c20d0d0d 	.word	0xc20d0d0d
 80167c4:	ca0dc60d 	.word	0xca0dc60d
 80167c8:	22ff      	movs	r2, #255	; 0xff
 80167ca:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
 80167ce:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80167d2:	3a64      	subs	r2, #100	; 0x64
 80167d4:	2a13      	cmp	r2, #19
 80167d6:	d80e      	bhi.n	80167f6 <iNemo_setOrientation.constprop.40+0x186>
 80167d8:	e8df f002 	tbb	[pc, r2]
 80167dc:	0d0dba0a 	.word	0x0d0dba0a
 80167e0:	0d0d0d0d 	.word	0x0d0d0d0d
 80167e4:	0dbe0d0d 	.word	0x0dbe0d0d
 80167e8:	c20d0d0d 	.word	0xc20d0d0d
 80167ec:	ca0dc60d 	.word	0xca0dc60d
 80167f0:	22ff      	movs	r2, #255	; 0xff
 80167f2:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
 80167f6:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80167fa:	3a64      	subs	r2, #100	; 0x64
 80167fc:	2a13      	cmp	r2, #19
 80167fe:	d80e      	bhi.n	801681e <iNemo_setOrientation.constprop.40+0x1ae>
 8016800:	e8df f002 	tbb	[pc, r2]
 8016804:	0d0dba0a 	.word	0x0d0dba0a
 8016808:	0d0d0d0d 	.word	0x0d0d0d0d
 801680c:	0dbe0d0d 	.word	0x0dbe0d0d
 8016810:	c20d0d0d 	.word	0xc20d0d0d
 8016814:	ca0dc60d 	.word	0xca0dc60d
 8016818:	22ff      	movs	r2, #255	; 0xff
 801681a:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 801681e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8016822:	3a64      	subs	r2, #100	; 0x64
 8016824:	2a13      	cmp	r2, #19
 8016826:	d812      	bhi.n	801684e <iNemo_setOrientation.constprop.40+0x1de>
 8016828:	e8df f002 	tbb	[pc, r2]
 801682c:	1111ba0e 	.word	0x1111ba0e
 8016830:	11111111 	.word	0x11111111
 8016834:	11be1111 	.word	0x11be1111
 8016838:	c2111111 	.word	0xc2111111
 801683c:	ca11c611 	.word	0xca11c611
 8016840:	20000048 	.word	0x20000048
 8016844:	20001c88 	.word	0x20001c88
 8016848:	22ff      	movs	r2, #255	; 0xff
 801684a:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
 801684e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8016852:	3a64      	subs	r2, #100	; 0x64
 8016854:	2a13      	cmp	r2, #19
 8016856:	d80e      	bhi.n	8016876 <iNemo_setOrientation.constprop.40+0x206>
 8016858:	e8df f002 	tbb	[pc, r2]
 801685c:	0d0db60a 	.word	0x0d0db60a
 8016860:	0d0d0d0d 	.word	0x0d0d0d0d
 8016864:	0dba0d0d 	.word	0x0dba0d0d
 8016868:	be0d0d0d 	.word	0xbe0d0d0d
 801686c:	c60dc20d 	.word	0xc60dc20d
 8016870:	22ff      	movs	r2, #255	; 0xff
 8016872:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
 8016876:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801687a:	3a64      	subs	r2, #100	; 0x64
 801687c:	2a13      	cmp	r2, #19
 801687e:	d80e      	bhi.n	801689e <iNemo_setOrientation.constprop.40+0x22e>
 8016880:	e8df f002 	tbb	[pc, r2]
 8016884:	0d0db60a 	.word	0x0d0db60a
 8016888:	0d0d0d0d 	.word	0x0d0d0d0d
 801688c:	0dbc0d0d 	.word	0x0dbc0d0d
 8016890:	c20d0d0d 	.word	0xc20d0d0d
 8016894:	100dc80d 	.word	0x100dc80d
 8016898:	22ff      	movs	r2, #255	; 0xff
 801689a:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 801689e:	b004      	add	sp, #16
 80168a0:	bcf0      	pop	{r4, r5, r6, r7}
 80168a2:	4770      	bx	lr
 80168a4:	22ff      	movs	r2, #255	; 0xff
 80168a6:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 80168aa:	b004      	add	sp, #16
 80168ac:	bcf0      	pop	{r4, r5, r6, r7}
 80168ae:	4770      	bx	lr
 80168b0:	2201      	movs	r2, #1
 80168b2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 80168b6:	e74e      	b.n	8016756 <iNemo_setOrientation.constprop.40+0xe6>
 80168b8:	2201      	movs	r2, #1
 80168ba:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
 80168be:	e74a      	b.n	8016756 <iNemo_setOrientation.constprop.40+0xe6>
 80168c0:	22ff      	movs	r2, #255	; 0xff
 80168c2:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
 80168c6:	e746      	b.n	8016756 <iNemo_setOrientation.constprop.40+0xe6>
 80168c8:	2201      	movs	r2, #1
 80168ca:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 80168ce:	e742      	b.n	8016756 <iNemo_setOrientation.constprop.40+0xe6>
 80168d0:	22ff      	movs	r2, #255	; 0xff
 80168d2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 80168d6:	e73e      	b.n	8016756 <iNemo_setOrientation.constprop.40+0xe6>
 80168d8:	2201      	movs	r2, #1
 80168da:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 80168de:	e74e      	b.n	801677e <iNemo_setOrientation.constprop.40+0x10e>
 80168e0:	2201      	movs	r2, #1
 80168e2:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 80168e6:	e74a      	b.n	801677e <iNemo_setOrientation.constprop.40+0x10e>
 80168e8:	22ff      	movs	r2, #255	; 0xff
 80168ea:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 80168ee:	e746      	b.n	801677e <iNemo_setOrientation.constprop.40+0x10e>
 80168f0:	2201      	movs	r2, #1
 80168f2:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
 80168f6:	e742      	b.n	801677e <iNemo_setOrientation.constprop.40+0x10e>
 80168f8:	22ff      	movs	r2, #255	; 0xff
 80168fa:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 80168fe:	e73e      	b.n	801677e <iNemo_setOrientation.constprop.40+0x10e>
 8016900:	2201      	movs	r2, #1
 8016902:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 8016906:	e74e      	b.n	80167a6 <iNemo_setOrientation.constprop.40+0x136>
 8016908:	2201      	movs	r2, #1
 801690a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 801690e:	e74a      	b.n	80167a6 <iNemo_setOrientation.constprop.40+0x136>
 8016910:	22ff      	movs	r2, #255	; 0xff
 8016912:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8016916:	e746      	b.n	80167a6 <iNemo_setOrientation.constprop.40+0x136>
 8016918:	2201      	movs	r2, #1
 801691a:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 801691e:	e742      	b.n	80167a6 <iNemo_setOrientation.constprop.40+0x136>
 8016920:	22ff      	movs	r2, #255	; 0xff
 8016922:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 8016926:	e73e      	b.n	80167a6 <iNemo_setOrientation.constprop.40+0x136>
 8016928:	2201      	movs	r2, #1
 801692a:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
 801692e:	e74e      	b.n	80167ce <iNemo_setOrientation.constprop.40+0x15e>
 8016930:	2201      	movs	r2, #1
 8016932:	f883 2433 	strb.w	r2, [r3, #1075]	; 0x433
 8016936:	e74a      	b.n	80167ce <iNemo_setOrientation.constprop.40+0x15e>
 8016938:	22ff      	movs	r2, #255	; 0xff
 801693a:	f883 2433 	strb.w	r2, [r3, #1075]	; 0x433
 801693e:	e746      	b.n	80167ce <iNemo_setOrientation.constprop.40+0x15e>
 8016940:	2201      	movs	r2, #1
 8016942:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
 8016946:	e742      	b.n	80167ce <iNemo_setOrientation.constprop.40+0x15e>
 8016948:	22ff      	movs	r2, #255	; 0xff
 801694a:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
 801694e:	e73e      	b.n	80167ce <iNemo_setOrientation.constprop.40+0x15e>
 8016950:	2201      	movs	r2, #1
 8016952:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
 8016956:	e74e      	b.n	80167f6 <iNemo_setOrientation.constprop.40+0x186>
 8016958:	2201      	movs	r2, #1
 801695a:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
 801695e:	e74a      	b.n	80167f6 <iNemo_setOrientation.constprop.40+0x186>
 8016960:	22ff      	movs	r2, #255	; 0xff
 8016962:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
 8016966:	e746      	b.n	80167f6 <iNemo_setOrientation.constprop.40+0x186>
 8016968:	2201      	movs	r2, #1
 801696a:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
 801696e:	e742      	b.n	80167f6 <iNemo_setOrientation.constprop.40+0x186>
 8016970:	22ff      	movs	r2, #255	; 0xff
 8016972:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
 8016976:	e73e      	b.n	80167f6 <iNemo_setOrientation.constprop.40+0x186>
 8016978:	2201      	movs	r2, #1
 801697a:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
 801697e:	e74e      	b.n	801681e <iNemo_setOrientation.constprop.40+0x1ae>
 8016980:	2201      	movs	r2, #1
 8016982:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
 8016986:	e74a      	b.n	801681e <iNemo_setOrientation.constprop.40+0x1ae>
 8016988:	22ff      	movs	r2, #255	; 0xff
 801698a:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
 801698e:	e746      	b.n	801681e <iNemo_setOrientation.constprop.40+0x1ae>
 8016990:	2201      	movs	r2, #1
 8016992:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 8016996:	e742      	b.n	801681e <iNemo_setOrientation.constprop.40+0x1ae>
 8016998:	22ff      	movs	r2, #255	; 0xff
 801699a:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
 801699e:	e73e      	b.n	801681e <iNemo_setOrientation.constprop.40+0x1ae>
 80169a0:	2201      	movs	r2, #1
 80169a2:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 80169a6:	e752      	b.n	801684e <iNemo_setOrientation.constprop.40+0x1de>
 80169a8:	2201      	movs	r2, #1
 80169aa:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
 80169ae:	e74e      	b.n	801684e <iNemo_setOrientation.constprop.40+0x1de>
 80169b0:	22ff      	movs	r2, #255	; 0xff
 80169b2:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
 80169b6:	e74a      	b.n	801684e <iNemo_setOrientation.constprop.40+0x1de>
 80169b8:	2201      	movs	r2, #1
 80169ba:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
 80169be:	e746      	b.n	801684e <iNemo_setOrientation.constprop.40+0x1de>
 80169c0:	22ff      	movs	r2, #255	; 0xff
 80169c2:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 80169c6:	e742      	b.n	801684e <iNemo_setOrientation.constprop.40+0x1de>
 80169c8:	2201      	movs	r2, #1
 80169ca:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 80169ce:	e752      	b.n	8016876 <iNemo_setOrientation.constprop.40+0x206>
 80169d0:	2201      	movs	r2, #1
 80169d2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
 80169d6:	e74e      	b.n	8016876 <iNemo_setOrientation.constprop.40+0x206>
 80169d8:	22ff      	movs	r2, #255	; 0xff
 80169da:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
 80169de:	e74a      	b.n	8016876 <iNemo_setOrientation.constprop.40+0x206>
 80169e0:	2201      	movs	r2, #1
 80169e2:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
 80169e6:	e746      	b.n	8016876 <iNemo_setOrientation.constprop.40+0x206>
 80169e8:	22ff      	movs	r2, #255	; 0xff
 80169ea:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 80169ee:	e742      	b.n	8016876 <iNemo_setOrientation.constprop.40+0x206>
 80169f0:	2201      	movs	r2, #1
 80169f2:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 80169f6:	b004      	add	sp, #16
 80169f8:	bcf0      	pop	{r4, r5, r6, r7}
 80169fa:	4770      	bx	lr
 80169fc:	2201      	movs	r2, #1
 80169fe:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
 8016a02:	b004      	add	sp, #16
 8016a04:	bcf0      	pop	{r4, r5, r6, r7}
 8016a06:	4770      	bx	lr
 8016a08:	22ff      	movs	r2, #255	; 0xff
 8016a0a:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
 8016a0e:	b004      	add	sp, #16
 8016a10:	bcf0      	pop	{r4, r5, r6, r7}
 8016a12:	4770      	bx	lr
 8016a14:	2201      	movs	r2, #1
 8016a16:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 8016a1a:	b004      	add	sp, #16
 8016a1c:	bcf0      	pop	{r4, r5, r6, r7}
 8016a1e:	4770      	bx	lr

08016a20 <iNemo_setOrientation_6X.constprop.41>:
 8016a20:	b4f0      	push	{r4, r5, r6, r7}
 8016a22:	4973      	ldr	r1, [pc, #460]	; (8016bf0 <iNemo_setOrientation_6X.constprop.41+0x1d0>)
 8016a24:	4b73      	ldr	r3, [pc, #460]	; (8016bf4 <iNemo_setOrientation_6X.constprop.41+0x1d4>)
 8016a26:	7808      	ldrb	r0, [r1, #0]
 8016a28:	2200      	movs	r2, #0
 8016a2a:	f1a0 0742 	sub.w	r7, r0, #66	; 0x42
 8016a2e:	b084      	sub	sp, #16
 8016a30:	2f17      	cmp	r7, #23
 8016a32:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
 8016a36:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 8016a3a:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
 8016a3e:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 8016a42:	f8c3 2454 	str.w	r2, [r3, #1108]	; 0x454
 8016a46:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
 8016a4a:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 8016a4e:	f8c3 2458 	str.w	r2, [r3, #1112]	; 0x458
 8016a52:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
 8016a56:	790a      	ldrb	r2, [r1, #4]
 8016a58:	bf98      	it	ls
 8016a5a:	3020      	addls	r0, #32
 8016a5c:	f88d 0004 	strb.w	r0, [sp, #4]
 8016a60:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8016a64:	2817      	cmp	r0, #23
 8016a66:	bf98      	it	ls
 8016a68:	3220      	addls	r2, #32
 8016a6a:	f88d 2008 	strb.w	r2, [sp, #8]
 8016a6e:	7a0a      	ldrb	r2, [r1, #8]
 8016a70:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8016a74:	2817      	cmp	r0, #23
 8016a76:	bf98      	it	ls
 8016a78:	3220      	addls	r2, #32
 8016a7a:	f88d 200c 	strb.w	r2, [sp, #12]
 8016a7e:	784a      	ldrb	r2, [r1, #1]
 8016a80:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8016a84:	2817      	cmp	r0, #23
 8016a86:	bf98      	it	ls
 8016a88:	3220      	addls	r2, #32
 8016a8a:	f88d 2005 	strb.w	r2, [sp, #5]
 8016a8e:	794a      	ldrb	r2, [r1, #5]
 8016a90:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8016a94:	2817      	cmp	r0, #23
 8016a96:	bf98      	it	ls
 8016a98:	3220      	addls	r2, #32
 8016a9a:	f88d 2009 	strb.w	r2, [sp, #9]
 8016a9e:	7a4a      	ldrb	r2, [r1, #9]
 8016aa0:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8016aa4:	2817      	cmp	r0, #23
 8016aa6:	bf98      	it	ls
 8016aa8:	3220      	addls	r2, #32
 8016aaa:	f88d 200d 	strb.w	r2, [sp, #13]
 8016aae:	788a      	ldrb	r2, [r1, #2]
 8016ab0:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8016ab4:	2817      	cmp	r0, #23
 8016ab6:	bf98      	it	ls
 8016ab8:	3220      	addls	r2, #32
 8016aba:	f88d 2006 	strb.w	r2, [sp, #6]
 8016abe:	798a      	ldrb	r2, [r1, #6]
 8016ac0:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8016ac4:	2817      	cmp	r0, #23
 8016ac6:	bf98      	it	ls
 8016ac8:	3220      	addls	r2, #32
 8016aca:	f88d 200a 	strb.w	r2, [sp, #10]
 8016ace:	7a8a      	ldrb	r2, [r1, #10]
 8016ad0:	f1a2 0142 	sub.w	r1, r2, #66	; 0x42
 8016ad4:	2917      	cmp	r1, #23
 8016ad6:	bf98      	it	ls
 8016ad8:	3220      	addls	r2, #32
 8016ada:	f88d 200e 	strb.w	r2, [sp, #14]
 8016ade:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8016ae2:	3a64      	subs	r2, #100	; 0x64
 8016ae4:	2a13      	cmp	r2, #19
 8016ae6:	d80e      	bhi.n	8016b06 <iNemo_setOrientation_6X.constprop.41+0xe6>
 8016ae8:	e8df f002 	tbb	[pc, r2]
 8016aec:	0d0dba0a 	.word	0x0d0dba0a
 8016af0:	0d0d0d0d 	.word	0x0d0d0d0d
 8016af4:	0dbe0d0d 	.word	0x0dbe0d0d
 8016af8:	c20d0d0d 	.word	0xc20d0d0d
 8016afc:	ca0dc60d 	.word	0xca0dc60d
 8016b00:	22ff      	movs	r2, #255	; 0xff
 8016b02:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
 8016b06:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8016b0a:	3a64      	subs	r2, #100	; 0x64
 8016b0c:	2a13      	cmp	r2, #19
 8016b0e:	d80e      	bhi.n	8016b2e <iNemo_setOrientation_6X.constprop.41+0x10e>
 8016b10:	e8df f002 	tbb	[pc, r2]
 8016b14:	0d0dba0a 	.word	0x0d0dba0a
 8016b18:	0d0d0d0d 	.word	0x0d0d0d0d
 8016b1c:	0dbe0d0d 	.word	0x0dbe0d0d
 8016b20:	c20d0d0d 	.word	0xc20d0d0d
 8016b24:	ca0dc60d 	.word	0xca0dc60d
 8016b28:	22ff      	movs	r2, #255	; 0xff
 8016b2a:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
 8016b2e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8016b32:	3a64      	subs	r2, #100	; 0x64
 8016b34:	2a13      	cmp	r2, #19
 8016b36:	d80e      	bhi.n	8016b56 <iNemo_setOrientation_6X.constprop.41+0x136>
 8016b38:	e8df f002 	tbb	[pc, r2]
 8016b3c:	0d0dba0a 	.word	0x0d0dba0a
 8016b40:	0d0d0d0d 	.word	0x0d0d0d0d
 8016b44:	0dbe0d0d 	.word	0x0dbe0d0d
 8016b48:	c20d0d0d 	.word	0xc20d0d0d
 8016b4c:	ca0dc60d 	.word	0xca0dc60d
 8016b50:	22ff      	movs	r2, #255	; 0xff
 8016b52:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 8016b56:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8016b5a:	3a64      	subs	r2, #100	; 0x64
 8016b5c:	2a13      	cmp	r2, #19
 8016b5e:	d80e      	bhi.n	8016b7e <iNemo_setOrientation_6X.constprop.41+0x15e>
 8016b60:	e8df f002 	tbb	[pc, r2]
 8016b64:	0d0dba0a 	.word	0x0d0dba0a
 8016b68:	0d0d0d0d 	.word	0x0d0d0d0d
 8016b6c:	0dbe0d0d 	.word	0x0dbe0d0d
 8016b70:	c20d0d0d 	.word	0xc20d0d0d
 8016b74:	ca0dc60d 	.word	0xca0dc60d
 8016b78:	22ff      	movs	r2, #255	; 0xff
 8016b7a:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 8016b7e:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8016b82:	3a64      	subs	r2, #100	; 0x64
 8016b84:	2a13      	cmp	r2, #19
 8016b86:	d80e      	bhi.n	8016ba6 <iNemo_setOrientation_6X.constprop.41+0x186>
 8016b88:	e8df f002 	tbb	[pc, r2]
 8016b8c:	0d0dba0a 	.word	0x0d0dba0a
 8016b90:	0d0d0d0d 	.word	0x0d0d0d0d
 8016b94:	0dbe0d0d 	.word	0x0dbe0d0d
 8016b98:	c20d0d0d 	.word	0xc20d0d0d
 8016b9c:	ca0dc60d 	.word	0xca0dc60d
 8016ba0:	22ff      	movs	r2, #255	; 0xff
 8016ba2:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
 8016ba6:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8016baa:	3a64      	subs	r2, #100	; 0x64
 8016bac:	2a13      	cmp	r2, #19
 8016bae:	d80e      	bhi.n	8016bce <iNemo_setOrientation_6X.constprop.41+0x1ae>
 8016bb0:	e8df f002 	tbb	[pc, r2]
 8016bb4:	0d0dba0a 	.word	0x0d0dba0a
 8016bb8:	0d0d0d0d 	.word	0x0d0d0d0d
 8016bbc:	0dbe0d0d 	.word	0x0dbe0d0d
 8016bc0:	c20d0d0d 	.word	0xc20d0d0d
 8016bc4:	ca0dc60d 	.word	0xca0dc60d
 8016bc8:	22ff      	movs	r2, #255	; 0xff
 8016bca:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
 8016bce:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8016bd2:	3a64      	subs	r2, #100	; 0x64
 8016bd4:	2a13      	cmp	r2, #19
 8016bd6:	d812      	bhi.n	8016bfe <iNemo_setOrientation_6X.constprop.41+0x1de>
 8016bd8:	e8df f002 	tbb	[pc, r2]
 8016bdc:	1111ba0e 	.word	0x1111ba0e
 8016be0:	11111111 	.word	0x11111111
 8016be4:	11be1111 	.word	0x11be1111
 8016be8:	c2111111 	.word	0xc2111111
 8016bec:	ca11c611 	.word	0xca11c611
 8016bf0:	20000048 	.word	0x20000048
 8016bf4:	20001c88 	.word	0x20001c88
 8016bf8:	22ff      	movs	r2, #255	; 0xff
 8016bfa:	f883 244e 	strb.w	r2, [r3, #1102]	; 0x44e
 8016bfe:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8016c02:	3a64      	subs	r2, #100	; 0x64
 8016c04:	2a13      	cmp	r2, #19
 8016c06:	d80e      	bhi.n	8016c26 <iNemo_setOrientation_6X.constprop.41+0x206>
 8016c08:	e8df f002 	tbb	[pc, r2]
 8016c0c:	0d0db60a 	.word	0x0d0db60a
 8016c10:	0d0d0d0d 	.word	0x0d0d0d0d
 8016c14:	0dba0d0d 	.word	0x0dba0d0d
 8016c18:	be0d0d0d 	.word	0xbe0d0d0d
 8016c1c:	c60dc20d 	.word	0xc60dc20d
 8016c20:	22ff      	movs	r2, #255	; 0xff
 8016c22:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
 8016c26:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8016c2a:	3a64      	subs	r2, #100	; 0x64
 8016c2c:	2a13      	cmp	r2, #19
 8016c2e:	d80e      	bhi.n	8016c4e <iNemo_setOrientation_6X.constprop.41+0x22e>
 8016c30:	e8df f002 	tbb	[pc, r2]
 8016c34:	0d0db60a 	.word	0x0d0db60a
 8016c38:	0d0d0d0d 	.word	0x0d0d0d0d
 8016c3c:	0dbc0d0d 	.word	0x0dbc0d0d
 8016c40:	c20d0d0d 	.word	0xc20d0d0d
 8016c44:	100dc80d 	.word	0x100dc80d
 8016c48:	22ff      	movs	r2, #255	; 0xff
 8016c4a:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 8016c4e:	b004      	add	sp, #16
 8016c50:	bcf0      	pop	{r4, r5, r6, r7}
 8016c52:	4770      	bx	lr
 8016c54:	22ff      	movs	r2, #255	; 0xff
 8016c56:	f883 244a 	strb.w	r2, [r3, #1098]	; 0x44a
 8016c5a:	b004      	add	sp, #16
 8016c5c:	bcf0      	pop	{r4, r5, r6, r7}
 8016c5e:	4770      	bx	lr
 8016c60:	2201      	movs	r2, #1
 8016c62:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8016c66:	e74e      	b.n	8016b06 <iNemo_setOrientation_6X.constprop.41+0xe6>
 8016c68:	2201      	movs	r2, #1
 8016c6a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
 8016c6e:	e74a      	b.n	8016b06 <iNemo_setOrientation_6X.constprop.41+0xe6>
 8016c70:	22ff      	movs	r2, #255	; 0xff
 8016c72:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
 8016c76:	e746      	b.n	8016b06 <iNemo_setOrientation_6X.constprop.41+0xe6>
 8016c78:	2201      	movs	r2, #1
 8016c7a:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
 8016c7e:	e742      	b.n	8016b06 <iNemo_setOrientation_6X.constprop.41+0xe6>
 8016c80:	22ff      	movs	r2, #255	; 0xff
 8016c82:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8016c86:	e73e      	b.n	8016b06 <iNemo_setOrientation_6X.constprop.41+0xe6>
 8016c88:	2201      	movs	r2, #1
 8016c8a:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 8016c8e:	e74e      	b.n	8016b2e <iNemo_setOrientation_6X.constprop.41+0x10e>
 8016c90:	2201      	movs	r2, #1
 8016c92:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
 8016c96:	e74a      	b.n	8016b2e <iNemo_setOrientation_6X.constprop.41+0x10e>
 8016c98:	22ff      	movs	r2, #255	; 0xff
 8016c9a:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
 8016c9e:	e746      	b.n	8016b2e <iNemo_setOrientation_6X.constprop.41+0x10e>
 8016ca0:	2201      	movs	r2, #1
 8016ca2:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
 8016ca6:	e742      	b.n	8016b2e <iNemo_setOrientation_6X.constprop.41+0x10e>
 8016ca8:	22ff      	movs	r2, #255	; 0xff
 8016caa:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 8016cae:	e73e      	b.n	8016b2e <iNemo_setOrientation_6X.constprop.41+0x10e>
 8016cb0:	2201      	movs	r2, #1
 8016cb2:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 8016cb6:	e74e      	b.n	8016b56 <iNemo_setOrientation_6X.constprop.41+0x136>
 8016cb8:	2201      	movs	r2, #1
 8016cba:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
 8016cbe:	e74a      	b.n	8016b56 <iNemo_setOrientation_6X.constprop.41+0x136>
 8016cc0:	22ff      	movs	r2, #255	; 0xff
 8016cc2:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
 8016cc6:	e746      	b.n	8016b56 <iNemo_setOrientation_6X.constprop.41+0x136>
 8016cc8:	2201      	movs	r2, #1
 8016cca:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 8016cce:	e742      	b.n	8016b56 <iNemo_setOrientation_6X.constprop.41+0x136>
 8016cd0:	22ff      	movs	r2, #255	; 0xff
 8016cd2:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 8016cd6:	e73e      	b.n	8016b56 <iNemo_setOrientation_6X.constprop.41+0x136>
 8016cd8:	2201      	movs	r2, #1
 8016cda:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
 8016cde:	e74e      	b.n	8016b7e <iNemo_setOrientation_6X.constprop.41+0x15e>
 8016ce0:	2201      	movs	r2, #1
 8016ce2:	f883 2457 	strb.w	r2, [r3, #1111]	; 0x457
 8016ce6:	e74a      	b.n	8016b7e <iNemo_setOrientation_6X.constprop.41+0x15e>
 8016ce8:	22ff      	movs	r2, #255	; 0xff
 8016cea:	f883 2457 	strb.w	r2, [r3, #1111]	; 0x457
 8016cee:	e746      	b.n	8016b7e <iNemo_setOrientation_6X.constprop.41+0x15e>
 8016cf0:	2201      	movs	r2, #1
 8016cf2:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 8016cf6:	e742      	b.n	8016b7e <iNemo_setOrientation_6X.constprop.41+0x15e>
 8016cf8:	22ff      	movs	r2, #255	; 0xff
 8016cfa:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
 8016cfe:	e73e      	b.n	8016b7e <iNemo_setOrientation_6X.constprop.41+0x15e>
 8016d00:	2201      	movs	r2, #1
 8016d02:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
 8016d06:	e74e      	b.n	8016ba6 <iNemo_setOrientation_6X.constprop.41+0x186>
 8016d08:	2201      	movs	r2, #1
 8016d0a:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
 8016d0e:	e74a      	b.n	8016ba6 <iNemo_setOrientation_6X.constprop.41+0x186>
 8016d10:	22ff      	movs	r2, #255	; 0xff
 8016d12:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
 8016d16:	e746      	b.n	8016ba6 <iNemo_setOrientation_6X.constprop.41+0x186>
 8016d18:	2201      	movs	r2, #1
 8016d1a:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
 8016d1e:	e742      	b.n	8016ba6 <iNemo_setOrientation_6X.constprop.41+0x186>
 8016d20:	22ff      	movs	r2, #255	; 0xff
 8016d22:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
 8016d26:	e73e      	b.n	8016ba6 <iNemo_setOrientation_6X.constprop.41+0x186>
 8016d28:	2201      	movs	r2, #1
 8016d2a:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456
 8016d2e:	e74e      	b.n	8016bce <iNemo_setOrientation_6X.constprop.41+0x1ae>
 8016d30:	2201      	movs	r2, #1
 8016d32:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
 8016d36:	e74a      	b.n	8016bce <iNemo_setOrientation_6X.constprop.41+0x1ae>
 8016d38:	22ff      	movs	r2, #255	; 0xff
 8016d3a:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
 8016d3e:	e746      	b.n	8016bce <iNemo_setOrientation_6X.constprop.41+0x1ae>
 8016d40:	2201      	movs	r2, #1
 8016d42:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
 8016d46:	e742      	b.n	8016bce <iNemo_setOrientation_6X.constprop.41+0x1ae>
 8016d48:	22ff      	movs	r2, #255	; 0xff
 8016d4a:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456
 8016d4e:	e73e      	b.n	8016bce <iNemo_setOrientation_6X.constprop.41+0x1ae>
 8016d50:	2201      	movs	r2, #1
 8016d52:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
 8016d56:	e752      	b.n	8016bfe <iNemo_setOrientation_6X.constprop.41+0x1de>
 8016d58:	2201      	movs	r2, #1
 8016d5a:	f883 244b 	strb.w	r2, [r3, #1099]	; 0x44b
 8016d5e:	e74e      	b.n	8016bfe <iNemo_setOrientation_6X.constprop.41+0x1de>
 8016d60:	22ff      	movs	r2, #255	; 0xff
 8016d62:	f883 244b 	strb.w	r2, [r3, #1099]	; 0x44b
 8016d66:	e74a      	b.n	8016bfe <iNemo_setOrientation_6X.constprop.41+0x1de>
 8016d68:	2201      	movs	r2, #1
 8016d6a:	f883 244e 	strb.w	r2, [r3, #1102]	; 0x44e
 8016d6e:	e746      	b.n	8016bfe <iNemo_setOrientation_6X.constprop.41+0x1de>
 8016d70:	22ff      	movs	r2, #255	; 0xff
 8016d72:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
 8016d76:	e742      	b.n	8016bfe <iNemo_setOrientation_6X.constprop.41+0x1de>
 8016d78:	2201      	movs	r2, #1
 8016d7a:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
 8016d7e:	e752      	b.n	8016c26 <iNemo_setOrientation_6X.constprop.41+0x206>
 8016d80:	2201      	movs	r2, #1
 8016d82:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
 8016d86:	e74e      	b.n	8016c26 <iNemo_setOrientation_6X.constprop.41+0x206>
 8016d88:	22ff      	movs	r2, #255	; 0xff
 8016d8a:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
 8016d8e:	e74a      	b.n	8016c26 <iNemo_setOrientation_6X.constprop.41+0x206>
 8016d90:	2201      	movs	r2, #1
 8016d92:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
 8016d96:	e746      	b.n	8016c26 <iNemo_setOrientation_6X.constprop.41+0x206>
 8016d98:	22ff      	movs	r2, #255	; 0xff
 8016d9a:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
 8016d9e:	e742      	b.n	8016c26 <iNemo_setOrientation_6X.constprop.41+0x206>
 8016da0:	2201      	movs	r2, #1
 8016da2:	f883 244a 	strb.w	r2, [r3, #1098]	; 0x44a
 8016da6:	b004      	add	sp, #16
 8016da8:	bcf0      	pop	{r4, r5, r6, r7}
 8016daa:	4770      	bx	lr
 8016dac:	2201      	movs	r2, #1
 8016dae:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d
 8016db2:	b004      	add	sp, #16
 8016db4:	bcf0      	pop	{r4, r5, r6, r7}
 8016db6:	4770      	bx	lr
 8016db8:	22ff      	movs	r2, #255	; 0xff
 8016dba:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d
 8016dbe:	b004      	add	sp, #16
 8016dc0:	bcf0      	pop	{r4, r5, r6, r7}
 8016dc2:	4770      	bx	lr
 8016dc4:	2201      	movs	r2, #1
 8016dc6:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 8016dca:	b004      	add	sp, #16
 8016dcc:	bcf0      	pop	{r4, r5, r6, r7}
 8016dce:	4770      	bx	lr

08016dd0 <MotionFX_initialize>:
 8016dd0:	4a11      	ldr	r2, [pc, #68]	; (8016e18 <MotionFX_initialize+0x48>)
 8016dd2:	4912      	ldr	r1, [pc, #72]	; (8016e1c <MotionFX_initialize+0x4c>)
 8016dd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dd8:	6813      	ldr	r3, [r2, #0]
 8016dda:	f023 0301 	bic.w	r3, r3, #1
 8016dde:	6013      	str	r3, [r2, #0]
 8016de0:	680b      	ldr	r3, [r1, #0]
 8016de2:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8016de6:	4013      	ands	r3, r2
 8016de8:	f24c 2040 	movw	r0, #49728	; 0xc240
 8016dec:	4283      	cmp	r3, r0
 8016dee:	d01f      	beq.n	8016e30 <MotionFX_initialize+0x60>
 8016df0:	680b      	ldr	r3, [r1, #0]
 8016df2:	f24c 2170 	movw	r1, #49776	; 0xc270
 8016df6:	4013      	ands	r3, r2
 8016df8:	428b      	cmp	r3, r1
 8016dfa:	d019      	beq.n	8016e30 <MotionFX_initialize+0x60>
 8016dfc:	4b08      	ldr	r3, [pc, #32]	; (8016e20 <MotionFX_initialize+0x50>)
 8016dfe:	2201      	movs	r2, #1
 8016e00:	601a      	str	r2, [r3, #0]
 8016e02:	681a      	ldr	r2, [r3, #0]
 8016e04:	2a00      	cmp	r2, #0
 8016e06:	d1fc      	bne.n	8016e02 <MotionFX_initialize+0x32>
 8016e08:	4b06      	ldr	r3, [pc, #24]	; (8016e24 <MotionFX_initialize+0x54>)
 8016e0a:	4a07      	ldr	r2, [pc, #28]	; (8016e28 <MotionFX_initialize+0x58>)
 8016e0c:	601a      	str	r2, [r3, #0]
 8016e0e:	681a      	ldr	r2, [r3, #0]
 8016e10:	4b06      	ldr	r3, [pc, #24]	; (8016e2c <MotionFX_initialize+0x5c>)
 8016e12:	429a      	cmp	r2, r3
 8016e14:	d02b      	beq.n	8016e6e <MotionFX_initialize+0x9e>
 8016e16:	e7fe      	b.n	8016e16 <MotionFX_initialize+0x46>
 8016e18:	e0002000 	.word	0xe0002000
 8016e1c:	e000ed00 	.word	0xe000ed00
 8016e20:	40023008 	.word	0x40023008
 8016e24:	40023000 	.word	0x40023000
 8016e28:	f407a5c2 	.word	0xf407a5c2
 8016e2c:	b5e8b5cd 	.word	0xb5e8b5cd
 8016e30:	4beb      	ldr	r3, [pc, #940]	; (80171e0 <MotionFX_initialize+0x410>)
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d1e1      	bne.n	8016dfc <MotionFX_initialize+0x2c>
 8016e38:	4aea      	ldr	r2, [pc, #936]	; (80171e4 <MotionFX_initialize+0x414>)
 8016e3a:	6813      	ldr	r3, [r2, #0]
 8016e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016e40:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8016e44:	d006      	beq.n	8016e54 <MotionFX_initialize+0x84>
 8016e46:	6813      	ldr	r3, [r2, #0]
 8016e48:	f240 4283 	movw	r2, #1155	; 0x483
 8016e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016e50:	4293      	cmp	r3, r2
 8016e52:	d1d3      	bne.n	8016dfc <MotionFX_initialize+0x2c>
 8016e54:	4be4      	ldr	r3, [pc, #912]	; (80171e8 <MotionFX_initialize+0x418>)
 8016e56:	2201      	movs	r2, #1
 8016e58:	601a      	str	r2, [r3, #0]
 8016e5a:	681a      	ldr	r2, [r3, #0]
 8016e5c:	2a00      	cmp	r2, #0
 8016e5e:	d1fc      	bne.n	8016e5a <MotionFX_initialize+0x8a>
 8016e60:	4be2      	ldr	r3, [pc, #904]	; (80171ec <MotionFX_initialize+0x41c>)
 8016e62:	4ae3      	ldr	r2, [pc, #908]	; (80171f0 <MotionFX_initialize+0x420>)
 8016e64:	601a      	str	r2, [r3, #0]
 8016e66:	681a      	ldr	r2, [r3, #0]
 8016e68:	4be2      	ldr	r3, [pc, #904]	; (80171f4 <MotionFX_initialize+0x424>)
 8016e6a:	429a      	cmp	r2, r3
 8016e6c:	d1d3      	bne.n	8016e16 <MotionFX_initialize+0x46>
 8016e6e:	4ce2      	ldr	r4, [pc, #904]	; (80171f8 <MotionFX_initialize+0x428>)
 8016e70:	eddf 7ae2 	vldr	s15, [pc, #904]	; 80171fc <MotionFX_initialize+0x42c>
 8016e74:	4ee2      	ldr	r6, [pc, #904]	; (8017200 <MotionFX_initialize+0x430>)
 8016e76:	eddf 6ae3 	vldr	s13, [pc, #908]	; 8017204 <MotionFX_initialize+0x434>
 8016e7a:	2500      	movs	r5, #0
 8016e7c:	f04f 0901 	mov.w	r9, #1
 8016e80:	ed9f 5bcd 	vldr	d5, [pc, #820]	; 80171b8 <MotionFX_initialize+0x3e8>
 8016e84:	ed9f 1bce 	vldr	d1, [pc, #824]	; 80171c0 <MotionFX_initialize+0x3f0>
 8016e88:	ed9f 2bcf 	vldr	d2, [pc, #828]	; 80171c8 <MotionFX_initialize+0x3f8>
 8016e8c:	ed9f 3bd0 	vldr	d3, [pc, #832]	; 80171d0 <MotionFX_initialize+0x400>
 8016e90:	f20f 3b44 	addw	fp, pc, #836	; 0x344
 8016e94:	e9db ab00 	ldrd	sl, fp, [fp]
 8016e98:	f241 17b6 	movw	r7, #4534	; 0x11b6
 8016e9c:	f884 9d49 	strb.w	r9, [r4, #3401]	; 0xd49
 8016ea0:	f8c4 5d4c 	str.w	r5, [r4, #3404]	; 0xd4c
 8016ea4:	f8c4 5d50 	str.w	r5, [r4, #3408]	; 0xd50
 8016ea8:	f7ff fbd2 	bl	8016650 <rt_InitInfAndNaN.isra.3>
 8016eac:	f241 10b4 	movw	r0, #4532	; 0x11b4
 8016eb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016eb4:	f606 08e8 	addw	r8, r6, #2280	; 0x8e8
 8016eb8:	5235      	strh	r5, [r6, r0]
 8016eba:	55f5      	strb	r5, [r6, r7]
 8016ebc:	200a      	movs	r0, #10
 8016ebe:	ed88 5b02 	vstr	d5, [r8, #8]
 8016ec2:	ed88 1b04 	vstr	d1, [r8, #16]
 8016ec6:	ed88 2b06 	vstr	d2, [r8, #24]
 8016eca:	e9c8 ab08 	strd	sl, fp, [r8, #32]
 8016ece:	ed88 3b0a 	vstr	d3, [r8, #40]	; 0x28
 8016ed2:	ed88 7a82 	vstr	s14, [r8, #520]	; 0x208
 8016ed6:	f886 08e0 	strb.w	r0, [r6, #2272]	; 0x8e0
 8016eda:	edc8 7a83 	vstr	s15, [r8, #524]	; 0x20c
 8016ede:	edc8 7a84 	vstr	s15, [r8, #528]	; 0x210
 8016ee2:	f8c4 5418 	str.w	r5, [r4, #1048]	; 0x418
 8016ee6:	f8c4 5424 	str.w	r5, [r4, #1060]	; 0x424
 8016eea:	f8c4 5430 	str.w	r5, [r4, #1072]	; 0x430
 8016eee:	f8c4 541c 	str.w	r5, [r4, #1052]	; 0x41c
 8016ef2:	f884 5420 	strb.w	r5, [r4, #1056]	; 0x420
 8016ef6:	f8c4 5428 	str.w	r5, [r4, #1064]	; 0x428
 8016efa:	f884 542c 	strb.w	r5, [r4, #1068]	; 0x42c
 8016efe:	f8c4 5434 	str.w	r5, [r4, #1076]	; 0x434
 8016f02:	f884 5438 	strb.w	r5, [r4, #1080]	; 0x438
 8016f06:	f7ff fba3 	bl	8016650 <rt_InitInfAndNaN.isra.3>
 8016f0a:	f604 330c 	addw	r3, r4, #2828	; 0xb0c
 8016f0e:	ed86 5b06 	vstr	d5, [r6, #24]
 8016f12:	eddf 4abd 	vldr	s9, [pc, #756]	; 8017208 <MotionFX_initialize+0x438>
 8016f16:	ed9f 5abd 	vldr	s10, [pc, #756]	; 801720c <MotionFX_initialize+0x43c>
 8016f1a:	eddf 5abd 	vldr	s11, [pc, #756]	; 8017210 <MotionFX_initialize+0x440>
 8016f1e:	f8df c30c 	ldr.w	ip, [pc, #780]	; 801722c <MotionFX_initialize+0x45c>
 8016f22:	48bc      	ldr	r0, [pc, #752]	; (8017214 <MotionFX_initialize+0x444>)
 8016f24:	49bc      	ldr	r1, [pc, #752]	; (8017218 <MotionFX_initialize+0x448>)
 8016f26:	4abd      	ldr	r2, [pc, #756]	; (801721c <MotionFX_initialize+0x44c>)
 8016f28:	ed86 7a86 	vstr	s14, [r6, #536]	; 0x218
 8016f2c:	f604 0ecc 	addw	lr, r4, #2252	; 0x8cc
 8016f30:	f604 4704 	addw	r7, r4, #3076	; 0xc04
 8016f34:	ed86 1b08 	vstr	d1, [r6, #32]
 8016f38:	ed86 2b0a 	vstr	d2, [r6, #40]	; 0x28
 8016f3c:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8016f40:	e9c6 ab0c 	strd	sl, fp, [r6, #48]	; 0x30
 8016f44:	ed86 3b0e 	vstr	d3, [r6, #56]	; 0x38
 8016f48:	f04f 0a02 	mov.w	sl, #2
 8016f4c:	ed83 7a21 	vstr	s14, [r3, #132]	; 0x84
 8016f50:	ed83 7a25 	vstr	s14, [r3, #148]	; 0x94
 8016f54:	ed83 7a29 	vstr	s14, [r3, #164]	; 0xa4
 8016f58:	edc6 7a87 	vstr	s15, [r6, #540]	; 0x21c
 8016f5c:	edc6 7a88 	vstr	s15, [r6, #544]	; 0x220
 8016f60:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
 8016f64:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
 8016f68:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
 8016f6c:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
 8016f70:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
 8016f74:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
 8016f78:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
 8016f7c:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
 8016f80:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
 8016f84:	f8a6 58dc 	strh.w	r5, [r6, #2268]	; 0x8dc
 8016f88:	f886 58de 	strb.w	r5, [r6, #2270]	; 0x8de
 8016f8c:	f886 900c 	strb.w	r9, [r6, #12]
 8016f90:	f04f 3b01 	mov.w	fp, #16843009	; 0x1010101
 8016f94:	f8c4 543c 	str.w	r5, [r4, #1084]	; 0x43c
 8016f98:	f8c4 5448 	str.w	r5, [r4, #1096]	; 0x448
 8016f9c:	f8c4 5454 	str.w	r5, [r4, #1108]	; 0x454
 8016fa0:	f8c4 5440 	str.w	r5, [r4, #1088]	; 0x440
 8016fa4:	f884 5444 	strb.w	r5, [r4, #1092]	; 0x444
 8016fa8:	f8c4 544c 	str.w	r5, [r4, #1100]	; 0x44c
 8016fac:	f884 5450 	strb.w	r5, [r4, #1104]	; 0x450
 8016fb0:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
 8016fb4:	f884 545c 	strb.w	r5, [r4, #1116]	; 0x45c
 8016fb8:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
 8016fbc:	ed83 7a2d 	vstr	s14, [r3, #180]	; 0xb4
 8016fc0:	ed83 7a31 	vstr	s14, [r3, #196]	; 0xc4
 8016fc4:	ed83 7a35 	vstr	s14, [r3, #212]	; 0xd4
 8016fc8:	ed83 7a39 	vstr	s14, [r3, #228]	; 0xe4
 8016fcc:	ed83 7a3d 	vstr	s14, [r3, #244]	; 0xf4
 8016fd0:	ed83 7a0f 	vstr	s14, [r3, #60]	; 0x3c
 8016fd4:	ed83 7a13 	vstr	s14, [r3, #76]	; 0x4c
 8016fd8:	ed83 7a17 	vstr	s14, [r3, #92]	; 0x5c
 8016fdc:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 8016fe0:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 8016fe4:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
 8016fe8:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
 8016fec:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
 8016ff0:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
 8016ff4:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc
 8016ff8:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
 8016ffc:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
 8017000:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
 8017004:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
 8017008:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
 801700c:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
 8017010:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
 8017014:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
 8017018:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 801701c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
 8017020:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
 8017024:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
 8017028:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
 801702c:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
 8017030:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 8017034:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
 8017038:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
 801703c:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
 8017040:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
 8017044:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017048:	f8c4 cc2c 	str.w	ip, [r4, #3116]	; 0xc2c
 801704c:	f8c4 0c30 	str.w	r0, [r4, #3120]	; 0xc30
 8017050:	f8c4 1c34 	str.w	r1, [r4, #3124]	; 0xc34
 8017054:	f8c4 2c38 	str.w	r2, [r4, #3128]	; 0xc38
 8017058:	edc8 7a28 	vstr	s15, [r8, #160]	; 0xa0
 801705c:	edc8 7a29 	vstr	s15, [r8, #164]	; 0xa4
 8017060:	edc8 7a2a 	vstr	s15, [r8, #168]	; 0xa8
 8017064:	ed87 7a08 	vstr	s14, [r7, #32]
 8017068:	f604 18c4 	addw	r8, r4, #2500	; 0x9c4
 801706c:	edc7 4a00 	vstr	s9, [r7]
 8017070:	ed87 5a01 	vstr	s10, [r7, #4]
 8017074:	edc7 5a02 	vstr	s11, [r7, #8]
 8017078:	edc7 6a03 	vstr	s13, [r7, #12]
 801707c:	ed87 6a04 	vstr	s12, [r7, #16]
 8017080:	ed8e 7a21 	vstr	s14, [lr, #132]	; 0x84
 8017084:	ed8e 7a25 	vstr	s14, [lr, #148]	; 0x94
 8017088:	ed8e 7a29 	vstr	s14, [lr, #164]	; 0xa4
 801708c:	edce 7a1e 	vstr	s15, [lr, #120]	; 0x78
 8017090:	edce 7a1f 	vstr	s15, [lr, #124]	; 0x7c
 8017094:	edce 7a20 	vstr	s15, [lr, #128]	; 0x80
 8017098:	edce 7a22 	vstr	s15, [lr, #136]	; 0x88
 801709c:	edce 7a23 	vstr	s15, [lr, #140]	; 0x8c
 80170a0:	edce 7a24 	vstr	s15, [lr, #144]	; 0x90
 80170a4:	edce 7a26 	vstr	s15, [lr, #152]	; 0x98
 80170a8:	edce 7a27 	vstr	s15, [lr, #156]	; 0x9c
 80170ac:	edce 7a28 	vstr	s15, [lr, #160]	; 0xa0
 80170b0:	f8a4 3c3c 	strh.w	r3, [r4, #3132]	; 0xc3c
 80170b4:	f8c4 9c1c 	str.w	r9, [r4, #3100]	; 0xc1c
 80170b8:	f884 9c28 	strb.w	r9, [r4, #3112]	; 0xc28
 80170bc:	f884 5c3e 	strb.w	r5, [r4, #3134]	; 0xc3e
 80170c0:	f8c4 bc18 	str.w	fp, [r4, #3096]	; 0xc18
 80170c4:	f884 ac20 	strb.w	sl, [r4, #3104]	; 0xc20
 80170c8:	edce 7a2a 	vstr	s15, [lr, #168]	; 0xa8
 80170cc:	ed8e 7a2d 	vstr	s14, [lr, #180]	; 0xb4
 80170d0:	ed8e 7a31 	vstr	s14, [lr, #196]	; 0xc4
 80170d4:	ed8e 7a35 	vstr	s14, [lr, #212]	; 0xd4
 80170d8:	ed8e 7a39 	vstr	s14, [lr, #228]	; 0xe4
 80170dc:	ed8e 7a3d 	vstr	s14, [lr, #244]	; 0xf4
 80170e0:	ed8e 7a0f 	vstr	s14, [lr, #60]	; 0x3c
 80170e4:	ed8e 7a13 	vstr	s14, [lr, #76]	; 0x4c
 80170e8:	ed8e 7a17 	vstr	s14, [lr, #92]	; 0x5c
 80170ec:	edce 7a2b 	vstr	s15, [lr, #172]	; 0xac
 80170f0:	edce 7a2c 	vstr	s15, [lr, #176]	; 0xb0
 80170f4:	edce 7a2e 	vstr	s15, [lr, #184]	; 0xb8
 80170f8:	edce 7a2f 	vstr	s15, [lr, #188]	; 0xbc
 80170fc:	edce 7a30 	vstr	s15, [lr, #192]	; 0xc0
 8017100:	edce 7a32 	vstr	s15, [lr, #200]	; 0xc8
 8017104:	edce 7a33 	vstr	s15, [lr, #204]	; 0xcc
 8017108:	edce 7a34 	vstr	s15, [lr, #208]	; 0xd0
 801710c:	edce 7a36 	vstr	s15, [lr, #216]	; 0xd8
 8017110:	edce 7a37 	vstr	s15, [lr, #220]	; 0xdc
 8017114:	edce 7a38 	vstr	s15, [lr, #224]	; 0xe0
 8017118:	edce 7a3a 	vstr	s15, [lr, #232]	; 0xe8
 801711c:	edce 7a3b 	vstr	s15, [lr, #236]	; 0xec
 8017120:	edce 7a3c 	vstr	s15, [lr, #240]	; 0xf0
 8017124:	edce 7a10 	vstr	s15, [lr, #64]	; 0x40
 8017128:	edce 7a11 	vstr	s15, [lr, #68]	; 0x44
 801712c:	edce 7a12 	vstr	s15, [lr, #72]	; 0x48
 8017130:	edce 7a14 	vstr	s15, [lr, #80]	; 0x50
 8017134:	edce 7a15 	vstr	s15, [lr, #84]	; 0x54
 8017138:	edce 7a16 	vstr	s15, [lr, #88]	; 0x58
 801713c:	edce 7a18 	vstr	s15, [lr, #96]	; 0x60
 8017140:	edce 7a19 	vstr	s15, [lr, #100]	; 0x64
 8017144:	edce 7a1a 	vstr	s15, [lr, #104]	; 0x68
 8017148:	edce 7a1b 	vstr	s15, [lr, #108]	; 0x6c
 801714c:	edce 7a1c 	vstr	s15, [lr, #112]	; 0x70
 8017150:	f8a4 39fc 	strh.w	r3, [r4, #2556]	; 0x9fc
 8017154:	4b32      	ldr	r3, [pc, #200]	; (8017220 <MotionFX_initialize+0x450>)
 8017156:	f8c4 c9ec 	str.w	ip, [r4, #2540]	; 0x9ec
 801715a:	f8c4 09f0 	str.w	r0, [r4, #2544]	; 0x9f0
 801715e:	f8c4 19f4 	str.w	r1, [r4, #2548]	; 0x9f4
 8017162:	f8c4 29f8 	str.w	r2, [r4, #2552]	; 0x9f8
 8017166:	f8c4 39d8 	str.w	r3, [r4, #2520]	; 0x9d8
 801716a:	edc6 7a2c 	vstr	s15, [r6, #176]	; 0xb0
 801716e:	edc6 7a2d 	vstr	s15, [r6, #180]	; 0xb4
 8017172:	edc6 7a2e 	vstr	s15, [r6, #184]	; 0xb8
 8017176:	edc8 4a00 	vstr	s9, [r8]
 801717a:	ed88 5a01 	vstr	s10, [r8, #4]
 801717e:	edc8 5a02 	vstr	s11, [r8, #8]
 8017182:	edc8 6a03 	vstr	s13, [r8, #12]
 8017186:	ed88 6a04 	vstr	s12, [r8, #16]
 801718a:	ed88 7a08 	vstr	s14, [r8, #32]
 801718e:	edce 7a1d 	vstr	s15, [lr, #116]	; 0x74
 8017192:	f8c4 99dc 	str.w	r9, [r4, #2524]	; 0x9dc
 8017196:	f884 99e8 	strb.w	r9, [r4, #2536]	; 0x9e8
 801719a:	f884 a9e0 	strb.w	sl, [r4, #2528]	; 0x9e0
 801719e:	f884 59fe 	strb.w	r5, [r4, #2558]	; 0x9fe
 80171a2:	f7ff fa65 	bl	8016670 <iNemo_setOrientation.constprop.40>
 80171a6:	f7ff fc3b 	bl	8016a20 <iNemo_setOrientation_6X.constprop.41>
 80171aa:	f04f 567f 	mov.w	r6, #1069547520	; 0x3fc00000
 80171ae:	f8df c080 	ldr.w	ip, [pc, #128]	; 8017230 <MotionFX_initialize+0x460>
 80171b2:	481c      	ldr	r0, [pc, #112]	; (8017224 <MotionFX_initialize+0x454>)
 80171b4:	491c      	ldr	r1, [pc, #112]	; (8017228 <MotionFX_initialize+0x458>)
 80171b6:	e03d      	b.n	8017234 <MotionFX_initialize+0x464>
 80171b8:	60000000 	.word	0x60000000
 80171bc:	3fc76cab 	.word	0x3fc76cab
 80171c0:	20000000 	.word	0x20000000
 80171c4:	3fc55a40 	.word	0x3fc55a40
 80171c8:	00000000 	.word	0x00000000
 80171cc:	3fbfdfb7 	.word	0x3fbfdfb7
 80171d0:	60000000 	.word	0x60000000
 80171d4:	3f9f1fed 	.word	0x3f9f1fed
 80171d8:	c0000000 	.word	0xc0000000
 80171dc:	3fb2875e 	.word	0x3fb2875e
 80171e0:	e0042000 	.word	0xe0042000
 80171e4:	5c001000 	.word	0x5c001000
 80171e8:	58024c08 	.word	0x58024c08
 80171ec:	58024c00 	.word	0x58024c00
 80171f0:	f407a5c2 	.word	0xf407a5c2
 80171f4:	b5e8b5cd 	.word	0xb5e8b5cd
 80171f8:	20001c88 	.word	0x20001c88
 80171fc:	00000000 	.word	0x00000000
 8017200:	20000048 	.word	0x20000048
 8017204:	3f2ac083 	.word	0x3f2ac083
 8017208:	3f639581 	.word	0x3f639581
 801720c:	402ab021 	.word	0x402ab021
 8017210:	3f13f7cf 	.word	0x3f13f7cf
 8017214:	3a09a027 	.word	0x3a09a027
 8017218:	39b24207 	.word	0x39b24207
 801721c:	3dcccccd 	.word	0x3dcccccd
 8017220:	01000101 	.word	0x01000101
 8017224:	3a51b717 	.word	0x3a51b717
 8017228:	3a378034 	.word	0x3a378034
 801722c:	39712c28 	.word	0x39712c28
 8017230:	3f666666 	.word	0x3f666666
 8017234:	4a14      	ldr	r2, [pc, #80]	; (8017288 <MotionFX_initialize+0x4b8>)
 8017236:	4b15      	ldr	r3, [pc, #84]	; (801728c <MotionFX_initialize+0x4bc>)
 8017238:	f8df e054 	ldr.w	lr, [pc, #84]	; 8017290 <MotionFX_initialize+0x4c0>
 801723c:	edc8 6a03 	vstr	s13, [r8, #12]
 8017240:	edc7 6a03 	vstr	s13, [r7, #12]
 8017244:	f884 a9fd 	strb.w	sl, [r4, #2557]	; 0x9fd
 8017248:	f884 59fe 	strb.w	r5, [r4, #2558]	; 0x9fe
 801724c:	f884 ac3d 	strb.w	sl, [r4, #3133]	; 0xc3d
 8017250:	f884 5c3e 	strb.w	r5, [r4, #3134]	; 0xc3e
 8017254:	f8c4 bc19 	str.w	fp, [r4, #3097]	; 0xc19
 8017258:	f8c4 e9d9 	str.w	lr, [r4, #2521]	; 0x9d9
 801725c:	f8c8 c000 	str.w	ip, [r8]
 8017260:	f8c7 c000 	str.w	ip, [r7]
 8017264:	f8c8 6004 	str.w	r6, [r8, #4]
 8017268:	607e      	str	r6, [r7, #4]
 801726a:	f8c8 0028 	str.w	r0, [r8, #40]	; 0x28
 801726e:	62b8      	str	r0, [r7, #40]	; 0x28
 8017270:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
 8017274:	62f9      	str	r1, [r7, #44]	; 0x2c
 8017276:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
 801727a:	633a      	str	r2, [r7, #48]	; 0x30
 801727c:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
 8017280:	637b      	str	r3, [r7, #52]	; 0x34
 8017282:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017286:	bf00      	nop
 8017288:	3b378034 	.word	0x3b378034
 801728c:	3dcccccd 	.word	0x3dcccccd
 8017290:	01010001 	.word	0x01010001

08017294 <MotionFX_GetLibVersion>:
 8017294:	4b10      	ldr	r3, [pc, #64]	; (80172d8 <MotionFX_GetLibVersion+0x44>)
 8017296:	f893 3d49 	ldrb.w	r3, [r3, #3401]	; 0xd49
 801729a:	b90b      	cbnz	r3, 80172a0 <MotionFX_GetLibVersion+0xc>
 801729c:	4618      	mov	r0, r3
 801729e:	4770      	bx	lr
 80172a0:	b470      	push	{r4, r5, r6}
 80172a2:	4e0e      	ldr	r6, [pc, #56]	; (80172dc <MotionFX_GetLibVersion+0x48>)
 80172a4:	4605      	mov	r5, r0
 80172a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80172a8:	b08b      	sub	sp, #44	; 0x2c
 80172aa:	ac01      	add	r4, sp, #4
 80172ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80172ae:	6833      	ldr	r3, [r6, #0]
 80172b0:	f824 3b02 	strh.w	r3, [r4], #2
 80172b4:	0c1b      	lsrs	r3, r3, #16
 80172b6:	7023      	strb	r3, [r4, #0]
 80172b8:	ac01      	add	r4, sp, #4
 80172ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80172bc:	8826      	ldrh	r6, [r4, #0]
 80172be:	60eb      	str	r3, [r5, #12]
 80172c0:	78a4      	ldrb	r4, [r4, #2]
 80172c2:	6028      	str	r0, [r5, #0]
 80172c4:	2312      	movs	r3, #18
 80172c6:	4618      	mov	r0, r3
 80172c8:	6069      	str	r1, [r5, #4]
 80172ca:	60aa      	str	r2, [r5, #8]
 80172cc:	822e      	strh	r6, [r5, #16]
 80172ce:	74ac      	strb	r4, [r5, #18]
 80172d0:	b00b      	add	sp, #44	; 0x2c
 80172d2:	bc70      	pop	{r4, r5, r6}
 80172d4:	4770      	bx	lr
 80172d6:	bf00      	nop
 80172d8:	20001c88 	.word	0x20001c88
 80172dc:	0801cf94 	.word	0x0801cf94

080172e0 <__errno>:
 80172e0:	4b01      	ldr	r3, [pc, #4]	; (80172e8 <__errno+0x8>)
 80172e2:	6818      	ldr	r0, [r3, #0]
 80172e4:	4770      	bx	lr
 80172e6:	bf00      	nop
 80172e8:	200013cc 	.word	0x200013cc

080172ec <__libc_init_array>:
 80172ec:	b570      	push	{r4, r5, r6, lr}
 80172ee:	4d0d      	ldr	r5, [pc, #52]	; (8017324 <__libc_init_array+0x38>)
 80172f0:	4c0d      	ldr	r4, [pc, #52]	; (8017328 <__libc_init_array+0x3c>)
 80172f2:	1b64      	subs	r4, r4, r5
 80172f4:	10a4      	asrs	r4, r4, #2
 80172f6:	2600      	movs	r6, #0
 80172f8:	42a6      	cmp	r6, r4
 80172fa:	d109      	bne.n	8017310 <__libc_init_array+0x24>
 80172fc:	4d0b      	ldr	r5, [pc, #44]	; (801732c <__libc_init_array+0x40>)
 80172fe:	4c0c      	ldr	r4, [pc, #48]	; (8017330 <__libc_init_array+0x44>)
 8017300:	f005 fa9e 	bl	801c840 <_init>
 8017304:	1b64      	subs	r4, r4, r5
 8017306:	10a4      	asrs	r4, r4, #2
 8017308:	2600      	movs	r6, #0
 801730a:	42a6      	cmp	r6, r4
 801730c:	d105      	bne.n	801731a <__libc_init_array+0x2e>
 801730e:	bd70      	pop	{r4, r5, r6, pc}
 8017310:	f855 3b04 	ldr.w	r3, [r5], #4
 8017314:	4798      	blx	r3
 8017316:	3601      	adds	r6, #1
 8017318:	e7ee      	b.n	80172f8 <__libc_init_array+0xc>
 801731a:	f855 3b04 	ldr.w	r3, [r5], #4
 801731e:	4798      	blx	r3
 8017320:	3601      	adds	r6, #1
 8017322:	e7f2      	b.n	801730a <__libc_init_array+0x1e>
 8017324:	0801d900 	.word	0x0801d900
 8017328:	0801d900 	.word	0x0801d900
 801732c:	0801d900 	.word	0x0801d900
 8017330:	0801d904 	.word	0x0801d904

08017334 <memcpy>:
 8017334:	440a      	add	r2, r1
 8017336:	4291      	cmp	r1, r2
 8017338:	f100 33ff 	add.w	r3, r0, #4294967295
 801733c:	d100      	bne.n	8017340 <memcpy+0xc>
 801733e:	4770      	bx	lr
 8017340:	b510      	push	{r4, lr}
 8017342:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017346:	f803 4f01 	strb.w	r4, [r3, #1]!
 801734a:	4291      	cmp	r1, r2
 801734c:	d1f9      	bne.n	8017342 <memcpy+0xe>
 801734e:	bd10      	pop	{r4, pc}

08017350 <memset>:
 8017350:	4402      	add	r2, r0
 8017352:	4603      	mov	r3, r0
 8017354:	4293      	cmp	r3, r2
 8017356:	d100      	bne.n	801735a <memset+0xa>
 8017358:	4770      	bx	lr
 801735a:	f803 1b01 	strb.w	r1, [r3], #1
 801735e:	e7f9      	b.n	8017354 <memset+0x4>

08017360 <__cvt>:
 8017360:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017364:	ec55 4b10 	vmov	r4, r5, d0
 8017368:	2d00      	cmp	r5, #0
 801736a:	460e      	mov	r6, r1
 801736c:	4619      	mov	r1, r3
 801736e:	462b      	mov	r3, r5
 8017370:	bfbb      	ittet	lt
 8017372:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8017376:	461d      	movlt	r5, r3
 8017378:	2300      	movge	r3, #0
 801737a:	232d      	movlt	r3, #45	; 0x2d
 801737c:	700b      	strb	r3, [r1, #0]
 801737e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017380:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8017384:	4691      	mov	r9, r2
 8017386:	f023 0820 	bic.w	r8, r3, #32
 801738a:	bfbc      	itt	lt
 801738c:	4622      	movlt	r2, r4
 801738e:	4614      	movlt	r4, r2
 8017390:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017394:	d005      	beq.n	80173a2 <__cvt+0x42>
 8017396:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801739a:	d100      	bne.n	801739e <__cvt+0x3e>
 801739c:	3601      	adds	r6, #1
 801739e:	2102      	movs	r1, #2
 80173a0:	e000      	b.n	80173a4 <__cvt+0x44>
 80173a2:	2103      	movs	r1, #3
 80173a4:	ab03      	add	r3, sp, #12
 80173a6:	9301      	str	r3, [sp, #4]
 80173a8:	ab02      	add	r3, sp, #8
 80173aa:	9300      	str	r3, [sp, #0]
 80173ac:	ec45 4b10 	vmov	d0, r4, r5
 80173b0:	4653      	mov	r3, sl
 80173b2:	4632      	mov	r2, r6
 80173b4:	f000 fd38 	bl	8017e28 <_dtoa_r>
 80173b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80173bc:	4607      	mov	r7, r0
 80173be:	d102      	bne.n	80173c6 <__cvt+0x66>
 80173c0:	f019 0f01 	tst.w	r9, #1
 80173c4:	d022      	beq.n	801740c <__cvt+0xac>
 80173c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80173ca:	eb07 0906 	add.w	r9, r7, r6
 80173ce:	d110      	bne.n	80173f2 <__cvt+0x92>
 80173d0:	783b      	ldrb	r3, [r7, #0]
 80173d2:	2b30      	cmp	r3, #48	; 0x30
 80173d4:	d10a      	bne.n	80173ec <__cvt+0x8c>
 80173d6:	2200      	movs	r2, #0
 80173d8:	2300      	movs	r3, #0
 80173da:	4620      	mov	r0, r4
 80173dc:	4629      	mov	r1, r5
 80173de:	f7e9 fb7b 	bl	8000ad8 <__aeabi_dcmpeq>
 80173e2:	b918      	cbnz	r0, 80173ec <__cvt+0x8c>
 80173e4:	f1c6 0601 	rsb	r6, r6, #1
 80173e8:	f8ca 6000 	str.w	r6, [sl]
 80173ec:	f8da 3000 	ldr.w	r3, [sl]
 80173f0:	4499      	add	r9, r3
 80173f2:	2200      	movs	r2, #0
 80173f4:	2300      	movs	r3, #0
 80173f6:	4620      	mov	r0, r4
 80173f8:	4629      	mov	r1, r5
 80173fa:	f7e9 fb6d 	bl	8000ad8 <__aeabi_dcmpeq>
 80173fe:	b108      	cbz	r0, 8017404 <__cvt+0xa4>
 8017400:	f8cd 900c 	str.w	r9, [sp, #12]
 8017404:	2230      	movs	r2, #48	; 0x30
 8017406:	9b03      	ldr	r3, [sp, #12]
 8017408:	454b      	cmp	r3, r9
 801740a:	d307      	bcc.n	801741c <__cvt+0xbc>
 801740c:	9b03      	ldr	r3, [sp, #12]
 801740e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017410:	1bdb      	subs	r3, r3, r7
 8017412:	4638      	mov	r0, r7
 8017414:	6013      	str	r3, [r2, #0]
 8017416:	b004      	add	sp, #16
 8017418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801741c:	1c59      	adds	r1, r3, #1
 801741e:	9103      	str	r1, [sp, #12]
 8017420:	701a      	strb	r2, [r3, #0]
 8017422:	e7f0      	b.n	8017406 <__cvt+0xa6>

08017424 <__exponent>:
 8017424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017426:	4603      	mov	r3, r0
 8017428:	2900      	cmp	r1, #0
 801742a:	bfb8      	it	lt
 801742c:	4249      	neglt	r1, r1
 801742e:	f803 2b02 	strb.w	r2, [r3], #2
 8017432:	bfb4      	ite	lt
 8017434:	222d      	movlt	r2, #45	; 0x2d
 8017436:	222b      	movge	r2, #43	; 0x2b
 8017438:	2909      	cmp	r1, #9
 801743a:	7042      	strb	r2, [r0, #1]
 801743c:	dd2a      	ble.n	8017494 <__exponent+0x70>
 801743e:	f10d 0407 	add.w	r4, sp, #7
 8017442:	46a4      	mov	ip, r4
 8017444:	270a      	movs	r7, #10
 8017446:	46a6      	mov	lr, r4
 8017448:	460a      	mov	r2, r1
 801744a:	fb91 f6f7 	sdiv	r6, r1, r7
 801744e:	fb07 1516 	mls	r5, r7, r6, r1
 8017452:	3530      	adds	r5, #48	; 0x30
 8017454:	2a63      	cmp	r2, #99	; 0x63
 8017456:	f104 34ff 	add.w	r4, r4, #4294967295
 801745a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801745e:	4631      	mov	r1, r6
 8017460:	dcf1      	bgt.n	8017446 <__exponent+0x22>
 8017462:	3130      	adds	r1, #48	; 0x30
 8017464:	f1ae 0502 	sub.w	r5, lr, #2
 8017468:	f804 1c01 	strb.w	r1, [r4, #-1]
 801746c:	1c44      	adds	r4, r0, #1
 801746e:	4629      	mov	r1, r5
 8017470:	4561      	cmp	r1, ip
 8017472:	d30a      	bcc.n	801748a <__exponent+0x66>
 8017474:	f10d 0209 	add.w	r2, sp, #9
 8017478:	eba2 020e 	sub.w	r2, r2, lr
 801747c:	4565      	cmp	r5, ip
 801747e:	bf88      	it	hi
 8017480:	2200      	movhi	r2, #0
 8017482:	4413      	add	r3, r2
 8017484:	1a18      	subs	r0, r3, r0
 8017486:	b003      	add	sp, #12
 8017488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801748a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801748e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8017492:	e7ed      	b.n	8017470 <__exponent+0x4c>
 8017494:	2330      	movs	r3, #48	; 0x30
 8017496:	3130      	adds	r1, #48	; 0x30
 8017498:	7083      	strb	r3, [r0, #2]
 801749a:	70c1      	strb	r1, [r0, #3]
 801749c:	1d03      	adds	r3, r0, #4
 801749e:	e7f1      	b.n	8017484 <__exponent+0x60>

080174a0 <_printf_float>:
 80174a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174a4:	ed2d 8b02 	vpush	{d8}
 80174a8:	b08d      	sub	sp, #52	; 0x34
 80174aa:	460c      	mov	r4, r1
 80174ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80174b0:	4616      	mov	r6, r2
 80174b2:	461f      	mov	r7, r3
 80174b4:	4605      	mov	r5, r0
 80174b6:	f001 fb99 	bl	8018bec <_localeconv_r>
 80174ba:	f8d0 a000 	ldr.w	sl, [r0]
 80174be:	4650      	mov	r0, sl
 80174c0:	f7e8 fe8e 	bl	80001e0 <strlen>
 80174c4:	2300      	movs	r3, #0
 80174c6:	930a      	str	r3, [sp, #40]	; 0x28
 80174c8:	6823      	ldr	r3, [r4, #0]
 80174ca:	9305      	str	r3, [sp, #20]
 80174cc:	f8d8 3000 	ldr.w	r3, [r8]
 80174d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80174d4:	3307      	adds	r3, #7
 80174d6:	f023 0307 	bic.w	r3, r3, #7
 80174da:	f103 0208 	add.w	r2, r3, #8
 80174de:	f8c8 2000 	str.w	r2, [r8]
 80174e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80174ea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80174ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80174f2:	9307      	str	r3, [sp, #28]
 80174f4:	f8cd 8018 	str.w	r8, [sp, #24]
 80174f8:	ee08 0a10 	vmov	s16, r0
 80174fc:	4b9f      	ldr	r3, [pc, #636]	; (801777c <_printf_float+0x2dc>)
 80174fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017502:	f04f 32ff 	mov.w	r2, #4294967295
 8017506:	f7e9 fb19 	bl	8000b3c <__aeabi_dcmpun>
 801750a:	bb88      	cbnz	r0, 8017570 <_printf_float+0xd0>
 801750c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017510:	4b9a      	ldr	r3, [pc, #616]	; (801777c <_printf_float+0x2dc>)
 8017512:	f04f 32ff 	mov.w	r2, #4294967295
 8017516:	f7e9 faf3 	bl	8000b00 <__aeabi_dcmple>
 801751a:	bb48      	cbnz	r0, 8017570 <_printf_float+0xd0>
 801751c:	2200      	movs	r2, #0
 801751e:	2300      	movs	r3, #0
 8017520:	4640      	mov	r0, r8
 8017522:	4649      	mov	r1, r9
 8017524:	f7e9 fae2 	bl	8000aec <__aeabi_dcmplt>
 8017528:	b110      	cbz	r0, 8017530 <_printf_float+0x90>
 801752a:	232d      	movs	r3, #45	; 0x2d
 801752c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017530:	4b93      	ldr	r3, [pc, #588]	; (8017780 <_printf_float+0x2e0>)
 8017532:	4894      	ldr	r0, [pc, #592]	; (8017784 <_printf_float+0x2e4>)
 8017534:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8017538:	bf94      	ite	ls
 801753a:	4698      	movls	r8, r3
 801753c:	4680      	movhi	r8, r0
 801753e:	2303      	movs	r3, #3
 8017540:	6123      	str	r3, [r4, #16]
 8017542:	9b05      	ldr	r3, [sp, #20]
 8017544:	f023 0204 	bic.w	r2, r3, #4
 8017548:	6022      	str	r2, [r4, #0]
 801754a:	f04f 0900 	mov.w	r9, #0
 801754e:	9700      	str	r7, [sp, #0]
 8017550:	4633      	mov	r3, r6
 8017552:	aa0b      	add	r2, sp, #44	; 0x2c
 8017554:	4621      	mov	r1, r4
 8017556:	4628      	mov	r0, r5
 8017558:	f000 f9d8 	bl	801790c <_printf_common>
 801755c:	3001      	adds	r0, #1
 801755e:	f040 8090 	bne.w	8017682 <_printf_float+0x1e2>
 8017562:	f04f 30ff 	mov.w	r0, #4294967295
 8017566:	b00d      	add	sp, #52	; 0x34
 8017568:	ecbd 8b02 	vpop	{d8}
 801756c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017570:	4642      	mov	r2, r8
 8017572:	464b      	mov	r3, r9
 8017574:	4640      	mov	r0, r8
 8017576:	4649      	mov	r1, r9
 8017578:	f7e9 fae0 	bl	8000b3c <__aeabi_dcmpun>
 801757c:	b140      	cbz	r0, 8017590 <_printf_float+0xf0>
 801757e:	464b      	mov	r3, r9
 8017580:	2b00      	cmp	r3, #0
 8017582:	bfbc      	itt	lt
 8017584:	232d      	movlt	r3, #45	; 0x2d
 8017586:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801758a:	487f      	ldr	r0, [pc, #508]	; (8017788 <_printf_float+0x2e8>)
 801758c:	4b7f      	ldr	r3, [pc, #508]	; (801778c <_printf_float+0x2ec>)
 801758e:	e7d1      	b.n	8017534 <_printf_float+0x94>
 8017590:	6863      	ldr	r3, [r4, #4]
 8017592:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8017596:	9206      	str	r2, [sp, #24]
 8017598:	1c5a      	adds	r2, r3, #1
 801759a:	d13f      	bne.n	801761c <_printf_float+0x17c>
 801759c:	2306      	movs	r3, #6
 801759e:	6063      	str	r3, [r4, #4]
 80175a0:	9b05      	ldr	r3, [sp, #20]
 80175a2:	6861      	ldr	r1, [r4, #4]
 80175a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80175a8:	2300      	movs	r3, #0
 80175aa:	9303      	str	r3, [sp, #12]
 80175ac:	ab0a      	add	r3, sp, #40	; 0x28
 80175ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 80175b2:	ab09      	add	r3, sp, #36	; 0x24
 80175b4:	ec49 8b10 	vmov	d0, r8, r9
 80175b8:	9300      	str	r3, [sp, #0]
 80175ba:	6022      	str	r2, [r4, #0]
 80175bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80175c0:	4628      	mov	r0, r5
 80175c2:	f7ff fecd 	bl	8017360 <__cvt>
 80175c6:	9b06      	ldr	r3, [sp, #24]
 80175c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80175ca:	2b47      	cmp	r3, #71	; 0x47
 80175cc:	4680      	mov	r8, r0
 80175ce:	d108      	bne.n	80175e2 <_printf_float+0x142>
 80175d0:	1cc8      	adds	r0, r1, #3
 80175d2:	db02      	blt.n	80175da <_printf_float+0x13a>
 80175d4:	6863      	ldr	r3, [r4, #4]
 80175d6:	4299      	cmp	r1, r3
 80175d8:	dd41      	ble.n	801765e <_printf_float+0x1be>
 80175da:	f1ab 0b02 	sub.w	fp, fp, #2
 80175de:	fa5f fb8b 	uxtb.w	fp, fp
 80175e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80175e6:	d820      	bhi.n	801762a <_printf_float+0x18a>
 80175e8:	3901      	subs	r1, #1
 80175ea:	465a      	mov	r2, fp
 80175ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80175f0:	9109      	str	r1, [sp, #36]	; 0x24
 80175f2:	f7ff ff17 	bl	8017424 <__exponent>
 80175f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80175f8:	1813      	adds	r3, r2, r0
 80175fa:	2a01      	cmp	r2, #1
 80175fc:	4681      	mov	r9, r0
 80175fe:	6123      	str	r3, [r4, #16]
 8017600:	dc02      	bgt.n	8017608 <_printf_float+0x168>
 8017602:	6822      	ldr	r2, [r4, #0]
 8017604:	07d2      	lsls	r2, r2, #31
 8017606:	d501      	bpl.n	801760c <_printf_float+0x16c>
 8017608:	3301      	adds	r3, #1
 801760a:	6123      	str	r3, [r4, #16]
 801760c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8017610:	2b00      	cmp	r3, #0
 8017612:	d09c      	beq.n	801754e <_printf_float+0xae>
 8017614:	232d      	movs	r3, #45	; 0x2d
 8017616:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801761a:	e798      	b.n	801754e <_printf_float+0xae>
 801761c:	9a06      	ldr	r2, [sp, #24]
 801761e:	2a47      	cmp	r2, #71	; 0x47
 8017620:	d1be      	bne.n	80175a0 <_printf_float+0x100>
 8017622:	2b00      	cmp	r3, #0
 8017624:	d1bc      	bne.n	80175a0 <_printf_float+0x100>
 8017626:	2301      	movs	r3, #1
 8017628:	e7b9      	b.n	801759e <_printf_float+0xfe>
 801762a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801762e:	d118      	bne.n	8017662 <_printf_float+0x1c2>
 8017630:	2900      	cmp	r1, #0
 8017632:	6863      	ldr	r3, [r4, #4]
 8017634:	dd0b      	ble.n	801764e <_printf_float+0x1ae>
 8017636:	6121      	str	r1, [r4, #16]
 8017638:	b913      	cbnz	r3, 8017640 <_printf_float+0x1a0>
 801763a:	6822      	ldr	r2, [r4, #0]
 801763c:	07d0      	lsls	r0, r2, #31
 801763e:	d502      	bpl.n	8017646 <_printf_float+0x1a6>
 8017640:	3301      	adds	r3, #1
 8017642:	440b      	add	r3, r1
 8017644:	6123      	str	r3, [r4, #16]
 8017646:	65a1      	str	r1, [r4, #88]	; 0x58
 8017648:	f04f 0900 	mov.w	r9, #0
 801764c:	e7de      	b.n	801760c <_printf_float+0x16c>
 801764e:	b913      	cbnz	r3, 8017656 <_printf_float+0x1b6>
 8017650:	6822      	ldr	r2, [r4, #0]
 8017652:	07d2      	lsls	r2, r2, #31
 8017654:	d501      	bpl.n	801765a <_printf_float+0x1ba>
 8017656:	3302      	adds	r3, #2
 8017658:	e7f4      	b.n	8017644 <_printf_float+0x1a4>
 801765a:	2301      	movs	r3, #1
 801765c:	e7f2      	b.n	8017644 <_printf_float+0x1a4>
 801765e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8017662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017664:	4299      	cmp	r1, r3
 8017666:	db05      	blt.n	8017674 <_printf_float+0x1d4>
 8017668:	6823      	ldr	r3, [r4, #0]
 801766a:	6121      	str	r1, [r4, #16]
 801766c:	07d8      	lsls	r0, r3, #31
 801766e:	d5ea      	bpl.n	8017646 <_printf_float+0x1a6>
 8017670:	1c4b      	adds	r3, r1, #1
 8017672:	e7e7      	b.n	8017644 <_printf_float+0x1a4>
 8017674:	2900      	cmp	r1, #0
 8017676:	bfd4      	ite	le
 8017678:	f1c1 0202 	rsble	r2, r1, #2
 801767c:	2201      	movgt	r2, #1
 801767e:	4413      	add	r3, r2
 8017680:	e7e0      	b.n	8017644 <_printf_float+0x1a4>
 8017682:	6823      	ldr	r3, [r4, #0]
 8017684:	055a      	lsls	r2, r3, #21
 8017686:	d407      	bmi.n	8017698 <_printf_float+0x1f8>
 8017688:	6923      	ldr	r3, [r4, #16]
 801768a:	4642      	mov	r2, r8
 801768c:	4631      	mov	r1, r6
 801768e:	4628      	mov	r0, r5
 8017690:	47b8      	blx	r7
 8017692:	3001      	adds	r0, #1
 8017694:	d12c      	bne.n	80176f0 <_printf_float+0x250>
 8017696:	e764      	b.n	8017562 <_printf_float+0xc2>
 8017698:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801769c:	f240 80e0 	bls.w	8017860 <_printf_float+0x3c0>
 80176a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80176a4:	2200      	movs	r2, #0
 80176a6:	2300      	movs	r3, #0
 80176a8:	f7e9 fa16 	bl	8000ad8 <__aeabi_dcmpeq>
 80176ac:	2800      	cmp	r0, #0
 80176ae:	d034      	beq.n	801771a <_printf_float+0x27a>
 80176b0:	4a37      	ldr	r2, [pc, #220]	; (8017790 <_printf_float+0x2f0>)
 80176b2:	2301      	movs	r3, #1
 80176b4:	4631      	mov	r1, r6
 80176b6:	4628      	mov	r0, r5
 80176b8:	47b8      	blx	r7
 80176ba:	3001      	adds	r0, #1
 80176bc:	f43f af51 	beq.w	8017562 <_printf_float+0xc2>
 80176c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80176c4:	429a      	cmp	r2, r3
 80176c6:	db02      	blt.n	80176ce <_printf_float+0x22e>
 80176c8:	6823      	ldr	r3, [r4, #0]
 80176ca:	07d8      	lsls	r0, r3, #31
 80176cc:	d510      	bpl.n	80176f0 <_printf_float+0x250>
 80176ce:	ee18 3a10 	vmov	r3, s16
 80176d2:	4652      	mov	r2, sl
 80176d4:	4631      	mov	r1, r6
 80176d6:	4628      	mov	r0, r5
 80176d8:	47b8      	blx	r7
 80176da:	3001      	adds	r0, #1
 80176dc:	f43f af41 	beq.w	8017562 <_printf_float+0xc2>
 80176e0:	f04f 0800 	mov.w	r8, #0
 80176e4:	f104 091a 	add.w	r9, r4, #26
 80176e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80176ea:	3b01      	subs	r3, #1
 80176ec:	4543      	cmp	r3, r8
 80176ee:	dc09      	bgt.n	8017704 <_printf_float+0x264>
 80176f0:	6823      	ldr	r3, [r4, #0]
 80176f2:	079b      	lsls	r3, r3, #30
 80176f4:	f100 8105 	bmi.w	8017902 <_printf_float+0x462>
 80176f8:	68e0      	ldr	r0, [r4, #12]
 80176fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80176fc:	4298      	cmp	r0, r3
 80176fe:	bfb8      	it	lt
 8017700:	4618      	movlt	r0, r3
 8017702:	e730      	b.n	8017566 <_printf_float+0xc6>
 8017704:	2301      	movs	r3, #1
 8017706:	464a      	mov	r2, r9
 8017708:	4631      	mov	r1, r6
 801770a:	4628      	mov	r0, r5
 801770c:	47b8      	blx	r7
 801770e:	3001      	adds	r0, #1
 8017710:	f43f af27 	beq.w	8017562 <_printf_float+0xc2>
 8017714:	f108 0801 	add.w	r8, r8, #1
 8017718:	e7e6      	b.n	80176e8 <_printf_float+0x248>
 801771a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801771c:	2b00      	cmp	r3, #0
 801771e:	dc39      	bgt.n	8017794 <_printf_float+0x2f4>
 8017720:	4a1b      	ldr	r2, [pc, #108]	; (8017790 <_printf_float+0x2f0>)
 8017722:	2301      	movs	r3, #1
 8017724:	4631      	mov	r1, r6
 8017726:	4628      	mov	r0, r5
 8017728:	47b8      	blx	r7
 801772a:	3001      	adds	r0, #1
 801772c:	f43f af19 	beq.w	8017562 <_printf_float+0xc2>
 8017730:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017734:	4313      	orrs	r3, r2
 8017736:	d102      	bne.n	801773e <_printf_float+0x29e>
 8017738:	6823      	ldr	r3, [r4, #0]
 801773a:	07d9      	lsls	r1, r3, #31
 801773c:	d5d8      	bpl.n	80176f0 <_printf_float+0x250>
 801773e:	ee18 3a10 	vmov	r3, s16
 8017742:	4652      	mov	r2, sl
 8017744:	4631      	mov	r1, r6
 8017746:	4628      	mov	r0, r5
 8017748:	47b8      	blx	r7
 801774a:	3001      	adds	r0, #1
 801774c:	f43f af09 	beq.w	8017562 <_printf_float+0xc2>
 8017750:	f04f 0900 	mov.w	r9, #0
 8017754:	f104 0a1a 	add.w	sl, r4, #26
 8017758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801775a:	425b      	negs	r3, r3
 801775c:	454b      	cmp	r3, r9
 801775e:	dc01      	bgt.n	8017764 <_printf_float+0x2c4>
 8017760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017762:	e792      	b.n	801768a <_printf_float+0x1ea>
 8017764:	2301      	movs	r3, #1
 8017766:	4652      	mov	r2, sl
 8017768:	4631      	mov	r1, r6
 801776a:	4628      	mov	r0, r5
 801776c:	47b8      	blx	r7
 801776e:	3001      	adds	r0, #1
 8017770:	f43f aef7 	beq.w	8017562 <_printf_float+0xc2>
 8017774:	f109 0901 	add.w	r9, r9, #1
 8017778:	e7ee      	b.n	8017758 <_printf_float+0x2b8>
 801777a:	bf00      	nop
 801777c:	7fefffff 	.word	0x7fefffff
 8017780:	0801d098 	.word	0x0801d098
 8017784:	0801d09c 	.word	0x0801d09c
 8017788:	0801d0a4 	.word	0x0801d0a4
 801778c:	0801d0a0 	.word	0x0801d0a0
 8017790:	0801d0a8 	.word	0x0801d0a8
 8017794:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017796:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017798:	429a      	cmp	r2, r3
 801779a:	bfa8      	it	ge
 801779c:	461a      	movge	r2, r3
 801779e:	2a00      	cmp	r2, #0
 80177a0:	4691      	mov	r9, r2
 80177a2:	dc37      	bgt.n	8017814 <_printf_float+0x374>
 80177a4:	f04f 0b00 	mov.w	fp, #0
 80177a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80177ac:	f104 021a 	add.w	r2, r4, #26
 80177b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80177b2:	9305      	str	r3, [sp, #20]
 80177b4:	eba3 0309 	sub.w	r3, r3, r9
 80177b8:	455b      	cmp	r3, fp
 80177ba:	dc33      	bgt.n	8017824 <_printf_float+0x384>
 80177bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80177c0:	429a      	cmp	r2, r3
 80177c2:	db3b      	blt.n	801783c <_printf_float+0x39c>
 80177c4:	6823      	ldr	r3, [r4, #0]
 80177c6:	07da      	lsls	r2, r3, #31
 80177c8:	d438      	bmi.n	801783c <_printf_float+0x39c>
 80177ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80177cc:	9b05      	ldr	r3, [sp, #20]
 80177ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80177d0:	1ad3      	subs	r3, r2, r3
 80177d2:	eba2 0901 	sub.w	r9, r2, r1
 80177d6:	4599      	cmp	r9, r3
 80177d8:	bfa8      	it	ge
 80177da:	4699      	movge	r9, r3
 80177dc:	f1b9 0f00 	cmp.w	r9, #0
 80177e0:	dc35      	bgt.n	801784e <_printf_float+0x3ae>
 80177e2:	f04f 0800 	mov.w	r8, #0
 80177e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80177ea:	f104 0a1a 	add.w	sl, r4, #26
 80177ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80177f2:	1a9b      	subs	r3, r3, r2
 80177f4:	eba3 0309 	sub.w	r3, r3, r9
 80177f8:	4543      	cmp	r3, r8
 80177fa:	f77f af79 	ble.w	80176f0 <_printf_float+0x250>
 80177fe:	2301      	movs	r3, #1
 8017800:	4652      	mov	r2, sl
 8017802:	4631      	mov	r1, r6
 8017804:	4628      	mov	r0, r5
 8017806:	47b8      	blx	r7
 8017808:	3001      	adds	r0, #1
 801780a:	f43f aeaa 	beq.w	8017562 <_printf_float+0xc2>
 801780e:	f108 0801 	add.w	r8, r8, #1
 8017812:	e7ec      	b.n	80177ee <_printf_float+0x34e>
 8017814:	4613      	mov	r3, r2
 8017816:	4631      	mov	r1, r6
 8017818:	4642      	mov	r2, r8
 801781a:	4628      	mov	r0, r5
 801781c:	47b8      	blx	r7
 801781e:	3001      	adds	r0, #1
 8017820:	d1c0      	bne.n	80177a4 <_printf_float+0x304>
 8017822:	e69e      	b.n	8017562 <_printf_float+0xc2>
 8017824:	2301      	movs	r3, #1
 8017826:	4631      	mov	r1, r6
 8017828:	4628      	mov	r0, r5
 801782a:	9205      	str	r2, [sp, #20]
 801782c:	47b8      	blx	r7
 801782e:	3001      	adds	r0, #1
 8017830:	f43f ae97 	beq.w	8017562 <_printf_float+0xc2>
 8017834:	9a05      	ldr	r2, [sp, #20]
 8017836:	f10b 0b01 	add.w	fp, fp, #1
 801783a:	e7b9      	b.n	80177b0 <_printf_float+0x310>
 801783c:	ee18 3a10 	vmov	r3, s16
 8017840:	4652      	mov	r2, sl
 8017842:	4631      	mov	r1, r6
 8017844:	4628      	mov	r0, r5
 8017846:	47b8      	blx	r7
 8017848:	3001      	adds	r0, #1
 801784a:	d1be      	bne.n	80177ca <_printf_float+0x32a>
 801784c:	e689      	b.n	8017562 <_printf_float+0xc2>
 801784e:	9a05      	ldr	r2, [sp, #20]
 8017850:	464b      	mov	r3, r9
 8017852:	4442      	add	r2, r8
 8017854:	4631      	mov	r1, r6
 8017856:	4628      	mov	r0, r5
 8017858:	47b8      	blx	r7
 801785a:	3001      	adds	r0, #1
 801785c:	d1c1      	bne.n	80177e2 <_printf_float+0x342>
 801785e:	e680      	b.n	8017562 <_printf_float+0xc2>
 8017860:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017862:	2a01      	cmp	r2, #1
 8017864:	dc01      	bgt.n	801786a <_printf_float+0x3ca>
 8017866:	07db      	lsls	r3, r3, #31
 8017868:	d538      	bpl.n	80178dc <_printf_float+0x43c>
 801786a:	2301      	movs	r3, #1
 801786c:	4642      	mov	r2, r8
 801786e:	4631      	mov	r1, r6
 8017870:	4628      	mov	r0, r5
 8017872:	47b8      	blx	r7
 8017874:	3001      	adds	r0, #1
 8017876:	f43f ae74 	beq.w	8017562 <_printf_float+0xc2>
 801787a:	ee18 3a10 	vmov	r3, s16
 801787e:	4652      	mov	r2, sl
 8017880:	4631      	mov	r1, r6
 8017882:	4628      	mov	r0, r5
 8017884:	47b8      	blx	r7
 8017886:	3001      	adds	r0, #1
 8017888:	f43f ae6b 	beq.w	8017562 <_printf_float+0xc2>
 801788c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017890:	2200      	movs	r2, #0
 8017892:	2300      	movs	r3, #0
 8017894:	f7e9 f920 	bl	8000ad8 <__aeabi_dcmpeq>
 8017898:	b9d8      	cbnz	r0, 80178d2 <_printf_float+0x432>
 801789a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801789c:	f108 0201 	add.w	r2, r8, #1
 80178a0:	3b01      	subs	r3, #1
 80178a2:	4631      	mov	r1, r6
 80178a4:	4628      	mov	r0, r5
 80178a6:	47b8      	blx	r7
 80178a8:	3001      	adds	r0, #1
 80178aa:	d10e      	bne.n	80178ca <_printf_float+0x42a>
 80178ac:	e659      	b.n	8017562 <_printf_float+0xc2>
 80178ae:	2301      	movs	r3, #1
 80178b0:	4652      	mov	r2, sl
 80178b2:	4631      	mov	r1, r6
 80178b4:	4628      	mov	r0, r5
 80178b6:	47b8      	blx	r7
 80178b8:	3001      	adds	r0, #1
 80178ba:	f43f ae52 	beq.w	8017562 <_printf_float+0xc2>
 80178be:	f108 0801 	add.w	r8, r8, #1
 80178c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80178c4:	3b01      	subs	r3, #1
 80178c6:	4543      	cmp	r3, r8
 80178c8:	dcf1      	bgt.n	80178ae <_printf_float+0x40e>
 80178ca:	464b      	mov	r3, r9
 80178cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80178d0:	e6dc      	b.n	801768c <_printf_float+0x1ec>
 80178d2:	f04f 0800 	mov.w	r8, #0
 80178d6:	f104 0a1a 	add.w	sl, r4, #26
 80178da:	e7f2      	b.n	80178c2 <_printf_float+0x422>
 80178dc:	2301      	movs	r3, #1
 80178de:	4642      	mov	r2, r8
 80178e0:	e7df      	b.n	80178a2 <_printf_float+0x402>
 80178e2:	2301      	movs	r3, #1
 80178e4:	464a      	mov	r2, r9
 80178e6:	4631      	mov	r1, r6
 80178e8:	4628      	mov	r0, r5
 80178ea:	47b8      	blx	r7
 80178ec:	3001      	adds	r0, #1
 80178ee:	f43f ae38 	beq.w	8017562 <_printf_float+0xc2>
 80178f2:	f108 0801 	add.w	r8, r8, #1
 80178f6:	68e3      	ldr	r3, [r4, #12]
 80178f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80178fa:	1a5b      	subs	r3, r3, r1
 80178fc:	4543      	cmp	r3, r8
 80178fe:	dcf0      	bgt.n	80178e2 <_printf_float+0x442>
 8017900:	e6fa      	b.n	80176f8 <_printf_float+0x258>
 8017902:	f04f 0800 	mov.w	r8, #0
 8017906:	f104 0919 	add.w	r9, r4, #25
 801790a:	e7f4      	b.n	80178f6 <_printf_float+0x456>

0801790c <_printf_common>:
 801790c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017910:	4616      	mov	r6, r2
 8017912:	4699      	mov	r9, r3
 8017914:	688a      	ldr	r2, [r1, #8]
 8017916:	690b      	ldr	r3, [r1, #16]
 8017918:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801791c:	4293      	cmp	r3, r2
 801791e:	bfb8      	it	lt
 8017920:	4613      	movlt	r3, r2
 8017922:	6033      	str	r3, [r6, #0]
 8017924:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017928:	4607      	mov	r7, r0
 801792a:	460c      	mov	r4, r1
 801792c:	b10a      	cbz	r2, 8017932 <_printf_common+0x26>
 801792e:	3301      	adds	r3, #1
 8017930:	6033      	str	r3, [r6, #0]
 8017932:	6823      	ldr	r3, [r4, #0]
 8017934:	0699      	lsls	r1, r3, #26
 8017936:	bf42      	ittt	mi
 8017938:	6833      	ldrmi	r3, [r6, #0]
 801793a:	3302      	addmi	r3, #2
 801793c:	6033      	strmi	r3, [r6, #0]
 801793e:	6825      	ldr	r5, [r4, #0]
 8017940:	f015 0506 	ands.w	r5, r5, #6
 8017944:	d106      	bne.n	8017954 <_printf_common+0x48>
 8017946:	f104 0a19 	add.w	sl, r4, #25
 801794a:	68e3      	ldr	r3, [r4, #12]
 801794c:	6832      	ldr	r2, [r6, #0]
 801794e:	1a9b      	subs	r3, r3, r2
 8017950:	42ab      	cmp	r3, r5
 8017952:	dc26      	bgt.n	80179a2 <_printf_common+0x96>
 8017954:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017958:	1e13      	subs	r3, r2, #0
 801795a:	6822      	ldr	r2, [r4, #0]
 801795c:	bf18      	it	ne
 801795e:	2301      	movne	r3, #1
 8017960:	0692      	lsls	r2, r2, #26
 8017962:	d42b      	bmi.n	80179bc <_printf_common+0xb0>
 8017964:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017968:	4649      	mov	r1, r9
 801796a:	4638      	mov	r0, r7
 801796c:	47c0      	blx	r8
 801796e:	3001      	adds	r0, #1
 8017970:	d01e      	beq.n	80179b0 <_printf_common+0xa4>
 8017972:	6823      	ldr	r3, [r4, #0]
 8017974:	68e5      	ldr	r5, [r4, #12]
 8017976:	6832      	ldr	r2, [r6, #0]
 8017978:	f003 0306 	and.w	r3, r3, #6
 801797c:	2b04      	cmp	r3, #4
 801797e:	bf08      	it	eq
 8017980:	1aad      	subeq	r5, r5, r2
 8017982:	68a3      	ldr	r3, [r4, #8]
 8017984:	6922      	ldr	r2, [r4, #16]
 8017986:	bf0c      	ite	eq
 8017988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801798c:	2500      	movne	r5, #0
 801798e:	4293      	cmp	r3, r2
 8017990:	bfc4      	itt	gt
 8017992:	1a9b      	subgt	r3, r3, r2
 8017994:	18ed      	addgt	r5, r5, r3
 8017996:	2600      	movs	r6, #0
 8017998:	341a      	adds	r4, #26
 801799a:	42b5      	cmp	r5, r6
 801799c:	d11a      	bne.n	80179d4 <_printf_common+0xc8>
 801799e:	2000      	movs	r0, #0
 80179a0:	e008      	b.n	80179b4 <_printf_common+0xa8>
 80179a2:	2301      	movs	r3, #1
 80179a4:	4652      	mov	r2, sl
 80179a6:	4649      	mov	r1, r9
 80179a8:	4638      	mov	r0, r7
 80179aa:	47c0      	blx	r8
 80179ac:	3001      	adds	r0, #1
 80179ae:	d103      	bne.n	80179b8 <_printf_common+0xac>
 80179b0:	f04f 30ff 	mov.w	r0, #4294967295
 80179b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179b8:	3501      	adds	r5, #1
 80179ba:	e7c6      	b.n	801794a <_printf_common+0x3e>
 80179bc:	18e1      	adds	r1, r4, r3
 80179be:	1c5a      	adds	r2, r3, #1
 80179c0:	2030      	movs	r0, #48	; 0x30
 80179c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80179c6:	4422      	add	r2, r4
 80179c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80179cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80179d0:	3302      	adds	r3, #2
 80179d2:	e7c7      	b.n	8017964 <_printf_common+0x58>
 80179d4:	2301      	movs	r3, #1
 80179d6:	4622      	mov	r2, r4
 80179d8:	4649      	mov	r1, r9
 80179da:	4638      	mov	r0, r7
 80179dc:	47c0      	blx	r8
 80179de:	3001      	adds	r0, #1
 80179e0:	d0e6      	beq.n	80179b0 <_printf_common+0xa4>
 80179e2:	3601      	adds	r6, #1
 80179e4:	e7d9      	b.n	801799a <_printf_common+0x8e>
	...

080179e8 <_printf_i>:
 80179e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80179ec:	460c      	mov	r4, r1
 80179ee:	4691      	mov	r9, r2
 80179f0:	7e27      	ldrb	r7, [r4, #24]
 80179f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80179f4:	2f78      	cmp	r7, #120	; 0x78
 80179f6:	4680      	mov	r8, r0
 80179f8:	469a      	mov	sl, r3
 80179fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80179fe:	d807      	bhi.n	8017a10 <_printf_i+0x28>
 8017a00:	2f62      	cmp	r7, #98	; 0x62
 8017a02:	d80a      	bhi.n	8017a1a <_printf_i+0x32>
 8017a04:	2f00      	cmp	r7, #0
 8017a06:	f000 80d8 	beq.w	8017bba <_printf_i+0x1d2>
 8017a0a:	2f58      	cmp	r7, #88	; 0x58
 8017a0c:	f000 80a3 	beq.w	8017b56 <_printf_i+0x16e>
 8017a10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017a14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017a18:	e03a      	b.n	8017a90 <_printf_i+0xa8>
 8017a1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017a1e:	2b15      	cmp	r3, #21
 8017a20:	d8f6      	bhi.n	8017a10 <_printf_i+0x28>
 8017a22:	a001      	add	r0, pc, #4	; (adr r0, 8017a28 <_printf_i+0x40>)
 8017a24:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017a28:	08017a81 	.word	0x08017a81
 8017a2c:	08017a95 	.word	0x08017a95
 8017a30:	08017a11 	.word	0x08017a11
 8017a34:	08017a11 	.word	0x08017a11
 8017a38:	08017a11 	.word	0x08017a11
 8017a3c:	08017a11 	.word	0x08017a11
 8017a40:	08017a95 	.word	0x08017a95
 8017a44:	08017a11 	.word	0x08017a11
 8017a48:	08017a11 	.word	0x08017a11
 8017a4c:	08017a11 	.word	0x08017a11
 8017a50:	08017a11 	.word	0x08017a11
 8017a54:	08017ba1 	.word	0x08017ba1
 8017a58:	08017ac5 	.word	0x08017ac5
 8017a5c:	08017b83 	.word	0x08017b83
 8017a60:	08017a11 	.word	0x08017a11
 8017a64:	08017a11 	.word	0x08017a11
 8017a68:	08017bc3 	.word	0x08017bc3
 8017a6c:	08017a11 	.word	0x08017a11
 8017a70:	08017ac5 	.word	0x08017ac5
 8017a74:	08017a11 	.word	0x08017a11
 8017a78:	08017a11 	.word	0x08017a11
 8017a7c:	08017b8b 	.word	0x08017b8b
 8017a80:	680b      	ldr	r3, [r1, #0]
 8017a82:	1d1a      	adds	r2, r3, #4
 8017a84:	681b      	ldr	r3, [r3, #0]
 8017a86:	600a      	str	r2, [r1, #0]
 8017a88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017a8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017a90:	2301      	movs	r3, #1
 8017a92:	e0a3      	b.n	8017bdc <_printf_i+0x1f4>
 8017a94:	6825      	ldr	r5, [r4, #0]
 8017a96:	6808      	ldr	r0, [r1, #0]
 8017a98:	062e      	lsls	r6, r5, #24
 8017a9a:	f100 0304 	add.w	r3, r0, #4
 8017a9e:	d50a      	bpl.n	8017ab6 <_printf_i+0xce>
 8017aa0:	6805      	ldr	r5, [r0, #0]
 8017aa2:	600b      	str	r3, [r1, #0]
 8017aa4:	2d00      	cmp	r5, #0
 8017aa6:	da03      	bge.n	8017ab0 <_printf_i+0xc8>
 8017aa8:	232d      	movs	r3, #45	; 0x2d
 8017aaa:	426d      	negs	r5, r5
 8017aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017ab0:	485e      	ldr	r0, [pc, #376]	; (8017c2c <_printf_i+0x244>)
 8017ab2:	230a      	movs	r3, #10
 8017ab4:	e019      	b.n	8017aea <_printf_i+0x102>
 8017ab6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8017aba:	6805      	ldr	r5, [r0, #0]
 8017abc:	600b      	str	r3, [r1, #0]
 8017abe:	bf18      	it	ne
 8017ac0:	b22d      	sxthne	r5, r5
 8017ac2:	e7ef      	b.n	8017aa4 <_printf_i+0xbc>
 8017ac4:	680b      	ldr	r3, [r1, #0]
 8017ac6:	6825      	ldr	r5, [r4, #0]
 8017ac8:	1d18      	adds	r0, r3, #4
 8017aca:	6008      	str	r0, [r1, #0]
 8017acc:	0628      	lsls	r0, r5, #24
 8017ace:	d501      	bpl.n	8017ad4 <_printf_i+0xec>
 8017ad0:	681d      	ldr	r5, [r3, #0]
 8017ad2:	e002      	b.n	8017ada <_printf_i+0xf2>
 8017ad4:	0669      	lsls	r1, r5, #25
 8017ad6:	d5fb      	bpl.n	8017ad0 <_printf_i+0xe8>
 8017ad8:	881d      	ldrh	r5, [r3, #0]
 8017ada:	4854      	ldr	r0, [pc, #336]	; (8017c2c <_printf_i+0x244>)
 8017adc:	2f6f      	cmp	r7, #111	; 0x6f
 8017ade:	bf0c      	ite	eq
 8017ae0:	2308      	moveq	r3, #8
 8017ae2:	230a      	movne	r3, #10
 8017ae4:	2100      	movs	r1, #0
 8017ae6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017aea:	6866      	ldr	r6, [r4, #4]
 8017aec:	60a6      	str	r6, [r4, #8]
 8017aee:	2e00      	cmp	r6, #0
 8017af0:	bfa2      	ittt	ge
 8017af2:	6821      	ldrge	r1, [r4, #0]
 8017af4:	f021 0104 	bicge.w	r1, r1, #4
 8017af8:	6021      	strge	r1, [r4, #0]
 8017afa:	b90d      	cbnz	r5, 8017b00 <_printf_i+0x118>
 8017afc:	2e00      	cmp	r6, #0
 8017afe:	d04d      	beq.n	8017b9c <_printf_i+0x1b4>
 8017b00:	4616      	mov	r6, r2
 8017b02:	fbb5 f1f3 	udiv	r1, r5, r3
 8017b06:	fb03 5711 	mls	r7, r3, r1, r5
 8017b0a:	5dc7      	ldrb	r7, [r0, r7]
 8017b0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017b10:	462f      	mov	r7, r5
 8017b12:	42bb      	cmp	r3, r7
 8017b14:	460d      	mov	r5, r1
 8017b16:	d9f4      	bls.n	8017b02 <_printf_i+0x11a>
 8017b18:	2b08      	cmp	r3, #8
 8017b1a:	d10b      	bne.n	8017b34 <_printf_i+0x14c>
 8017b1c:	6823      	ldr	r3, [r4, #0]
 8017b1e:	07df      	lsls	r7, r3, #31
 8017b20:	d508      	bpl.n	8017b34 <_printf_i+0x14c>
 8017b22:	6923      	ldr	r3, [r4, #16]
 8017b24:	6861      	ldr	r1, [r4, #4]
 8017b26:	4299      	cmp	r1, r3
 8017b28:	bfde      	ittt	le
 8017b2a:	2330      	movle	r3, #48	; 0x30
 8017b2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017b30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017b34:	1b92      	subs	r2, r2, r6
 8017b36:	6122      	str	r2, [r4, #16]
 8017b38:	f8cd a000 	str.w	sl, [sp]
 8017b3c:	464b      	mov	r3, r9
 8017b3e:	aa03      	add	r2, sp, #12
 8017b40:	4621      	mov	r1, r4
 8017b42:	4640      	mov	r0, r8
 8017b44:	f7ff fee2 	bl	801790c <_printf_common>
 8017b48:	3001      	adds	r0, #1
 8017b4a:	d14c      	bne.n	8017be6 <_printf_i+0x1fe>
 8017b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8017b50:	b004      	add	sp, #16
 8017b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b56:	4835      	ldr	r0, [pc, #212]	; (8017c2c <_printf_i+0x244>)
 8017b58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017b5c:	6823      	ldr	r3, [r4, #0]
 8017b5e:	680e      	ldr	r6, [r1, #0]
 8017b60:	061f      	lsls	r7, r3, #24
 8017b62:	f856 5b04 	ldr.w	r5, [r6], #4
 8017b66:	600e      	str	r6, [r1, #0]
 8017b68:	d514      	bpl.n	8017b94 <_printf_i+0x1ac>
 8017b6a:	07d9      	lsls	r1, r3, #31
 8017b6c:	bf44      	itt	mi
 8017b6e:	f043 0320 	orrmi.w	r3, r3, #32
 8017b72:	6023      	strmi	r3, [r4, #0]
 8017b74:	b91d      	cbnz	r5, 8017b7e <_printf_i+0x196>
 8017b76:	6823      	ldr	r3, [r4, #0]
 8017b78:	f023 0320 	bic.w	r3, r3, #32
 8017b7c:	6023      	str	r3, [r4, #0]
 8017b7e:	2310      	movs	r3, #16
 8017b80:	e7b0      	b.n	8017ae4 <_printf_i+0xfc>
 8017b82:	6823      	ldr	r3, [r4, #0]
 8017b84:	f043 0320 	orr.w	r3, r3, #32
 8017b88:	6023      	str	r3, [r4, #0]
 8017b8a:	2378      	movs	r3, #120	; 0x78
 8017b8c:	4828      	ldr	r0, [pc, #160]	; (8017c30 <_printf_i+0x248>)
 8017b8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017b92:	e7e3      	b.n	8017b5c <_printf_i+0x174>
 8017b94:	065e      	lsls	r6, r3, #25
 8017b96:	bf48      	it	mi
 8017b98:	b2ad      	uxthmi	r5, r5
 8017b9a:	e7e6      	b.n	8017b6a <_printf_i+0x182>
 8017b9c:	4616      	mov	r6, r2
 8017b9e:	e7bb      	b.n	8017b18 <_printf_i+0x130>
 8017ba0:	680b      	ldr	r3, [r1, #0]
 8017ba2:	6826      	ldr	r6, [r4, #0]
 8017ba4:	6960      	ldr	r0, [r4, #20]
 8017ba6:	1d1d      	adds	r5, r3, #4
 8017ba8:	600d      	str	r5, [r1, #0]
 8017baa:	0635      	lsls	r5, r6, #24
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	d501      	bpl.n	8017bb4 <_printf_i+0x1cc>
 8017bb0:	6018      	str	r0, [r3, #0]
 8017bb2:	e002      	b.n	8017bba <_printf_i+0x1d2>
 8017bb4:	0671      	lsls	r1, r6, #25
 8017bb6:	d5fb      	bpl.n	8017bb0 <_printf_i+0x1c8>
 8017bb8:	8018      	strh	r0, [r3, #0]
 8017bba:	2300      	movs	r3, #0
 8017bbc:	6123      	str	r3, [r4, #16]
 8017bbe:	4616      	mov	r6, r2
 8017bc0:	e7ba      	b.n	8017b38 <_printf_i+0x150>
 8017bc2:	680b      	ldr	r3, [r1, #0]
 8017bc4:	1d1a      	adds	r2, r3, #4
 8017bc6:	600a      	str	r2, [r1, #0]
 8017bc8:	681e      	ldr	r6, [r3, #0]
 8017bca:	6862      	ldr	r2, [r4, #4]
 8017bcc:	2100      	movs	r1, #0
 8017bce:	4630      	mov	r0, r6
 8017bd0:	f7e8 fb0e 	bl	80001f0 <memchr>
 8017bd4:	b108      	cbz	r0, 8017bda <_printf_i+0x1f2>
 8017bd6:	1b80      	subs	r0, r0, r6
 8017bd8:	6060      	str	r0, [r4, #4]
 8017bda:	6863      	ldr	r3, [r4, #4]
 8017bdc:	6123      	str	r3, [r4, #16]
 8017bde:	2300      	movs	r3, #0
 8017be0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017be4:	e7a8      	b.n	8017b38 <_printf_i+0x150>
 8017be6:	6923      	ldr	r3, [r4, #16]
 8017be8:	4632      	mov	r2, r6
 8017bea:	4649      	mov	r1, r9
 8017bec:	4640      	mov	r0, r8
 8017bee:	47d0      	blx	sl
 8017bf0:	3001      	adds	r0, #1
 8017bf2:	d0ab      	beq.n	8017b4c <_printf_i+0x164>
 8017bf4:	6823      	ldr	r3, [r4, #0]
 8017bf6:	079b      	lsls	r3, r3, #30
 8017bf8:	d413      	bmi.n	8017c22 <_printf_i+0x23a>
 8017bfa:	68e0      	ldr	r0, [r4, #12]
 8017bfc:	9b03      	ldr	r3, [sp, #12]
 8017bfe:	4298      	cmp	r0, r3
 8017c00:	bfb8      	it	lt
 8017c02:	4618      	movlt	r0, r3
 8017c04:	e7a4      	b.n	8017b50 <_printf_i+0x168>
 8017c06:	2301      	movs	r3, #1
 8017c08:	4632      	mov	r2, r6
 8017c0a:	4649      	mov	r1, r9
 8017c0c:	4640      	mov	r0, r8
 8017c0e:	47d0      	blx	sl
 8017c10:	3001      	adds	r0, #1
 8017c12:	d09b      	beq.n	8017b4c <_printf_i+0x164>
 8017c14:	3501      	adds	r5, #1
 8017c16:	68e3      	ldr	r3, [r4, #12]
 8017c18:	9903      	ldr	r1, [sp, #12]
 8017c1a:	1a5b      	subs	r3, r3, r1
 8017c1c:	42ab      	cmp	r3, r5
 8017c1e:	dcf2      	bgt.n	8017c06 <_printf_i+0x21e>
 8017c20:	e7eb      	b.n	8017bfa <_printf_i+0x212>
 8017c22:	2500      	movs	r5, #0
 8017c24:	f104 0619 	add.w	r6, r4, #25
 8017c28:	e7f5      	b.n	8017c16 <_printf_i+0x22e>
 8017c2a:	bf00      	nop
 8017c2c:	0801d0aa 	.word	0x0801d0aa
 8017c30:	0801d0bb 	.word	0x0801d0bb

08017c34 <iprintf>:
 8017c34:	b40f      	push	{r0, r1, r2, r3}
 8017c36:	4b0a      	ldr	r3, [pc, #40]	; (8017c60 <iprintf+0x2c>)
 8017c38:	b513      	push	{r0, r1, r4, lr}
 8017c3a:	681c      	ldr	r4, [r3, #0]
 8017c3c:	b124      	cbz	r4, 8017c48 <iprintf+0x14>
 8017c3e:	69a3      	ldr	r3, [r4, #24]
 8017c40:	b913      	cbnz	r3, 8017c48 <iprintf+0x14>
 8017c42:	4620      	mov	r0, r4
 8017c44:	f000 ff34 	bl	8018ab0 <__sinit>
 8017c48:	ab05      	add	r3, sp, #20
 8017c4a:	9a04      	ldr	r2, [sp, #16]
 8017c4c:	68a1      	ldr	r1, [r4, #8]
 8017c4e:	9301      	str	r3, [sp, #4]
 8017c50:	4620      	mov	r0, r4
 8017c52:	f001 fd99 	bl	8019788 <_vfiprintf_r>
 8017c56:	b002      	add	sp, #8
 8017c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017c5c:	b004      	add	sp, #16
 8017c5e:	4770      	bx	lr
 8017c60:	200013cc 	.word	0x200013cc

08017c64 <sniprintf>:
 8017c64:	b40c      	push	{r2, r3}
 8017c66:	b530      	push	{r4, r5, lr}
 8017c68:	4b17      	ldr	r3, [pc, #92]	; (8017cc8 <sniprintf+0x64>)
 8017c6a:	1e0c      	subs	r4, r1, #0
 8017c6c:	681d      	ldr	r5, [r3, #0]
 8017c6e:	b09d      	sub	sp, #116	; 0x74
 8017c70:	da08      	bge.n	8017c84 <sniprintf+0x20>
 8017c72:	238b      	movs	r3, #139	; 0x8b
 8017c74:	602b      	str	r3, [r5, #0]
 8017c76:	f04f 30ff 	mov.w	r0, #4294967295
 8017c7a:	b01d      	add	sp, #116	; 0x74
 8017c7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017c80:	b002      	add	sp, #8
 8017c82:	4770      	bx	lr
 8017c84:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017c88:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017c8c:	bf14      	ite	ne
 8017c8e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017c92:	4623      	moveq	r3, r4
 8017c94:	9304      	str	r3, [sp, #16]
 8017c96:	9307      	str	r3, [sp, #28]
 8017c98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017c9c:	9002      	str	r0, [sp, #8]
 8017c9e:	9006      	str	r0, [sp, #24]
 8017ca0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017ca4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017ca6:	ab21      	add	r3, sp, #132	; 0x84
 8017ca8:	a902      	add	r1, sp, #8
 8017caa:	4628      	mov	r0, r5
 8017cac:	9301      	str	r3, [sp, #4]
 8017cae:	f001 fc41 	bl	8019534 <_svfiprintf_r>
 8017cb2:	1c43      	adds	r3, r0, #1
 8017cb4:	bfbc      	itt	lt
 8017cb6:	238b      	movlt	r3, #139	; 0x8b
 8017cb8:	602b      	strlt	r3, [r5, #0]
 8017cba:	2c00      	cmp	r4, #0
 8017cbc:	d0dd      	beq.n	8017c7a <sniprintf+0x16>
 8017cbe:	9b02      	ldr	r3, [sp, #8]
 8017cc0:	2200      	movs	r2, #0
 8017cc2:	701a      	strb	r2, [r3, #0]
 8017cc4:	e7d9      	b.n	8017c7a <sniprintf+0x16>
 8017cc6:	bf00      	nop
 8017cc8:	200013cc 	.word	0x200013cc

08017ccc <siprintf>:
 8017ccc:	b40e      	push	{r1, r2, r3}
 8017cce:	b500      	push	{lr}
 8017cd0:	b09c      	sub	sp, #112	; 0x70
 8017cd2:	ab1d      	add	r3, sp, #116	; 0x74
 8017cd4:	9002      	str	r0, [sp, #8]
 8017cd6:	9006      	str	r0, [sp, #24]
 8017cd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017cdc:	4809      	ldr	r0, [pc, #36]	; (8017d04 <siprintf+0x38>)
 8017cde:	9107      	str	r1, [sp, #28]
 8017ce0:	9104      	str	r1, [sp, #16]
 8017ce2:	4909      	ldr	r1, [pc, #36]	; (8017d08 <siprintf+0x3c>)
 8017ce4:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ce8:	9105      	str	r1, [sp, #20]
 8017cea:	6800      	ldr	r0, [r0, #0]
 8017cec:	9301      	str	r3, [sp, #4]
 8017cee:	a902      	add	r1, sp, #8
 8017cf0:	f001 fc20 	bl	8019534 <_svfiprintf_r>
 8017cf4:	9b02      	ldr	r3, [sp, #8]
 8017cf6:	2200      	movs	r2, #0
 8017cf8:	701a      	strb	r2, [r3, #0]
 8017cfa:	b01c      	add	sp, #112	; 0x70
 8017cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8017d00:	b003      	add	sp, #12
 8017d02:	4770      	bx	lr
 8017d04:	200013cc 	.word	0x200013cc
 8017d08:	ffff0208 	.word	0xffff0208

08017d0c <quorem>:
 8017d0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d10:	6903      	ldr	r3, [r0, #16]
 8017d12:	690c      	ldr	r4, [r1, #16]
 8017d14:	42a3      	cmp	r3, r4
 8017d16:	4607      	mov	r7, r0
 8017d18:	f2c0 8081 	blt.w	8017e1e <quorem+0x112>
 8017d1c:	3c01      	subs	r4, #1
 8017d1e:	f101 0814 	add.w	r8, r1, #20
 8017d22:	f100 0514 	add.w	r5, r0, #20
 8017d26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017d2a:	9301      	str	r3, [sp, #4]
 8017d2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017d30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017d34:	3301      	adds	r3, #1
 8017d36:	429a      	cmp	r2, r3
 8017d38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017d3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017d40:	fbb2 f6f3 	udiv	r6, r2, r3
 8017d44:	d331      	bcc.n	8017daa <quorem+0x9e>
 8017d46:	f04f 0e00 	mov.w	lr, #0
 8017d4a:	4640      	mov	r0, r8
 8017d4c:	46ac      	mov	ip, r5
 8017d4e:	46f2      	mov	sl, lr
 8017d50:	f850 2b04 	ldr.w	r2, [r0], #4
 8017d54:	b293      	uxth	r3, r2
 8017d56:	fb06 e303 	mla	r3, r6, r3, lr
 8017d5a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8017d5e:	b29b      	uxth	r3, r3
 8017d60:	ebaa 0303 	sub.w	r3, sl, r3
 8017d64:	0c12      	lsrs	r2, r2, #16
 8017d66:	f8dc a000 	ldr.w	sl, [ip]
 8017d6a:	fb06 e202 	mla	r2, r6, r2, lr
 8017d6e:	fa13 f38a 	uxtah	r3, r3, sl
 8017d72:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017d76:	fa1f fa82 	uxth.w	sl, r2
 8017d7a:	f8dc 2000 	ldr.w	r2, [ip]
 8017d7e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8017d82:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017d86:	b29b      	uxth	r3, r3
 8017d88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017d8c:	4581      	cmp	r9, r0
 8017d8e:	f84c 3b04 	str.w	r3, [ip], #4
 8017d92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017d96:	d2db      	bcs.n	8017d50 <quorem+0x44>
 8017d98:	f855 300b 	ldr.w	r3, [r5, fp]
 8017d9c:	b92b      	cbnz	r3, 8017daa <quorem+0x9e>
 8017d9e:	9b01      	ldr	r3, [sp, #4]
 8017da0:	3b04      	subs	r3, #4
 8017da2:	429d      	cmp	r5, r3
 8017da4:	461a      	mov	r2, r3
 8017da6:	d32e      	bcc.n	8017e06 <quorem+0xfa>
 8017da8:	613c      	str	r4, [r7, #16]
 8017daa:	4638      	mov	r0, r7
 8017dac:	f001 f9ac 	bl	8019108 <__mcmp>
 8017db0:	2800      	cmp	r0, #0
 8017db2:	db24      	blt.n	8017dfe <quorem+0xf2>
 8017db4:	3601      	adds	r6, #1
 8017db6:	4628      	mov	r0, r5
 8017db8:	f04f 0c00 	mov.w	ip, #0
 8017dbc:	f858 2b04 	ldr.w	r2, [r8], #4
 8017dc0:	f8d0 e000 	ldr.w	lr, [r0]
 8017dc4:	b293      	uxth	r3, r2
 8017dc6:	ebac 0303 	sub.w	r3, ip, r3
 8017dca:	0c12      	lsrs	r2, r2, #16
 8017dcc:	fa13 f38e 	uxtah	r3, r3, lr
 8017dd0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017dd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017dd8:	b29b      	uxth	r3, r3
 8017dda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017dde:	45c1      	cmp	r9, r8
 8017de0:	f840 3b04 	str.w	r3, [r0], #4
 8017de4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017de8:	d2e8      	bcs.n	8017dbc <quorem+0xb0>
 8017dea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017dee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017df2:	b922      	cbnz	r2, 8017dfe <quorem+0xf2>
 8017df4:	3b04      	subs	r3, #4
 8017df6:	429d      	cmp	r5, r3
 8017df8:	461a      	mov	r2, r3
 8017dfa:	d30a      	bcc.n	8017e12 <quorem+0x106>
 8017dfc:	613c      	str	r4, [r7, #16]
 8017dfe:	4630      	mov	r0, r6
 8017e00:	b003      	add	sp, #12
 8017e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e06:	6812      	ldr	r2, [r2, #0]
 8017e08:	3b04      	subs	r3, #4
 8017e0a:	2a00      	cmp	r2, #0
 8017e0c:	d1cc      	bne.n	8017da8 <quorem+0x9c>
 8017e0e:	3c01      	subs	r4, #1
 8017e10:	e7c7      	b.n	8017da2 <quorem+0x96>
 8017e12:	6812      	ldr	r2, [r2, #0]
 8017e14:	3b04      	subs	r3, #4
 8017e16:	2a00      	cmp	r2, #0
 8017e18:	d1f0      	bne.n	8017dfc <quorem+0xf0>
 8017e1a:	3c01      	subs	r4, #1
 8017e1c:	e7eb      	b.n	8017df6 <quorem+0xea>
 8017e1e:	2000      	movs	r0, #0
 8017e20:	e7ee      	b.n	8017e00 <quorem+0xf4>
 8017e22:	0000      	movs	r0, r0
 8017e24:	0000      	movs	r0, r0
	...

08017e28 <_dtoa_r>:
 8017e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e2c:	ed2d 8b02 	vpush	{d8}
 8017e30:	ec57 6b10 	vmov	r6, r7, d0
 8017e34:	b095      	sub	sp, #84	; 0x54
 8017e36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017e38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017e3c:	9105      	str	r1, [sp, #20]
 8017e3e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8017e42:	4604      	mov	r4, r0
 8017e44:	9209      	str	r2, [sp, #36]	; 0x24
 8017e46:	930f      	str	r3, [sp, #60]	; 0x3c
 8017e48:	b975      	cbnz	r5, 8017e68 <_dtoa_r+0x40>
 8017e4a:	2010      	movs	r0, #16
 8017e4c:	f000 fed6 	bl	8018bfc <malloc>
 8017e50:	4602      	mov	r2, r0
 8017e52:	6260      	str	r0, [r4, #36]	; 0x24
 8017e54:	b920      	cbnz	r0, 8017e60 <_dtoa_r+0x38>
 8017e56:	4bb2      	ldr	r3, [pc, #712]	; (8018120 <_dtoa_r+0x2f8>)
 8017e58:	21ea      	movs	r1, #234	; 0xea
 8017e5a:	48b2      	ldr	r0, [pc, #712]	; (8018124 <_dtoa_r+0x2fc>)
 8017e5c:	f001 feea 	bl	8019c34 <__assert_func>
 8017e60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017e64:	6005      	str	r5, [r0, #0]
 8017e66:	60c5      	str	r5, [r0, #12]
 8017e68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017e6a:	6819      	ldr	r1, [r3, #0]
 8017e6c:	b151      	cbz	r1, 8017e84 <_dtoa_r+0x5c>
 8017e6e:	685a      	ldr	r2, [r3, #4]
 8017e70:	604a      	str	r2, [r1, #4]
 8017e72:	2301      	movs	r3, #1
 8017e74:	4093      	lsls	r3, r2
 8017e76:	608b      	str	r3, [r1, #8]
 8017e78:	4620      	mov	r0, r4
 8017e7a:	f000 ff07 	bl	8018c8c <_Bfree>
 8017e7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017e80:	2200      	movs	r2, #0
 8017e82:	601a      	str	r2, [r3, #0]
 8017e84:	1e3b      	subs	r3, r7, #0
 8017e86:	bfb9      	ittee	lt
 8017e88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017e8c:	9303      	strlt	r3, [sp, #12]
 8017e8e:	2300      	movge	r3, #0
 8017e90:	f8c8 3000 	strge.w	r3, [r8]
 8017e94:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8017e98:	4ba3      	ldr	r3, [pc, #652]	; (8018128 <_dtoa_r+0x300>)
 8017e9a:	bfbc      	itt	lt
 8017e9c:	2201      	movlt	r2, #1
 8017e9e:	f8c8 2000 	strlt.w	r2, [r8]
 8017ea2:	ea33 0309 	bics.w	r3, r3, r9
 8017ea6:	d11b      	bne.n	8017ee0 <_dtoa_r+0xb8>
 8017ea8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017eaa:	f242 730f 	movw	r3, #9999	; 0x270f
 8017eae:	6013      	str	r3, [r2, #0]
 8017eb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017eb4:	4333      	orrs	r3, r6
 8017eb6:	f000 857a 	beq.w	80189ae <_dtoa_r+0xb86>
 8017eba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017ebc:	b963      	cbnz	r3, 8017ed8 <_dtoa_r+0xb0>
 8017ebe:	4b9b      	ldr	r3, [pc, #620]	; (801812c <_dtoa_r+0x304>)
 8017ec0:	e024      	b.n	8017f0c <_dtoa_r+0xe4>
 8017ec2:	4b9b      	ldr	r3, [pc, #620]	; (8018130 <_dtoa_r+0x308>)
 8017ec4:	9300      	str	r3, [sp, #0]
 8017ec6:	3308      	adds	r3, #8
 8017ec8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017eca:	6013      	str	r3, [r2, #0]
 8017ecc:	9800      	ldr	r0, [sp, #0]
 8017ece:	b015      	add	sp, #84	; 0x54
 8017ed0:	ecbd 8b02 	vpop	{d8}
 8017ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ed8:	4b94      	ldr	r3, [pc, #592]	; (801812c <_dtoa_r+0x304>)
 8017eda:	9300      	str	r3, [sp, #0]
 8017edc:	3303      	adds	r3, #3
 8017ede:	e7f3      	b.n	8017ec8 <_dtoa_r+0xa0>
 8017ee0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017ee4:	2200      	movs	r2, #0
 8017ee6:	ec51 0b17 	vmov	r0, r1, d7
 8017eea:	2300      	movs	r3, #0
 8017eec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8017ef0:	f7e8 fdf2 	bl	8000ad8 <__aeabi_dcmpeq>
 8017ef4:	4680      	mov	r8, r0
 8017ef6:	b158      	cbz	r0, 8017f10 <_dtoa_r+0xe8>
 8017ef8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017efa:	2301      	movs	r3, #1
 8017efc:	6013      	str	r3, [r2, #0]
 8017efe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	f000 8551 	beq.w	80189a8 <_dtoa_r+0xb80>
 8017f06:	488b      	ldr	r0, [pc, #556]	; (8018134 <_dtoa_r+0x30c>)
 8017f08:	6018      	str	r0, [r3, #0]
 8017f0a:	1e43      	subs	r3, r0, #1
 8017f0c:	9300      	str	r3, [sp, #0]
 8017f0e:	e7dd      	b.n	8017ecc <_dtoa_r+0xa4>
 8017f10:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8017f14:	aa12      	add	r2, sp, #72	; 0x48
 8017f16:	a913      	add	r1, sp, #76	; 0x4c
 8017f18:	4620      	mov	r0, r4
 8017f1a:	f001 f999 	bl	8019250 <__d2b>
 8017f1e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017f22:	4683      	mov	fp, r0
 8017f24:	2d00      	cmp	r5, #0
 8017f26:	d07c      	beq.n	8018022 <_dtoa_r+0x1fa>
 8017f28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017f2a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8017f2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017f32:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8017f36:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8017f3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8017f3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017f42:	4b7d      	ldr	r3, [pc, #500]	; (8018138 <_dtoa_r+0x310>)
 8017f44:	2200      	movs	r2, #0
 8017f46:	4630      	mov	r0, r6
 8017f48:	4639      	mov	r1, r7
 8017f4a:	f7e8 f9a5 	bl	8000298 <__aeabi_dsub>
 8017f4e:	a36e      	add	r3, pc, #440	; (adr r3, 8018108 <_dtoa_r+0x2e0>)
 8017f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f54:	f7e8 fb58 	bl	8000608 <__aeabi_dmul>
 8017f58:	a36d      	add	r3, pc, #436	; (adr r3, 8018110 <_dtoa_r+0x2e8>)
 8017f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f5e:	f7e8 f99d 	bl	800029c <__adddf3>
 8017f62:	4606      	mov	r6, r0
 8017f64:	4628      	mov	r0, r5
 8017f66:	460f      	mov	r7, r1
 8017f68:	f7e8 fae4 	bl	8000534 <__aeabi_i2d>
 8017f6c:	a36a      	add	r3, pc, #424	; (adr r3, 8018118 <_dtoa_r+0x2f0>)
 8017f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f72:	f7e8 fb49 	bl	8000608 <__aeabi_dmul>
 8017f76:	4602      	mov	r2, r0
 8017f78:	460b      	mov	r3, r1
 8017f7a:	4630      	mov	r0, r6
 8017f7c:	4639      	mov	r1, r7
 8017f7e:	f7e8 f98d 	bl	800029c <__adddf3>
 8017f82:	4606      	mov	r6, r0
 8017f84:	460f      	mov	r7, r1
 8017f86:	f7e8 fdef 	bl	8000b68 <__aeabi_d2iz>
 8017f8a:	2200      	movs	r2, #0
 8017f8c:	4682      	mov	sl, r0
 8017f8e:	2300      	movs	r3, #0
 8017f90:	4630      	mov	r0, r6
 8017f92:	4639      	mov	r1, r7
 8017f94:	f7e8 fdaa 	bl	8000aec <__aeabi_dcmplt>
 8017f98:	b148      	cbz	r0, 8017fae <_dtoa_r+0x186>
 8017f9a:	4650      	mov	r0, sl
 8017f9c:	f7e8 faca 	bl	8000534 <__aeabi_i2d>
 8017fa0:	4632      	mov	r2, r6
 8017fa2:	463b      	mov	r3, r7
 8017fa4:	f7e8 fd98 	bl	8000ad8 <__aeabi_dcmpeq>
 8017fa8:	b908      	cbnz	r0, 8017fae <_dtoa_r+0x186>
 8017faa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017fae:	f1ba 0f16 	cmp.w	sl, #22
 8017fb2:	d854      	bhi.n	801805e <_dtoa_r+0x236>
 8017fb4:	4b61      	ldr	r3, [pc, #388]	; (801813c <_dtoa_r+0x314>)
 8017fb6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017fc2:	f7e8 fd93 	bl	8000aec <__aeabi_dcmplt>
 8017fc6:	2800      	cmp	r0, #0
 8017fc8:	d04b      	beq.n	8018062 <_dtoa_r+0x23a>
 8017fca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017fce:	2300      	movs	r3, #0
 8017fd0:	930e      	str	r3, [sp, #56]	; 0x38
 8017fd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017fd4:	1b5d      	subs	r5, r3, r5
 8017fd6:	1e6b      	subs	r3, r5, #1
 8017fd8:	9304      	str	r3, [sp, #16]
 8017fda:	bf43      	ittte	mi
 8017fdc:	2300      	movmi	r3, #0
 8017fde:	f1c5 0801 	rsbmi	r8, r5, #1
 8017fe2:	9304      	strmi	r3, [sp, #16]
 8017fe4:	f04f 0800 	movpl.w	r8, #0
 8017fe8:	f1ba 0f00 	cmp.w	sl, #0
 8017fec:	db3b      	blt.n	8018066 <_dtoa_r+0x23e>
 8017fee:	9b04      	ldr	r3, [sp, #16]
 8017ff0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8017ff4:	4453      	add	r3, sl
 8017ff6:	9304      	str	r3, [sp, #16]
 8017ff8:	2300      	movs	r3, #0
 8017ffa:	9306      	str	r3, [sp, #24]
 8017ffc:	9b05      	ldr	r3, [sp, #20]
 8017ffe:	2b09      	cmp	r3, #9
 8018000:	d869      	bhi.n	80180d6 <_dtoa_r+0x2ae>
 8018002:	2b05      	cmp	r3, #5
 8018004:	bfc4      	itt	gt
 8018006:	3b04      	subgt	r3, #4
 8018008:	9305      	strgt	r3, [sp, #20]
 801800a:	9b05      	ldr	r3, [sp, #20]
 801800c:	f1a3 0302 	sub.w	r3, r3, #2
 8018010:	bfcc      	ite	gt
 8018012:	2500      	movgt	r5, #0
 8018014:	2501      	movle	r5, #1
 8018016:	2b03      	cmp	r3, #3
 8018018:	d869      	bhi.n	80180ee <_dtoa_r+0x2c6>
 801801a:	e8df f003 	tbb	[pc, r3]
 801801e:	4e2c      	.short	0x4e2c
 8018020:	5a4c      	.short	0x5a4c
 8018022:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8018026:	441d      	add	r5, r3
 8018028:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801802c:	2b20      	cmp	r3, #32
 801802e:	bfc1      	itttt	gt
 8018030:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8018034:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8018038:	fa09 f303 	lslgt.w	r3, r9, r3
 801803c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8018040:	bfda      	itte	le
 8018042:	f1c3 0320 	rsble	r3, r3, #32
 8018046:	fa06 f003 	lslle.w	r0, r6, r3
 801804a:	4318      	orrgt	r0, r3
 801804c:	f7e8 fa62 	bl	8000514 <__aeabi_ui2d>
 8018050:	2301      	movs	r3, #1
 8018052:	4606      	mov	r6, r0
 8018054:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8018058:	3d01      	subs	r5, #1
 801805a:	9310      	str	r3, [sp, #64]	; 0x40
 801805c:	e771      	b.n	8017f42 <_dtoa_r+0x11a>
 801805e:	2301      	movs	r3, #1
 8018060:	e7b6      	b.n	8017fd0 <_dtoa_r+0x1a8>
 8018062:	900e      	str	r0, [sp, #56]	; 0x38
 8018064:	e7b5      	b.n	8017fd2 <_dtoa_r+0x1aa>
 8018066:	f1ca 0300 	rsb	r3, sl, #0
 801806a:	9306      	str	r3, [sp, #24]
 801806c:	2300      	movs	r3, #0
 801806e:	eba8 080a 	sub.w	r8, r8, sl
 8018072:	930d      	str	r3, [sp, #52]	; 0x34
 8018074:	e7c2      	b.n	8017ffc <_dtoa_r+0x1d4>
 8018076:	2300      	movs	r3, #0
 8018078:	9308      	str	r3, [sp, #32]
 801807a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801807c:	2b00      	cmp	r3, #0
 801807e:	dc39      	bgt.n	80180f4 <_dtoa_r+0x2cc>
 8018080:	f04f 0901 	mov.w	r9, #1
 8018084:	f8cd 9004 	str.w	r9, [sp, #4]
 8018088:	464b      	mov	r3, r9
 801808a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801808e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018090:	2200      	movs	r2, #0
 8018092:	6042      	str	r2, [r0, #4]
 8018094:	2204      	movs	r2, #4
 8018096:	f102 0614 	add.w	r6, r2, #20
 801809a:	429e      	cmp	r6, r3
 801809c:	6841      	ldr	r1, [r0, #4]
 801809e:	d92f      	bls.n	8018100 <_dtoa_r+0x2d8>
 80180a0:	4620      	mov	r0, r4
 80180a2:	f000 fdb3 	bl	8018c0c <_Balloc>
 80180a6:	9000      	str	r0, [sp, #0]
 80180a8:	2800      	cmp	r0, #0
 80180aa:	d14b      	bne.n	8018144 <_dtoa_r+0x31c>
 80180ac:	4b24      	ldr	r3, [pc, #144]	; (8018140 <_dtoa_r+0x318>)
 80180ae:	4602      	mov	r2, r0
 80180b0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80180b4:	e6d1      	b.n	8017e5a <_dtoa_r+0x32>
 80180b6:	2301      	movs	r3, #1
 80180b8:	e7de      	b.n	8018078 <_dtoa_r+0x250>
 80180ba:	2300      	movs	r3, #0
 80180bc:	9308      	str	r3, [sp, #32]
 80180be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180c0:	eb0a 0903 	add.w	r9, sl, r3
 80180c4:	f109 0301 	add.w	r3, r9, #1
 80180c8:	2b01      	cmp	r3, #1
 80180ca:	9301      	str	r3, [sp, #4]
 80180cc:	bfb8      	it	lt
 80180ce:	2301      	movlt	r3, #1
 80180d0:	e7dd      	b.n	801808e <_dtoa_r+0x266>
 80180d2:	2301      	movs	r3, #1
 80180d4:	e7f2      	b.n	80180bc <_dtoa_r+0x294>
 80180d6:	2501      	movs	r5, #1
 80180d8:	2300      	movs	r3, #0
 80180da:	9305      	str	r3, [sp, #20]
 80180dc:	9508      	str	r5, [sp, #32]
 80180de:	f04f 39ff 	mov.w	r9, #4294967295
 80180e2:	2200      	movs	r2, #0
 80180e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80180e8:	2312      	movs	r3, #18
 80180ea:	9209      	str	r2, [sp, #36]	; 0x24
 80180ec:	e7cf      	b.n	801808e <_dtoa_r+0x266>
 80180ee:	2301      	movs	r3, #1
 80180f0:	9308      	str	r3, [sp, #32]
 80180f2:	e7f4      	b.n	80180de <_dtoa_r+0x2b6>
 80180f4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80180f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80180fc:	464b      	mov	r3, r9
 80180fe:	e7c6      	b.n	801808e <_dtoa_r+0x266>
 8018100:	3101      	adds	r1, #1
 8018102:	6041      	str	r1, [r0, #4]
 8018104:	0052      	lsls	r2, r2, #1
 8018106:	e7c6      	b.n	8018096 <_dtoa_r+0x26e>
 8018108:	636f4361 	.word	0x636f4361
 801810c:	3fd287a7 	.word	0x3fd287a7
 8018110:	8b60c8b3 	.word	0x8b60c8b3
 8018114:	3fc68a28 	.word	0x3fc68a28
 8018118:	509f79fb 	.word	0x509f79fb
 801811c:	3fd34413 	.word	0x3fd34413
 8018120:	0801d0d9 	.word	0x0801d0d9
 8018124:	0801d0f0 	.word	0x0801d0f0
 8018128:	7ff00000 	.word	0x7ff00000
 801812c:	0801d0d5 	.word	0x0801d0d5
 8018130:	0801d0cc 	.word	0x0801d0cc
 8018134:	0801d0a9 	.word	0x0801d0a9
 8018138:	3ff80000 	.word	0x3ff80000
 801813c:	0801d248 	.word	0x0801d248
 8018140:	0801d14f 	.word	0x0801d14f
 8018144:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018146:	9a00      	ldr	r2, [sp, #0]
 8018148:	601a      	str	r2, [r3, #0]
 801814a:	9b01      	ldr	r3, [sp, #4]
 801814c:	2b0e      	cmp	r3, #14
 801814e:	f200 80ad 	bhi.w	80182ac <_dtoa_r+0x484>
 8018152:	2d00      	cmp	r5, #0
 8018154:	f000 80aa 	beq.w	80182ac <_dtoa_r+0x484>
 8018158:	f1ba 0f00 	cmp.w	sl, #0
 801815c:	dd36      	ble.n	80181cc <_dtoa_r+0x3a4>
 801815e:	4ac3      	ldr	r2, [pc, #780]	; (801846c <_dtoa_r+0x644>)
 8018160:	f00a 030f 	and.w	r3, sl, #15
 8018164:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018168:	ed93 7b00 	vldr	d7, [r3]
 801816c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8018170:	ea4f 172a 	mov.w	r7, sl, asr #4
 8018174:	eeb0 8a47 	vmov.f32	s16, s14
 8018178:	eef0 8a67 	vmov.f32	s17, s15
 801817c:	d016      	beq.n	80181ac <_dtoa_r+0x384>
 801817e:	4bbc      	ldr	r3, [pc, #752]	; (8018470 <_dtoa_r+0x648>)
 8018180:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018184:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018188:	f7e8 fb68 	bl	800085c <__aeabi_ddiv>
 801818c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018190:	f007 070f 	and.w	r7, r7, #15
 8018194:	2503      	movs	r5, #3
 8018196:	4eb6      	ldr	r6, [pc, #728]	; (8018470 <_dtoa_r+0x648>)
 8018198:	b957      	cbnz	r7, 80181b0 <_dtoa_r+0x388>
 801819a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801819e:	ec53 2b18 	vmov	r2, r3, d8
 80181a2:	f7e8 fb5b 	bl	800085c <__aeabi_ddiv>
 80181a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80181aa:	e029      	b.n	8018200 <_dtoa_r+0x3d8>
 80181ac:	2502      	movs	r5, #2
 80181ae:	e7f2      	b.n	8018196 <_dtoa_r+0x36e>
 80181b0:	07f9      	lsls	r1, r7, #31
 80181b2:	d508      	bpl.n	80181c6 <_dtoa_r+0x39e>
 80181b4:	ec51 0b18 	vmov	r0, r1, d8
 80181b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80181bc:	f7e8 fa24 	bl	8000608 <__aeabi_dmul>
 80181c0:	ec41 0b18 	vmov	d8, r0, r1
 80181c4:	3501      	adds	r5, #1
 80181c6:	107f      	asrs	r7, r7, #1
 80181c8:	3608      	adds	r6, #8
 80181ca:	e7e5      	b.n	8018198 <_dtoa_r+0x370>
 80181cc:	f000 80a6 	beq.w	801831c <_dtoa_r+0x4f4>
 80181d0:	f1ca 0600 	rsb	r6, sl, #0
 80181d4:	4ba5      	ldr	r3, [pc, #660]	; (801846c <_dtoa_r+0x644>)
 80181d6:	4fa6      	ldr	r7, [pc, #664]	; (8018470 <_dtoa_r+0x648>)
 80181d8:	f006 020f 	and.w	r2, r6, #15
 80181dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80181e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80181e8:	f7e8 fa0e 	bl	8000608 <__aeabi_dmul>
 80181ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80181f0:	1136      	asrs	r6, r6, #4
 80181f2:	2300      	movs	r3, #0
 80181f4:	2502      	movs	r5, #2
 80181f6:	2e00      	cmp	r6, #0
 80181f8:	f040 8085 	bne.w	8018306 <_dtoa_r+0x4de>
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	d1d2      	bne.n	80181a6 <_dtoa_r+0x37e>
 8018200:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018202:	2b00      	cmp	r3, #0
 8018204:	f000 808c 	beq.w	8018320 <_dtoa_r+0x4f8>
 8018208:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801820c:	4b99      	ldr	r3, [pc, #612]	; (8018474 <_dtoa_r+0x64c>)
 801820e:	2200      	movs	r2, #0
 8018210:	4630      	mov	r0, r6
 8018212:	4639      	mov	r1, r7
 8018214:	f7e8 fc6a 	bl	8000aec <__aeabi_dcmplt>
 8018218:	2800      	cmp	r0, #0
 801821a:	f000 8081 	beq.w	8018320 <_dtoa_r+0x4f8>
 801821e:	9b01      	ldr	r3, [sp, #4]
 8018220:	2b00      	cmp	r3, #0
 8018222:	d07d      	beq.n	8018320 <_dtoa_r+0x4f8>
 8018224:	f1b9 0f00 	cmp.w	r9, #0
 8018228:	dd3c      	ble.n	80182a4 <_dtoa_r+0x47c>
 801822a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801822e:	9307      	str	r3, [sp, #28]
 8018230:	2200      	movs	r2, #0
 8018232:	4b91      	ldr	r3, [pc, #580]	; (8018478 <_dtoa_r+0x650>)
 8018234:	4630      	mov	r0, r6
 8018236:	4639      	mov	r1, r7
 8018238:	f7e8 f9e6 	bl	8000608 <__aeabi_dmul>
 801823c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018240:	3501      	adds	r5, #1
 8018242:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8018246:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801824a:	4628      	mov	r0, r5
 801824c:	f7e8 f972 	bl	8000534 <__aeabi_i2d>
 8018250:	4632      	mov	r2, r6
 8018252:	463b      	mov	r3, r7
 8018254:	f7e8 f9d8 	bl	8000608 <__aeabi_dmul>
 8018258:	4b88      	ldr	r3, [pc, #544]	; (801847c <_dtoa_r+0x654>)
 801825a:	2200      	movs	r2, #0
 801825c:	f7e8 f81e 	bl	800029c <__adddf3>
 8018260:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8018264:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018268:	9303      	str	r3, [sp, #12]
 801826a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801826c:	2b00      	cmp	r3, #0
 801826e:	d15c      	bne.n	801832a <_dtoa_r+0x502>
 8018270:	4b83      	ldr	r3, [pc, #524]	; (8018480 <_dtoa_r+0x658>)
 8018272:	2200      	movs	r2, #0
 8018274:	4630      	mov	r0, r6
 8018276:	4639      	mov	r1, r7
 8018278:	f7e8 f80e 	bl	8000298 <__aeabi_dsub>
 801827c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018280:	4606      	mov	r6, r0
 8018282:	460f      	mov	r7, r1
 8018284:	f7e8 fc50 	bl	8000b28 <__aeabi_dcmpgt>
 8018288:	2800      	cmp	r0, #0
 801828a:	f040 8296 	bne.w	80187ba <_dtoa_r+0x992>
 801828e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8018292:	4630      	mov	r0, r6
 8018294:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018298:	4639      	mov	r1, r7
 801829a:	f7e8 fc27 	bl	8000aec <__aeabi_dcmplt>
 801829e:	2800      	cmp	r0, #0
 80182a0:	f040 8288 	bne.w	80187b4 <_dtoa_r+0x98c>
 80182a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80182a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80182ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	f2c0 8158 	blt.w	8018564 <_dtoa_r+0x73c>
 80182b4:	f1ba 0f0e 	cmp.w	sl, #14
 80182b8:	f300 8154 	bgt.w	8018564 <_dtoa_r+0x73c>
 80182bc:	4b6b      	ldr	r3, [pc, #428]	; (801846c <_dtoa_r+0x644>)
 80182be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80182c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80182c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	f280 80e3 	bge.w	8018494 <_dtoa_r+0x66c>
 80182ce:	9b01      	ldr	r3, [sp, #4]
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	f300 80df 	bgt.w	8018494 <_dtoa_r+0x66c>
 80182d6:	f040 826d 	bne.w	80187b4 <_dtoa_r+0x98c>
 80182da:	4b69      	ldr	r3, [pc, #420]	; (8018480 <_dtoa_r+0x658>)
 80182dc:	2200      	movs	r2, #0
 80182de:	4640      	mov	r0, r8
 80182e0:	4649      	mov	r1, r9
 80182e2:	f7e8 f991 	bl	8000608 <__aeabi_dmul>
 80182e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80182ea:	f7e8 fc13 	bl	8000b14 <__aeabi_dcmpge>
 80182ee:	9e01      	ldr	r6, [sp, #4]
 80182f0:	4637      	mov	r7, r6
 80182f2:	2800      	cmp	r0, #0
 80182f4:	f040 8243 	bne.w	801877e <_dtoa_r+0x956>
 80182f8:	9d00      	ldr	r5, [sp, #0]
 80182fa:	2331      	movs	r3, #49	; 0x31
 80182fc:	f805 3b01 	strb.w	r3, [r5], #1
 8018300:	f10a 0a01 	add.w	sl, sl, #1
 8018304:	e23f      	b.n	8018786 <_dtoa_r+0x95e>
 8018306:	07f2      	lsls	r2, r6, #31
 8018308:	d505      	bpl.n	8018316 <_dtoa_r+0x4ee>
 801830a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801830e:	f7e8 f97b 	bl	8000608 <__aeabi_dmul>
 8018312:	3501      	adds	r5, #1
 8018314:	2301      	movs	r3, #1
 8018316:	1076      	asrs	r6, r6, #1
 8018318:	3708      	adds	r7, #8
 801831a:	e76c      	b.n	80181f6 <_dtoa_r+0x3ce>
 801831c:	2502      	movs	r5, #2
 801831e:	e76f      	b.n	8018200 <_dtoa_r+0x3d8>
 8018320:	9b01      	ldr	r3, [sp, #4]
 8018322:	f8cd a01c 	str.w	sl, [sp, #28]
 8018326:	930c      	str	r3, [sp, #48]	; 0x30
 8018328:	e78d      	b.n	8018246 <_dtoa_r+0x41e>
 801832a:	9900      	ldr	r1, [sp, #0]
 801832c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801832e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018330:	4b4e      	ldr	r3, [pc, #312]	; (801846c <_dtoa_r+0x644>)
 8018332:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018336:	4401      	add	r1, r0
 8018338:	9102      	str	r1, [sp, #8]
 801833a:	9908      	ldr	r1, [sp, #32]
 801833c:	eeb0 8a47 	vmov.f32	s16, s14
 8018340:	eef0 8a67 	vmov.f32	s17, s15
 8018344:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018348:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801834c:	2900      	cmp	r1, #0
 801834e:	d045      	beq.n	80183dc <_dtoa_r+0x5b4>
 8018350:	494c      	ldr	r1, [pc, #304]	; (8018484 <_dtoa_r+0x65c>)
 8018352:	2000      	movs	r0, #0
 8018354:	f7e8 fa82 	bl	800085c <__aeabi_ddiv>
 8018358:	ec53 2b18 	vmov	r2, r3, d8
 801835c:	f7e7 ff9c 	bl	8000298 <__aeabi_dsub>
 8018360:	9d00      	ldr	r5, [sp, #0]
 8018362:	ec41 0b18 	vmov	d8, r0, r1
 8018366:	4639      	mov	r1, r7
 8018368:	4630      	mov	r0, r6
 801836a:	f7e8 fbfd 	bl	8000b68 <__aeabi_d2iz>
 801836e:	900c      	str	r0, [sp, #48]	; 0x30
 8018370:	f7e8 f8e0 	bl	8000534 <__aeabi_i2d>
 8018374:	4602      	mov	r2, r0
 8018376:	460b      	mov	r3, r1
 8018378:	4630      	mov	r0, r6
 801837a:	4639      	mov	r1, r7
 801837c:	f7e7 ff8c 	bl	8000298 <__aeabi_dsub>
 8018380:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018382:	3330      	adds	r3, #48	; 0x30
 8018384:	f805 3b01 	strb.w	r3, [r5], #1
 8018388:	ec53 2b18 	vmov	r2, r3, d8
 801838c:	4606      	mov	r6, r0
 801838e:	460f      	mov	r7, r1
 8018390:	f7e8 fbac 	bl	8000aec <__aeabi_dcmplt>
 8018394:	2800      	cmp	r0, #0
 8018396:	d165      	bne.n	8018464 <_dtoa_r+0x63c>
 8018398:	4632      	mov	r2, r6
 801839a:	463b      	mov	r3, r7
 801839c:	4935      	ldr	r1, [pc, #212]	; (8018474 <_dtoa_r+0x64c>)
 801839e:	2000      	movs	r0, #0
 80183a0:	f7e7 ff7a 	bl	8000298 <__aeabi_dsub>
 80183a4:	ec53 2b18 	vmov	r2, r3, d8
 80183a8:	f7e8 fba0 	bl	8000aec <__aeabi_dcmplt>
 80183ac:	2800      	cmp	r0, #0
 80183ae:	f040 80b9 	bne.w	8018524 <_dtoa_r+0x6fc>
 80183b2:	9b02      	ldr	r3, [sp, #8]
 80183b4:	429d      	cmp	r5, r3
 80183b6:	f43f af75 	beq.w	80182a4 <_dtoa_r+0x47c>
 80183ba:	4b2f      	ldr	r3, [pc, #188]	; (8018478 <_dtoa_r+0x650>)
 80183bc:	ec51 0b18 	vmov	r0, r1, d8
 80183c0:	2200      	movs	r2, #0
 80183c2:	f7e8 f921 	bl	8000608 <__aeabi_dmul>
 80183c6:	4b2c      	ldr	r3, [pc, #176]	; (8018478 <_dtoa_r+0x650>)
 80183c8:	ec41 0b18 	vmov	d8, r0, r1
 80183cc:	2200      	movs	r2, #0
 80183ce:	4630      	mov	r0, r6
 80183d0:	4639      	mov	r1, r7
 80183d2:	f7e8 f919 	bl	8000608 <__aeabi_dmul>
 80183d6:	4606      	mov	r6, r0
 80183d8:	460f      	mov	r7, r1
 80183da:	e7c4      	b.n	8018366 <_dtoa_r+0x53e>
 80183dc:	ec51 0b17 	vmov	r0, r1, d7
 80183e0:	f7e8 f912 	bl	8000608 <__aeabi_dmul>
 80183e4:	9b02      	ldr	r3, [sp, #8]
 80183e6:	9d00      	ldr	r5, [sp, #0]
 80183e8:	930c      	str	r3, [sp, #48]	; 0x30
 80183ea:	ec41 0b18 	vmov	d8, r0, r1
 80183ee:	4639      	mov	r1, r7
 80183f0:	4630      	mov	r0, r6
 80183f2:	f7e8 fbb9 	bl	8000b68 <__aeabi_d2iz>
 80183f6:	9011      	str	r0, [sp, #68]	; 0x44
 80183f8:	f7e8 f89c 	bl	8000534 <__aeabi_i2d>
 80183fc:	4602      	mov	r2, r0
 80183fe:	460b      	mov	r3, r1
 8018400:	4630      	mov	r0, r6
 8018402:	4639      	mov	r1, r7
 8018404:	f7e7 ff48 	bl	8000298 <__aeabi_dsub>
 8018408:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801840a:	3330      	adds	r3, #48	; 0x30
 801840c:	f805 3b01 	strb.w	r3, [r5], #1
 8018410:	9b02      	ldr	r3, [sp, #8]
 8018412:	429d      	cmp	r5, r3
 8018414:	4606      	mov	r6, r0
 8018416:	460f      	mov	r7, r1
 8018418:	f04f 0200 	mov.w	r2, #0
 801841c:	d134      	bne.n	8018488 <_dtoa_r+0x660>
 801841e:	4b19      	ldr	r3, [pc, #100]	; (8018484 <_dtoa_r+0x65c>)
 8018420:	ec51 0b18 	vmov	r0, r1, d8
 8018424:	f7e7 ff3a 	bl	800029c <__adddf3>
 8018428:	4602      	mov	r2, r0
 801842a:	460b      	mov	r3, r1
 801842c:	4630      	mov	r0, r6
 801842e:	4639      	mov	r1, r7
 8018430:	f7e8 fb7a 	bl	8000b28 <__aeabi_dcmpgt>
 8018434:	2800      	cmp	r0, #0
 8018436:	d175      	bne.n	8018524 <_dtoa_r+0x6fc>
 8018438:	ec53 2b18 	vmov	r2, r3, d8
 801843c:	4911      	ldr	r1, [pc, #68]	; (8018484 <_dtoa_r+0x65c>)
 801843e:	2000      	movs	r0, #0
 8018440:	f7e7 ff2a 	bl	8000298 <__aeabi_dsub>
 8018444:	4602      	mov	r2, r0
 8018446:	460b      	mov	r3, r1
 8018448:	4630      	mov	r0, r6
 801844a:	4639      	mov	r1, r7
 801844c:	f7e8 fb4e 	bl	8000aec <__aeabi_dcmplt>
 8018450:	2800      	cmp	r0, #0
 8018452:	f43f af27 	beq.w	80182a4 <_dtoa_r+0x47c>
 8018456:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018458:	1e6b      	subs	r3, r5, #1
 801845a:	930c      	str	r3, [sp, #48]	; 0x30
 801845c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018460:	2b30      	cmp	r3, #48	; 0x30
 8018462:	d0f8      	beq.n	8018456 <_dtoa_r+0x62e>
 8018464:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018468:	e04a      	b.n	8018500 <_dtoa_r+0x6d8>
 801846a:	bf00      	nop
 801846c:	0801d248 	.word	0x0801d248
 8018470:	0801d220 	.word	0x0801d220
 8018474:	3ff00000 	.word	0x3ff00000
 8018478:	40240000 	.word	0x40240000
 801847c:	401c0000 	.word	0x401c0000
 8018480:	40140000 	.word	0x40140000
 8018484:	3fe00000 	.word	0x3fe00000
 8018488:	4baf      	ldr	r3, [pc, #700]	; (8018748 <_dtoa_r+0x920>)
 801848a:	f7e8 f8bd 	bl	8000608 <__aeabi_dmul>
 801848e:	4606      	mov	r6, r0
 8018490:	460f      	mov	r7, r1
 8018492:	e7ac      	b.n	80183ee <_dtoa_r+0x5c6>
 8018494:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018498:	9d00      	ldr	r5, [sp, #0]
 801849a:	4642      	mov	r2, r8
 801849c:	464b      	mov	r3, r9
 801849e:	4630      	mov	r0, r6
 80184a0:	4639      	mov	r1, r7
 80184a2:	f7e8 f9db 	bl	800085c <__aeabi_ddiv>
 80184a6:	f7e8 fb5f 	bl	8000b68 <__aeabi_d2iz>
 80184aa:	9002      	str	r0, [sp, #8]
 80184ac:	f7e8 f842 	bl	8000534 <__aeabi_i2d>
 80184b0:	4642      	mov	r2, r8
 80184b2:	464b      	mov	r3, r9
 80184b4:	f7e8 f8a8 	bl	8000608 <__aeabi_dmul>
 80184b8:	4602      	mov	r2, r0
 80184ba:	460b      	mov	r3, r1
 80184bc:	4630      	mov	r0, r6
 80184be:	4639      	mov	r1, r7
 80184c0:	f7e7 feea 	bl	8000298 <__aeabi_dsub>
 80184c4:	9e02      	ldr	r6, [sp, #8]
 80184c6:	9f01      	ldr	r7, [sp, #4]
 80184c8:	3630      	adds	r6, #48	; 0x30
 80184ca:	f805 6b01 	strb.w	r6, [r5], #1
 80184ce:	9e00      	ldr	r6, [sp, #0]
 80184d0:	1bae      	subs	r6, r5, r6
 80184d2:	42b7      	cmp	r7, r6
 80184d4:	4602      	mov	r2, r0
 80184d6:	460b      	mov	r3, r1
 80184d8:	d137      	bne.n	801854a <_dtoa_r+0x722>
 80184da:	f7e7 fedf 	bl	800029c <__adddf3>
 80184de:	4642      	mov	r2, r8
 80184e0:	464b      	mov	r3, r9
 80184e2:	4606      	mov	r6, r0
 80184e4:	460f      	mov	r7, r1
 80184e6:	f7e8 fb1f 	bl	8000b28 <__aeabi_dcmpgt>
 80184ea:	b9c8      	cbnz	r0, 8018520 <_dtoa_r+0x6f8>
 80184ec:	4642      	mov	r2, r8
 80184ee:	464b      	mov	r3, r9
 80184f0:	4630      	mov	r0, r6
 80184f2:	4639      	mov	r1, r7
 80184f4:	f7e8 faf0 	bl	8000ad8 <__aeabi_dcmpeq>
 80184f8:	b110      	cbz	r0, 8018500 <_dtoa_r+0x6d8>
 80184fa:	9b02      	ldr	r3, [sp, #8]
 80184fc:	07d9      	lsls	r1, r3, #31
 80184fe:	d40f      	bmi.n	8018520 <_dtoa_r+0x6f8>
 8018500:	4620      	mov	r0, r4
 8018502:	4659      	mov	r1, fp
 8018504:	f000 fbc2 	bl	8018c8c <_Bfree>
 8018508:	2300      	movs	r3, #0
 801850a:	702b      	strb	r3, [r5, #0]
 801850c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801850e:	f10a 0001 	add.w	r0, sl, #1
 8018512:	6018      	str	r0, [r3, #0]
 8018514:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018516:	2b00      	cmp	r3, #0
 8018518:	f43f acd8 	beq.w	8017ecc <_dtoa_r+0xa4>
 801851c:	601d      	str	r5, [r3, #0]
 801851e:	e4d5      	b.n	8017ecc <_dtoa_r+0xa4>
 8018520:	f8cd a01c 	str.w	sl, [sp, #28]
 8018524:	462b      	mov	r3, r5
 8018526:	461d      	mov	r5, r3
 8018528:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801852c:	2a39      	cmp	r2, #57	; 0x39
 801852e:	d108      	bne.n	8018542 <_dtoa_r+0x71a>
 8018530:	9a00      	ldr	r2, [sp, #0]
 8018532:	429a      	cmp	r2, r3
 8018534:	d1f7      	bne.n	8018526 <_dtoa_r+0x6fe>
 8018536:	9a07      	ldr	r2, [sp, #28]
 8018538:	9900      	ldr	r1, [sp, #0]
 801853a:	3201      	adds	r2, #1
 801853c:	9207      	str	r2, [sp, #28]
 801853e:	2230      	movs	r2, #48	; 0x30
 8018540:	700a      	strb	r2, [r1, #0]
 8018542:	781a      	ldrb	r2, [r3, #0]
 8018544:	3201      	adds	r2, #1
 8018546:	701a      	strb	r2, [r3, #0]
 8018548:	e78c      	b.n	8018464 <_dtoa_r+0x63c>
 801854a:	4b7f      	ldr	r3, [pc, #508]	; (8018748 <_dtoa_r+0x920>)
 801854c:	2200      	movs	r2, #0
 801854e:	f7e8 f85b 	bl	8000608 <__aeabi_dmul>
 8018552:	2200      	movs	r2, #0
 8018554:	2300      	movs	r3, #0
 8018556:	4606      	mov	r6, r0
 8018558:	460f      	mov	r7, r1
 801855a:	f7e8 fabd 	bl	8000ad8 <__aeabi_dcmpeq>
 801855e:	2800      	cmp	r0, #0
 8018560:	d09b      	beq.n	801849a <_dtoa_r+0x672>
 8018562:	e7cd      	b.n	8018500 <_dtoa_r+0x6d8>
 8018564:	9a08      	ldr	r2, [sp, #32]
 8018566:	2a00      	cmp	r2, #0
 8018568:	f000 80c4 	beq.w	80186f4 <_dtoa_r+0x8cc>
 801856c:	9a05      	ldr	r2, [sp, #20]
 801856e:	2a01      	cmp	r2, #1
 8018570:	f300 80a8 	bgt.w	80186c4 <_dtoa_r+0x89c>
 8018574:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018576:	2a00      	cmp	r2, #0
 8018578:	f000 80a0 	beq.w	80186bc <_dtoa_r+0x894>
 801857c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018580:	9e06      	ldr	r6, [sp, #24]
 8018582:	4645      	mov	r5, r8
 8018584:	9a04      	ldr	r2, [sp, #16]
 8018586:	2101      	movs	r1, #1
 8018588:	441a      	add	r2, r3
 801858a:	4620      	mov	r0, r4
 801858c:	4498      	add	r8, r3
 801858e:	9204      	str	r2, [sp, #16]
 8018590:	f000 fc38 	bl	8018e04 <__i2b>
 8018594:	4607      	mov	r7, r0
 8018596:	2d00      	cmp	r5, #0
 8018598:	dd0b      	ble.n	80185b2 <_dtoa_r+0x78a>
 801859a:	9b04      	ldr	r3, [sp, #16]
 801859c:	2b00      	cmp	r3, #0
 801859e:	dd08      	ble.n	80185b2 <_dtoa_r+0x78a>
 80185a0:	42ab      	cmp	r3, r5
 80185a2:	9a04      	ldr	r2, [sp, #16]
 80185a4:	bfa8      	it	ge
 80185a6:	462b      	movge	r3, r5
 80185a8:	eba8 0803 	sub.w	r8, r8, r3
 80185ac:	1aed      	subs	r5, r5, r3
 80185ae:	1ad3      	subs	r3, r2, r3
 80185b0:	9304      	str	r3, [sp, #16]
 80185b2:	9b06      	ldr	r3, [sp, #24]
 80185b4:	b1fb      	cbz	r3, 80185f6 <_dtoa_r+0x7ce>
 80185b6:	9b08      	ldr	r3, [sp, #32]
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	f000 809f 	beq.w	80186fc <_dtoa_r+0x8d4>
 80185be:	2e00      	cmp	r6, #0
 80185c0:	dd11      	ble.n	80185e6 <_dtoa_r+0x7be>
 80185c2:	4639      	mov	r1, r7
 80185c4:	4632      	mov	r2, r6
 80185c6:	4620      	mov	r0, r4
 80185c8:	f000 fcd8 	bl	8018f7c <__pow5mult>
 80185cc:	465a      	mov	r2, fp
 80185ce:	4601      	mov	r1, r0
 80185d0:	4607      	mov	r7, r0
 80185d2:	4620      	mov	r0, r4
 80185d4:	f000 fc2c 	bl	8018e30 <__multiply>
 80185d8:	4659      	mov	r1, fp
 80185da:	9007      	str	r0, [sp, #28]
 80185dc:	4620      	mov	r0, r4
 80185de:	f000 fb55 	bl	8018c8c <_Bfree>
 80185e2:	9b07      	ldr	r3, [sp, #28]
 80185e4:	469b      	mov	fp, r3
 80185e6:	9b06      	ldr	r3, [sp, #24]
 80185e8:	1b9a      	subs	r2, r3, r6
 80185ea:	d004      	beq.n	80185f6 <_dtoa_r+0x7ce>
 80185ec:	4659      	mov	r1, fp
 80185ee:	4620      	mov	r0, r4
 80185f0:	f000 fcc4 	bl	8018f7c <__pow5mult>
 80185f4:	4683      	mov	fp, r0
 80185f6:	2101      	movs	r1, #1
 80185f8:	4620      	mov	r0, r4
 80185fa:	f000 fc03 	bl	8018e04 <__i2b>
 80185fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018600:	2b00      	cmp	r3, #0
 8018602:	4606      	mov	r6, r0
 8018604:	dd7c      	ble.n	8018700 <_dtoa_r+0x8d8>
 8018606:	461a      	mov	r2, r3
 8018608:	4601      	mov	r1, r0
 801860a:	4620      	mov	r0, r4
 801860c:	f000 fcb6 	bl	8018f7c <__pow5mult>
 8018610:	9b05      	ldr	r3, [sp, #20]
 8018612:	2b01      	cmp	r3, #1
 8018614:	4606      	mov	r6, r0
 8018616:	dd76      	ble.n	8018706 <_dtoa_r+0x8de>
 8018618:	2300      	movs	r3, #0
 801861a:	9306      	str	r3, [sp, #24]
 801861c:	6933      	ldr	r3, [r6, #16]
 801861e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018622:	6918      	ldr	r0, [r3, #16]
 8018624:	f000 fb9e 	bl	8018d64 <__hi0bits>
 8018628:	f1c0 0020 	rsb	r0, r0, #32
 801862c:	9b04      	ldr	r3, [sp, #16]
 801862e:	4418      	add	r0, r3
 8018630:	f010 001f 	ands.w	r0, r0, #31
 8018634:	f000 8086 	beq.w	8018744 <_dtoa_r+0x91c>
 8018638:	f1c0 0320 	rsb	r3, r0, #32
 801863c:	2b04      	cmp	r3, #4
 801863e:	dd7f      	ble.n	8018740 <_dtoa_r+0x918>
 8018640:	f1c0 001c 	rsb	r0, r0, #28
 8018644:	9b04      	ldr	r3, [sp, #16]
 8018646:	4403      	add	r3, r0
 8018648:	4480      	add	r8, r0
 801864a:	4405      	add	r5, r0
 801864c:	9304      	str	r3, [sp, #16]
 801864e:	f1b8 0f00 	cmp.w	r8, #0
 8018652:	dd05      	ble.n	8018660 <_dtoa_r+0x838>
 8018654:	4659      	mov	r1, fp
 8018656:	4642      	mov	r2, r8
 8018658:	4620      	mov	r0, r4
 801865a:	f000 fce9 	bl	8019030 <__lshift>
 801865e:	4683      	mov	fp, r0
 8018660:	9b04      	ldr	r3, [sp, #16]
 8018662:	2b00      	cmp	r3, #0
 8018664:	dd05      	ble.n	8018672 <_dtoa_r+0x84a>
 8018666:	4631      	mov	r1, r6
 8018668:	461a      	mov	r2, r3
 801866a:	4620      	mov	r0, r4
 801866c:	f000 fce0 	bl	8019030 <__lshift>
 8018670:	4606      	mov	r6, r0
 8018672:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018674:	2b00      	cmp	r3, #0
 8018676:	d069      	beq.n	801874c <_dtoa_r+0x924>
 8018678:	4631      	mov	r1, r6
 801867a:	4658      	mov	r0, fp
 801867c:	f000 fd44 	bl	8019108 <__mcmp>
 8018680:	2800      	cmp	r0, #0
 8018682:	da63      	bge.n	801874c <_dtoa_r+0x924>
 8018684:	2300      	movs	r3, #0
 8018686:	4659      	mov	r1, fp
 8018688:	220a      	movs	r2, #10
 801868a:	4620      	mov	r0, r4
 801868c:	f000 fb20 	bl	8018cd0 <__multadd>
 8018690:	9b08      	ldr	r3, [sp, #32]
 8018692:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018696:	4683      	mov	fp, r0
 8018698:	2b00      	cmp	r3, #0
 801869a:	f000 818f 	beq.w	80189bc <_dtoa_r+0xb94>
 801869e:	4639      	mov	r1, r7
 80186a0:	2300      	movs	r3, #0
 80186a2:	220a      	movs	r2, #10
 80186a4:	4620      	mov	r0, r4
 80186a6:	f000 fb13 	bl	8018cd0 <__multadd>
 80186aa:	f1b9 0f00 	cmp.w	r9, #0
 80186ae:	4607      	mov	r7, r0
 80186b0:	f300 808e 	bgt.w	80187d0 <_dtoa_r+0x9a8>
 80186b4:	9b05      	ldr	r3, [sp, #20]
 80186b6:	2b02      	cmp	r3, #2
 80186b8:	dc50      	bgt.n	801875c <_dtoa_r+0x934>
 80186ba:	e089      	b.n	80187d0 <_dtoa_r+0x9a8>
 80186bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80186be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80186c2:	e75d      	b.n	8018580 <_dtoa_r+0x758>
 80186c4:	9b01      	ldr	r3, [sp, #4]
 80186c6:	1e5e      	subs	r6, r3, #1
 80186c8:	9b06      	ldr	r3, [sp, #24]
 80186ca:	42b3      	cmp	r3, r6
 80186cc:	bfbf      	itttt	lt
 80186ce:	9b06      	ldrlt	r3, [sp, #24]
 80186d0:	9606      	strlt	r6, [sp, #24]
 80186d2:	1af2      	sublt	r2, r6, r3
 80186d4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80186d6:	bfb6      	itet	lt
 80186d8:	189b      	addlt	r3, r3, r2
 80186da:	1b9e      	subge	r6, r3, r6
 80186dc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80186de:	9b01      	ldr	r3, [sp, #4]
 80186e0:	bfb8      	it	lt
 80186e2:	2600      	movlt	r6, #0
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	bfb5      	itete	lt
 80186e8:	eba8 0503 	sublt.w	r5, r8, r3
 80186ec:	9b01      	ldrge	r3, [sp, #4]
 80186ee:	2300      	movlt	r3, #0
 80186f0:	4645      	movge	r5, r8
 80186f2:	e747      	b.n	8018584 <_dtoa_r+0x75c>
 80186f4:	9e06      	ldr	r6, [sp, #24]
 80186f6:	9f08      	ldr	r7, [sp, #32]
 80186f8:	4645      	mov	r5, r8
 80186fa:	e74c      	b.n	8018596 <_dtoa_r+0x76e>
 80186fc:	9a06      	ldr	r2, [sp, #24]
 80186fe:	e775      	b.n	80185ec <_dtoa_r+0x7c4>
 8018700:	9b05      	ldr	r3, [sp, #20]
 8018702:	2b01      	cmp	r3, #1
 8018704:	dc18      	bgt.n	8018738 <_dtoa_r+0x910>
 8018706:	9b02      	ldr	r3, [sp, #8]
 8018708:	b9b3      	cbnz	r3, 8018738 <_dtoa_r+0x910>
 801870a:	9b03      	ldr	r3, [sp, #12]
 801870c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018710:	b9a3      	cbnz	r3, 801873c <_dtoa_r+0x914>
 8018712:	9b03      	ldr	r3, [sp, #12]
 8018714:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018718:	0d1b      	lsrs	r3, r3, #20
 801871a:	051b      	lsls	r3, r3, #20
 801871c:	b12b      	cbz	r3, 801872a <_dtoa_r+0x902>
 801871e:	9b04      	ldr	r3, [sp, #16]
 8018720:	3301      	adds	r3, #1
 8018722:	9304      	str	r3, [sp, #16]
 8018724:	f108 0801 	add.w	r8, r8, #1
 8018728:	2301      	movs	r3, #1
 801872a:	9306      	str	r3, [sp, #24]
 801872c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801872e:	2b00      	cmp	r3, #0
 8018730:	f47f af74 	bne.w	801861c <_dtoa_r+0x7f4>
 8018734:	2001      	movs	r0, #1
 8018736:	e779      	b.n	801862c <_dtoa_r+0x804>
 8018738:	2300      	movs	r3, #0
 801873a:	e7f6      	b.n	801872a <_dtoa_r+0x902>
 801873c:	9b02      	ldr	r3, [sp, #8]
 801873e:	e7f4      	b.n	801872a <_dtoa_r+0x902>
 8018740:	d085      	beq.n	801864e <_dtoa_r+0x826>
 8018742:	4618      	mov	r0, r3
 8018744:	301c      	adds	r0, #28
 8018746:	e77d      	b.n	8018644 <_dtoa_r+0x81c>
 8018748:	40240000 	.word	0x40240000
 801874c:	9b01      	ldr	r3, [sp, #4]
 801874e:	2b00      	cmp	r3, #0
 8018750:	dc38      	bgt.n	80187c4 <_dtoa_r+0x99c>
 8018752:	9b05      	ldr	r3, [sp, #20]
 8018754:	2b02      	cmp	r3, #2
 8018756:	dd35      	ble.n	80187c4 <_dtoa_r+0x99c>
 8018758:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801875c:	f1b9 0f00 	cmp.w	r9, #0
 8018760:	d10d      	bne.n	801877e <_dtoa_r+0x956>
 8018762:	4631      	mov	r1, r6
 8018764:	464b      	mov	r3, r9
 8018766:	2205      	movs	r2, #5
 8018768:	4620      	mov	r0, r4
 801876a:	f000 fab1 	bl	8018cd0 <__multadd>
 801876e:	4601      	mov	r1, r0
 8018770:	4606      	mov	r6, r0
 8018772:	4658      	mov	r0, fp
 8018774:	f000 fcc8 	bl	8019108 <__mcmp>
 8018778:	2800      	cmp	r0, #0
 801877a:	f73f adbd 	bgt.w	80182f8 <_dtoa_r+0x4d0>
 801877e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018780:	9d00      	ldr	r5, [sp, #0]
 8018782:	ea6f 0a03 	mvn.w	sl, r3
 8018786:	f04f 0800 	mov.w	r8, #0
 801878a:	4631      	mov	r1, r6
 801878c:	4620      	mov	r0, r4
 801878e:	f000 fa7d 	bl	8018c8c <_Bfree>
 8018792:	2f00      	cmp	r7, #0
 8018794:	f43f aeb4 	beq.w	8018500 <_dtoa_r+0x6d8>
 8018798:	f1b8 0f00 	cmp.w	r8, #0
 801879c:	d005      	beq.n	80187aa <_dtoa_r+0x982>
 801879e:	45b8      	cmp	r8, r7
 80187a0:	d003      	beq.n	80187aa <_dtoa_r+0x982>
 80187a2:	4641      	mov	r1, r8
 80187a4:	4620      	mov	r0, r4
 80187a6:	f000 fa71 	bl	8018c8c <_Bfree>
 80187aa:	4639      	mov	r1, r7
 80187ac:	4620      	mov	r0, r4
 80187ae:	f000 fa6d 	bl	8018c8c <_Bfree>
 80187b2:	e6a5      	b.n	8018500 <_dtoa_r+0x6d8>
 80187b4:	2600      	movs	r6, #0
 80187b6:	4637      	mov	r7, r6
 80187b8:	e7e1      	b.n	801877e <_dtoa_r+0x956>
 80187ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80187bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80187c0:	4637      	mov	r7, r6
 80187c2:	e599      	b.n	80182f8 <_dtoa_r+0x4d0>
 80187c4:	9b08      	ldr	r3, [sp, #32]
 80187c6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	f000 80fd 	beq.w	80189ca <_dtoa_r+0xba2>
 80187d0:	2d00      	cmp	r5, #0
 80187d2:	dd05      	ble.n	80187e0 <_dtoa_r+0x9b8>
 80187d4:	4639      	mov	r1, r7
 80187d6:	462a      	mov	r2, r5
 80187d8:	4620      	mov	r0, r4
 80187da:	f000 fc29 	bl	8019030 <__lshift>
 80187de:	4607      	mov	r7, r0
 80187e0:	9b06      	ldr	r3, [sp, #24]
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d05c      	beq.n	80188a0 <_dtoa_r+0xa78>
 80187e6:	6879      	ldr	r1, [r7, #4]
 80187e8:	4620      	mov	r0, r4
 80187ea:	f000 fa0f 	bl	8018c0c <_Balloc>
 80187ee:	4605      	mov	r5, r0
 80187f0:	b928      	cbnz	r0, 80187fe <_dtoa_r+0x9d6>
 80187f2:	4b80      	ldr	r3, [pc, #512]	; (80189f4 <_dtoa_r+0xbcc>)
 80187f4:	4602      	mov	r2, r0
 80187f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80187fa:	f7ff bb2e 	b.w	8017e5a <_dtoa_r+0x32>
 80187fe:	693a      	ldr	r2, [r7, #16]
 8018800:	3202      	adds	r2, #2
 8018802:	0092      	lsls	r2, r2, #2
 8018804:	f107 010c 	add.w	r1, r7, #12
 8018808:	300c      	adds	r0, #12
 801880a:	f7fe fd93 	bl	8017334 <memcpy>
 801880e:	2201      	movs	r2, #1
 8018810:	4629      	mov	r1, r5
 8018812:	4620      	mov	r0, r4
 8018814:	f000 fc0c 	bl	8019030 <__lshift>
 8018818:	9b00      	ldr	r3, [sp, #0]
 801881a:	3301      	adds	r3, #1
 801881c:	9301      	str	r3, [sp, #4]
 801881e:	9b00      	ldr	r3, [sp, #0]
 8018820:	444b      	add	r3, r9
 8018822:	9307      	str	r3, [sp, #28]
 8018824:	9b02      	ldr	r3, [sp, #8]
 8018826:	f003 0301 	and.w	r3, r3, #1
 801882a:	46b8      	mov	r8, r7
 801882c:	9306      	str	r3, [sp, #24]
 801882e:	4607      	mov	r7, r0
 8018830:	9b01      	ldr	r3, [sp, #4]
 8018832:	4631      	mov	r1, r6
 8018834:	3b01      	subs	r3, #1
 8018836:	4658      	mov	r0, fp
 8018838:	9302      	str	r3, [sp, #8]
 801883a:	f7ff fa67 	bl	8017d0c <quorem>
 801883e:	4603      	mov	r3, r0
 8018840:	3330      	adds	r3, #48	; 0x30
 8018842:	9004      	str	r0, [sp, #16]
 8018844:	4641      	mov	r1, r8
 8018846:	4658      	mov	r0, fp
 8018848:	9308      	str	r3, [sp, #32]
 801884a:	f000 fc5d 	bl	8019108 <__mcmp>
 801884e:	463a      	mov	r2, r7
 8018850:	4681      	mov	r9, r0
 8018852:	4631      	mov	r1, r6
 8018854:	4620      	mov	r0, r4
 8018856:	f000 fc73 	bl	8019140 <__mdiff>
 801885a:	68c2      	ldr	r2, [r0, #12]
 801885c:	9b08      	ldr	r3, [sp, #32]
 801885e:	4605      	mov	r5, r0
 8018860:	bb02      	cbnz	r2, 80188a4 <_dtoa_r+0xa7c>
 8018862:	4601      	mov	r1, r0
 8018864:	4658      	mov	r0, fp
 8018866:	f000 fc4f 	bl	8019108 <__mcmp>
 801886a:	9b08      	ldr	r3, [sp, #32]
 801886c:	4602      	mov	r2, r0
 801886e:	4629      	mov	r1, r5
 8018870:	4620      	mov	r0, r4
 8018872:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8018876:	f000 fa09 	bl	8018c8c <_Bfree>
 801887a:	9b05      	ldr	r3, [sp, #20]
 801887c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801887e:	9d01      	ldr	r5, [sp, #4]
 8018880:	ea43 0102 	orr.w	r1, r3, r2
 8018884:	9b06      	ldr	r3, [sp, #24]
 8018886:	430b      	orrs	r3, r1
 8018888:	9b08      	ldr	r3, [sp, #32]
 801888a:	d10d      	bne.n	80188a8 <_dtoa_r+0xa80>
 801888c:	2b39      	cmp	r3, #57	; 0x39
 801888e:	d029      	beq.n	80188e4 <_dtoa_r+0xabc>
 8018890:	f1b9 0f00 	cmp.w	r9, #0
 8018894:	dd01      	ble.n	801889a <_dtoa_r+0xa72>
 8018896:	9b04      	ldr	r3, [sp, #16]
 8018898:	3331      	adds	r3, #49	; 0x31
 801889a:	9a02      	ldr	r2, [sp, #8]
 801889c:	7013      	strb	r3, [r2, #0]
 801889e:	e774      	b.n	801878a <_dtoa_r+0x962>
 80188a0:	4638      	mov	r0, r7
 80188a2:	e7b9      	b.n	8018818 <_dtoa_r+0x9f0>
 80188a4:	2201      	movs	r2, #1
 80188a6:	e7e2      	b.n	801886e <_dtoa_r+0xa46>
 80188a8:	f1b9 0f00 	cmp.w	r9, #0
 80188ac:	db06      	blt.n	80188bc <_dtoa_r+0xa94>
 80188ae:	9905      	ldr	r1, [sp, #20]
 80188b0:	ea41 0909 	orr.w	r9, r1, r9
 80188b4:	9906      	ldr	r1, [sp, #24]
 80188b6:	ea59 0101 	orrs.w	r1, r9, r1
 80188ba:	d120      	bne.n	80188fe <_dtoa_r+0xad6>
 80188bc:	2a00      	cmp	r2, #0
 80188be:	ddec      	ble.n	801889a <_dtoa_r+0xa72>
 80188c0:	4659      	mov	r1, fp
 80188c2:	2201      	movs	r2, #1
 80188c4:	4620      	mov	r0, r4
 80188c6:	9301      	str	r3, [sp, #4]
 80188c8:	f000 fbb2 	bl	8019030 <__lshift>
 80188cc:	4631      	mov	r1, r6
 80188ce:	4683      	mov	fp, r0
 80188d0:	f000 fc1a 	bl	8019108 <__mcmp>
 80188d4:	2800      	cmp	r0, #0
 80188d6:	9b01      	ldr	r3, [sp, #4]
 80188d8:	dc02      	bgt.n	80188e0 <_dtoa_r+0xab8>
 80188da:	d1de      	bne.n	801889a <_dtoa_r+0xa72>
 80188dc:	07da      	lsls	r2, r3, #31
 80188de:	d5dc      	bpl.n	801889a <_dtoa_r+0xa72>
 80188e0:	2b39      	cmp	r3, #57	; 0x39
 80188e2:	d1d8      	bne.n	8018896 <_dtoa_r+0xa6e>
 80188e4:	9a02      	ldr	r2, [sp, #8]
 80188e6:	2339      	movs	r3, #57	; 0x39
 80188e8:	7013      	strb	r3, [r2, #0]
 80188ea:	462b      	mov	r3, r5
 80188ec:	461d      	mov	r5, r3
 80188ee:	3b01      	subs	r3, #1
 80188f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80188f4:	2a39      	cmp	r2, #57	; 0x39
 80188f6:	d050      	beq.n	801899a <_dtoa_r+0xb72>
 80188f8:	3201      	adds	r2, #1
 80188fa:	701a      	strb	r2, [r3, #0]
 80188fc:	e745      	b.n	801878a <_dtoa_r+0x962>
 80188fe:	2a00      	cmp	r2, #0
 8018900:	dd03      	ble.n	801890a <_dtoa_r+0xae2>
 8018902:	2b39      	cmp	r3, #57	; 0x39
 8018904:	d0ee      	beq.n	80188e4 <_dtoa_r+0xabc>
 8018906:	3301      	adds	r3, #1
 8018908:	e7c7      	b.n	801889a <_dtoa_r+0xa72>
 801890a:	9a01      	ldr	r2, [sp, #4]
 801890c:	9907      	ldr	r1, [sp, #28]
 801890e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8018912:	428a      	cmp	r2, r1
 8018914:	d02a      	beq.n	801896c <_dtoa_r+0xb44>
 8018916:	4659      	mov	r1, fp
 8018918:	2300      	movs	r3, #0
 801891a:	220a      	movs	r2, #10
 801891c:	4620      	mov	r0, r4
 801891e:	f000 f9d7 	bl	8018cd0 <__multadd>
 8018922:	45b8      	cmp	r8, r7
 8018924:	4683      	mov	fp, r0
 8018926:	f04f 0300 	mov.w	r3, #0
 801892a:	f04f 020a 	mov.w	r2, #10
 801892e:	4641      	mov	r1, r8
 8018930:	4620      	mov	r0, r4
 8018932:	d107      	bne.n	8018944 <_dtoa_r+0xb1c>
 8018934:	f000 f9cc 	bl	8018cd0 <__multadd>
 8018938:	4680      	mov	r8, r0
 801893a:	4607      	mov	r7, r0
 801893c:	9b01      	ldr	r3, [sp, #4]
 801893e:	3301      	adds	r3, #1
 8018940:	9301      	str	r3, [sp, #4]
 8018942:	e775      	b.n	8018830 <_dtoa_r+0xa08>
 8018944:	f000 f9c4 	bl	8018cd0 <__multadd>
 8018948:	4639      	mov	r1, r7
 801894a:	4680      	mov	r8, r0
 801894c:	2300      	movs	r3, #0
 801894e:	220a      	movs	r2, #10
 8018950:	4620      	mov	r0, r4
 8018952:	f000 f9bd 	bl	8018cd0 <__multadd>
 8018956:	4607      	mov	r7, r0
 8018958:	e7f0      	b.n	801893c <_dtoa_r+0xb14>
 801895a:	f1b9 0f00 	cmp.w	r9, #0
 801895e:	9a00      	ldr	r2, [sp, #0]
 8018960:	bfcc      	ite	gt
 8018962:	464d      	movgt	r5, r9
 8018964:	2501      	movle	r5, #1
 8018966:	4415      	add	r5, r2
 8018968:	f04f 0800 	mov.w	r8, #0
 801896c:	4659      	mov	r1, fp
 801896e:	2201      	movs	r2, #1
 8018970:	4620      	mov	r0, r4
 8018972:	9301      	str	r3, [sp, #4]
 8018974:	f000 fb5c 	bl	8019030 <__lshift>
 8018978:	4631      	mov	r1, r6
 801897a:	4683      	mov	fp, r0
 801897c:	f000 fbc4 	bl	8019108 <__mcmp>
 8018980:	2800      	cmp	r0, #0
 8018982:	dcb2      	bgt.n	80188ea <_dtoa_r+0xac2>
 8018984:	d102      	bne.n	801898c <_dtoa_r+0xb64>
 8018986:	9b01      	ldr	r3, [sp, #4]
 8018988:	07db      	lsls	r3, r3, #31
 801898a:	d4ae      	bmi.n	80188ea <_dtoa_r+0xac2>
 801898c:	462b      	mov	r3, r5
 801898e:	461d      	mov	r5, r3
 8018990:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018994:	2a30      	cmp	r2, #48	; 0x30
 8018996:	d0fa      	beq.n	801898e <_dtoa_r+0xb66>
 8018998:	e6f7      	b.n	801878a <_dtoa_r+0x962>
 801899a:	9a00      	ldr	r2, [sp, #0]
 801899c:	429a      	cmp	r2, r3
 801899e:	d1a5      	bne.n	80188ec <_dtoa_r+0xac4>
 80189a0:	f10a 0a01 	add.w	sl, sl, #1
 80189a4:	2331      	movs	r3, #49	; 0x31
 80189a6:	e779      	b.n	801889c <_dtoa_r+0xa74>
 80189a8:	4b13      	ldr	r3, [pc, #76]	; (80189f8 <_dtoa_r+0xbd0>)
 80189aa:	f7ff baaf 	b.w	8017f0c <_dtoa_r+0xe4>
 80189ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	f47f aa86 	bne.w	8017ec2 <_dtoa_r+0x9a>
 80189b6:	4b11      	ldr	r3, [pc, #68]	; (80189fc <_dtoa_r+0xbd4>)
 80189b8:	f7ff baa8 	b.w	8017f0c <_dtoa_r+0xe4>
 80189bc:	f1b9 0f00 	cmp.w	r9, #0
 80189c0:	dc03      	bgt.n	80189ca <_dtoa_r+0xba2>
 80189c2:	9b05      	ldr	r3, [sp, #20]
 80189c4:	2b02      	cmp	r3, #2
 80189c6:	f73f aec9 	bgt.w	801875c <_dtoa_r+0x934>
 80189ca:	9d00      	ldr	r5, [sp, #0]
 80189cc:	4631      	mov	r1, r6
 80189ce:	4658      	mov	r0, fp
 80189d0:	f7ff f99c 	bl	8017d0c <quorem>
 80189d4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80189d8:	f805 3b01 	strb.w	r3, [r5], #1
 80189dc:	9a00      	ldr	r2, [sp, #0]
 80189de:	1aaa      	subs	r2, r5, r2
 80189e0:	4591      	cmp	r9, r2
 80189e2:	ddba      	ble.n	801895a <_dtoa_r+0xb32>
 80189e4:	4659      	mov	r1, fp
 80189e6:	2300      	movs	r3, #0
 80189e8:	220a      	movs	r2, #10
 80189ea:	4620      	mov	r0, r4
 80189ec:	f000 f970 	bl	8018cd0 <__multadd>
 80189f0:	4683      	mov	fp, r0
 80189f2:	e7eb      	b.n	80189cc <_dtoa_r+0xba4>
 80189f4:	0801d14f 	.word	0x0801d14f
 80189f8:	0801d0a8 	.word	0x0801d0a8
 80189fc:	0801d0cc 	.word	0x0801d0cc

08018a00 <std>:
 8018a00:	2300      	movs	r3, #0
 8018a02:	b510      	push	{r4, lr}
 8018a04:	4604      	mov	r4, r0
 8018a06:	e9c0 3300 	strd	r3, r3, [r0]
 8018a0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018a0e:	6083      	str	r3, [r0, #8]
 8018a10:	8181      	strh	r1, [r0, #12]
 8018a12:	6643      	str	r3, [r0, #100]	; 0x64
 8018a14:	81c2      	strh	r2, [r0, #14]
 8018a16:	6183      	str	r3, [r0, #24]
 8018a18:	4619      	mov	r1, r3
 8018a1a:	2208      	movs	r2, #8
 8018a1c:	305c      	adds	r0, #92	; 0x5c
 8018a1e:	f7fe fc97 	bl	8017350 <memset>
 8018a22:	4b05      	ldr	r3, [pc, #20]	; (8018a38 <std+0x38>)
 8018a24:	6263      	str	r3, [r4, #36]	; 0x24
 8018a26:	4b05      	ldr	r3, [pc, #20]	; (8018a3c <std+0x3c>)
 8018a28:	62a3      	str	r3, [r4, #40]	; 0x28
 8018a2a:	4b05      	ldr	r3, [pc, #20]	; (8018a40 <std+0x40>)
 8018a2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018a2e:	4b05      	ldr	r3, [pc, #20]	; (8018a44 <std+0x44>)
 8018a30:	6224      	str	r4, [r4, #32]
 8018a32:	6323      	str	r3, [r4, #48]	; 0x30
 8018a34:	bd10      	pop	{r4, pc}
 8018a36:	bf00      	nop
 8018a38:	08019a09 	.word	0x08019a09
 8018a3c:	08019a2b 	.word	0x08019a2b
 8018a40:	08019a63 	.word	0x08019a63
 8018a44:	08019a87 	.word	0x08019a87

08018a48 <_cleanup_r>:
 8018a48:	4901      	ldr	r1, [pc, #4]	; (8018a50 <_cleanup_r+0x8>)
 8018a4a:	f000 b8af 	b.w	8018bac <_fwalk_reent>
 8018a4e:	bf00      	nop
 8018a50:	08019d9d 	.word	0x08019d9d

08018a54 <__sfmoreglue>:
 8018a54:	b570      	push	{r4, r5, r6, lr}
 8018a56:	1e4a      	subs	r2, r1, #1
 8018a58:	2568      	movs	r5, #104	; 0x68
 8018a5a:	4355      	muls	r5, r2
 8018a5c:	460e      	mov	r6, r1
 8018a5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018a62:	f000 fcb1 	bl	80193c8 <_malloc_r>
 8018a66:	4604      	mov	r4, r0
 8018a68:	b140      	cbz	r0, 8018a7c <__sfmoreglue+0x28>
 8018a6a:	2100      	movs	r1, #0
 8018a6c:	e9c0 1600 	strd	r1, r6, [r0]
 8018a70:	300c      	adds	r0, #12
 8018a72:	60a0      	str	r0, [r4, #8]
 8018a74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018a78:	f7fe fc6a 	bl	8017350 <memset>
 8018a7c:	4620      	mov	r0, r4
 8018a7e:	bd70      	pop	{r4, r5, r6, pc}

08018a80 <__sfp_lock_acquire>:
 8018a80:	4801      	ldr	r0, [pc, #4]	; (8018a88 <__sfp_lock_acquire+0x8>)
 8018a82:	f000 b8b8 	b.w	8018bf6 <__retarget_lock_acquire_recursive>
 8018a86:	bf00      	nop
 8018a88:	2000c790 	.word	0x2000c790

08018a8c <__sfp_lock_release>:
 8018a8c:	4801      	ldr	r0, [pc, #4]	; (8018a94 <__sfp_lock_release+0x8>)
 8018a8e:	f000 b8b3 	b.w	8018bf8 <__retarget_lock_release_recursive>
 8018a92:	bf00      	nop
 8018a94:	2000c790 	.word	0x2000c790

08018a98 <__sinit_lock_acquire>:
 8018a98:	4801      	ldr	r0, [pc, #4]	; (8018aa0 <__sinit_lock_acquire+0x8>)
 8018a9a:	f000 b8ac 	b.w	8018bf6 <__retarget_lock_acquire_recursive>
 8018a9e:	bf00      	nop
 8018aa0:	2000c78b 	.word	0x2000c78b

08018aa4 <__sinit_lock_release>:
 8018aa4:	4801      	ldr	r0, [pc, #4]	; (8018aac <__sinit_lock_release+0x8>)
 8018aa6:	f000 b8a7 	b.w	8018bf8 <__retarget_lock_release_recursive>
 8018aaa:	bf00      	nop
 8018aac:	2000c78b 	.word	0x2000c78b

08018ab0 <__sinit>:
 8018ab0:	b510      	push	{r4, lr}
 8018ab2:	4604      	mov	r4, r0
 8018ab4:	f7ff fff0 	bl	8018a98 <__sinit_lock_acquire>
 8018ab8:	69a3      	ldr	r3, [r4, #24]
 8018aba:	b11b      	cbz	r3, 8018ac4 <__sinit+0x14>
 8018abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ac0:	f7ff bff0 	b.w	8018aa4 <__sinit_lock_release>
 8018ac4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018ac8:	6523      	str	r3, [r4, #80]	; 0x50
 8018aca:	4b13      	ldr	r3, [pc, #76]	; (8018b18 <__sinit+0x68>)
 8018acc:	4a13      	ldr	r2, [pc, #76]	; (8018b1c <__sinit+0x6c>)
 8018ace:	681b      	ldr	r3, [r3, #0]
 8018ad0:	62a2      	str	r2, [r4, #40]	; 0x28
 8018ad2:	42a3      	cmp	r3, r4
 8018ad4:	bf04      	itt	eq
 8018ad6:	2301      	moveq	r3, #1
 8018ad8:	61a3      	streq	r3, [r4, #24]
 8018ada:	4620      	mov	r0, r4
 8018adc:	f000 f820 	bl	8018b20 <__sfp>
 8018ae0:	6060      	str	r0, [r4, #4]
 8018ae2:	4620      	mov	r0, r4
 8018ae4:	f000 f81c 	bl	8018b20 <__sfp>
 8018ae8:	60a0      	str	r0, [r4, #8]
 8018aea:	4620      	mov	r0, r4
 8018aec:	f000 f818 	bl	8018b20 <__sfp>
 8018af0:	2200      	movs	r2, #0
 8018af2:	60e0      	str	r0, [r4, #12]
 8018af4:	2104      	movs	r1, #4
 8018af6:	6860      	ldr	r0, [r4, #4]
 8018af8:	f7ff ff82 	bl	8018a00 <std>
 8018afc:	68a0      	ldr	r0, [r4, #8]
 8018afe:	2201      	movs	r2, #1
 8018b00:	2109      	movs	r1, #9
 8018b02:	f7ff ff7d 	bl	8018a00 <std>
 8018b06:	68e0      	ldr	r0, [r4, #12]
 8018b08:	2202      	movs	r2, #2
 8018b0a:	2112      	movs	r1, #18
 8018b0c:	f7ff ff78 	bl	8018a00 <std>
 8018b10:	2301      	movs	r3, #1
 8018b12:	61a3      	str	r3, [r4, #24]
 8018b14:	e7d2      	b.n	8018abc <__sinit+0xc>
 8018b16:	bf00      	nop
 8018b18:	0801d094 	.word	0x0801d094
 8018b1c:	08018a49 	.word	0x08018a49

08018b20 <__sfp>:
 8018b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b22:	4607      	mov	r7, r0
 8018b24:	f7ff ffac 	bl	8018a80 <__sfp_lock_acquire>
 8018b28:	4b1e      	ldr	r3, [pc, #120]	; (8018ba4 <__sfp+0x84>)
 8018b2a:	681e      	ldr	r6, [r3, #0]
 8018b2c:	69b3      	ldr	r3, [r6, #24]
 8018b2e:	b913      	cbnz	r3, 8018b36 <__sfp+0x16>
 8018b30:	4630      	mov	r0, r6
 8018b32:	f7ff ffbd 	bl	8018ab0 <__sinit>
 8018b36:	3648      	adds	r6, #72	; 0x48
 8018b38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018b3c:	3b01      	subs	r3, #1
 8018b3e:	d503      	bpl.n	8018b48 <__sfp+0x28>
 8018b40:	6833      	ldr	r3, [r6, #0]
 8018b42:	b30b      	cbz	r3, 8018b88 <__sfp+0x68>
 8018b44:	6836      	ldr	r6, [r6, #0]
 8018b46:	e7f7      	b.n	8018b38 <__sfp+0x18>
 8018b48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018b4c:	b9d5      	cbnz	r5, 8018b84 <__sfp+0x64>
 8018b4e:	4b16      	ldr	r3, [pc, #88]	; (8018ba8 <__sfp+0x88>)
 8018b50:	60e3      	str	r3, [r4, #12]
 8018b52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018b56:	6665      	str	r5, [r4, #100]	; 0x64
 8018b58:	f000 f84c 	bl	8018bf4 <__retarget_lock_init_recursive>
 8018b5c:	f7ff ff96 	bl	8018a8c <__sfp_lock_release>
 8018b60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018b64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018b68:	6025      	str	r5, [r4, #0]
 8018b6a:	61a5      	str	r5, [r4, #24]
 8018b6c:	2208      	movs	r2, #8
 8018b6e:	4629      	mov	r1, r5
 8018b70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018b74:	f7fe fbec 	bl	8017350 <memset>
 8018b78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018b7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018b80:	4620      	mov	r0, r4
 8018b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b84:	3468      	adds	r4, #104	; 0x68
 8018b86:	e7d9      	b.n	8018b3c <__sfp+0x1c>
 8018b88:	2104      	movs	r1, #4
 8018b8a:	4638      	mov	r0, r7
 8018b8c:	f7ff ff62 	bl	8018a54 <__sfmoreglue>
 8018b90:	4604      	mov	r4, r0
 8018b92:	6030      	str	r0, [r6, #0]
 8018b94:	2800      	cmp	r0, #0
 8018b96:	d1d5      	bne.n	8018b44 <__sfp+0x24>
 8018b98:	f7ff ff78 	bl	8018a8c <__sfp_lock_release>
 8018b9c:	230c      	movs	r3, #12
 8018b9e:	603b      	str	r3, [r7, #0]
 8018ba0:	e7ee      	b.n	8018b80 <__sfp+0x60>
 8018ba2:	bf00      	nop
 8018ba4:	0801d094 	.word	0x0801d094
 8018ba8:	ffff0001 	.word	0xffff0001

08018bac <_fwalk_reent>:
 8018bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018bb0:	4606      	mov	r6, r0
 8018bb2:	4688      	mov	r8, r1
 8018bb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018bb8:	2700      	movs	r7, #0
 8018bba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018bbe:	f1b9 0901 	subs.w	r9, r9, #1
 8018bc2:	d505      	bpl.n	8018bd0 <_fwalk_reent+0x24>
 8018bc4:	6824      	ldr	r4, [r4, #0]
 8018bc6:	2c00      	cmp	r4, #0
 8018bc8:	d1f7      	bne.n	8018bba <_fwalk_reent+0xe>
 8018bca:	4638      	mov	r0, r7
 8018bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018bd0:	89ab      	ldrh	r3, [r5, #12]
 8018bd2:	2b01      	cmp	r3, #1
 8018bd4:	d907      	bls.n	8018be6 <_fwalk_reent+0x3a>
 8018bd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018bda:	3301      	adds	r3, #1
 8018bdc:	d003      	beq.n	8018be6 <_fwalk_reent+0x3a>
 8018bde:	4629      	mov	r1, r5
 8018be0:	4630      	mov	r0, r6
 8018be2:	47c0      	blx	r8
 8018be4:	4307      	orrs	r7, r0
 8018be6:	3568      	adds	r5, #104	; 0x68
 8018be8:	e7e9      	b.n	8018bbe <_fwalk_reent+0x12>
	...

08018bec <_localeconv_r>:
 8018bec:	4800      	ldr	r0, [pc, #0]	; (8018bf0 <_localeconv_r+0x4>)
 8018bee:	4770      	bx	lr
 8018bf0:	20001520 	.word	0x20001520

08018bf4 <__retarget_lock_init_recursive>:
 8018bf4:	4770      	bx	lr

08018bf6 <__retarget_lock_acquire_recursive>:
 8018bf6:	4770      	bx	lr

08018bf8 <__retarget_lock_release_recursive>:
 8018bf8:	4770      	bx	lr
	...

08018bfc <malloc>:
 8018bfc:	4b02      	ldr	r3, [pc, #8]	; (8018c08 <malloc+0xc>)
 8018bfe:	4601      	mov	r1, r0
 8018c00:	6818      	ldr	r0, [r3, #0]
 8018c02:	f000 bbe1 	b.w	80193c8 <_malloc_r>
 8018c06:	bf00      	nop
 8018c08:	200013cc 	.word	0x200013cc

08018c0c <_Balloc>:
 8018c0c:	b570      	push	{r4, r5, r6, lr}
 8018c0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018c10:	4604      	mov	r4, r0
 8018c12:	460d      	mov	r5, r1
 8018c14:	b976      	cbnz	r6, 8018c34 <_Balloc+0x28>
 8018c16:	2010      	movs	r0, #16
 8018c18:	f7ff fff0 	bl	8018bfc <malloc>
 8018c1c:	4602      	mov	r2, r0
 8018c1e:	6260      	str	r0, [r4, #36]	; 0x24
 8018c20:	b920      	cbnz	r0, 8018c2c <_Balloc+0x20>
 8018c22:	4b18      	ldr	r3, [pc, #96]	; (8018c84 <_Balloc+0x78>)
 8018c24:	4818      	ldr	r0, [pc, #96]	; (8018c88 <_Balloc+0x7c>)
 8018c26:	2166      	movs	r1, #102	; 0x66
 8018c28:	f001 f804 	bl	8019c34 <__assert_func>
 8018c2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018c30:	6006      	str	r6, [r0, #0]
 8018c32:	60c6      	str	r6, [r0, #12]
 8018c34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018c36:	68f3      	ldr	r3, [r6, #12]
 8018c38:	b183      	cbz	r3, 8018c5c <_Balloc+0x50>
 8018c3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018c3c:	68db      	ldr	r3, [r3, #12]
 8018c3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018c42:	b9b8      	cbnz	r0, 8018c74 <_Balloc+0x68>
 8018c44:	2101      	movs	r1, #1
 8018c46:	fa01 f605 	lsl.w	r6, r1, r5
 8018c4a:	1d72      	adds	r2, r6, #5
 8018c4c:	0092      	lsls	r2, r2, #2
 8018c4e:	4620      	mov	r0, r4
 8018c50:	f000 fb5a 	bl	8019308 <_calloc_r>
 8018c54:	b160      	cbz	r0, 8018c70 <_Balloc+0x64>
 8018c56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018c5a:	e00e      	b.n	8018c7a <_Balloc+0x6e>
 8018c5c:	2221      	movs	r2, #33	; 0x21
 8018c5e:	2104      	movs	r1, #4
 8018c60:	4620      	mov	r0, r4
 8018c62:	f000 fb51 	bl	8019308 <_calloc_r>
 8018c66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018c68:	60f0      	str	r0, [r6, #12]
 8018c6a:	68db      	ldr	r3, [r3, #12]
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	d1e4      	bne.n	8018c3a <_Balloc+0x2e>
 8018c70:	2000      	movs	r0, #0
 8018c72:	bd70      	pop	{r4, r5, r6, pc}
 8018c74:	6802      	ldr	r2, [r0, #0]
 8018c76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018c7a:	2300      	movs	r3, #0
 8018c7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018c80:	e7f7      	b.n	8018c72 <_Balloc+0x66>
 8018c82:	bf00      	nop
 8018c84:	0801d0d9 	.word	0x0801d0d9
 8018c88:	0801d1c0 	.word	0x0801d1c0

08018c8c <_Bfree>:
 8018c8c:	b570      	push	{r4, r5, r6, lr}
 8018c8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018c90:	4605      	mov	r5, r0
 8018c92:	460c      	mov	r4, r1
 8018c94:	b976      	cbnz	r6, 8018cb4 <_Bfree+0x28>
 8018c96:	2010      	movs	r0, #16
 8018c98:	f7ff ffb0 	bl	8018bfc <malloc>
 8018c9c:	4602      	mov	r2, r0
 8018c9e:	6268      	str	r0, [r5, #36]	; 0x24
 8018ca0:	b920      	cbnz	r0, 8018cac <_Bfree+0x20>
 8018ca2:	4b09      	ldr	r3, [pc, #36]	; (8018cc8 <_Bfree+0x3c>)
 8018ca4:	4809      	ldr	r0, [pc, #36]	; (8018ccc <_Bfree+0x40>)
 8018ca6:	218a      	movs	r1, #138	; 0x8a
 8018ca8:	f000 ffc4 	bl	8019c34 <__assert_func>
 8018cac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018cb0:	6006      	str	r6, [r0, #0]
 8018cb2:	60c6      	str	r6, [r0, #12]
 8018cb4:	b13c      	cbz	r4, 8018cc6 <_Bfree+0x3a>
 8018cb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018cb8:	6862      	ldr	r2, [r4, #4]
 8018cba:	68db      	ldr	r3, [r3, #12]
 8018cbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018cc0:	6021      	str	r1, [r4, #0]
 8018cc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018cc6:	bd70      	pop	{r4, r5, r6, pc}
 8018cc8:	0801d0d9 	.word	0x0801d0d9
 8018ccc:	0801d1c0 	.word	0x0801d1c0

08018cd0 <__multadd>:
 8018cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cd4:	690e      	ldr	r6, [r1, #16]
 8018cd6:	4607      	mov	r7, r0
 8018cd8:	4698      	mov	r8, r3
 8018cda:	460c      	mov	r4, r1
 8018cdc:	f101 0014 	add.w	r0, r1, #20
 8018ce0:	2300      	movs	r3, #0
 8018ce2:	6805      	ldr	r5, [r0, #0]
 8018ce4:	b2a9      	uxth	r1, r5
 8018ce6:	fb02 8101 	mla	r1, r2, r1, r8
 8018cea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8018cee:	0c2d      	lsrs	r5, r5, #16
 8018cf0:	fb02 c505 	mla	r5, r2, r5, ip
 8018cf4:	b289      	uxth	r1, r1
 8018cf6:	3301      	adds	r3, #1
 8018cf8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8018cfc:	429e      	cmp	r6, r3
 8018cfe:	f840 1b04 	str.w	r1, [r0], #4
 8018d02:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8018d06:	dcec      	bgt.n	8018ce2 <__multadd+0x12>
 8018d08:	f1b8 0f00 	cmp.w	r8, #0
 8018d0c:	d022      	beq.n	8018d54 <__multadd+0x84>
 8018d0e:	68a3      	ldr	r3, [r4, #8]
 8018d10:	42b3      	cmp	r3, r6
 8018d12:	dc19      	bgt.n	8018d48 <__multadd+0x78>
 8018d14:	6861      	ldr	r1, [r4, #4]
 8018d16:	4638      	mov	r0, r7
 8018d18:	3101      	adds	r1, #1
 8018d1a:	f7ff ff77 	bl	8018c0c <_Balloc>
 8018d1e:	4605      	mov	r5, r0
 8018d20:	b928      	cbnz	r0, 8018d2e <__multadd+0x5e>
 8018d22:	4602      	mov	r2, r0
 8018d24:	4b0d      	ldr	r3, [pc, #52]	; (8018d5c <__multadd+0x8c>)
 8018d26:	480e      	ldr	r0, [pc, #56]	; (8018d60 <__multadd+0x90>)
 8018d28:	21b5      	movs	r1, #181	; 0xb5
 8018d2a:	f000 ff83 	bl	8019c34 <__assert_func>
 8018d2e:	6922      	ldr	r2, [r4, #16]
 8018d30:	3202      	adds	r2, #2
 8018d32:	f104 010c 	add.w	r1, r4, #12
 8018d36:	0092      	lsls	r2, r2, #2
 8018d38:	300c      	adds	r0, #12
 8018d3a:	f7fe fafb 	bl	8017334 <memcpy>
 8018d3e:	4621      	mov	r1, r4
 8018d40:	4638      	mov	r0, r7
 8018d42:	f7ff ffa3 	bl	8018c8c <_Bfree>
 8018d46:	462c      	mov	r4, r5
 8018d48:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8018d4c:	3601      	adds	r6, #1
 8018d4e:	f8c3 8014 	str.w	r8, [r3, #20]
 8018d52:	6126      	str	r6, [r4, #16]
 8018d54:	4620      	mov	r0, r4
 8018d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d5a:	bf00      	nop
 8018d5c:	0801d14f 	.word	0x0801d14f
 8018d60:	0801d1c0 	.word	0x0801d1c0

08018d64 <__hi0bits>:
 8018d64:	0c03      	lsrs	r3, r0, #16
 8018d66:	041b      	lsls	r3, r3, #16
 8018d68:	b9d3      	cbnz	r3, 8018da0 <__hi0bits+0x3c>
 8018d6a:	0400      	lsls	r0, r0, #16
 8018d6c:	2310      	movs	r3, #16
 8018d6e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018d72:	bf04      	itt	eq
 8018d74:	0200      	lsleq	r0, r0, #8
 8018d76:	3308      	addeq	r3, #8
 8018d78:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018d7c:	bf04      	itt	eq
 8018d7e:	0100      	lsleq	r0, r0, #4
 8018d80:	3304      	addeq	r3, #4
 8018d82:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018d86:	bf04      	itt	eq
 8018d88:	0080      	lsleq	r0, r0, #2
 8018d8a:	3302      	addeq	r3, #2
 8018d8c:	2800      	cmp	r0, #0
 8018d8e:	db05      	blt.n	8018d9c <__hi0bits+0x38>
 8018d90:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018d94:	f103 0301 	add.w	r3, r3, #1
 8018d98:	bf08      	it	eq
 8018d9a:	2320      	moveq	r3, #32
 8018d9c:	4618      	mov	r0, r3
 8018d9e:	4770      	bx	lr
 8018da0:	2300      	movs	r3, #0
 8018da2:	e7e4      	b.n	8018d6e <__hi0bits+0xa>

08018da4 <__lo0bits>:
 8018da4:	6803      	ldr	r3, [r0, #0]
 8018da6:	f013 0207 	ands.w	r2, r3, #7
 8018daa:	4601      	mov	r1, r0
 8018dac:	d00b      	beq.n	8018dc6 <__lo0bits+0x22>
 8018dae:	07da      	lsls	r2, r3, #31
 8018db0:	d424      	bmi.n	8018dfc <__lo0bits+0x58>
 8018db2:	0798      	lsls	r0, r3, #30
 8018db4:	bf49      	itett	mi
 8018db6:	085b      	lsrmi	r3, r3, #1
 8018db8:	089b      	lsrpl	r3, r3, #2
 8018dba:	2001      	movmi	r0, #1
 8018dbc:	600b      	strmi	r3, [r1, #0]
 8018dbe:	bf5c      	itt	pl
 8018dc0:	600b      	strpl	r3, [r1, #0]
 8018dc2:	2002      	movpl	r0, #2
 8018dc4:	4770      	bx	lr
 8018dc6:	b298      	uxth	r0, r3
 8018dc8:	b9b0      	cbnz	r0, 8018df8 <__lo0bits+0x54>
 8018dca:	0c1b      	lsrs	r3, r3, #16
 8018dcc:	2010      	movs	r0, #16
 8018dce:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018dd2:	bf04      	itt	eq
 8018dd4:	0a1b      	lsreq	r3, r3, #8
 8018dd6:	3008      	addeq	r0, #8
 8018dd8:	071a      	lsls	r2, r3, #28
 8018dda:	bf04      	itt	eq
 8018ddc:	091b      	lsreq	r3, r3, #4
 8018dde:	3004      	addeq	r0, #4
 8018de0:	079a      	lsls	r2, r3, #30
 8018de2:	bf04      	itt	eq
 8018de4:	089b      	lsreq	r3, r3, #2
 8018de6:	3002      	addeq	r0, #2
 8018de8:	07da      	lsls	r2, r3, #31
 8018dea:	d403      	bmi.n	8018df4 <__lo0bits+0x50>
 8018dec:	085b      	lsrs	r3, r3, #1
 8018dee:	f100 0001 	add.w	r0, r0, #1
 8018df2:	d005      	beq.n	8018e00 <__lo0bits+0x5c>
 8018df4:	600b      	str	r3, [r1, #0]
 8018df6:	4770      	bx	lr
 8018df8:	4610      	mov	r0, r2
 8018dfa:	e7e8      	b.n	8018dce <__lo0bits+0x2a>
 8018dfc:	2000      	movs	r0, #0
 8018dfe:	4770      	bx	lr
 8018e00:	2020      	movs	r0, #32
 8018e02:	4770      	bx	lr

08018e04 <__i2b>:
 8018e04:	b510      	push	{r4, lr}
 8018e06:	460c      	mov	r4, r1
 8018e08:	2101      	movs	r1, #1
 8018e0a:	f7ff feff 	bl	8018c0c <_Balloc>
 8018e0e:	4602      	mov	r2, r0
 8018e10:	b928      	cbnz	r0, 8018e1e <__i2b+0x1a>
 8018e12:	4b05      	ldr	r3, [pc, #20]	; (8018e28 <__i2b+0x24>)
 8018e14:	4805      	ldr	r0, [pc, #20]	; (8018e2c <__i2b+0x28>)
 8018e16:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8018e1a:	f000 ff0b 	bl	8019c34 <__assert_func>
 8018e1e:	2301      	movs	r3, #1
 8018e20:	6144      	str	r4, [r0, #20]
 8018e22:	6103      	str	r3, [r0, #16]
 8018e24:	bd10      	pop	{r4, pc}
 8018e26:	bf00      	nop
 8018e28:	0801d14f 	.word	0x0801d14f
 8018e2c:	0801d1c0 	.word	0x0801d1c0

08018e30 <__multiply>:
 8018e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e34:	4614      	mov	r4, r2
 8018e36:	690a      	ldr	r2, [r1, #16]
 8018e38:	6923      	ldr	r3, [r4, #16]
 8018e3a:	429a      	cmp	r2, r3
 8018e3c:	bfb8      	it	lt
 8018e3e:	460b      	movlt	r3, r1
 8018e40:	460d      	mov	r5, r1
 8018e42:	bfbc      	itt	lt
 8018e44:	4625      	movlt	r5, r4
 8018e46:	461c      	movlt	r4, r3
 8018e48:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8018e4c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018e50:	68ab      	ldr	r3, [r5, #8]
 8018e52:	6869      	ldr	r1, [r5, #4]
 8018e54:	eb0a 0709 	add.w	r7, sl, r9
 8018e58:	42bb      	cmp	r3, r7
 8018e5a:	b085      	sub	sp, #20
 8018e5c:	bfb8      	it	lt
 8018e5e:	3101      	addlt	r1, #1
 8018e60:	f7ff fed4 	bl	8018c0c <_Balloc>
 8018e64:	b930      	cbnz	r0, 8018e74 <__multiply+0x44>
 8018e66:	4602      	mov	r2, r0
 8018e68:	4b42      	ldr	r3, [pc, #264]	; (8018f74 <__multiply+0x144>)
 8018e6a:	4843      	ldr	r0, [pc, #268]	; (8018f78 <__multiply+0x148>)
 8018e6c:	f240 115d 	movw	r1, #349	; 0x15d
 8018e70:	f000 fee0 	bl	8019c34 <__assert_func>
 8018e74:	f100 0614 	add.w	r6, r0, #20
 8018e78:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8018e7c:	4633      	mov	r3, r6
 8018e7e:	2200      	movs	r2, #0
 8018e80:	4543      	cmp	r3, r8
 8018e82:	d31e      	bcc.n	8018ec2 <__multiply+0x92>
 8018e84:	f105 0c14 	add.w	ip, r5, #20
 8018e88:	f104 0314 	add.w	r3, r4, #20
 8018e8c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8018e90:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8018e94:	9202      	str	r2, [sp, #8]
 8018e96:	ebac 0205 	sub.w	r2, ip, r5
 8018e9a:	3a15      	subs	r2, #21
 8018e9c:	f022 0203 	bic.w	r2, r2, #3
 8018ea0:	3204      	adds	r2, #4
 8018ea2:	f105 0115 	add.w	r1, r5, #21
 8018ea6:	458c      	cmp	ip, r1
 8018ea8:	bf38      	it	cc
 8018eaa:	2204      	movcc	r2, #4
 8018eac:	9201      	str	r2, [sp, #4]
 8018eae:	9a02      	ldr	r2, [sp, #8]
 8018eb0:	9303      	str	r3, [sp, #12]
 8018eb2:	429a      	cmp	r2, r3
 8018eb4:	d808      	bhi.n	8018ec8 <__multiply+0x98>
 8018eb6:	2f00      	cmp	r7, #0
 8018eb8:	dc55      	bgt.n	8018f66 <__multiply+0x136>
 8018eba:	6107      	str	r7, [r0, #16]
 8018ebc:	b005      	add	sp, #20
 8018ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ec2:	f843 2b04 	str.w	r2, [r3], #4
 8018ec6:	e7db      	b.n	8018e80 <__multiply+0x50>
 8018ec8:	f8b3 a000 	ldrh.w	sl, [r3]
 8018ecc:	f1ba 0f00 	cmp.w	sl, #0
 8018ed0:	d020      	beq.n	8018f14 <__multiply+0xe4>
 8018ed2:	f105 0e14 	add.w	lr, r5, #20
 8018ed6:	46b1      	mov	r9, r6
 8018ed8:	2200      	movs	r2, #0
 8018eda:	f85e 4b04 	ldr.w	r4, [lr], #4
 8018ede:	f8d9 b000 	ldr.w	fp, [r9]
 8018ee2:	b2a1      	uxth	r1, r4
 8018ee4:	fa1f fb8b 	uxth.w	fp, fp
 8018ee8:	fb0a b101 	mla	r1, sl, r1, fp
 8018eec:	4411      	add	r1, r2
 8018eee:	f8d9 2000 	ldr.w	r2, [r9]
 8018ef2:	0c24      	lsrs	r4, r4, #16
 8018ef4:	0c12      	lsrs	r2, r2, #16
 8018ef6:	fb0a 2404 	mla	r4, sl, r4, r2
 8018efa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8018efe:	b289      	uxth	r1, r1
 8018f00:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8018f04:	45f4      	cmp	ip, lr
 8018f06:	f849 1b04 	str.w	r1, [r9], #4
 8018f0a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8018f0e:	d8e4      	bhi.n	8018eda <__multiply+0xaa>
 8018f10:	9901      	ldr	r1, [sp, #4]
 8018f12:	5072      	str	r2, [r6, r1]
 8018f14:	9a03      	ldr	r2, [sp, #12]
 8018f16:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018f1a:	3304      	adds	r3, #4
 8018f1c:	f1b9 0f00 	cmp.w	r9, #0
 8018f20:	d01f      	beq.n	8018f62 <__multiply+0x132>
 8018f22:	6834      	ldr	r4, [r6, #0]
 8018f24:	f105 0114 	add.w	r1, r5, #20
 8018f28:	46b6      	mov	lr, r6
 8018f2a:	f04f 0a00 	mov.w	sl, #0
 8018f2e:	880a      	ldrh	r2, [r1, #0]
 8018f30:	f8be b002 	ldrh.w	fp, [lr, #2]
 8018f34:	fb09 b202 	mla	r2, r9, r2, fp
 8018f38:	4492      	add	sl, r2
 8018f3a:	b2a4      	uxth	r4, r4
 8018f3c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8018f40:	f84e 4b04 	str.w	r4, [lr], #4
 8018f44:	f851 4b04 	ldr.w	r4, [r1], #4
 8018f48:	f8be 2000 	ldrh.w	r2, [lr]
 8018f4c:	0c24      	lsrs	r4, r4, #16
 8018f4e:	fb09 2404 	mla	r4, r9, r4, r2
 8018f52:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8018f56:	458c      	cmp	ip, r1
 8018f58:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018f5c:	d8e7      	bhi.n	8018f2e <__multiply+0xfe>
 8018f5e:	9a01      	ldr	r2, [sp, #4]
 8018f60:	50b4      	str	r4, [r6, r2]
 8018f62:	3604      	adds	r6, #4
 8018f64:	e7a3      	b.n	8018eae <__multiply+0x7e>
 8018f66:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	d1a5      	bne.n	8018eba <__multiply+0x8a>
 8018f6e:	3f01      	subs	r7, #1
 8018f70:	e7a1      	b.n	8018eb6 <__multiply+0x86>
 8018f72:	bf00      	nop
 8018f74:	0801d14f 	.word	0x0801d14f
 8018f78:	0801d1c0 	.word	0x0801d1c0

08018f7c <__pow5mult>:
 8018f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f80:	4615      	mov	r5, r2
 8018f82:	f012 0203 	ands.w	r2, r2, #3
 8018f86:	4606      	mov	r6, r0
 8018f88:	460f      	mov	r7, r1
 8018f8a:	d007      	beq.n	8018f9c <__pow5mult+0x20>
 8018f8c:	4c25      	ldr	r4, [pc, #148]	; (8019024 <__pow5mult+0xa8>)
 8018f8e:	3a01      	subs	r2, #1
 8018f90:	2300      	movs	r3, #0
 8018f92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018f96:	f7ff fe9b 	bl	8018cd0 <__multadd>
 8018f9a:	4607      	mov	r7, r0
 8018f9c:	10ad      	asrs	r5, r5, #2
 8018f9e:	d03d      	beq.n	801901c <__pow5mult+0xa0>
 8018fa0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018fa2:	b97c      	cbnz	r4, 8018fc4 <__pow5mult+0x48>
 8018fa4:	2010      	movs	r0, #16
 8018fa6:	f7ff fe29 	bl	8018bfc <malloc>
 8018faa:	4602      	mov	r2, r0
 8018fac:	6270      	str	r0, [r6, #36]	; 0x24
 8018fae:	b928      	cbnz	r0, 8018fbc <__pow5mult+0x40>
 8018fb0:	4b1d      	ldr	r3, [pc, #116]	; (8019028 <__pow5mult+0xac>)
 8018fb2:	481e      	ldr	r0, [pc, #120]	; (801902c <__pow5mult+0xb0>)
 8018fb4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8018fb8:	f000 fe3c 	bl	8019c34 <__assert_func>
 8018fbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018fc0:	6004      	str	r4, [r0, #0]
 8018fc2:	60c4      	str	r4, [r0, #12]
 8018fc4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018fc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018fcc:	b94c      	cbnz	r4, 8018fe2 <__pow5mult+0x66>
 8018fce:	f240 2171 	movw	r1, #625	; 0x271
 8018fd2:	4630      	mov	r0, r6
 8018fd4:	f7ff ff16 	bl	8018e04 <__i2b>
 8018fd8:	2300      	movs	r3, #0
 8018fda:	f8c8 0008 	str.w	r0, [r8, #8]
 8018fde:	4604      	mov	r4, r0
 8018fe0:	6003      	str	r3, [r0, #0]
 8018fe2:	f04f 0900 	mov.w	r9, #0
 8018fe6:	07eb      	lsls	r3, r5, #31
 8018fe8:	d50a      	bpl.n	8019000 <__pow5mult+0x84>
 8018fea:	4639      	mov	r1, r7
 8018fec:	4622      	mov	r2, r4
 8018fee:	4630      	mov	r0, r6
 8018ff0:	f7ff ff1e 	bl	8018e30 <__multiply>
 8018ff4:	4639      	mov	r1, r7
 8018ff6:	4680      	mov	r8, r0
 8018ff8:	4630      	mov	r0, r6
 8018ffa:	f7ff fe47 	bl	8018c8c <_Bfree>
 8018ffe:	4647      	mov	r7, r8
 8019000:	106d      	asrs	r5, r5, #1
 8019002:	d00b      	beq.n	801901c <__pow5mult+0xa0>
 8019004:	6820      	ldr	r0, [r4, #0]
 8019006:	b938      	cbnz	r0, 8019018 <__pow5mult+0x9c>
 8019008:	4622      	mov	r2, r4
 801900a:	4621      	mov	r1, r4
 801900c:	4630      	mov	r0, r6
 801900e:	f7ff ff0f 	bl	8018e30 <__multiply>
 8019012:	6020      	str	r0, [r4, #0]
 8019014:	f8c0 9000 	str.w	r9, [r0]
 8019018:	4604      	mov	r4, r0
 801901a:	e7e4      	b.n	8018fe6 <__pow5mult+0x6a>
 801901c:	4638      	mov	r0, r7
 801901e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019022:	bf00      	nop
 8019024:	0801d310 	.word	0x0801d310
 8019028:	0801d0d9 	.word	0x0801d0d9
 801902c:	0801d1c0 	.word	0x0801d1c0

08019030 <__lshift>:
 8019030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019034:	460c      	mov	r4, r1
 8019036:	6849      	ldr	r1, [r1, #4]
 8019038:	6923      	ldr	r3, [r4, #16]
 801903a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801903e:	68a3      	ldr	r3, [r4, #8]
 8019040:	4607      	mov	r7, r0
 8019042:	4691      	mov	r9, r2
 8019044:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019048:	f108 0601 	add.w	r6, r8, #1
 801904c:	42b3      	cmp	r3, r6
 801904e:	db0b      	blt.n	8019068 <__lshift+0x38>
 8019050:	4638      	mov	r0, r7
 8019052:	f7ff fddb 	bl	8018c0c <_Balloc>
 8019056:	4605      	mov	r5, r0
 8019058:	b948      	cbnz	r0, 801906e <__lshift+0x3e>
 801905a:	4602      	mov	r2, r0
 801905c:	4b28      	ldr	r3, [pc, #160]	; (8019100 <__lshift+0xd0>)
 801905e:	4829      	ldr	r0, [pc, #164]	; (8019104 <__lshift+0xd4>)
 8019060:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019064:	f000 fde6 	bl	8019c34 <__assert_func>
 8019068:	3101      	adds	r1, #1
 801906a:	005b      	lsls	r3, r3, #1
 801906c:	e7ee      	b.n	801904c <__lshift+0x1c>
 801906e:	2300      	movs	r3, #0
 8019070:	f100 0114 	add.w	r1, r0, #20
 8019074:	f100 0210 	add.w	r2, r0, #16
 8019078:	4618      	mov	r0, r3
 801907a:	4553      	cmp	r3, sl
 801907c:	db33      	blt.n	80190e6 <__lshift+0xb6>
 801907e:	6920      	ldr	r0, [r4, #16]
 8019080:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019084:	f104 0314 	add.w	r3, r4, #20
 8019088:	f019 091f 	ands.w	r9, r9, #31
 801908c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019090:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019094:	d02b      	beq.n	80190ee <__lshift+0xbe>
 8019096:	f1c9 0e20 	rsb	lr, r9, #32
 801909a:	468a      	mov	sl, r1
 801909c:	2200      	movs	r2, #0
 801909e:	6818      	ldr	r0, [r3, #0]
 80190a0:	fa00 f009 	lsl.w	r0, r0, r9
 80190a4:	4302      	orrs	r2, r0
 80190a6:	f84a 2b04 	str.w	r2, [sl], #4
 80190aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80190ae:	459c      	cmp	ip, r3
 80190b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80190b4:	d8f3      	bhi.n	801909e <__lshift+0x6e>
 80190b6:	ebac 0304 	sub.w	r3, ip, r4
 80190ba:	3b15      	subs	r3, #21
 80190bc:	f023 0303 	bic.w	r3, r3, #3
 80190c0:	3304      	adds	r3, #4
 80190c2:	f104 0015 	add.w	r0, r4, #21
 80190c6:	4584      	cmp	ip, r0
 80190c8:	bf38      	it	cc
 80190ca:	2304      	movcc	r3, #4
 80190cc:	50ca      	str	r2, [r1, r3]
 80190ce:	b10a      	cbz	r2, 80190d4 <__lshift+0xa4>
 80190d0:	f108 0602 	add.w	r6, r8, #2
 80190d4:	3e01      	subs	r6, #1
 80190d6:	4638      	mov	r0, r7
 80190d8:	612e      	str	r6, [r5, #16]
 80190da:	4621      	mov	r1, r4
 80190dc:	f7ff fdd6 	bl	8018c8c <_Bfree>
 80190e0:	4628      	mov	r0, r5
 80190e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80190ea:	3301      	adds	r3, #1
 80190ec:	e7c5      	b.n	801907a <__lshift+0x4a>
 80190ee:	3904      	subs	r1, #4
 80190f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80190f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80190f8:	459c      	cmp	ip, r3
 80190fa:	d8f9      	bhi.n	80190f0 <__lshift+0xc0>
 80190fc:	e7ea      	b.n	80190d4 <__lshift+0xa4>
 80190fe:	bf00      	nop
 8019100:	0801d14f 	.word	0x0801d14f
 8019104:	0801d1c0 	.word	0x0801d1c0

08019108 <__mcmp>:
 8019108:	b530      	push	{r4, r5, lr}
 801910a:	6902      	ldr	r2, [r0, #16]
 801910c:	690c      	ldr	r4, [r1, #16]
 801910e:	1b12      	subs	r2, r2, r4
 8019110:	d10e      	bne.n	8019130 <__mcmp+0x28>
 8019112:	f100 0314 	add.w	r3, r0, #20
 8019116:	3114      	adds	r1, #20
 8019118:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801911c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019120:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019124:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019128:	42a5      	cmp	r5, r4
 801912a:	d003      	beq.n	8019134 <__mcmp+0x2c>
 801912c:	d305      	bcc.n	801913a <__mcmp+0x32>
 801912e:	2201      	movs	r2, #1
 8019130:	4610      	mov	r0, r2
 8019132:	bd30      	pop	{r4, r5, pc}
 8019134:	4283      	cmp	r3, r0
 8019136:	d3f3      	bcc.n	8019120 <__mcmp+0x18>
 8019138:	e7fa      	b.n	8019130 <__mcmp+0x28>
 801913a:	f04f 32ff 	mov.w	r2, #4294967295
 801913e:	e7f7      	b.n	8019130 <__mcmp+0x28>

08019140 <__mdiff>:
 8019140:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019144:	460c      	mov	r4, r1
 8019146:	4606      	mov	r6, r0
 8019148:	4611      	mov	r1, r2
 801914a:	4620      	mov	r0, r4
 801914c:	4617      	mov	r7, r2
 801914e:	f7ff ffdb 	bl	8019108 <__mcmp>
 8019152:	1e05      	subs	r5, r0, #0
 8019154:	d110      	bne.n	8019178 <__mdiff+0x38>
 8019156:	4629      	mov	r1, r5
 8019158:	4630      	mov	r0, r6
 801915a:	f7ff fd57 	bl	8018c0c <_Balloc>
 801915e:	b930      	cbnz	r0, 801916e <__mdiff+0x2e>
 8019160:	4b39      	ldr	r3, [pc, #228]	; (8019248 <__mdiff+0x108>)
 8019162:	4602      	mov	r2, r0
 8019164:	f240 2132 	movw	r1, #562	; 0x232
 8019168:	4838      	ldr	r0, [pc, #224]	; (801924c <__mdiff+0x10c>)
 801916a:	f000 fd63 	bl	8019c34 <__assert_func>
 801916e:	2301      	movs	r3, #1
 8019170:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019174:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019178:	bfa4      	itt	ge
 801917a:	463b      	movge	r3, r7
 801917c:	4627      	movge	r7, r4
 801917e:	4630      	mov	r0, r6
 8019180:	6879      	ldr	r1, [r7, #4]
 8019182:	bfa6      	itte	ge
 8019184:	461c      	movge	r4, r3
 8019186:	2500      	movge	r5, #0
 8019188:	2501      	movlt	r5, #1
 801918a:	f7ff fd3f 	bl	8018c0c <_Balloc>
 801918e:	b920      	cbnz	r0, 801919a <__mdiff+0x5a>
 8019190:	4b2d      	ldr	r3, [pc, #180]	; (8019248 <__mdiff+0x108>)
 8019192:	4602      	mov	r2, r0
 8019194:	f44f 7110 	mov.w	r1, #576	; 0x240
 8019198:	e7e6      	b.n	8019168 <__mdiff+0x28>
 801919a:	693e      	ldr	r6, [r7, #16]
 801919c:	60c5      	str	r5, [r0, #12]
 801919e:	6925      	ldr	r5, [r4, #16]
 80191a0:	f107 0114 	add.w	r1, r7, #20
 80191a4:	f104 0914 	add.w	r9, r4, #20
 80191a8:	f100 0e14 	add.w	lr, r0, #20
 80191ac:	f107 0210 	add.w	r2, r7, #16
 80191b0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80191b4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80191b8:	46f2      	mov	sl, lr
 80191ba:	2700      	movs	r7, #0
 80191bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80191c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80191c4:	fa1f f883 	uxth.w	r8, r3
 80191c8:	fa17 f78b 	uxtah	r7, r7, fp
 80191cc:	0c1b      	lsrs	r3, r3, #16
 80191ce:	eba7 0808 	sub.w	r8, r7, r8
 80191d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80191d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80191da:	fa1f f888 	uxth.w	r8, r8
 80191de:	141f      	asrs	r7, r3, #16
 80191e0:	454d      	cmp	r5, r9
 80191e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80191e6:	f84a 3b04 	str.w	r3, [sl], #4
 80191ea:	d8e7      	bhi.n	80191bc <__mdiff+0x7c>
 80191ec:	1b2b      	subs	r3, r5, r4
 80191ee:	3b15      	subs	r3, #21
 80191f0:	f023 0303 	bic.w	r3, r3, #3
 80191f4:	3304      	adds	r3, #4
 80191f6:	3415      	adds	r4, #21
 80191f8:	42a5      	cmp	r5, r4
 80191fa:	bf38      	it	cc
 80191fc:	2304      	movcc	r3, #4
 80191fe:	4419      	add	r1, r3
 8019200:	4473      	add	r3, lr
 8019202:	469e      	mov	lr, r3
 8019204:	460d      	mov	r5, r1
 8019206:	4565      	cmp	r5, ip
 8019208:	d30e      	bcc.n	8019228 <__mdiff+0xe8>
 801920a:	f10c 0203 	add.w	r2, ip, #3
 801920e:	1a52      	subs	r2, r2, r1
 8019210:	f022 0203 	bic.w	r2, r2, #3
 8019214:	3903      	subs	r1, #3
 8019216:	458c      	cmp	ip, r1
 8019218:	bf38      	it	cc
 801921a:	2200      	movcc	r2, #0
 801921c:	441a      	add	r2, r3
 801921e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019222:	b17b      	cbz	r3, 8019244 <__mdiff+0x104>
 8019224:	6106      	str	r6, [r0, #16]
 8019226:	e7a5      	b.n	8019174 <__mdiff+0x34>
 8019228:	f855 8b04 	ldr.w	r8, [r5], #4
 801922c:	fa17 f488 	uxtah	r4, r7, r8
 8019230:	1422      	asrs	r2, r4, #16
 8019232:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8019236:	b2a4      	uxth	r4, r4
 8019238:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801923c:	f84e 4b04 	str.w	r4, [lr], #4
 8019240:	1417      	asrs	r7, r2, #16
 8019242:	e7e0      	b.n	8019206 <__mdiff+0xc6>
 8019244:	3e01      	subs	r6, #1
 8019246:	e7ea      	b.n	801921e <__mdiff+0xde>
 8019248:	0801d14f 	.word	0x0801d14f
 801924c:	0801d1c0 	.word	0x0801d1c0

08019250 <__d2b>:
 8019250:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019254:	4689      	mov	r9, r1
 8019256:	2101      	movs	r1, #1
 8019258:	ec57 6b10 	vmov	r6, r7, d0
 801925c:	4690      	mov	r8, r2
 801925e:	f7ff fcd5 	bl	8018c0c <_Balloc>
 8019262:	4604      	mov	r4, r0
 8019264:	b930      	cbnz	r0, 8019274 <__d2b+0x24>
 8019266:	4602      	mov	r2, r0
 8019268:	4b25      	ldr	r3, [pc, #148]	; (8019300 <__d2b+0xb0>)
 801926a:	4826      	ldr	r0, [pc, #152]	; (8019304 <__d2b+0xb4>)
 801926c:	f240 310a 	movw	r1, #778	; 0x30a
 8019270:	f000 fce0 	bl	8019c34 <__assert_func>
 8019274:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019278:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801927c:	bb35      	cbnz	r5, 80192cc <__d2b+0x7c>
 801927e:	2e00      	cmp	r6, #0
 8019280:	9301      	str	r3, [sp, #4]
 8019282:	d028      	beq.n	80192d6 <__d2b+0x86>
 8019284:	4668      	mov	r0, sp
 8019286:	9600      	str	r6, [sp, #0]
 8019288:	f7ff fd8c 	bl	8018da4 <__lo0bits>
 801928c:	9900      	ldr	r1, [sp, #0]
 801928e:	b300      	cbz	r0, 80192d2 <__d2b+0x82>
 8019290:	9a01      	ldr	r2, [sp, #4]
 8019292:	f1c0 0320 	rsb	r3, r0, #32
 8019296:	fa02 f303 	lsl.w	r3, r2, r3
 801929a:	430b      	orrs	r3, r1
 801929c:	40c2      	lsrs	r2, r0
 801929e:	6163      	str	r3, [r4, #20]
 80192a0:	9201      	str	r2, [sp, #4]
 80192a2:	9b01      	ldr	r3, [sp, #4]
 80192a4:	61a3      	str	r3, [r4, #24]
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	bf14      	ite	ne
 80192aa:	2202      	movne	r2, #2
 80192ac:	2201      	moveq	r2, #1
 80192ae:	6122      	str	r2, [r4, #16]
 80192b0:	b1d5      	cbz	r5, 80192e8 <__d2b+0x98>
 80192b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80192b6:	4405      	add	r5, r0
 80192b8:	f8c9 5000 	str.w	r5, [r9]
 80192bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80192c0:	f8c8 0000 	str.w	r0, [r8]
 80192c4:	4620      	mov	r0, r4
 80192c6:	b003      	add	sp, #12
 80192c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80192cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80192d0:	e7d5      	b.n	801927e <__d2b+0x2e>
 80192d2:	6161      	str	r1, [r4, #20]
 80192d4:	e7e5      	b.n	80192a2 <__d2b+0x52>
 80192d6:	a801      	add	r0, sp, #4
 80192d8:	f7ff fd64 	bl	8018da4 <__lo0bits>
 80192dc:	9b01      	ldr	r3, [sp, #4]
 80192de:	6163      	str	r3, [r4, #20]
 80192e0:	2201      	movs	r2, #1
 80192e2:	6122      	str	r2, [r4, #16]
 80192e4:	3020      	adds	r0, #32
 80192e6:	e7e3      	b.n	80192b0 <__d2b+0x60>
 80192e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80192ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80192f0:	f8c9 0000 	str.w	r0, [r9]
 80192f4:	6918      	ldr	r0, [r3, #16]
 80192f6:	f7ff fd35 	bl	8018d64 <__hi0bits>
 80192fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80192fe:	e7df      	b.n	80192c0 <__d2b+0x70>
 8019300:	0801d14f 	.word	0x0801d14f
 8019304:	0801d1c0 	.word	0x0801d1c0

08019308 <_calloc_r>:
 8019308:	b513      	push	{r0, r1, r4, lr}
 801930a:	434a      	muls	r2, r1
 801930c:	4611      	mov	r1, r2
 801930e:	9201      	str	r2, [sp, #4]
 8019310:	f000 f85a 	bl	80193c8 <_malloc_r>
 8019314:	4604      	mov	r4, r0
 8019316:	b118      	cbz	r0, 8019320 <_calloc_r+0x18>
 8019318:	9a01      	ldr	r2, [sp, #4]
 801931a:	2100      	movs	r1, #0
 801931c:	f7fe f818 	bl	8017350 <memset>
 8019320:	4620      	mov	r0, r4
 8019322:	b002      	add	sp, #8
 8019324:	bd10      	pop	{r4, pc}
	...

08019328 <_free_r>:
 8019328:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801932a:	2900      	cmp	r1, #0
 801932c:	d048      	beq.n	80193c0 <_free_r+0x98>
 801932e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019332:	9001      	str	r0, [sp, #4]
 8019334:	2b00      	cmp	r3, #0
 8019336:	f1a1 0404 	sub.w	r4, r1, #4
 801933a:	bfb8      	it	lt
 801933c:	18e4      	addlt	r4, r4, r3
 801933e:	f000 fe1d 	bl	8019f7c <__malloc_lock>
 8019342:	4a20      	ldr	r2, [pc, #128]	; (80193c4 <_free_r+0x9c>)
 8019344:	9801      	ldr	r0, [sp, #4]
 8019346:	6813      	ldr	r3, [r2, #0]
 8019348:	4615      	mov	r5, r2
 801934a:	b933      	cbnz	r3, 801935a <_free_r+0x32>
 801934c:	6063      	str	r3, [r4, #4]
 801934e:	6014      	str	r4, [r2, #0]
 8019350:	b003      	add	sp, #12
 8019352:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019356:	f000 be17 	b.w	8019f88 <__malloc_unlock>
 801935a:	42a3      	cmp	r3, r4
 801935c:	d90b      	bls.n	8019376 <_free_r+0x4e>
 801935e:	6821      	ldr	r1, [r4, #0]
 8019360:	1862      	adds	r2, r4, r1
 8019362:	4293      	cmp	r3, r2
 8019364:	bf04      	itt	eq
 8019366:	681a      	ldreq	r2, [r3, #0]
 8019368:	685b      	ldreq	r3, [r3, #4]
 801936a:	6063      	str	r3, [r4, #4]
 801936c:	bf04      	itt	eq
 801936e:	1852      	addeq	r2, r2, r1
 8019370:	6022      	streq	r2, [r4, #0]
 8019372:	602c      	str	r4, [r5, #0]
 8019374:	e7ec      	b.n	8019350 <_free_r+0x28>
 8019376:	461a      	mov	r2, r3
 8019378:	685b      	ldr	r3, [r3, #4]
 801937a:	b10b      	cbz	r3, 8019380 <_free_r+0x58>
 801937c:	42a3      	cmp	r3, r4
 801937e:	d9fa      	bls.n	8019376 <_free_r+0x4e>
 8019380:	6811      	ldr	r1, [r2, #0]
 8019382:	1855      	adds	r5, r2, r1
 8019384:	42a5      	cmp	r5, r4
 8019386:	d10b      	bne.n	80193a0 <_free_r+0x78>
 8019388:	6824      	ldr	r4, [r4, #0]
 801938a:	4421      	add	r1, r4
 801938c:	1854      	adds	r4, r2, r1
 801938e:	42a3      	cmp	r3, r4
 8019390:	6011      	str	r1, [r2, #0]
 8019392:	d1dd      	bne.n	8019350 <_free_r+0x28>
 8019394:	681c      	ldr	r4, [r3, #0]
 8019396:	685b      	ldr	r3, [r3, #4]
 8019398:	6053      	str	r3, [r2, #4]
 801939a:	4421      	add	r1, r4
 801939c:	6011      	str	r1, [r2, #0]
 801939e:	e7d7      	b.n	8019350 <_free_r+0x28>
 80193a0:	d902      	bls.n	80193a8 <_free_r+0x80>
 80193a2:	230c      	movs	r3, #12
 80193a4:	6003      	str	r3, [r0, #0]
 80193a6:	e7d3      	b.n	8019350 <_free_r+0x28>
 80193a8:	6825      	ldr	r5, [r4, #0]
 80193aa:	1961      	adds	r1, r4, r5
 80193ac:	428b      	cmp	r3, r1
 80193ae:	bf04      	itt	eq
 80193b0:	6819      	ldreq	r1, [r3, #0]
 80193b2:	685b      	ldreq	r3, [r3, #4]
 80193b4:	6063      	str	r3, [r4, #4]
 80193b6:	bf04      	itt	eq
 80193b8:	1949      	addeq	r1, r1, r5
 80193ba:	6021      	streq	r1, [r4, #0]
 80193bc:	6054      	str	r4, [r2, #4]
 80193be:	e7c7      	b.n	8019350 <_free_r+0x28>
 80193c0:	b003      	add	sp, #12
 80193c2:	bd30      	pop	{r4, r5, pc}
 80193c4:	2000944c 	.word	0x2000944c

080193c8 <_malloc_r>:
 80193c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193ca:	1ccd      	adds	r5, r1, #3
 80193cc:	f025 0503 	bic.w	r5, r5, #3
 80193d0:	3508      	adds	r5, #8
 80193d2:	2d0c      	cmp	r5, #12
 80193d4:	bf38      	it	cc
 80193d6:	250c      	movcc	r5, #12
 80193d8:	2d00      	cmp	r5, #0
 80193da:	4606      	mov	r6, r0
 80193dc:	db01      	blt.n	80193e2 <_malloc_r+0x1a>
 80193de:	42a9      	cmp	r1, r5
 80193e0:	d903      	bls.n	80193ea <_malloc_r+0x22>
 80193e2:	230c      	movs	r3, #12
 80193e4:	6033      	str	r3, [r6, #0]
 80193e6:	2000      	movs	r0, #0
 80193e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80193ea:	f000 fdc7 	bl	8019f7c <__malloc_lock>
 80193ee:	4921      	ldr	r1, [pc, #132]	; (8019474 <_malloc_r+0xac>)
 80193f0:	680a      	ldr	r2, [r1, #0]
 80193f2:	4614      	mov	r4, r2
 80193f4:	b99c      	cbnz	r4, 801941e <_malloc_r+0x56>
 80193f6:	4f20      	ldr	r7, [pc, #128]	; (8019478 <_malloc_r+0xb0>)
 80193f8:	683b      	ldr	r3, [r7, #0]
 80193fa:	b923      	cbnz	r3, 8019406 <_malloc_r+0x3e>
 80193fc:	4621      	mov	r1, r4
 80193fe:	4630      	mov	r0, r6
 8019400:	f000 faf2 	bl	80199e8 <_sbrk_r>
 8019404:	6038      	str	r0, [r7, #0]
 8019406:	4629      	mov	r1, r5
 8019408:	4630      	mov	r0, r6
 801940a:	f000 faed 	bl	80199e8 <_sbrk_r>
 801940e:	1c43      	adds	r3, r0, #1
 8019410:	d123      	bne.n	801945a <_malloc_r+0x92>
 8019412:	230c      	movs	r3, #12
 8019414:	6033      	str	r3, [r6, #0]
 8019416:	4630      	mov	r0, r6
 8019418:	f000 fdb6 	bl	8019f88 <__malloc_unlock>
 801941c:	e7e3      	b.n	80193e6 <_malloc_r+0x1e>
 801941e:	6823      	ldr	r3, [r4, #0]
 8019420:	1b5b      	subs	r3, r3, r5
 8019422:	d417      	bmi.n	8019454 <_malloc_r+0x8c>
 8019424:	2b0b      	cmp	r3, #11
 8019426:	d903      	bls.n	8019430 <_malloc_r+0x68>
 8019428:	6023      	str	r3, [r4, #0]
 801942a:	441c      	add	r4, r3
 801942c:	6025      	str	r5, [r4, #0]
 801942e:	e004      	b.n	801943a <_malloc_r+0x72>
 8019430:	6863      	ldr	r3, [r4, #4]
 8019432:	42a2      	cmp	r2, r4
 8019434:	bf0c      	ite	eq
 8019436:	600b      	streq	r3, [r1, #0]
 8019438:	6053      	strne	r3, [r2, #4]
 801943a:	4630      	mov	r0, r6
 801943c:	f000 fda4 	bl	8019f88 <__malloc_unlock>
 8019440:	f104 000b 	add.w	r0, r4, #11
 8019444:	1d23      	adds	r3, r4, #4
 8019446:	f020 0007 	bic.w	r0, r0, #7
 801944a:	1ac2      	subs	r2, r0, r3
 801944c:	d0cc      	beq.n	80193e8 <_malloc_r+0x20>
 801944e:	1a1b      	subs	r3, r3, r0
 8019450:	50a3      	str	r3, [r4, r2]
 8019452:	e7c9      	b.n	80193e8 <_malloc_r+0x20>
 8019454:	4622      	mov	r2, r4
 8019456:	6864      	ldr	r4, [r4, #4]
 8019458:	e7cc      	b.n	80193f4 <_malloc_r+0x2c>
 801945a:	1cc4      	adds	r4, r0, #3
 801945c:	f024 0403 	bic.w	r4, r4, #3
 8019460:	42a0      	cmp	r0, r4
 8019462:	d0e3      	beq.n	801942c <_malloc_r+0x64>
 8019464:	1a21      	subs	r1, r4, r0
 8019466:	4630      	mov	r0, r6
 8019468:	f000 fabe 	bl	80199e8 <_sbrk_r>
 801946c:	3001      	adds	r0, #1
 801946e:	d1dd      	bne.n	801942c <_malloc_r+0x64>
 8019470:	e7cf      	b.n	8019412 <_malloc_r+0x4a>
 8019472:	bf00      	nop
 8019474:	2000944c 	.word	0x2000944c
 8019478:	20009450 	.word	0x20009450

0801947c <__ssputs_r>:
 801947c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019480:	688e      	ldr	r6, [r1, #8]
 8019482:	429e      	cmp	r6, r3
 8019484:	4682      	mov	sl, r0
 8019486:	460c      	mov	r4, r1
 8019488:	4690      	mov	r8, r2
 801948a:	461f      	mov	r7, r3
 801948c:	d838      	bhi.n	8019500 <__ssputs_r+0x84>
 801948e:	898a      	ldrh	r2, [r1, #12]
 8019490:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019494:	d032      	beq.n	80194fc <__ssputs_r+0x80>
 8019496:	6825      	ldr	r5, [r4, #0]
 8019498:	6909      	ldr	r1, [r1, #16]
 801949a:	eba5 0901 	sub.w	r9, r5, r1
 801949e:	6965      	ldr	r5, [r4, #20]
 80194a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80194a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80194a8:	3301      	adds	r3, #1
 80194aa:	444b      	add	r3, r9
 80194ac:	106d      	asrs	r5, r5, #1
 80194ae:	429d      	cmp	r5, r3
 80194b0:	bf38      	it	cc
 80194b2:	461d      	movcc	r5, r3
 80194b4:	0553      	lsls	r3, r2, #21
 80194b6:	d531      	bpl.n	801951c <__ssputs_r+0xa0>
 80194b8:	4629      	mov	r1, r5
 80194ba:	f7ff ff85 	bl	80193c8 <_malloc_r>
 80194be:	4606      	mov	r6, r0
 80194c0:	b950      	cbnz	r0, 80194d8 <__ssputs_r+0x5c>
 80194c2:	230c      	movs	r3, #12
 80194c4:	f8ca 3000 	str.w	r3, [sl]
 80194c8:	89a3      	ldrh	r3, [r4, #12]
 80194ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80194ce:	81a3      	strh	r3, [r4, #12]
 80194d0:	f04f 30ff 	mov.w	r0, #4294967295
 80194d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80194d8:	6921      	ldr	r1, [r4, #16]
 80194da:	464a      	mov	r2, r9
 80194dc:	f7fd ff2a 	bl	8017334 <memcpy>
 80194e0:	89a3      	ldrh	r3, [r4, #12]
 80194e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80194e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80194ea:	81a3      	strh	r3, [r4, #12]
 80194ec:	6126      	str	r6, [r4, #16]
 80194ee:	6165      	str	r5, [r4, #20]
 80194f0:	444e      	add	r6, r9
 80194f2:	eba5 0509 	sub.w	r5, r5, r9
 80194f6:	6026      	str	r6, [r4, #0]
 80194f8:	60a5      	str	r5, [r4, #8]
 80194fa:	463e      	mov	r6, r7
 80194fc:	42be      	cmp	r6, r7
 80194fe:	d900      	bls.n	8019502 <__ssputs_r+0x86>
 8019500:	463e      	mov	r6, r7
 8019502:	4632      	mov	r2, r6
 8019504:	6820      	ldr	r0, [r4, #0]
 8019506:	4641      	mov	r1, r8
 8019508:	f000 fd1e 	bl	8019f48 <memmove>
 801950c:	68a3      	ldr	r3, [r4, #8]
 801950e:	6822      	ldr	r2, [r4, #0]
 8019510:	1b9b      	subs	r3, r3, r6
 8019512:	4432      	add	r2, r6
 8019514:	60a3      	str	r3, [r4, #8]
 8019516:	6022      	str	r2, [r4, #0]
 8019518:	2000      	movs	r0, #0
 801951a:	e7db      	b.n	80194d4 <__ssputs_r+0x58>
 801951c:	462a      	mov	r2, r5
 801951e:	f000 fd39 	bl	8019f94 <_realloc_r>
 8019522:	4606      	mov	r6, r0
 8019524:	2800      	cmp	r0, #0
 8019526:	d1e1      	bne.n	80194ec <__ssputs_r+0x70>
 8019528:	6921      	ldr	r1, [r4, #16]
 801952a:	4650      	mov	r0, sl
 801952c:	f7ff fefc 	bl	8019328 <_free_r>
 8019530:	e7c7      	b.n	80194c2 <__ssputs_r+0x46>
	...

08019534 <_svfiprintf_r>:
 8019534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019538:	4698      	mov	r8, r3
 801953a:	898b      	ldrh	r3, [r1, #12]
 801953c:	061b      	lsls	r3, r3, #24
 801953e:	b09d      	sub	sp, #116	; 0x74
 8019540:	4607      	mov	r7, r0
 8019542:	460d      	mov	r5, r1
 8019544:	4614      	mov	r4, r2
 8019546:	d50e      	bpl.n	8019566 <_svfiprintf_r+0x32>
 8019548:	690b      	ldr	r3, [r1, #16]
 801954a:	b963      	cbnz	r3, 8019566 <_svfiprintf_r+0x32>
 801954c:	2140      	movs	r1, #64	; 0x40
 801954e:	f7ff ff3b 	bl	80193c8 <_malloc_r>
 8019552:	6028      	str	r0, [r5, #0]
 8019554:	6128      	str	r0, [r5, #16]
 8019556:	b920      	cbnz	r0, 8019562 <_svfiprintf_r+0x2e>
 8019558:	230c      	movs	r3, #12
 801955a:	603b      	str	r3, [r7, #0]
 801955c:	f04f 30ff 	mov.w	r0, #4294967295
 8019560:	e0d1      	b.n	8019706 <_svfiprintf_r+0x1d2>
 8019562:	2340      	movs	r3, #64	; 0x40
 8019564:	616b      	str	r3, [r5, #20]
 8019566:	2300      	movs	r3, #0
 8019568:	9309      	str	r3, [sp, #36]	; 0x24
 801956a:	2320      	movs	r3, #32
 801956c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019570:	f8cd 800c 	str.w	r8, [sp, #12]
 8019574:	2330      	movs	r3, #48	; 0x30
 8019576:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019720 <_svfiprintf_r+0x1ec>
 801957a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801957e:	f04f 0901 	mov.w	r9, #1
 8019582:	4623      	mov	r3, r4
 8019584:	469a      	mov	sl, r3
 8019586:	f813 2b01 	ldrb.w	r2, [r3], #1
 801958a:	b10a      	cbz	r2, 8019590 <_svfiprintf_r+0x5c>
 801958c:	2a25      	cmp	r2, #37	; 0x25
 801958e:	d1f9      	bne.n	8019584 <_svfiprintf_r+0x50>
 8019590:	ebba 0b04 	subs.w	fp, sl, r4
 8019594:	d00b      	beq.n	80195ae <_svfiprintf_r+0x7a>
 8019596:	465b      	mov	r3, fp
 8019598:	4622      	mov	r2, r4
 801959a:	4629      	mov	r1, r5
 801959c:	4638      	mov	r0, r7
 801959e:	f7ff ff6d 	bl	801947c <__ssputs_r>
 80195a2:	3001      	adds	r0, #1
 80195a4:	f000 80aa 	beq.w	80196fc <_svfiprintf_r+0x1c8>
 80195a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80195aa:	445a      	add	r2, fp
 80195ac:	9209      	str	r2, [sp, #36]	; 0x24
 80195ae:	f89a 3000 	ldrb.w	r3, [sl]
 80195b2:	2b00      	cmp	r3, #0
 80195b4:	f000 80a2 	beq.w	80196fc <_svfiprintf_r+0x1c8>
 80195b8:	2300      	movs	r3, #0
 80195ba:	f04f 32ff 	mov.w	r2, #4294967295
 80195be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80195c2:	f10a 0a01 	add.w	sl, sl, #1
 80195c6:	9304      	str	r3, [sp, #16]
 80195c8:	9307      	str	r3, [sp, #28]
 80195ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80195ce:	931a      	str	r3, [sp, #104]	; 0x68
 80195d0:	4654      	mov	r4, sl
 80195d2:	2205      	movs	r2, #5
 80195d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80195d8:	4851      	ldr	r0, [pc, #324]	; (8019720 <_svfiprintf_r+0x1ec>)
 80195da:	f7e6 fe09 	bl	80001f0 <memchr>
 80195de:	9a04      	ldr	r2, [sp, #16]
 80195e0:	b9d8      	cbnz	r0, 801961a <_svfiprintf_r+0xe6>
 80195e2:	06d0      	lsls	r0, r2, #27
 80195e4:	bf44      	itt	mi
 80195e6:	2320      	movmi	r3, #32
 80195e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80195ec:	0711      	lsls	r1, r2, #28
 80195ee:	bf44      	itt	mi
 80195f0:	232b      	movmi	r3, #43	; 0x2b
 80195f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80195f6:	f89a 3000 	ldrb.w	r3, [sl]
 80195fa:	2b2a      	cmp	r3, #42	; 0x2a
 80195fc:	d015      	beq.n	801962a <_svfiprintf_r+0xf6>
 80195fe:	9a07      	ldr	r2, [sp, #28]
 8019600:	4654      	mov	r4, sl
 8019602:	2000      	movs	r0, #0
 8019604:	f04f 0c0a 	mov.w	ip, #10
 8019608:	4621      	mov	r1, r4
 801960a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801960e:	3b30      	subs	r3, #48	; 0x30
 8019610:	2b09      	cmp	r3, #9
 8019612:	d94e      	bls.n	80196b2 <_svfiprintf_r+0x17e>
 8019614:	b1b0      	cbz	r0, 8019644 <_svfiprintf_r+0x110>
 8019616:	9207      	str	r2, [sp, #28]
 8019618:	e014      	b.n	8019644 <_svfiprintf_r+0x110>
 801961a:	eba0 0308 	sub.w	r3, r0, r8
 801961e:	fa09 f303 	lsl.w	r3, r9, r3
 8019622:	4313      	orrs	r3, r2
 8019624:	9304      	str	r3, [sp, #16]
 8019626:	46a2      	mov	sl, r4
 8019628:	e7d2      	b.n	80195d0 <_svfiprintf_r+0x9c>
 801962a:	9b03      	ldr	r3, [sp, #12]
 801962c:	1d19      	adds	r1, r3, #4
 801962e:	681b      	ldr	r3, [r3, #0]
 8019630:	9103      	str	r1, [sp, #12]
 8019632:	2b00      	cmp	r3, #0
 8019634:	bfbb      	ittet	lt
 8019636:	425b      	neglt	r3, r3
 8019638:	f042 0202 	orrlt.w	r2, r2, #2
 801963c:	9307      	strge	r3, [sp, #28]
 801963e:	9307      	strlt	r3, [sp, #28]
 8019640:	bfb8      	it	lt
 8019642:	9204      	strlt	r2, [sp, #16]
 8019644:	7823      	ldrb	r3, [r4, #0]
 8019646:	2b2e      	cmp	r3, #46	; 0x2e
 8019648:	d10c      	bne.n	8019664 <_svfiprintf_r+0x130>
 801964a:	7863      	ldrb	r3, [r4, #1]
 801964c:	2b2a      	cmp	r3, #42	; 0x2a
 801964e:	d135      	bne.n	80196bc <_svfiprintf_r+0x188>
 8019650:	9b03      	ldr	r3, [sp, #12]
 8019652:	1d1a      	adds	r2, r3, #4
 8019654:	681b      	ldr	r3, [r3, #0]
 8019656:	9203      	str	r2, [sp, #12]
 8019658:	2b00      	cmp	r3, #0
 801965a:	bfb8      	it	lt
 801965c:	f04f 33ff 	movlt.w	r3, #4294967295
 8019660:	3402      	adds	r4, #2
 8019662:	9305      	str	r3, [sp, #20]
 8019664:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019730 <_svfiprintf_r+0x1fc>
 8019668:	7821      	ldrb	r1, [r4, #0]
 801966a:	2203      	movs	r2, #3
 801966c:	4650      	mov	r0, sl
 801966e:	f7e6 fdbf 	bl	80001f0 <memchr>
 8019672:	b140      	cbz	r0, 8019686 <_svfiprintf_r+0x152>
 8019674:	2340      	movs	r3, #64	; 0x40
 8019676:	eba0 000a 	sub.w	r0, r0, sl
 801967a:	fa03 f000 	lsl.w	r0, r3, r0
 801967e:	9b04      	ldr	r3, [sp, #16]
 8019680:	4303      	orrs	r3, r0
 8019682:	3401      	adds	r4, #1
 8019684:	9304      	str	r3, [sp, #16]
 8019686:	f814 1b01 	ldrb.w	r1, [r4], #1
 801968a:	4826      	ldr	r0, [pc, #152]	; (8019724 <_svfiprintf_r+0x1f0>)
 801968c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019690:	2206      	movs	r2, #6
 8019692:	f7e6 fdad 	bl	80001f0 <memchr>
 8019696:	2800      	cmp	r0, #0
 8019698:	d038      	beq.n	801970c <_svfiprintf_r+0x1d8>
 801969a:	4b23      	ldr	r3, [pc, #140]	; (8019728 <_svfiprintf_r+0x1f4>)
 801969c:	bb1b      	cbnz	r3, 80196e6 <_svfiprintf_r+0x1b2>
 801969e:	9b03      	ldr	r3, [sp, #12]
 80196a0:	3307      	adds	r3, #7
 80196a2:	f023 0307 	bic.w	r3, r3, #7
 80196a6:	3308      	adds	r3, #8
 80196a8:	9303      	str	r3, [sp, #12]
 80196aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80196ac:	4433      	add	r3, r6
 80196ae:	9309      	str	r3, [sp, #36]	; 0x24
 80196b0:	e767      	b.n	8019582 <_svfiprintf_r+0x4e>
 80196b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80196b6:	460c      	mov	r4, r1
 80196b8:	2001      	movs	r0, #1
 80196ba:	e7a5      	b.n	8019608 <_svfiprintf_r+0xd4>
 80196bc:	2300      	movs	r3, #0
 80196be:	3401      	adds	r4, #1
 80196c0:	9305      	str	r3, [sp, #20]
 80196c2:	4619      	mov	r1, r3
 80196c4:	f04f 0c0a 	mov.w	ip, #10
 80196c8:	4620      	mov	r0, r4
 80196ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80196ce:	3a30      	subs	r2, #48	; 0x30
 80196d0:	2a09      	cmp	r2, #9
 80196d2:	d903      	bls.n	80196dc <_svfiprintf_r+0x1a8>
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	d0c5      	beq.n	8019664 <_svfiprintf_r+0x130>
 80196d8:	9105      	str	r1, [sp, #20]
 80196da:	e7c3      	b.n	8019664 <_svfiprintf_r+0x130>
 80196dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80196e0:	4604      	mov	r4, r0
 80196e2:	2301      	movs	r3, #1
 80196e4:	e7f0      	b.n	80196c8 <_svfiprintf_r+0x194>
 80196e6:	ab03      	add	r3, sp, #12
 80196e8:	9300      	str	r3, [sp, #0]
 80196ea:	462a      	mov	r2, r5
 80196ec:	4b0f      	ldr	r3, [pc, #60]	; (801972c <_svfiprintf_r+0x1f8>)
 80196ee:	a904      	add	r1, sp, #16
 80196f0:	4638      	mov	r0, r7
 80196f2:	f7fd fed5 	bl	80174a0 <_printf_float>
 80196f6:	1c42      	adds	r2, r0, #1
 80196f8:	4606      	mov	r6, r0
 80196fa:	d1d6      	bne.n	80196aa <_svfiprintf_r+0x176>
 80196fc:	89ab      	ldrh	r3, [r5, #12]
 80196fe:	065b      	lsls	r3, r3, #25
 8019700:	f53f af2c 	bmi.w	801955c <_svfiprintf_r+0x28>
 8019704:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019706:	b01d      	add	sp, #116	; 0x74
 8019708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801970c:	ab03      	add	r3, sp, #12
 801970e:	9300      	str	r3, [sp, #0]
 8019710:	462a      	mov	r2, r5
 8019712:	4b06      	ldr	r3, [pc, #24]	; (801972c <_svfiprintf_r+0x1f8>)
 8019714:	a904      	add	r1, sp, #16
 8019716:	4638      	mov	r0, r7
 8019718:	f7fe f966 	bl	80179e8 <_printf_i>
 801971c:	e7eb      	b.n	80196f6 <_svfiprintf_r+0x1c2>
 801971e:	bf00      	nop
 8019720:	0801d31c 	.word	0x0801d31c
 8019724:	0801d326 	.word	0x0801d326
 8019728:	080174a1 	.word	0x080174a1
 801972c:	0801947d 	.word	0x0801947d
 8019730:	0801d322 	.word	0x0801d322

08019734 <__sfputc_r>:
 8019734:	6893      	ldr	r3, [r2, #8]
 8019736:	3b01      	subs	r3, #1
 8019738:	2b00      	cmp	r3, #0
 801973a:	b410      	push	{r4}
 801973c:	6093      	str	r3, [r2, #8]
 801973e:	da08      	bge.n	8019752 <__sfputc_r+0x1e>
 8019740:	6994      	ldr	r4, [r2, #24]
 8019742:	42a3      	cmp	r3, r4
 8019744:	db01      	blt.n	801974a <__sfputc_r+0x16>
 8019746:	290a      	cmp	r1, #10
 8019748:	d103      	bne.n	8019752 <__sfputc_r+0x1e>
 801974a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801974e:	f000 b99f 	b.w	8019a90 <__swbuf_r>
 8019752:	6813      	ldr	r3, [r2, #0]
 8019754:	1c58      	adds	r0, r3, #1
 8019756:	6010      	str	r0, [r2, #0]
 8019758:	7019      	strb	r1, [r3, #0]
 801975a:	4608      	mov	r0, r1
 801975c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019760:	4770      	bx	lr

08019762 <__sfputs_r>:
 8019762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019764:	4606      	mov	r6, r0
 8019766:	460f      	mov	r7, r1
 8019768:	4614      	mov	r4, r2
 801976a:	18d5      	adds	r5, r2, r3
 801976c:	42ac      	cmp	r4, r5
 801976e:	d101      	bne.n	8019774 <__sfputs_r+0x12>
 8019770:	2000      	movs	r0, #0
 8019772:	e007      	b.n	8019784 <__sfputs_r+0x22>
 8019774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019778:	463a      	mov	r2, r7
 801977a:	4630      	mov	r0, r6
 801977c:	f7ff ffda 	bl	8019734 <__sfputc_r>
 8019780:	1c43      	adds	r3, r0, #1
 8019782:	d1f3      	bne.n	801976c <__sfputs_r+0xa>
 8019784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019788 <_vfiprintf_r>:
 8019788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801978c:	460d      	mov	r5, r1
 801978e:	b09d      	sub	sp, #116	; 0x74
 8019790:	4614      	mov	r4, r2
 8019792:	4698      	mov	r8, r3
 8019794:	4606      	mov	r6, r0
 8019796:	b118      	cbz	r0, 80197a0 <_vfiprintf_r+0x18>
 8019798:	6983      	ldr	r3, [r0, #24]
 801979a:	b90b      	cbnz	r3, 80197a0 <_vfiprintf_r+0x18>
 801979c:	f7ff f988 	bl	8018ab0 <__sinit>
 80197a0:	4b89      	ldr	r3, [pc, #548]	; (80199c8 <_vfiprintf_r+0x240>)
 80197a2:	429d      	cmp	r5, r3
 80197a4:	d11b      	bne.n	80197de <_vfiprintf_r+0x56>
 80197a6:	6875      	ldr	r5, [r6, #4]
 80197a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80197aa:	07d9      	lsls	r1, r3, #31
 80197ac:	d405      	bmi.n	80197ba <_vfiprintf_r+0x32>
 80197ae:	89ab      	ldrh	r3, [r5, #12]
 80197b0:	059a      	lsls	r2, r3, #22
 80197b2:	d402      	bmi.n	80197ba <_vfiprintf_r+0x32>
 80197b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80197b6:	f7ff fa1e 	bl	8018bf6 <__retarget_lock_acquire_recursive>
 80197ba:	89ab      	ldrh	r3, [r5, #12]
 80197bc:	071b      	lsls	r3, r3, #28
 80197be:	d501      	bpl.n	80197c4 <_vfiprintf_r+0x3c>
 80197c0:	692b      	ldr	r3, [r5, #16]
 80197c2:	b9eb      	cbnz	r3, 8019800 <_vfiprintf_r+0x78>
 80197c4:	4629      	mov	r1, r5
 80197c6:	4630      	mov	r0, r6
 80197c8:	f000 f9c6 	bl	8019b58 <__swsetup_r>
 80197cc:	b1c0      	cbz	r0, 8019800 <_vfiprintf_r+0x78>
 80197ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80197d0:	07dc      	lsls	r4, r3, #31
 80197d2:	d50e      	bpl.n	80197f2 <_vfiprintf_r+0x6a>
 80197d4:	f04f 30ff 	mov.w	r0, #4294967295
 80197d8:	b01d      	add	sp, #116	; 0x74
 80197da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197de:	4b7b      	ldr	r3, [pc, #492]	; (80199cc <_vfiprintf_r+0x244>)
 80197e0:	429d      	cmp	r5, r3
 80197e2:	d101      	bne.n	80197e8 <_vfiprintf_r+0x60>
 80197e4:	68b5      	ldr	r5, [r6, #8]
 80197e6:	e7df      	b.n	80197a8 <_vfiprintf_r+0x20>
 80197e8:	4b79      	ldr	r3, [pc, #484]	; (80199d0 <_vfiprintf_r+0x248>)
 80197ea:	429d      	cmp	r5, r3
 80197ec:	bf08      	it	eq
 80197ee:	68f5      	ldreq	r5, [r6, #12]
 80197f0:	e7da      	b.n	80197a8 <_vfiprintf_r+0x20>
 80197f2:	89ab      	ldrh	r3, [r5, #12]
 80197f4:	0598      	lsls	r0, r3, #22
 80197f6:	d4ed      	bmi.n	80197d4 <_vfiprintf_r+0x4c>
 80197f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80197fa:	f7ff f9fd 	bl	8018bf8 <__retarget_lock_release_recursive>
 80197fe:	e7e9      	b.n	80197d4 <_vfiprintf_r+0x4c>
 8019800:	2300      	movs	r3, #0
 8019802:	9309      	str	r3, [sp, #36]	; 0x24
 8019804:	2320      	movs	r3, #32
 8019806:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801980a:	f8cd 800c 	str.w	r8, [sp, #12]
 801980e:	2330      	movs	r3, #48	; 0x30
 8019810:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80199d4 <_vfiprintf_r+0x24c>
 8019814:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019818:	f04f 0901 	mov.w	r9, #1
 801981c:	4623      	mov	r3, r4
 801981e:	469a      	mov	sl, r3
 8019820:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019824:	b10a      	cbz	r2, 801982a <_vfiprintf_r+0xa2>
 8019826:	2a25      	cmp	r2, #37	; 0x25
 8019828:	d1f9      	bne.n	801981e <_vfiprintf_r+0x96>
 801982a:	ebba 0b04 	subs.w	fp, sl, r4
 801982e:	d00b      	beq.n	8019848 <_vfiprintf_r+0xc0>
 8019830:	465b      	mov	r3, fp
 8019832:	4622      	mov	r2, r4
 8019834:	4629      	mov	r1, r5
 8019836:	4630      	mov	r0, r6
 8019838:	f7ff ff93 	bl	8019762 <__sfputs_r>
 801983c:	3001      	adds	r0, #1
 801983e:	f000 80aa 	beq.w	8019996 <_vfiprintf_r+0x20e>
 8019842:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019844:	445a      	add	r2, fp
 8019846:	9209      	str	r2, [sp, #36]	; 0x24
 8019848:	f89a 3000 	ldrb.w	r3, [sl]
 801984c:	2b00      	cmp	r3, #0
 801984e:	f000 80a2 	beq.w	8019996 <_vfiprintf_r+0x20e>
 8019852:	2300      	movs	r3, #0
 8019854:	f04f 32ff 	mov.w	r2, #4294967295
 8019858:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801985c:	f10a 0a01 	add.w	sl, sl, #1
 8019860:	9304      	str	r3, [sp, #16]
 8019862:	9307      	str	r3, [sp, #28]
 8019864:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019868:	931a      	str	r3, [sp, #104]	; 0x68
 801986a:	4654      	mov	r4, sl
 801986c:	2205      	movs	r2, #5
 801986e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019872:	4858      	ldr	r0, [pc, #352]	; (80199d4 <_vfiprintf_r+0x24c>)
 8019874:	f7e6 fcbc 	bl	80001f0 <memchr>
 8019878:	9a04      	ldr	r2, [sp, #16]
 801987a:	b9d8      	cbnz	r0, 80198b4 <_vfiprintf_r+0x12c>
 801987c:	06d1      	lsls	r1, r2, #27
 801987e:	bf44      	itt	mi
 8019880:	2320      	movmi	r3, #32
 8019882:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019886:	0713      	lsls	r3, r2, #28
 8019888:	bf44      	itt	mi
 801988a:	232b      	movmi	r3, #43	; 0x2b
 801988c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019890:	f89a 3000 	ldrb.w	r3, [sl]
 8019894:	2b2a      	cmp	r3, #42	; 0x2a
 8019896:	d015      	beq.n	80198c4 <_vfiprintf_r+0x13c>
 8019898:	9a07      	ldr	r2, [sp, #28]
 801989a:	4654      	mov	r4, sl
 801989c:	2000      	movs	r0, #0
 801989e:	f04f 0c0a 	mov.w	ip, #10
 80198a2:	4621      	mov	r1, r4
 80198a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80198a8:	3b30      	subs	r3, #48	; 0x30
 80198aa:	2b09      	cmp	r3, #9
 80198ac:	d94e      	bls.n	801994c <_vfiprintf_r+0x1c4>
 80198ae:	b1b0      	cbz	r0, 80198de <_vfiprintf_r+0x156>
 80198b0:	9207      	str	r2, [sp, #28]
 80198b2:	e014      	b.n	80198de <_vfiprintf_r+0x156>
 80198b4:	eba0 0308 	sub.w	r3, r0, r8
 80198b8:	fa09 f303 	lsl.w	r3, r9, r3
 80198bc:	4313      	orrs	r3, r2
 80198be:	9304      	str	r3, [sp, #16]
 80198c0:	46a2      	mov	sl, r4
 80198c2:	e7d2      	b.n	801986a <_vfiprintf_r+0xe2>
 80198c4:	9b03      	ldr	r3, [sp, #12]
 80198c6:	1d19      	adds	r1, r3, #4
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	9103      	str	r1, [sp, #12]
 80198cc:	2b00      	cmp	r3, #0
 80198ce:	bfbb      	ittet	lt
 80198d0:	425b      	neglt	r3, r3
 80198d2:	f042 0202 	orrlt.w	r2, r2, #2
 80198d6:	9307      	strge	r3, [sp, #28]
 80198d8:	9307      	strlt	r3, [sp, #28]
 80198da:	bfb8      	it	lt
 80198dc:	9204      	strlt	r2, [sp, #16]
 80198de:	7823      	ldrb	r3, [r4, #0]
 80198e0:	2b2e      	cmp	r3, #46	; 0x2e
 80198e2:	d10c      	bne.n	80198fe <_vfiprintf_r+0x176>
 80198e4:	7863      	ldrb	r3, [r4, #1]
 80198e6:	2b2a      	cmp	r3, #42	; 0x2a
 80198e8:	d135      	bne.n	8019956 <_vfiprintf_r+0x1ce>
 80198ea:	9b03      	ldr	r3, [sp, #12]
 80198ec:	1d1a      	adds	r2, r3, #4
 80198ee:	681b      	ldr	r3, [r3, #0]
 80198f0:	9203      	str	r2, [sp, #12]
 80198f2:	2b00      	cmp	r3, #0
 80198f4:	bfb8      	it	lt
 80198f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80198fa:	3402      	adds	r4, #2
 80198fc:	9305      	str	r3, [sp, #20]
 80198fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80199e4 <_vfiprintf_r+0x25c>
 8019902:	7821      	ldrb	r1, [r4, #0]
 8019904:	2203      	movs	r2, #3
 8019906:	4650      	mov	r0, sl
 8019908:	f7e6 fc72 	bl	80001f0 <memchr>
 801990c:	b140      	cbz	r0, 8019920 <_vfiprintf_r+0x198>
 801990e:	2340      	movs	r3, #64	; 0x40
 8019910:	eba0 000a 	sub.w	r0, r0, sl
 8019914:	fa03 f000 	lsl.w	r0, r3, r0
 8019918:	9b04      	ldr	r3, [sp, #16]
 801991a:	4303      	orrs	r3, r0
 801991c:	3401      	adds	r4, #1
 801991e:	9304      	str	r3, [sp, #16]
 8019920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019924:	482c      	ldr	r0, [pc, #176]	; (80199d8 <_vfiprintf_r+0x250>)
 8019926:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801992a:	2206      	movs	r2, #6
 801992c:	f7e6 fc60 	bl	80001f0 <memchr>
 8019930:	2800      	cmp	r0, #0
 8019932:	d03f      	beq.n	80199b4 <_vfiprintf_r+0x22c>
 8019934:	4b29      	ldr	r3, [pc, #164]	; (80199dc <_vfiprintf_r+0x254>)
 8019936:	bb1b      	cbnz	r3, 8019980 <_vfiprintf_r+0x1f8>
 8019938:	9b03      	ldr	r3, [sp, #12]
 801993a:	3307      	adds	r3, #7
 801993c:	f023 0307 	bic.w	r3, r3, #7
 8019940:	3308      	adds	r3, #8
 8019942:	9303      	str	r3, [sp, #12]
 8019944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019946:	443b      	add	r3, r7
 8019948:	9309      	str	r3, [sp, #36]	; 0x24
 801994a:	e767      	b.n	801981c <_vfiprintf_r+0x94>
 801994c:	fb0c 3202 	mla	r2, ip, r2, r3
 8019950:	460c      	mov	r4, r1
 8019952:	2001      	movs	r0, #1
 8019954:	e7a5      	b.n	80198a2 <_vfiprintf_r+0x11a>
 8019956:	2300      	movs	r3, #0
 8019958:	3401      	adds	r4, #1
 801995a:	9305      	str	r3, [sp, #20]
 801995c:	4619      	mov	r1, r3
 801995e:	f04f 0c0a 	mov.w	ip, #10
 8019962:	4620      	mov	r0, r4
 8019964:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019968:	3a30      	subs	r2, #48	; 0x30
 801996a:	2a09      	cmp	r2, #9
 801996c:	d903      	bls.n	8019976 <_vfiprintf_r+0x1ee>
 801996e:	2b00      	cmp	r3, #0
 8019970:	d0c5      	beq.n	80198fe <_vfiprintf_r+0x176>
 8019972:	9105      	str	r1, [sp, #20]
 8019974:	e7c3      	b.n	80198fe <_vfiprintf_r+0x176>
 8019976:	fb0c 2101 	mla	r1, ip, r1, r2
 801997a:	4604      	mov	r4, r0
 801997c:	2301      	movs	r3, #1
 801997e:	e7f0      	b.n	8019962 <_vfiprintf_r+0x1da>
 8019980:	ab03      	add	r3, sp, #12
 8019982:	9300      	str	r3, [sp, #0]
 8019984:	462a      	mov	r2, r5
 8019986:	4b16      	ldr	r3, [pc, #88]	; (80199e0 <_vfiprintf_r+0x258>)
 8019988:	a904      	add	r1, sp, #16
 801998a:	4630      	mov	r0, r6
 801998c:	f7fd fd88 	bl	80174a0 <_printf_float>
 8019990:	4607      	mov	r7, r0
 8019992:	1c78      	adds	r0, r7, #1
 8019994:	d1d6      	bne.n	8019944 <_vfiprintf_r+0x1bc>
 8019996:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019998:	07d9      	lsls	r1, r3, #31
 801999a:	d405      	bmi.n	80199a8 <_vfiprintf_r+0x220>
 801999c:	89ab      	ldrh	r3, [r5, #12]
 801999e:	059a      	lsls	r2, r3, #22
 80199a0:	d402      	bmi.n	80199a8 <_vfiprintf_r+0x220>
 80199a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80199a4:	f7ff f928 	bl	8018bf8 <__retarget_lock_release_recursive>
 80199a8:	89ab      	ldrh	r3, [r5, #12]
 80199aa:	065b      	lsls	r3, r3, #25
 80199ac:	f53f af12 	bmi.w	80197d4 <_vfiprintf_r+0x4c>
 80199b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80199b2:	e711      	b.n	80197d8 <_vfiprintf_r+0x50>
 80199b4:	ab03      	add	r3, sp, #12
 80199b6:	9300      	str	r3, [sp, #0]
 80199b8:	462a      	mov	r2, r5
 80199ba:	4b09      	ldr	r3, [pc, #36]	; (80199e0 <_vfiprintf_r+0x258>)
 80199bc:	a904      	add	r1, sp, #16
 80199be:	4630      	mov	r0, r6
 80199c0:	f7fe f812 	bl	80179e8 <_printf_i>
 80199c4:	e7e4      	b.n	8019990 <_vfiprintf_r+0x208>
 80199c6:	bf00      	nop
 80199c8:	0801d180 	.word	0x0801d180
 80199cc:	0801d1a0 	.word	0x0801d1a0
 80199d0:	0801d160 	.word	0x0801d160
 80199d4:	0801d31c 	.word	0x0801d31c
 80199d8:	0801d326 	.word	0x0801d326
 80199dc:	080174a1 	.word	0x080174a1
 80199e0:	08019763 	.word	0x08019763
 80199e4:	0801d322 	.word	0x0801d322

080199e8 <_sbrk_r>:
 80199e8:	b538      	push	{r3, r4, r5, lr}
 80199ea:	4d06      	ldr	r5, [pc, #24]	; (8019a04 <_sbrk_r+0x1c>)
 80199ec:	2300      	movs	r3, #0
 80199ee:	4604      	mov	r4, r0
 80199f0:	4608      	mov	r0, r1
 80199f2:	602b      	str	r3, [r5, #0]
 80199f4:	f7e7 ffee 	bl	80019d4 <_sbrk>
 80199f8:	1c43      	adds	r3, r0, #1
 80199fa:	d102      	bne.n	8019a02 <_sbrk_r+0x1a>
 80199fc:	682b      	ldr	r3, [r5, #0]
 80199fe:	b103      	cbz	r3, 8019a02 <_sbrk_r+0x1a>
 8019a00:	6023      	str	r3, [r4, #0]
 8019a02:	bd38      	pop	{r3, r4, r5, pc}
 8019a04:	2000c794 	.word	0x2000c794

08019a08 <__sread>:
 8019a08:	b510      	push	{r4, lr}
 8019a0a:	460c      	mov	r4, r1
 8019a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019a10:	f000 fae6 	bl	8019fe0 <_read_r>
 8019a14:	2800      	cmp	r0, #0
 8019a16:	bfab      	itete	ge
 8019a18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019a1a:	89a3      	ldrhlt	r3, [r4, #12]
 8019a1c:	181b      	addge	r3, r3, r0
 8019a1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019a22:	bfac      	ite	ge
 8019a24:	6563      	strge	r3, [r4, #84]	; 0x54
 8019a26:	81a3      	strhlt	r3, [r4, #12]
 8019a28:	bd10      	pop	{r4, pc}

08019a2a <__swrite>:
 8019a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a2e:	461f      	mov	r7, r3
 8019a30:	898b      	ldrh	r3, [r1, #12]
 8019a32:	05db      	lsls	r3, r3, #23
 8019a34:	4605      	mov	r5, r0
 8019a36:	460c      	mov	r4, r1
 8019a38:	4616      	mov	r6, r2
 8019a3a:	d505      	bpl.n	8019a48 <__swrite+0x1e>
 8019a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019a40:	2302      	movs	r3, #2
 8019a42:	2200      	movs	r2, #0
 8019a44:	f000 f9f8 	bl	8019e38 <_lseek_r>
 8019a48:	89a3      	ldrh	r3, [r4, #12]
 8019a4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019a4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019a52:	81a3      	strh	r3, [r4, #12]
 8019a54:	4632      	mov	r2, r6
 8019a56:	463b      	mov	r3, r7
 8019a58:	4628      	mov	r0, r5
 8019a5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019a5e:	f000 b869 	b.w	8019b34 <_write_r>

08019a62 <__sseek>:
 8019a62:	b510      	push	{r4, lr}
 8019a64:	460c      	mov	r4, r1
 8019a66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019a6a:	f000 f9e5 	bl	8019e38 <_lseek_r>
 8019a6e:	1c43      	adds	r3, r0, #1
 8019a70:	89a3      	ldrh	r3, [r4, #12]
 8019a72:	bf15      	itete	ne
 8019a74:	6560      	strne	r0, [r4, #84]	; 0x54
 8019a76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019a7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019a7e:	81a3      	strheq	r3, [r4, #12]
 8019a80:	bf18      	it	ne
 8019a82:	81a3      	strhne	r3, [r4, #12]
 8019a84:	bd10      	pop	{r4, pc}

08019a86 <__sclose>:
 8019a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019a8a:	f000 b8f1 	b.w	8019c70 <_close_r>
	...

08019a90 <__swbuf_r>:
 8019a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a92:	460e      	mov	r6, r1
 8019a94:	4614      	mov	r4, r2
 8019a96:	4605      	mov	r5, r0
 8019a98:	b118      	cbz	r0, 8019aa2 <__swbuf_r+0x12>
 8019a9a:	6983      	ldr	r3, [r0, #24]
 8019a9c:	b90b      	cbnz	r3, 8019aa2 <__swbuf_r+0x12>
 8019a9e:	f7ff f807 	bl	8018ab0 <__sinit>
 8019aa2:	4b21      	ldr	r3, [pc, #132]	; (8019b28 <__swbuf_r+0x98>)
 8019aa4:	429c      	cmp	r4, r3
 8019aa6:	d12b      	bne.n	8019b00 <__swbuf_r+0x70>
 8019aa8:	686c      	ldr	r4, [r5, #4]
 8019aaa:	69a3      	ldr	r3, [r4, #24]
 8019aac:	60a3      	str	r3, [r4, #8]
 8019aae:	89a3      	ldrh	r3, [r4, #12]
 8019ab0:	071a      	lsls	r2, r3, #28
 8019ab2:	d52f      	bpl.n	8019b14 <__swbuf_r+0x84>
 8019ab4:	6923      	ldr	r3, [r4, #16]
 8019ab6:	b36b      	cbz	r3, 8019b14 <__swbuf_r+0x84>
 8019ab8:	6923      	ldr	r3, [r4, #16]
 8019aba:	6820      	ldr	r0, [r4, #0]
 8019abc:	1ac0      	subs	r0, r0, r3
 8019abe:	6963      	ldr	r3, [r4, #20]
 8019ac0:	b2f6      	uxtb	r6, r6
 8019ac2:	4283      	cmp	r3, r0
 8019ac4:	4637      	mov	r7, r6
 8019ac6:	dc04      	bgt.n	8019ad2 <__swbuf_r+0x42>
 8019ac8:	4621      	mov	r1, r4
 8019aca:	4628      	mov	r0, r5
 8019acc:	f000 f966 	bl	8019d9c <_fflush_r>
 8019ad0:	bb30      	cbnz	r0, 8019b20 <__swbuf_r+0x90>
 8019ad2:	68a3      	ldr	r3, [r4, #8]
 8019ad4:	3b01      	subs	r3, #1
 8019ad6:	60a3      	str	r3, [r4, #8]
 8019ad8:	6823      	ldr	r3, [r4, #0]
 8019ada:	1c5a      	adds	r2, r3, #1
 8019adc:	6022      	str	r2, [r4, #0]
 8019ade:	701e      	strb	r6, [r3, #0]
 8019ae0:	6963      	ldr	r3, [r4, #20]
 8019ae2:	3001      	adds	r0, #1
 8019ae4:	4283      	cmp	r3, r0
 8019ae6:	d004      	beq.n	8019af2 <__swbuf_r+0x62>
 8019ae8:	89a3      	ldrh	r3, [r4, #12]
 8019aea:	07db      	lsls	r3, r3, #31
 8019aec:	d506      	bpl.n	8019afc <__swbuf_r+0x6c>
 8019aee:	2e0a      	cmp	r6, #10
 8019af0:	d104      	bne.n	8019afc <__swbuf_r+0x6c>
 8019af2:	4621      	mov	r1, r4
 8019af4:	4628      	mov	r0, r5
 8019af6:	f000 f951 	bl	8019d9c <_fflush_r>
 8019afa:	b988      	cbnz	r0, 8019b20 <__swbuf_r+0x90>
 8019afc:	4638      	mov	r0, r7
 8019afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b00:	4b0a      	ldr	r3, [pc, #40]	; (8019b2c <__swbuf_r+0x9c>)
 8019b02:	429c      	cmp	r4, r3
 8019b04:	d101      	bne.n	8019b0a <__swbuf_r+0x7a>
 8019b06:	68ac      	ldr	r4, [r5, #8]
 8019b08:	e7cf      	b.n	8019aaa <__swbuf_r+0x1a>
 8019b0a:	4b09      	ldr	r3, [pc, #36]	; (8019b30 <__swbuf_r+0xa0>)
 8019b0c:	429c      	cmp	r4, r3
 8019b0e:	bf08      	it	eq
 8019b10:	68ec      	ldreq	r4, [r5, #12]
 8019b12:	e7ca      	b.n	8019aaa <__swbuf_r+0x1a>
 8019b14:	4621      	mov	r1, r4
 8019b16:	4628      	mov	r0, r5
 8019b18:	f000 f81e 	bl	8019b58 <__swsetup_r>
 8019b1c:	2800      	cmp	r0, #0
 8019b1e:	d0cb      	beq.n	8019ab8 <__swbuf_r+0x28>
 8019b20:	f04f 37ff 	mov.w	r7, #4294967295
 8019b24:	e7ea      	b.n	8019afc <__swbuf_r+0x6c>
 8019b26:	bf00      	nop
 8019b28:	0801d180 	.word	0x0801d180
 8019b2c:	0801d1a0 	.word	0x0801d1a0
 8019b30:	0801d160 	.word	0x0801d160

08019b34 <_write_r>:
 8019b34:	b538      	push	{r3, r4, r5, lr}
 8019b36:	4d07      	ldr	r5, [pc, #28]	; (8019b54 <_write_r+0x20>)
 8019b38:	4604      	mov	r4, r0
 8019b3a:	4608      	mov	r0, r1
 8019b3c:	4611      	mov	r1, r2
 8019b3e:	2200      	movs	r2, #0
 8019b40:	602a      	str	r2, [r5, #0]
 8019b42:	461a      	mov	r2, r3
 8019b44:	f7e7 fef5 	bl	8001932 <_write>
 8019b48:	1c43      	adds	r3, r0, #1
 8019b4a:	d102      	bne.n	8019b52 <_write_r+0x1e>
 8019b4c:	682b      	ldr	r3, [r5, #0]
 8019b4e:	b103      	cbz	r3, 8019b52 <_write_r+0x1e>
 8019b50:	6023      	str	r3, [r4, #0]
 8019b52:	bd38      	pop	{r3, r4, r5, pc}
 8019b54:	2000c794 	.word	0x2000c794

08019b58 <__swsetup_r>:
 8019b58:	4b32      	ldr	r3, [pc, #200]	; (8019c24 <__swsetup_r+0xcc>)
 8019b5a:	b570      	push	{r4, r5, r6, lr}
 8019b5c:	681d      	ldr	r5, [r3, #0]
 8019b5e:	4606      	mov	r6, r0
 8019b60:	460c      	mov	r4, r1
 8019b62:	b125      	cbz	r5, 8019b6e <__swsetup_r+0x16>
 8019b64:	69ab      	ldr	r3, [r5, #24]
 8019b66:	b913      	cbnz	r3, 8019b6e <__swsetup_r+0x16>
 8019b68:	4628      	mov	r0, r5
 8019b6a:	f7fe ffa1 	bl	8018ab0 <__sinit>
 8019b6e:	4b2e      	ldr	r3, [pc, #184]	; (8019c28 <__swsetup_r+0xd0>)
 8019b70:	429c      	cmp	r4, r3
 8019b72:	d10f      	bne.n	8019b94 <__swsetup_r+0x3c>
 8019b74:	686c      	ldr	r4, [r5, #4]
 8019b76:	89a3      	ldrh	r3, [r4, #12]
 8019b78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019b7c:	0719      	lsls	r1, r3, #28
 8019b7e:	d42c      	bmi.n	8019bda <__swsetup_r+0x82>
 8019b80:	06dd      	lsls	r5, r3, #27
 8019b82:	d411      	bmi.n	8019ba8 <__swsetup_r+0x50>
 8019b84:	2309      	movs	r3, #9
 8019b86:	6033      	str	r3, [r6, #0]
 8019b88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019b8c:	81a3      	strh	r3, [r4, #12]
 8019b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8019b92:	e03e      	b.n	8019c12 <__swsetup_r+0xba>
 8019b94:	4b25      	ldr	r3, [pc, #148]	; (8019c2c <__swsetup_r+0xd4>)
 8019b96:	429c      	cmp	r4, r3
 8019b98:	d101      	bne.n	8019b9e <__swsetup_r+0x46>
 8019b9a:	68ac      	ldr	r4, [r5, #8]
 8019b9c:	e7eb      	b.n	8019b76 <__swsetup_r+0x1e>
 8019b9e:	4b24      	ldr	r3, [pc, #144]	; (8019c30 <__swsetup_r+0xd8>)
 8019ba0:	429c      	cmp	r4, r3
 8019ba2:	bf08      	it	eq
 8019ba4:	68ec      	ldreq	r4, [r5, #12]
 8019ba6:	e7e6      	b.n	8019b76 <__swsetup_r+0x1e>
 8019ba8:	0758      	lsls	r0, r3, #29
 8019baa:	d512      	bpl.n	8019bd2 <__swsetup_r+0x7a>
 8019bac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019bae:	b141      	cbz	r1, 8019bc2 <__swsetup_r+0x6a>
 8019bb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019bb4:	4299      	cmp	r1, r3
 8019bb6:	d002      	beq.n	8019bbe <__swsetup_r+0x66>
 8019bb8:	4630      	mov	r0, r6
 8019bba:	f7ff fbb5 	bl	8019328 <_free_r>
 8019bbe:	2300      	movs	r3, #0
 8019bc0:	6363      	str	r3, [r4, #52]	; 0x34
 8019bc2:	89a3      	ldrh	r3, [r4, #12]
 8019bc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019bc8:	81a3      	strh	r3, [r4, #12]
 8019bca:	2300      	movs	r3, #0
 8019bcc:	6063      	str	r3, [r4, #4]
 8019bce:	6923      	ldr	r3, [r4, #16]
 8019bd0:	6023      	str	r3, [r4, #0]
 8019bd2:	89a3      	ldrh	r3, [r4, #12]
 8019bd4:	f043 0308 	orr.w	r3, r3, #8
 8019bd8:	81a3      	strh	r3, [r4, #12]
 8019bda:	6923      	ldr	r3, [r4, #16]
 8019bdc:	b94b      	cbnz	r3, 8019bf2 <__swsetup_r+0x9a>
 8019bde:	89a3      	ldrh	r3, [r4, #12]
 8019be0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019be8:	d003      	beq.n	8019bf2 <__swsetup_r+0x9a>
 8019bea:	4621      	mov	r1, r4
 8019bec:	4630      	mov	r0, r6
 8019bee:	f000 f959 	bl	8019ea4 <__smakebuf_r>
 8019bf2:	89a0      	ldrh	r0, [r4, #12]
 8019bf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019bf8:	f010 0301 	ands.w	r3, r0, #1
 8019bfc:	d00a      	beq.n	8019c14 <__swsetup_r+0xbc>
 8019bfe:	2300      	movs	r3, #0
 8019c00:	60a3      	str	r3, [r4, #8]
 8019c02:	6963      	ldr	r3, [r4, #20]
 8019c04:	425b      	negs	r3, r3
 8019c06:	61a3      	str	r3, [r4, #24]
 8019c08:	6923      	ldr	r3, [r4, #16]
 8019c0a:	b943      	cbnz	r3, 8019c1e <__swsetup_r+0xc6>
 8019c0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019c10:	d1ba      	bne.n	8019b88 <__swsetup_r+0x30>
 8019c12:	bd70      	pop	{r4, r5, r6, pc}
 8019c14:	0781      	lsls	r1, r0, #30
 8019c16:	bf58      	it	pl
 8019c18:	6963      	ldrpl	r3, [r4, #20]
 8019c1a:	60a3      	str	r3, [r4, #8]
 8019c1c:	e7f4      	b.n	8019c08 <__swsetup_r+0xb0>
 8019c1e:	2000      	movs	r0, #0
 8019c20:	e7f7      	b.n	8019c12 <__swsetup_r+0xba>
 8019c22:	bf00      	nop
 8019c24:	200013cc 	.word	0x200013cc
 8019c28:	0801d180 	.word	0x0801d180
 8019c2c:	0801d1a0 	.word	0x0801d1a0
 8019c30:	0801d160 	.word	0x0801d160

08019c34 <__assert_func>:
 8019c34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019c36:	4614      	mov	r4, r2
 8019c38:	461a      	mov	r2, r3
 8019c3a:	4b09      	ldr	r3, [pc, #36]	; (8019c60 <__assert_func+0x2c>)
 8019c3c:	681b      	ldr	r3, [r3, #0]
 8019c3e:	4605      	mov	r5, r0
 8019c40:	68d8      	ldr	r0, [r3, #12]
 8019c42:	b14c      	cbz	r4, 8019c58 <__assert_func+0x24>
 8019c44:	4b07      	ldr	r3, [pc, #28]	; (8019c64 <__assert_func+0x30>)
 8019c46:	9100      	str	r1, [sp, #0]
 8019c48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019c4c:	4906      	ldr	r1, [pc, #24]	; (8019c68 <__assert_func+0x34>)
 8019c4e:	462b      	mov	r3, r5
 8019c50:	f000 f8e0 	bl	8019e14 <fiprintf>
 8019c54:	f000 f9e3 	bl	801a01e <abort>
 8019c58:	4b04      	ldr	r3, [pc, #16]	; (8019c6c <__assert_func+0x38>)
 8019c5a:	461c      	mov	r4, r3
 8019c5c:	e7f3      	b.n	8019c46 <__assert_func+0x12>
 8019c5e:	bf00      	nop
 8019c60:	200013cc 	.word	0x200013cc
 8019c64:	0801d32d 	.word	0x0801d32d
 8019c68:	0801d33a 	.word	0x0801d33a
 8019c6c:	0801d368 	.word	0x0801d368

08019c70 <_close_r>:
 8019c70:	b538      	push	{r3, r4, r5, lr}
 8019c72:	4d06      	ldr	r5, [pc, #24]	; (8019c8c <_close_r+0x1c>)
 8019c74:	2300      	movs	r3, #0
 8019c76:	4604      	mov	r4, r0
 8019c78:	4608      	mov	r0, r1
 8019c7a:	602b      	str	r3, [r5, #0]
 8019c7c:	f7e7 fe75 	bl	800196a <_close>
 8019c80:	1c43      	adds	r3, r0, #1
 8019c82:	d102      	bne.n	8019c8a <_close_r+0x1a>
 8019c84:	682b      	ldr	r3, [r5, #0]
 8019c86:	b103      	cbz	r3, 8019c8a <_close_r+0x1a>
 8019c88:	6023      	str	r3, [r4, #0]
 8019c8a:	bd38      	pop	{r3, r4, r5, pc}
 8019c8c:	2000c794 	.word	0x2000c794

08019c90 <__sflush_r>:
 8019c90:	898a      	ldrh	r2, [r1, #12]
 8019c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c96:	4605      	mov	r5, r0
 8019c98:	0710      	lsls	r0, r2, #28
 8019c9a:	460c      	mov	r4, r1
 8019c9c:	d458      	bmi.n	8019d50 <__sflush_r+0xc0>
 8019c9e:	684b      	ldr	r3, [r1, #4]
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	dc05      	bgt.n	8019cb0 <__sflush_r+0x20>
 8019ca4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	dc02      	bgt.n	8019cb0 <__sflush_r+0x20>
 8019caa:	2000      	movs	r0, #0
 8019cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019cb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019cb2:	2e00      	cmp	r6, #0
 8019cb4:	d0f9      	beq.n	8019caa <__sflush_r+0x1a>
 8019cb6:	2300      	movs	r3, #0
 8019cb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019cbc:	682f      	ldr	r7, [r5, #0]
 8019cbe:	602b      	str	r3, [r5, #0]
 8019cc0:	d032      	beq.n	8019d28 <__sflush_r+0x98>
 8019cc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019cc4:	89a3      	ldrh	r3, [r4, #12]
 8019cc6:	075a      	lsls	r2, r3, #29
 8019cc8:	d505      	bpl.n	8019cd6 <__sflush_r+0x46>
 8019cca:	6863      	ldr	r3, [r4, #4]
 8019ccc:	1ac0      	subs	r0, r0, r3
 8019cce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019cd0:	b10b      	cbz	r3, 8019cd6 <__sflush_r+0x46>
 8019cd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019cd4:	1ac0      	subs	r0, r0, r3
 8019cd6:	2300      	movs	r3, #0
 8019cd8:	4602      	mov	r2, r0
 8019cda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019cdc:	6a21      	ldr	r1, [r4, #32]
 8019cde:	4628      	mov	r0, r5
 8019ce0:	47b0      	blx	r6
 8019ce2:	1c43      	adds	r3, r0, #1
 8019ce4:	89a3      	ldrh	r3, [r4, #12]
 8019ce6:	d106      	bne.n	8019cf6 <__sflush_r+0x66>
 8019ce8:	6829      	ldr	r1, [r5, #0]
 8019cea:	291d      	cmp	r1, #29
 8019cec:	d82c      	bhi.n	8019d48 <__sflush_r+0xb8>
 8019cee:	4a2a      	ldr	r2, [pc, #168]	; (8019d98 <__sflush_r+0x108>)
 8019cf0:	40ca      	lsrs	r2, r1
 8019cf2:	07d6      	lsls	r6, r2, #31
 8019cf4:	d528      	bpl.n	8019d48 <__sflush_r+0xb8>
 8019cf6:	2200      	movs	r2, #0
 8019cf8:	6062      	str	r2, [r4, #4]
 8019cfa:	04d9      	lsls	r1, r3, #19
 8019cfc:	6922      	ldr	r2, [r4, #16]
 8019cfe:	6022      	str	r2, [r4, #0]
 8019d00:	d504      	bpl.n	8019d0c <__sflush_r+0x7c>
 8019d02:	1c42      	adds	r2, r0, #1
 8019d04:	d101      	bne.n	8019d0a <__sflush_r+0x7a>
 8019d06:	682b      	ldr	r3, [r5, #0]
 8019d08:	b903      	cbnz	r3, 8019d0c <__sflush_r+0x7c>
 8019d0a:	6560      	str	r0, [r4, #84]	; 0x54
 8019d0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019d0e:	602f      	str	r7, [r5, #0]
 8019d10:	2900      	cmp	r1, #0
 8019d12:	d0ca      	beq.n	8019caa <__sflush_r+0x1a>
 8019d14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019d18:	4299      	cmp	r1, r3
 8019d1a:	d002      	beq.n	8019d22 <__sflush_r+0x92>
 8019d1c:	4628      	mov	r0, r5
 8019d1e:	f7ff fb03 	bl	8019328 <_free_r>
 8019d22:	2000      	movs	r0, #0
 8019d24:	6360      	str	r0, [r4, #52]	; 0x34
 8019d26:	e7c1      	b.n	8019cac <__sflush_r+0x1c>
 8019d28:	6a21      	ldr	r1, [r4, #32]
 8019d2a:	2301      	movs	r3, #1
 8019d2c:	4628      	mov	r0, r5
 8019d2e:	47b0      	blx	r6
 8019d30:	1c41      	adds	r1, r0, #1
 8019d32:	d1c7      	bne.n	8019cc4 <__sflush_r+0x34>
 8019d34:	682b      	ldr	r3, [r5, #0]
 8019d36:	2b00      	cmp	r3, #0
 8019d38:	d0c4      	beq.n	8019cc4 <__sflush_r+0x34>
 8019d3a:	2b1d      	cmp	r3, #29
 8019d3c:	d001      	beq.n	8019d42 <__sflush_r+0xb2>
 8019d3e:	2b16      	cmp	r3, #22
 8019d40:	d101      	bne.n	8019d46 <__sflush_r+0xb6>
 8019d42:	602f      	str	r7, [r5, #0]
 8019d44:	e7b1      	b.n	8019caa <__sflush_r+0x1a>
 8019d46:	89a3      	ldrh	r3, [r4, #12]
 8019d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019d4c:	81a3      	strh	r3, [r4, #12]
 8019d4e:	e7ad      	b.n	8019cac <__sflush_r+0x1c>
 8019d50:	690f      	ldr	r7, [r1, #16]
 8019d52:	2f00      	cmp	r7, #0
 8019d54:	d0a9      	beq.n	8019caa <__sflush_r+0x1a>
 8019d56:	0793      	lsls	r3, r2, #30
 8019d58:	680e      	ldr	r6, [r1, #0]
 8019d5a:	bf08      	it	eq
 8019d5c:	694b      	ldreq	r3, [r1, #20]
 8019d5e:	600f      	str	r7, [r1, #0]
 8019d60:	bf18      	it	ne
 8019d62:	2300      	movne	r3, #0
 8019d64:	eba6 0807 	sub.w	r8, r6, r7
 8019d68:	608b      	str	r3, [r1, #8]
 8019d6a:	f1b8 0f00 	cmp.w	r8, #0
 8019d6e:	dd9c      	ble.n	8019caa <__sflush_r+0x1a>
 8019d70:	6a21      	ldr	r1, [r4, #32]
 8019d72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019d74:	4643      	mov	r3, r8
 8019d76:	463a      	mov	r2, r7
 8019d78:	4628      	mov	r0, r5
 8019d7a:	47b0      	blx	r6
 8019d7c:	2800      	cmp	r0, #0
 8019d7e:	dc06      	bgt.n	8019d8e <__sflush_r+0xfe>
 8019d80:	89a3      	ldrh	r3, [r4, #12]
 8019d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019d86:	81a3      	strh	r3, [r4, #12]
 8019d88:	f04f 30ff 	mov.w	r0, #4294967295
 8019d8c:	e78e      	b.n	8019cac <__sflush_r+0x1c>
 8019d8e:	4407      	add	r7, r0
 8019d90:	eba8 0800 	sub.w	r8, r8, r0
 8019d94:	e7e9      	b.n	8019d6a <__sflush_r+0xda>
 8019d96:	bf00      	nop
 8019d98:	20400001 	.word	0x20400001

08019d9c <_fflush_r>:
 8019d9c:	b538      	push	{r3, r4, r5, lr}
 8019d9e:	690b      	ldr	r3, [r1, #16]
 8019da0:	4605      	mov	r5, r0
 8019da2:	460c      	mov	r4, r1
 8019da4:	b913      	cbnz	r3, 8019dac <_fflush_r+0x10>
 8019da6:	2500      	movs	r5, #0
 8019da8:	4628      	mov	r0, r5
 8019daa:	bd38      	pop	{r3, r4, r5, pc}
 8019dac:	b118      	cbz	r0, 8019db6 <_fflush_r+0x1a>
 8019dae:	6983      	ldr	r3, [r0, #24]
 8019db0:	b90b      	cbnz	r3, 8019db6 <_fflush_r+0x1a>
 8019db2:	f7fe fe7d 	bl	8018ab0 <__sinit>
 8019db6:	4b14      	ldr	r3, [pc, #80]	; (8019e08 <_fflush_r+0x6c>)
 8019db8:	429c      	cmp	r4, r3
 8019dba:	d11b      	bne.n	8019df4 <_fflush_r+0x58>
 8019dbc:	686c      	ldr	r4, [r5, #4]
 8019dbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d0ef      	beq.n	8019da6 <_fflush_r+0xa>
 8019dc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019dc8:	07d0      	lsls	r0, r2, #31
 8019dca:	d404      	bmi.n	8019dd6 <_fflush_r+0x3a>
 8019dcc:	0599      	lsls	r1, r3, #22
 8019dce:	d402      	bmi.n	8019dd6 <_fflush_r+0x3a>
 8019dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019dd2:	f7fe ff10 	bl	8018bf6 <__retarget_lock_acquire_recursive>
 8019dd6:	4628      	mov	r0, r5
 8019dd8:	4621      	mov	r1, r4
 8019dda:	f7ff ff59 	bl	8019c90 <__sflush_r>
 8019dde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019de0:	07da      	lsls	r2, r3, #31
 8019de2:	4605      	mov	r5, r0
 8019de4:	d4e0      	bmi.n	8019da8 <_fflush_r+0xc>
 8019de6:	89a3      	ldrh	r3, [r4, #12]
 8019de8:	059b      	lsls	r3, r3, #22
 8019dea:	d4dd      	bmi.n	8019da8 <_fflush_r+0xc>
 8019dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019dee:	f7fe ff03 	bl	8018bf8 <__retarget_lock_release_recursive>
 8019df2:	e7d9      	b.n	8019da8 <_fflush_r+0xc>
 8019df4:	4b05      	ldr	r3, [pc, #20]	; (8019e0c <_fflush_r+0x70>)
 8019df6:	429c      	cmp	r4, r3
 8019df8:	d101      	bne.n	8019dfe <_fflush_r+0x62>
 8019dfa:	68ac      	ldr	r4, [r5, #8]
 8019dfc:	e7df      	b.n	8019dbe <_fflush_r+0x22>
 8019dfe:	4b04      	ldr	r3, [pc, #16]	; (8019e10 <_fflush_r+0x74>)
 8019e00:	429c      	cmp	r4, r3
 8019e02:	bf08      	it	eq
 8019e04:	68ec      	ldreq	r4, [r5, #12]
 8019e06:	e7da      	b.n	8019dbe <_fflush_r+0x22>
 8019e08:	0801d180 	.word	0x0801d180
 8019e0c:	0801d1a0 	.word	0x0801d1a0
 8019e10:	0801d160 	.word	0x0801d160

08019e14 <fiprintf>:
 8019e14:	b40e      	push	{r1, r2, r3}
 8019e16:	b503      	push	{r0, r1, lr}
 8019e18:	4601      	mov	r1, r0
 8019e1a:	ab03      	add	r3, sp, #12
 8019e1c:	4805      	ldr	r0, [pc, #20]	; (8019e34 <fiprintf+0x20>)
 8019e1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019e22:	6800      	ldr	r0, [r0, #0]
 8019e24:	9301      	str	r3, [sp, #4]
 8019e26:	f7ff fcaf 	bl	8019788 <_vfiprintf_r>
 8019e2a:	b002      	add	sp, #8
 8019e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019e30:	b003      	add	sp, #12
 8019e32:	4770      	bx	lr
 8019e34:	200013cc 	.word	0x200013cc

08019e38 <_lseek_r>:
 8019e38:	b538      	push	{r3, r4, r5, lr}
 8019e3a:	4d07      	ldr	r5, [pc, #28]	; (8019e58 <_lseek_r+0x20>)
 8019e3c:	4604      	mov	r4, r0
 8019e3e:	4608      	mov	r0, r1
 8019e40:	4611      	mov	r1, r2
 8019e42:	2200      	movs	r2, #0
 8019e44:	602a      	str	r2, [r5, #0]
 8019e46:	461a      	mov	r2, r3
 8019e48:	f7e7 fdb6 	bl	80019b8 <_lseek>
 8019e4c:	1c43      	adds	r3, r0, #1
 8019e4e:	d102      	bne.n	8019e56 <_lseek_r+0x1e>
 8019e50:	682b      	ldr	r3, [r5, #0]
 8019e52:	b103      	cbz	r3, 8019e56 <_lseek_r+0x1e>
 8019e54:	6023      	str	r3, [r4, #0]
 8019e56:	bd38      	pop	{r3, r4, r5, pc}
 8019e58:	2000c794 	.word	0x2000c794

08019e5c <__swhatbuf_r>:
 8019e5c:	b570      	push	{r4, r5, r6, lr}
 8019e5e:	460e      	mov	r6, r1
 8019e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019e64:	2900      	cmp	r1, #0
 8019e66:	b096      	sub	sp, #88	; 0x58
 8019e68:	4614      	mov	r4, r2
 8019e6a:	461d      	mov	r5, r3
 8019e6c:	da07      	bge.n	8019e7e <__swhatbuf_r+0x22>
 8019e6e:	2300      	movs	r3, #0
 8019e70:	602b      	str	r3, [r5, #0]
 8019e72:	89b3      	ldrh	r3, [r6, #12]
 8019e74:	061a      	lsls	r2, r3, #24
 8019e76:	d410      	bmi.n	8019e9a <__swhatbuf_r+0x3e>
 8019e78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019e7c:	e00e      	b.n	8019e9c <__swhatbuf_r+0x40>
 8019e7e:	466a      	mov	r2, sp
 8019e80:	f000 f8d4 	bl	801a02c <_fstat_r>
 8019e84:	2800      	cmp	r0, #0
 8019e86:	dbf2      	blt.n	8019e6e <__swhatbuf_r+0x12>
 8019e88:	9a01      	ldr	r2, [sp, #4]
 8019e8a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019e8e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019e92:	425a      	negs	r2, r3
 8019e94:	415a      	adcs	r2, r3
 8019e96:	602a      	str	r2, [r5, #0]
 8019e98:	e7ee      	b.n	8019e78 <__swhatbuf_r+0x1c>
 8019e9a:	2340      	movs	r3, #64	; 0x40
 8019e9c:	2000      	movs	r0, #0
 8019e9e:	6023      	str	r3, [r4, #0]
 8019ea0:	b016      	add	sp, #88	; 0x58
 8019ea2:	bd70      	pop	{r4, r5, r6, pc}

08019ea4 <__smakebuf_r>:
 8019ea4:	898b      	ldrh	r3, [r1, #12]
 8019ea6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019ea8:	079d      	lsls	r5, r3, #30
 8019eaa:	4606      	mov	r6, r0
 8019eac:	460c      	mov	r4, r1
 8019eae:	d507      	bpl.n	8019ec0 <__smakebuf_r+0x1c>
 8019eb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019eb4:	6023      	str	r3, [r4, #0]
 8019eb6:	6123      	str	r3, [r4, #16]
 8019eb8:	2301      	movs	r3, #1
 8019eba:	6163      	str	r3, [r4, #20]
 8019ebc:	b002      	add	sp, #8
 8019ebe:	bd70      	pop	{r4, r5, r6, pc}
 8019ec0:	ab01      	add	r3, sp, #4
 8019ec2:	466a      	mov	r2, sp
 8019ec4:	f7ff ffca 	bl	8019e5c <__swhatbuf_r>
 8019ec8:	9900      	ldr	r1, [sp, #0]
 8019eca:	4605      	mov	r5, r0
 8019ecc:	4630      	mov	r0, r6
 8019ece:	f7ff fa7b 	bl	80193c8 <_malloc_r>
 8019ed2:	b948      	cbnz	r0, 8019ee8 <__smakebuf_r+0x44>
 8019ed4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019ed8:	059a      	lsls	r2, r3, #22
 8019eda:	d4ef      	bmi.n	8019ebc <__smakebuf_r+0x18>
 8019edc:	f023 0303 	bic.w	r3, r3, #3
 8019ee0:	f043 0302 	orr.w	r3, r3, #2
 8019ee4:	81a3      	strh	r3, [r4, #12]
 8019ee6:	e7e3      	b.n	8019eb0 <__smakebuf_r+0xc>
 8019ee8:	4b0d      	ldr	r3, [pc, #52]	; (8019f20 <__smakebuf_r+0x7c>)
 8019eea:	62b3      	str	r3, [r6, #40]	; 0x28
 8019eec:	89a3      	ldrh	r3, [r4, #12]
 8019eee:	6020      	str	r0, [r4, #0]
 8019ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019ef4:	81a3      	strh	r3, [r4, #12]
 8019ef6:	9b00      	ldr	r3, [sp, #0]
 8019ef8:	6163      	str	r3, [r4, #20]
 8019efa:	9b01      	ldr	r3, [sp, #4]
 8019efc:	6120      	str	r0, [r4, #16]
 8019efe:	b15b      	cbz	r3, 8019f18 <__smakebuf_r+0x74>
 8019f00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019f04:	4630      	mov	r0, r6
 8019f06:	f000 f8a3 	bl	801a050 <_isatty_r>
 8019f0a:	b128      	cbz	r0, 8019f18 <__smakebuf_r+0x74>
 8019f0c:	89a3      	ldrh	r3, [r4, #12]
 8019f0e:	f023 0303 	bic.w	r3, r3, #3
 8019f12:	f043 0301 	orr.w	r3, r3, #1
 8019f16:	81a3      	strh	r3, [r4, #12]
 8019f18:	89a0      	ldrh	r0, [r4, #12]
 8019f1a:	4305      	orrs	r5, r0
 8019f1c:	81a5      	strh	r5, [r4, #12]
 8019f1e:	e7cd      	b.n	8019ebc <__smakebuf_r+0x18>
 8019f20:	08018a49 	.word	0x08018a49

08019f24 <__ascii_mbtowc>:
 8019f24:	b082      	sub	sp, #8
 8019f26:	b901      	cbnz	r1, 8019f2a <__ascii_mbtowc+0x6>
 8019f28:	a901      	add	r1, sp, #4
 8019f2a:	b142      	cbz	r2, 8019f3e <__ascii_mbtowc+0x1a>
 8019f2c:	b14b      	cbz	r3, 8019f42 <__ascii_mbtowc+0x1e>
 8019f2e:	7813      	ldrb	r3, [r2, #0]
 8019f30:	600b      	str	r3, [r1, #0]
 8019f32:	7812      	ldrb	r2, [r2, #0]
 8019f34:	1e10      	subs	r0, r2, #0
 8019f36:	bf18      	it	ne
 8019f38:	2001      	movne	r0, #1
 8019f3a:	b002      	add	sp, #8
 8019f3c:	4770      	bx	lr
 8019f3e:	4610      	mov	r0, r2
 8019f40:	e7fb      	b.n	8019f3a <__ascii_mbtowc+0x16>
 8019f42:	f06f 0001 	mvn.w	r0, #1
 8019f46:	e7f8      	b.n	8019f3a <__ascii_mbtowc+0x16>

08019f48 <memmove>:
 8019f48:	4288      	cmp	r0, r1
 8019f4a:	b510      	push	{r4, lr}
 8019f4c:	eb01 0402 	add.w	r4, r1, r2
 8019f50:	d902      	bls.n	8019f58 <memmove+0x10>
 8019f52:	4284      	cmp	r4, r0
 8019f54:	4623      	mov	r3, r4
 8019f56:	d807      	bhi.n	8019f68 <memmove+0x20>
 8019f58:	1e43      	subs	r3, r0, #1
 8019f5a:	42a1      	cmp	r1, r4
 8019f5c:	d008      	beq.n	8019f70 <memmove+0x28>
 8019f5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019f62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019f66:	e7f8      	b.n	8019f5a <memmove+0x12>
 8019f68:	4402      	add	r2, r0
 8019f6a:	4601      	mov	r1, r0
 8019f6c:	428a      	cmp	r2, r1
 8019f6e:	d100      	bne.n	8019f72 <memmove+0x2a>
 8019f70:	bd10      	pop	{r4, pc}
 8019f72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019f76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019f7a:	e7f7      	b.n	8019f6c <memmove+0x24>

08019f7c <__malloc_lock>:
 8019f7c:	4801      	ldr	r0, [pc, #4]	; (8019f84 <__malloc_lock+0x8>)
 8019f7e:	f7fe be3a 	b.w	8018bf6 <__retarget_lock_acquire_recursive>
 8019f82:	bf00      	nop
 8019f84:	2000c78c 	.word	0x2000c78c

08019f88 <__malloc_unlock>:
 8019f88:	4801      	ldr	r0, [pc, #4]	; (8019f90 <__malloc_unlock+0x8>)
 8019f8a:	f7fe be35 	b.w	8018bf8 <__retarget_lock_release_recursive>
 8019f8e:	bf00      	nop
 8019f90:	2000c78c 	.word	0x2000c78c

08019f94 <_realloc_r>:
 8019f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f96:	4607      	mov	r7, r0
 8019f98:	4614      	mov	r4, r2
 8019f9a:	460e      	mov	r6, r1
 8019f9c:	b921      	cbnz	r1, 8019fa8 <_realloc_r+0x14>
 8019f9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019fa2:	4611      	mov	r1, r2
 8019fa4:	f7ff ba10 	b.w	80193c8 <_malloc_r>
 8019fa8:	b922      	cbnz	r2, 8019fb4 <_realloc_r+0x20>
 8019faa:	f7ff f9bd 	bl	8019328 <_free_r>
 8019fae:	4625      	mov	r5, r4
 8019fb0:	4628      	mov	r0, r5
 8019fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019fb4:	f000 f85c 	bl	801a070 <_malloc_usable_size_r>
 8019fb8:	42a0      	cmp	r0, r4
 8019fba:	d20f      	bcs.n	8019fdc <_realloc_r+0x48>
 8019fbc:	4621      	mov	r1, r4
 8019fbe:	4638      	mov	r0, r7
 8019fc0:	f7ff fa02 	bl	80193c8 <_malloc_r>
 8019fc4:	4605      	mov	r5, r0
 8019fc6:	2800      	cmp	r0, #0
 8019fc8:	d0f2      	beq.n	8019fb0 <_realloc_r+0x1c>
 8019fca:	4631      	mov	r1, r6
 8019fcc:	4622      	mov	r2, r4
 8019fce:	f7fd f9b1 	bl	8017334 <memcpy>
 8019fd2:	4631      	mov	r1, r6
 8019fd4:	4638      	mov	r0, r7
 8019fd6:	f7ff f9a7 	bl	8019328 <_free_r>
 8019fda:	e7e9      	b.n	8019fb0 <_realloc_r+0x1c>
 8019fdc:	4635      	mov	r5, r6
 8019fde:	e7e7      	b.n	8019fb0 <_realloc_r+0x1c>

08019fe0 <_read_r>:
 8019fe0:	b538      	push	{r3, r4, r5, lr}
 8019fe2:	4d07      	ldr	r5, [pc, #28]	; (801a000 <_read_r+0x20>)
 8019fe4:	4604      	mov	r4, r0
 8019fe6:	4608      	mov	r0, r1
 8019fe8:	4611      	mov	r1, r2
 8019fea:	2200      	movs	r2, #0
 8019fec:	602a      	str	r2, [r5, #0]
 8019fee:	461a      	mov	r2, r3
 8019ff0:	f7e7 fc82 	bl	80018f8 <_read>
 8019ff4:	1c43      	adds	r3, r0, #1
 8019ff6:	d102      	bne.n	8019ffe <_read_r+0x1e>
 8019ff8:	682b      	ldr	r3, [r5, #0]
 8019ffa:	b103      	cbz	r3, 8019ffe <_read_r+0x1e>
 8019ffc:	6023      	str	r3, [r4, #0]
 8019ffe:	bd38      	pop	{r3, r4, r5, pc}
 801a000:	2000c794 	.word	0x2000c794

0801a004 <__ascii_wctomb>:
 801a004:	b149      	cbz	r1, 801a01a <__ascii_wctomb+0x16>
 801a006:	2aff      	cmp	r2, #255	; 0xff
 801a008:	bf85      	ittet	hi
 801a00a:	238a      	movhi	r3, #138	; 0x8a
 801a00c:	6003      	strhi	r3, [r0, #0]
 801a00e:	700a      	strbls	r2, [r1, #0]
 801a010:	f04f 30ff 	movhi.w	r0, #4294967295
 801a014:	bf98      	it	ls
 801a016:	2001      	movls	r0, #1
 801a018:	4770      	bx	lr
 801a01a:	4608      	mov	r0, r1
 801a01c:	4770      	bx	lr

0801a01e <abort>:
 801a01e:	b508      	push	{r3, lr}
 801a020:	2006      	movs	r0, #6
 801a022:	f000 f855 	bl	801a0d0 <raise>
 801a026:	2001      	movs	r0, #1
 801a028:	f7e7 fc5c 	bl	80018e4 <_exit>

0801a02c <_fstat_r>:
 801a02c:	b538      	push	{r3, r4, r5, lr}
 801a02e:	4d07      	ldr	r5, [pc, #28]	; (801a04c <_fstat_r+0x20>)
 801a030:	2300      	movs	r3, #0
 801a032:	4604      	mov	r4, r0
 801a034:	4608      	mov	r0, r1
 801a036:	4611      	mov	r1, r2
 801a038:	602b      	str	r3, [r5, #0]
 801a03a:	f7e7 fca2 	bl	8001982 <_fstat>
 801a03e:	1c43      	adds	r3, r0, #1
 801a040:	d102      	bne.n	801a048 <_fstat_r+0x1c>
 801a042:	682b      	ldr	r3, [r5, #0]
 801a044:	b103      	cbz	r3, 801a048 <_fstat_r+0x1c>
 801a046:	6023      	str	r3, [r4, #0]
 801a048:	bd38      	pop	{r3, r4, r5, pc}
 801a04a:	bf00      	nop
 801a04c:	2000c794 	.word	0x2000c794

0801a050 <_isatty_r>:
 801a050:	b538      	push	{r3, r4, r5, lr}
 801a052:	4d06      	ldr	r5, [pc, #24]	; (801a06c <_isatty_r+0x1c>)
 801a054:	2300      	movs	r3, #0
 801a056:	4604      	mov	r4, r0
 801a058:	4608      	mov	r0, r1
 801a05a:	602b      	str	r3, [r5, #0]
 801a05c:	f7e7 fca1 	bl	80019a2 <_isatty>
 801a060:	1c43      	adds	r3, r0, #1
 801a062:	d102      	bne.n	801a06a <_isatty_r+0x1a>
 801a064:	682b      	ldr	r3, [r5, #0]
 801a066:	b103      	cbz	r3, 801a06a <_isatty_r+0x1a>
 801a068:	6023      	str	r3, [r4, #0]
 801a06a:	bd38      	pop	{r3, r4, r5, pc}
 801a06c:	2000c794 	.word	0x2000c794

0801a070 <_malloc_usable_size_r>:
 801a070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a074:	1f18      	subs	r0, r3, #4
 801a076:	2b00      	cmp	r3, #0
 801a078:	bfbc      	itt	lt
 801a07a:	580b      	ldrlt	r3, [r1, r0]
 801a07c:	18c0      	addlt	r0, r0, r3
 801a07e:	4770      	bx	lr

0801a080 <_raise_r>:
 801a080:	291f      	cmp	r1, #31
 801a082:	b538      	push	{r3, r4, r5, lr}
 801a084:	4604      	mov	r4, r0
 801a086:	460d      	mov	r5, r1
 801a088:	d904      	bls.n	801a094 <_raise_r+0x14>
 801a08a:	2316      	movs	r3, #22
 801a08c:	6003      	str	r3, [r0, #0]
 801a08e:	f04f 30ff 	mov.w	r0, #4294967295
 801a092:	bd38      	pop	{r3, r4, r5, pc}
 801a094:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a096:	b112      	cbz	r2, 801a09e <_raise_r+0x1e>
 801a098:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a09c:	b94b      	cbnz	r3, 801a0b2 <_raise_r+0x32>
 801a09e:	4620      	mov	r0, r4
 801a0a0:	f000 f830 	bl	801a104 <_getpid_r>
 801a0a4:	462a      	mov	r2, r5
 801a0a6:	4601      	mov	r1, r0
 801a0a8:	4620      	mov	r0, r4
 801a0aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a0ae:	f000 b817 	b.w	801a0e0 <_kill_r>
 801a0b2:	2b01      	cmp	r3, #1
 801a0b4:	d00a      	beq.n	801a0cc <_raise_r+0x4c>
 801a0b6:	1c59      	adds	r1, r3, #1
 801a0b8:	d103      	bne.n	801a0c2 <_raise_r+0x42>
 801a0ba:	2316      	movs	r3, #22
 801a0bc:	6003      	str	r3, [r0, #0]
 801a0be:	2001      	movs	r0, #1
 801a0c0:	e7e7      	b.n	801a092 <_raise_r+0x12>
 801a0c2:	2400      	movs	r4, #0
 801a0c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a0c8:	4628      	mov	r0, r5
 801a0ca:	4798      	blx	r3
 801a0cc:	2000      	movs	r0, #0
 801a0ce:	e7e0      	b.n	801a092 <_raise_r+0x12>

0801a0d0 <raise>:
 801a0d0:	4b02      	ldr	r3, [pc, #8]	; (801a0dc <raise+0xc>)
 801a0d2:	4601      	mov	r1, r0
 801a0d4:	6818      	ldr	r0, [r3, #0]
 801a0d6:	f7ff bfd3 	b.w	801a080 <_raise_r>
 801a0da:	bf00      	nop
 801a0dc:	200013cc 	.word	0x200013cc

0801a0e0 <_kill_r>:
 801a0e0:	b538      	push	{r3, r4, r5, lr}
 801a0e2:	4d07      	ldr	r5, [pc, #28]	; (801a100 <_kill_r+0x20>)
 801a0e4:	2300      	movs	r3, #0
 801a0e6:	4604      	mov	r4, r0
 801a0e8:	4608      	mov	r0, r1
 801a0ea:	4611      	mov	r1, r2
 801a0ec:	602b      	str	r3, [r5, #0]
 801a0ee:	f7e7 fbe9 	bl	80018c4 <_kill>
 801a0f2:	1c43      	adds	r3, r0, #1
 801a0f4:	d102      	bne.n	801a0fc <_kill_r+0x1c>
 801a0f6:	682b      	ldr	r3, [r5, #0]
 801a0f8:	b103      	cbz	r3, 801a0fc <_kill_r+0x1c>
 801a0fa:	6023      	str	r3, [r4, #0]
 801a0fc:	bd38      	pop	{r3, r4, r5, pc}
 801a0fe:	bf00      	nop
 801a100:	2000c794 	.word	0x2000c794

0801a104 <_getpid_r>:
 801a104:	f7e7 bbd6 	b.w	80018b4 <_getpid>

0801a108 <trunc>:
 801a108:	ec51 0b10 	vmov	r0, r1, d0
 801a10c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801a110:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801a114:	2b13      	cmp	r3, #19
 801a116:	b5d0      	push	{r4, r6, r7, lr}
 801a118:	460c      	mov	r4, r1
 801a11a:	dc10      	bgt.n	801a13e <trunc+0x36>
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	bfa5      	ittet	ge
 801a120:	4a11      	ldrge	r2, [pc, #68]	; (801a168 <trunc+0x60>)
 801a122:	fa42 f303 	asrge.w	r3, r2, r3
 801a126:	2100      	movlt	r1, #0
 801a128:	2100      	movge	r1, #0
 801a12a:	bfb9      	ittee	lt
 801a12c:	2000      	movlt	r0, #0
 801a12e:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 801a132:	2000      	movge	r0, #0
 801a134:	ea24 0103 	bicge.w	r1, r4, r3
 801a138:	ec41 0b10 	vmov	d0, r0, r1
 801a13c:	bdd0      	pop	{r4, r6, r7, pc}
 801a13e:	2b33      	cmp	r3, #51	; 0x33
 801a140:	dd08      	ble.n	801a154 <trunc+0x4c>
 801a142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a146:	d1f7      	bne.n	801a138 <trunc+0x30>
 801a148:	ee10 2a10 	vmov	r2, s0
 801a14c:	460b      	mov	r3, r1
 801a14e:	f7e6 f8a5 	bl	800029c <__adddf3>
 801a152:	e7f1      	b.n	801a138 <trunc+0x30>
 801a154:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801a158:	f04f 33ff 	mov.w	r3, #4294967295
 801a15c:	fa23 f202 	lsr.w	r2, r3, r2
 801a160:	ea20 0602 	bic.w	r6, r0, r2
 801a164:	4630      	mov	r0, r6
 801a166:	e7e7      	b.n	801a138 <trunc+0x30>
 801a168:	000fffff 	.word	0x000fffff

0801a16c <cosf>:
 801a16c:	ee10 3a10 	vmov	r3, s0
 801a170:	b507      	push	{r0, r1, r2, lr}
 801a172:	4a1c      	ldr	r2, [pc, #112]	; (801a1e4 <cosf+0x78>)
 801a174:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a178:	4293      	cmp	r3, r2
 801a17a:	dc04      	bgt.n	801a186 <cosf+0x1a>
 801a17c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 801a1e8 <cosf+0x7c>
 801a180:	f001 fc9a 	bl	801bab8 <__kernel_cosf>
 801a184:	e004      	b.n	801a190 <cosf+0x24>
 801a186:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801a18a:	db04      	blt.n	801a196 <cosf+0x2a>
 801a18c:	ee30 0a40 	vsub.f32	s0, s0, s0
 801a190:	b003      	add	sp, #12
 801a192:	f85d fb04 	ldr.w	pc, [sp], #4
 801a196:	4668      	mov	r0, sp
 801a198:	f001 fb4e 	bl	801b838 <__ieee754_rem_pio2f>
 801a19c:	f000 0003 	and.w	r0, r0, #3
 801a1a0:	2801      	cmp	r0, #1
 801a1a2:	d007      	beq.n	801a1b4 <cosf+0x48>
 801a1a4:	2802      	cmp	r0, #2
 801a1a6:	d00e      	beq.n	801a1c6 <cosf+0x5a>
 801a1a8:	b9a0      	cbnz	r0, 801a1d4 <cosf+0x68>
 801a1aa:	eddd 0a01 	vldr	s1, [sp, #4]
 801a1ae:	ed9d 0a00 	vldr	s0, [sp]
 801a1b2:	e7e5      	b.n	801a180 <cosf+0x14>
 801a1b4:	eddd 0a01 	vldr	s1, [sp, #4]
 801a1b8:	ed9d 0a00 	vldr	s0, [sp]
 801a1bc:	f001 ff66 	bl	801c08c <__kernel_sinf>
 801a1c0:	eeb1 0a40 	vneg.f32	s0, s0
 801a1c4:	e7e4      	b.n	801a190 <cosf+0x24>
 801a1c6:	eddd 0a01 	vldr	s1, [sp, #4]
 801a1ca:	ed9d 0a00 	vldr	s0, [sp]
 801a1ce:	f001 fc73 	bl	801bab8 <__kernel_cosf>
 801a1d2:	e7f5      	b.n	801a1c0 <cosf+0x54>
 801a1d4:	eddd 0a01 	vldr	s1, [sp, #4]
 801a1d8:	ed9d 0a00 	vldr	s0, [sp]
 801a1dc:	2001      	movs	r0, #1
 801a1de:	f001 ff55 	bl	801c08c <__kernel_sinf>
 801a1e2:	e7d5      	b.n	801a190 <cosf+0x24>
 801a1e4:	3f490fd8 	.word	0x3f490fd8
 801a1e8:	00000000 	.word	0x00000000

0801a1ec <roundf>:
 801a1ec:	ee10 0a10 	vmov	r0, s0
 801a1f0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801a1f4:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 801a1f8:	2a16      	cmp	r2, #22
 801a1fa:	dc15      	bgt.n	801a228 <roundf+0x3c>
 801a1fc:	2a00      	cmp	r2, #0
 801a1fe:	da08      	bge.n	801a212 <roundf+0x26>
 801a200:	3201      	adds	r2, #1
 801a202:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801a206:	d101      	bne.n	801a20c <roundf+0x20>
 801a208:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 801a20c:	ee00 3a10 	vmov	s0, r3
 801a210:	4770      	bx	lr
 801a212:	4908      	ldr	r1, [pc, #32]	; (801a234 <roundf+0x48>)
 801a214:	4111      	asrs	r1, r2
 801a216:	4208      	tst	r0, r1
 801a218:	d0fa      	beq.n	801a210 <roundf+0x24>
 801a21a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801a21e:	4113      	asrs	r3, r2
 801a220:	4403      	add	r3, r0
 801a222:	ea23 0301 	bic.w	r3, r3, r1
 801a226:	e7f1      	b.n	801a20c <roundf+0x20>
 801a228:	2a80      	cmp	r2, #128	; 0x80
 801a22a:	d1f1      	bne.n	801a210 <roundf+0x24>
 801a22c:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a230:	4770      	bx	lr
 801a232:	bf00      	nop
 801a234:	007fffff 	.word	0x007fffff

0801a238 <asin>:
 801a238:	b538      	push	{r3, r4, r5, lr}
 801a23a:	ed2d 8b02 	vpush	{d8}
 801a23e:	ec55 4b10 	vmov	r4, r5, d0
 801a242:	f000 f949 	bl	801a4d8 <__ieee754_asin>
 801a246:	4b16      	ldr	r3, [pc, #88]	; (801a2a0 <asin+0x68>)
 801a248:	eeb0 8a40 	vmov.f32	s16, s0
 801a24c:	eef0 8a60 	vmov.f32	s17, s1
 801a250:	f993 3000 	ldrsb.w	r3, [r3]
 801a254:	3301      	adds	r3, #1
 801a256:	d01c      	beq.n	801a292 <asin+0x5a>
 801a258:	4622      	mov	r2, r4
 801a25a:	462b      	mov	r3, r5
 801a25c:	4620      	mov	r0, r4
 801a25e:	4629      	mov	r1, r5
 801a260:	f7e6 fc6c 	bl	8000b3c <__aeabi_dcmpun>
 801a264:	b9a8      	cbnz	r0, 801a292 <asin+0x5a>
 801a266:	ec45 4b10 	vmov	d0, r4, r5
 801a26a:	f002 f8f9 	bl	801c460 <fabs>
 801a26e:	4b0d      	ldr	r3, [pc, #52]	; (801a2a4 <asin+0x6c>)
 801a270:	ec51 0b10 	vmov	r0, r1, d0
 801a274:	2200      	movs	r2, #0
 801a276:	f7e6 fc57 	bl	8000b28 <__aeabi_dcmpgt>
 801a27a:	b150      	cbz	r0, 801a292 <asin+0x5a>
 801a27c:	f7fd f830 	bl	80172e0 <__errno>
 801a280:	ecbd 8b02 	vpop	{d8}
 801a284:	2321      	movs	r3, #33	; 0x21
 801a286:	6003      	str	r3, [r0, #0]
 801a288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a28c:	4806      	ldr	r0, [pc, #24]	; (801a2a8 <asin+0x70>)
 801a28e:	f002 b8fb 	b.w	801c488 <nan>
 801a292:	eeb0 0a48 	vmov.f32	s0, s16
 801a296:	eef0 0a68 	vmov.f32	s1, s17
 801a29a:	ecbd 8b02 	vpop	{d8}
 801a29e:	bd38      	pop	{r3, r4, r5, pc}
 801a2a0:	2000159c 	.word	0x2000159c
 801a2a4:	3ff00000 	.word	0x3ff00000
 801a2a8:	0801d368 	.word	0x0801d368

0801a2ac <atan2>:
 801a2ac:	f000 bb28 	b.w	801a900 <__ieee754_atan2>

0801a2b0 <pow>:
 801a2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a2b4:	ec59 8b10 	vmov	r8, r9, d0
 801a2b8:	ec57 6b11 	vmov	r6, r7, d1
 801a2bc:	f000 fbec 	bl	801aa98 <__ieee754_pow>
 801a2c0:	4b4e      	ldr	r3, [pc, #312]	; (801a3fc <pow+0x14c>)
 801a2c2:	f993 3000 	ldrsb.w	r3, [r3]
 801a2c6:	3301      	adds	r3, #1
 801a2c8:	ec55 4b10 	vmov	r4, r5, d0
 801a2cc:	d015      	beq.n	801a2fa <pow+0x4a>
 801a2ce:	4632      	mov	r2, r6
 801a2d0:	463b      	mov	r3, r7
 801a2d2:	4630      	mov	r0, r6
 801a2d4:	4639      	mov	r1, r7
 801a2d6:	f7e6 fc31 	bl	8000b3c <__aeabi_dcmpun>
 801a2da:	b970      	cbnz	r0, 801a2fa <pow+0x4a>
 801a2dc:	4642      	mov	r2, r8
 801a2de:	464b      	mov	r3, r9
 801a2e0:	4640      	mov	r0, r8
 801a2e2:	4649      	mov	r1, r9
 801a2e4:	f7e6 fc2a 	bl	8000b3c <__aeabi_dcmpun>
 801a2e8:	2200      	movs	r2, #0
 801a2ea:	2300      	movs	r3, #0
 801a2ec:	b148      	cbz	r0, 801a302 <pow+0x52>
 801a2ee:	4630      	mov	r0, r6
 801a2f0:	4639      	mov	r1, r7
 801a2f2:	f7e6 fbf1 	bl	8000ad8 <__aeabi_dcmpeq>
 801a2f6:	2800      	cmp	r0, #0
 801a2f8:	d17d      	bne.n	801a3f6 <pow+0x146>
 801a2fa:	ec45 4b10 	vmov	d0, r4, r5
 801a2fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a302:	4640      	mov	r0, r8
 801a304:	4649      	mov	r1, r9
 801a306:	f7e6 fbe7 	bl	8000ad8 <__aeabi_dcmpeq>
 801a30a:	b1e0      	cbz	r0, 801a346 <pow+0x96>
 801a30c:	2200      	movs	r2, #0
 801a30e:	2300      	movs	r3, #0
 801a310:	4630      	mov	r0, r6
 801a312:	4639      	mov	r1, r7
 801a314:	f7e6 fbe0 	bl	8000ad8 <__aeabi_dcmpeq>
 801a318:	2800      	cmp	r0, #0
 801a31a:	d16c      	bne.n	801a3f6 <pow+0x146>
 801a31c:	ec47 6b10 	vmov	d0, r6, r7
 801a320:	f002 f8a7 	bl	801c472 <finite>
 801a324:	2800      	cmp	r0, #0
 801a326:	d0e8      	beq.n	801a2fa <pow+0x4a>
 801a328:	2200      	movs	r2, #0
 801a32a:	2300      	movs	r3, #0
 801a32c:	4630      	mov	r0, r6
 801a32e:	4639      	mov	r1, r7
 801a330:	f7e6 fbdc 	bl	8000aec <__aeabi_dcmplt>
 801a334:	2800      	cmp	r0, #0
 801a336:	d0e0      	beq.n	801a2fa <pow+0x4a>
 801a338:	f7fc ffd2 	bl	80172e0 <__errno>
 801a33c:	2321      	movs	r3, #33	; 0x21
 801a33e:	6003      	str	r3, [r0, #0]
 801a340:	2400      	movs	r4, #0
 801a342:	4d2f      	ldr	r5, [pc, #188]	; (801a400 <pow+0x150>)
 801a344:	e7d9      	b.n	801a2fa <pow+0x4a>
 801a346:	ec45 4b10 	vmov	d0, r4, r5
 801a34a:	f002 f892 	bl	801c472 <finite>
 801a34e:	bbb8      	cbnz	r0, 801a3c0 <pow+0x110>
 801a350:	ec49 8b10 	vmov	d0, r8, r9
 801a354:	f002 f88d 	bl	801c472 <finite>
 801a358:	b390      	cbz	r0, 801a3c0 <pow+0x110>
 801a35a:	ec47 6b10 	vmov	d0, r6, r7
 801a35e:	f002 f888 	bl	801c472 <finite>
 801a362:	b368      	cbz	r0, 801a3c0 <pow+0x110>
 801a364:	4622      	mov	r2, r4
 801a366:	462b      	mov	r3, r5
 801a368:	4620      	mov	r0, r4
 801a36a:	4629      	mov	r1, r5
 801a36c:	f7e6 fbe6 	bl	8000b3c <__aeabi_dcmpun>
 801a370:	b160      	cbz	r0, 801a38c <pow+0xdc>
 801a372:	f7fc ffb5 	bl	80172e0 <__errno>
 801a376:	2321      	movs	r3, #33	; 0x21
 801a378:	6003      	str	r3, [r0, #0]
 801a37a:	2200      	movs	r2, #0
 801a37c:	2300      	movs	r3, #0
 801a37e:	4610      	mov	r0, r2
 801a380:	4619      	mov	r1, r3
 801a382:	f7e6 fa6b 	bl	800085c <__aeabi_ddiv>
 801a386:	4604      	mov	r4, r0
 801a388:	460d      	mov	r5, r1
 801a38a:	e7b6      	b.n	801a2fa <pow+0x4a>
 801a38c:	f7fc ffa8 	bl	80172e0 <__errno>
 801a390:	2322      	movs	r3, #34	; 0x22
 801a392:	6003      	str	r3, [r0, #0]
 801a394:	2200      	movs	r2, #0
 801a396:	2300      	movs	r3, #0
 801a398:	4640      	mov	r0, r8
 801a39a:	4649      	mov	r1, r9
 801a39c:	f7e6 fba6 	bl	8000aec <__aeabi_dcmplt>
 801a3a0:	2400      	movs	r4, #0
 801a3a2:	b158      	cbz	r0, 801a3bc <pow+0x10c>
 801a3a4:	ec47 6b10 	vmov	d0, r6, r7
 801a3a8:	f002 f876 	bl	801c498 <rint>
 801a3ac:	4632      	mov	r2, r6
 801a3ae:	ec51 0b10 	vmov	r0, r1, d0
 801a3b2:	463b      	mov	r3, r7
 801a3b4:	f7e6 fb90 	bl	8000ad8 <__aeabi_dcmpeq>
 801a3b8:	2800      	cmp	r0, #0
 801a3ba:	d0c2      	beq.n	801a342 <pow+0x92>
 801a3bc:	4d11      	ldr	r5, [pc, #68]	; (801a404 <pow+0x154>)
 801a3be:	e79c      	b.n	801a2fa <pow+0x4a>
 801a3c0:	2200      	movs	r2, #0
 801a3c2:	2300      	movs	r3, #0
 801a3c4:	4620      	mov	r0, r4
 801a3c6:	4629      	mov	r1, r5
 801a3c8:	f7e6 fb86 	bl	8000ad8 <__aeabi_dcmpeq>
 801a3cc:	2800      	cmp	r0, #0
 801a3ce:	d094      	beq.n	801a2fa <pow+0x4a>
 801a3d0:	ec49 8b10 	vmov	d0, r8, r9
 801a3d4:	f002 f84d 	bl	801c472 <finite>
 801a3d8:	2800      	cmp	r0, #0
 801a3da:	d08e      	beq.n	801a2fa <pow+0x4a>
 801a3dc:	ec47 6b10 	vmov	d0, r6, r7
 801a3e0:	f002 f847 	bl	801c472 <finite>
 801a3e4:	2800      	cmp	r0, #0
 801a3e6:	d088      	beq.n	801a2fa <pow+0x4a>
 801a3e8:	f7fc ff7a 	bl	80172e0 <__errno>
 801a3ec:	2322      	movs	r3, #34	; 0x22
 801a3ee:	6003      	str	r3, [r0, #0]
 801a3f0:	2400      	movs	r4, #0
 801a3f2:	2500      	movs	r5, #0
 801a3f4:	e781      	b.n	801a2fa <pow+0x4a>
 801a3f6:	4d04      	ldr	r5, [pc, #16]	; (801a408 <pow+0x158>)
 801a3f8:	2400      	movs	r4, #0
 801a3fa:	e77e      	b.n	801a2fa <pow+0x4a>
 801a3fc:	2000159c 	.word	0x2000159c
 801a400:	fff00000 	.word	0xfff00000
 801a404:	7ff00000 	.word	0x7ff00000
 801a408:	3ff00000 	.word	0x3ff00000

0801a40c <sqrt>:
 801a40c:	b538      	push	{r3, r4, r5, lr}
 801a40e:	ed2d 8b02 	vpush	{d8}
 801a412:	ec55 4b10 	vmov	r4, r5, d0
 801a416:	f001 f861 	bl	801b4dc <__ieee754_sqrt>
 801a41a:	4b15      	ldr	r3, [pc, #84]	; (801a470 <sqrt+0x64>)
 801a41c:	eeb0 8a40 	vmov.f32	s16, s0
 801a420:	eef0 8a60 	vmov.f32	s17, s1
 801a424:	f993 3000 	ldrsb.w	r3, [r3]
 801a428:	3301      	adds	r3, #1
 801a42a:	d019      	beq.n	801a460 <sqrt+0x54>
 801a42c:	4622      	mov	r2, r4
 801a42e:	462b      	mov	r3, r5
 801a430:	4620      	mov	r0, r4
 801a432:	4629      	mov	r1, r5
 801a434:	f7e6 fb82 	bl	8000b3c <__aeabi_dcmpun>
 801a438:	b990      	cbnz	r0, 801a460 <sqrt+0x54>
 801a43a:	2200      	movs	r2, #0
 801a43c:	2300      	movs	r3, #0
 801a43e:	4620      	mov	r0, r4
 801a440:	4629      	mov	r1, r5
 801a442:	f7e6 fb53 	bl	8000aec <__aeabi_dcmplt>
 801a446:	b158      	cbz	r0, 801a460 <sqrt+0x54>
 801a448:	f7fc ff4a 	bl	80172e0 <__errno>
 801a44c:	2321      	movs	r3, #33	; 0x21
 801a44e:	6003      	str	r3, [r0, #0]
 801a450:	2200      	movs	r2, #0
 801a452:	2300      	movs	r3, #0
 801a454:	4610      	mov	r0, r2
 801a456:	4619      	mov	r1, r3
 801a458:	f7e6 fa00 	bl	800085c <__aeabi_ddiv>
 801a45c:	ec41 0b18 	vmov	d8, r0, r1
 801a460:	eeb0 0a48 	vmov.f32	s0, s16
 801a464:	eef0 0a68 	vmov.f32	s1, s17
 801a468:	ecbd 8b02 	vpop	{d8}
 801a46c:	bd38      	pop	{r3, r4, r5, pc}
 801a46e:	bf00      	nop
 801a470:	2000159c 	.word	0x2000159c

0801a474 <acosf>:
 801a474:	b508      	push	{r3, lr}
 801a476:	ed2d 8b02 	vpush	{d8}
 801a47a:	eeb0 8a40 	vmov.f32	s16, s0
 801a47e:	f001 f8e1 	bl	801b644 <__ieee754_acosf>
 801a482:	4b13      	ldr	r3, [pc, #76]	; (801a4d0 <acosf+0x5c>)
 801a484:	f993 3000 	ldrsb.w	r3, [r3]
 801a488:	3301      	adds	r3, #1
 801a48a:	eef0 8a40 	vmov.f32	s17, s0
 801a48e:	d01a      	beq.n	801a4c6 <acosf+0x52>
 801a490:	eeb4 8a48 	vcmp.f32	s16, s16
 801a494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a498:	d615      	bvs.n	801a4c6 <acosf+0x52>
 801a49a:	eeb0 0a48 	vmov.f32	s0, s16
 801a49e:	f002 f90d 	bl	801c6bc <fabsf>
 801a4a2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a4a6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4ae:	dd0a      	ble.n	801a4c6 <acosf+0x52>
 801a4b0:	f7fc ff16 	bl	80172e0 <__errno>
 801a4b4:	ecbd 8b02 	vpop	{d8}
 801a4b8:	2321      	movs	r3, #33	; 0x21
 801a4ba:	6003      	str	r3, [r0, #0]
 801a4bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a4c0:	4804      	ldr	r0, [pc, #16]	; (801a4d4 <acosf+0x60>)
 801a4c2:	f002 b945 	b.w	801c750 <nanf>
 801a4c6:	eeb0 0a68 	vmov.f32	s0, s17
 801a4ca:	ecbd 8b02 	vpop	{d8}
 801a4ce:	bd08      	pop	{r3, pc}
 801a4d0:	2000159c 	.word	0x2000159c
 801a4d4:	0801d368 	.word	0x0801d368

0801a4d8 <__ieee754_asin>:
 801a4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4dc:	ed2d 8b04 	vpush	{d8-d9}
 801a4e0:	ec55 4b10 	vmov	r4, r5, d0
 801a4e4:	4bcc      	ldr	r3, [pc, #816]	; (801a818 <__ieee754_asin+0x340>)
 801a4e6:	b083      	sub	sp, #12
 801a4e8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801a4ec:	4598      	cmp	r8, r3
 801a4ee:	9501      	str	r5, [sp, #4]
 801a4f0:	dd35      	ble.n	801a55e <__ieee754_asin+0x86>
 801a4f2:	ee10 3a10 	vmov	r3, s0
 801a4f6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 801a4fa:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 801a4fe:	ea58 0303 	orrs.w	r3, r8, r3
 801a502:	d117      	bne.n	801a534 <__ieee754_asin+0x5c>
 801a504:	a3aa      	add	r3, pc, #680	; (adr r3, 801a7b0 <__ieee754_asin+0x2d8>)
 801a506:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a50a:	ee10 0a10 	vmov	r0, s0
 801a50e:	4629      	mov	r1, r5
 801a510:	f7e6 f87a 	bl	8000608 <__aeabi_dmul>
 801a514:	a3a8      	add	r3, pc, #672	; (adr r3, 801a7b8 <__ieee754_asin+0x2e0>)
 801a516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a51a:	4606      	mov	r6, r0
 801a51c:	460f      	mov	r7, r1
 801a51e:	4620      	mov	r0, r4
 801a520:	4629      	mov	r1, r5
 801a522:	f7e6 f871 	bl	8000608 <__aeabi_dmul>
 801a526:	4602      	mov	r2, r0
 801a528:	460b      	mov	r3, r1
 801a52a:	4630      	mov	r0, r6
 801a52c:	4639      	mov	r1, r7
 801a52e:	f7e5 feb5 	bl	800029c <__adddf3>
 801a532:	e00b      	b.n	801a54c <__ieee754_asin+0x74>
 801a534:	ee10 2a10 	vmov	r2, s0
 801a538:	462b      	mov	r3, r5
 801a53a:	ee10 0a10 	vmov	r0, s0
 801a53e:	4629      	mov	r1, r5
 801a540:	f7e5 feaa 	bl	8000298 <__aeabi_dsub>
 801a544:	4602      	mov	r2, r0
 801a546:	460b      	mov	r3, r1
 801a548:	f7e6 f988 	bl	800085c <__aeabi_ddiv>
 801a54c:	4604      	mov	r4, r0
 801a54e:	460d      	mov	r5, r1
 801a550:	ec45 4b10 	vmov	d0, r4, r5
 801a554:	b003      	add	sp, #12
 801a556:	ecbd 8b04 	vpop	{d8-d9}
 801a55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a55e:	4baf      	ldr	r3, [pc, #700]	; (801a81c <__ieee754_asin+0x344>)
 801a560:	4598      	cmp	r8, r3
 801a562:	dc11      	bgt.n	801a588 <__ieee754_asin+0xb0>
 801a564:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801a568:	f280 80ae 	bge.w	801a6c8 <__ieee754_asin+0x1f0>
 801a56c:	a394      	add	r3, pc, #592	; (adr r3, 801a7c0 <__ieee754_asin+0x2e8>)
 801a56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a572:	ee10 0a10 	vmov	r0, s0
 801a576:	4629      	mov	r1, r5
 801a578:	f7e5 fe90 	bl	800029c <__adddf3>
 801a57c:	4ba8      	ldr	r3, [pc, #672]	; (801a820 <__ieee754_asin+0x348>)
 801a57e:	2200      	movs	r2, #0
 801a580:	f7e6 fad2 	bl	8000b28 <__aeabi_dcmpgt>
 801a584:	2800      	cmp	r0, #0
 801a586:	d1e3      	bne.n	801a550 <__ieee754_asin+0x78>
 801a588:	ec45 4b10 	vmov	d0, r4, r5
 801a58c:	f001 ff68 	bl	801c460 <fabs>
 801a590:	49a3      	ldr	r1, [pc, #652]	; (801a820 <__ieee754_asin+0x348>)
 801a592:	ec53 2b10 	vmov	r2, r3, d0
 801a596:	2000      	movs	r0, #0
 801a598:	f7e5 fe7e 	bl	8000298 <__aeabi_dsub>
 801a59c:	4ba1      	ldr	r3, [pc, #644]	; (801a824 <__ieee754_asin+0x34c>)
 801a59e:	2200      	movs	r2, #0
 801a5a0:	f7e6 f832 	bl	8000608 <__aeabi_dmul>
 801a5a4:	a388      	add	r3, pc, #544	; (adr r3, 801a7c8 <__ieee754_asin+0x2f0>)
 801a5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5aa:	4604      	mov	r4, r0
 801a5ac:	460d      	mov	r5, r1
 801a5ae:	f7e6 f82b 	bl	8000608 <__aeabi_dmul>
 801a5b2:	a387      	add	r3, pc, #540	; (adr r3, 801a7d0 <__ieee754_asin+0x2f8>)
 801a5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5b8:	f7e5 fe70 	bl	800029c <__adddf3>
 801a5bc:	4622      	mov	r2, r4
 801a5be:	462b      	mov	r3, r5
 801a5c0:	f7e6 f822 	bl	8000608 <__aeabi_dmul>
 801a5c4:	a384      	add	r3, pc, #528	; (adr r3, 801a7d8 <__ieee754_asin+0x300>)
 801a5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5ca:	f7e5 fe65 	bl	8000298 <__aeabi_dsub>
 801a5ce:	4622      	mov	r2, r4
 801a5d0:	462b      	mov	r3, r5
 801a5d2:	f7e6 f819 	bl	8000608 <__aeabi_dmul>
 801a5d6:	a382      	add	r3, pc, #520	; (adr r3, 801a7e0 <__ieee754_asin+0x308>)
 801a5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5dc:	f7e5 fe5e 	bl	800029c <__adddf3>
 801a5e0:	4622      	mov	r2, r4
 801a5e2:	462b      	mov	r3, r5
 801a5e4:	f7e6 f810 	bl	8000608 <__aeabi_dmul>
 801a5e8:	a37f      	add	r3, pc, #508	; (adr r3, 801a7e8 <__ieee754_asin+0x310>)
 801a5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5ee:	f7e5 fe53 	bl	8000298 <__aeabi_dsub>
 801a5f2:	4622      	mov	r2, r4
 801a5f4:	462b      	mov	r3, r5
 801a5f6:	f7e6 f807 	bl	8000608 <__aeabi_dmul>
 801a5fa:	a37d      	add	r3, pc, #500	; (adr r3, 801a7f0 <__ieee754_asin+0x318>)
 801a5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a600:	f7e5 fe4c 	bl	800029c <__adddf3>
 801a604:	4622      	mov	r2, r4
 801a606:	462b      	mov	r3, r5
 801a608:	f7e5 fffe 	bl	8000608 <__aeabi_dmul>
 801a60c:	a37a      	add	r3, pc, #488	; (adr r3, 801a7f8 <__ieee754_asin+0x320>)
 801a60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a612:	ec41 0b18 	vmov	d8, r0, r1
 801a616:	4620      	mov	r0, r4
 801a618:	4629      	mov	r1, r5
 801a61a:	f7e5 fff5 	bl	8000608 <__aeabi_dmul>
 801a61e:	a378      	add	r3, pc, #480	; (adr r3, 801a800 <__ieee754_asin+0x328>)
 801a620:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a624:	f7e5 fe38 	bl	8000298 <__aeabi_dsub>
 801a628:	4622      	mov	r2, r4
 801a62a:	462b      	mov	r3, r5
 801a62c:	f7e5 ffec 	bl	8000608 <__aeabi_dmul>
 801a630:	a375      	add	r3, pc, #468	; (adr r3, 801a808 <__ieee754_asin+0x330>)
 801a632:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a636:	f7e5 fe31 	bl	800029c <__adddf3>
 801a63a:	4622      	mov	r2, r4
 801a63c:	462b      	mov	r3, r5
 801a63e:	f7e5 ffe3 	bl	8000608 <__aeabi_dmul>
 801a642:	a373      	add	r3, pc, #460	; (adr r3, 801a810 <__ieee754_asin+0x338>)
 801a644:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a648:	f7e5 fe26 	bl	8000298 <__aeabi_dsub>
 801a64c:	4622      	mov	r2, r4
 801a64e:	462b      	mov	r3, r5
 801a650:	f7e5 ffda 	bl	8000608 <__aeabi_dmul>
 801a654:	4b72      	ldr	r3, [pc, #456]	; (801a820 <__ieee754_asin+0x348>)
 801a656:	2200      	movs	r2, #0
 801a658:	f7e5 fe20 	bl	800029c <__adddf3>
 801a65c:	ec45 4b10 	vmov	d0, r4, r5
 801a660:	4606      	mov	r6, r0
 801a662:	460f      	mov	r7, r1
 801a664:	f000 ff3a 	bl	801b4dc <__ieee754_sqrt>
 801a668:	4b6f      	ldr	r3, [pc, #444]	; (801a828 <__ieee754_asin+0x350>)
 801a66a:	4598      	cmp	r8, r3
 801a66c:	ec5b ab10 	vmov	sl, fp, d0
 801a670:	f340 80dc 	ble.w	801a82c <__ieee754_asin+0x354>
 801a674:	4632      	mov	r2, r6
 801a676:	463b      	mov	r3, r7
 801a678:	ec51 0b18 	vmov	r0, r1, d8
 801a67c:	f7e6 f8ee 	bl	800085c <__aeabi_ddiv>
 801a680:	4652      	mov	r2, sl
 801a682:	465b      	mov	r3, fp
 801a684:	f7e5 ffc0 	bl	8000608 <__aeabi_dmul>
 801a688:	4652      	mov	r2, sl
 801a68a:	465b      	mov	r3, fp
 801a68c:	f7e5 fe06 	bl	800029c <__adddf3>
 801a690:	4602      	mov	r2, r0
 801a692:	460b      	mov	r3, r1
 801a694:	f7e5 fe02 	bl	800029c <__adddf3>
 801a698:	a347      	add	r3, pc, #284	; (adr r3, 801a7b8 <__ieee754_asin+0x2e0>)
 801a69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a69e:	f7e5 fdfb 	bl	8000298 <__aeabi_dsub>
 801a6a2:	4602      	mov	r2, r0
 801a6a4:	460b      	mov	r3, r1
 801a6a6:	a142      	add	r1, pc, #264	; (adr r1, 801a7b0 <__ieee754_asin+0x2d8>)
 801a6a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a6ac:	f7e5 fdf4 	bl	8000298 <__aeabi_dsub>
 801a6b0:	9b01      	ldr	r3, [sp, #4]
 801a6b2:	2b00      	cmp	r3, #0
 801a6b4:	bfdc      	itt	le
 801a6b6:	4602      	movle	r2, r0
 801a6b8:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 801a6bc:	4604      	mov	r4, r0
 801a6be:	460d      	mov	r5, r1
 801a6c0:	bfdc      	itt	le
 801a6c2:	4614      	movle	r4, r2
 801a6c4:	461d      	movle	r5, r3
 801a6c6:	e743      	b.n	801a550 <__ieee754_asin+0x78>
 801a6c8:	ee10 2a10 	vmov	r2, s0
 801a6cc:	ee10 0a10 	vmov	r0, s0
 801a6d0:	462b      	mov	r3, r5
 801a6d2:	4629      	mov	r1, r5
 801a6d4:	f7e5 ff98 	bl	8000608 <__aeabi_dmul>
 801a6d8:	a33b      	add	r3, pc, #236	; (adr r3, 801a7c8 <__ieee754_asin+0x2f0>)
 801a6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6de:	4606      	mov	r6, r0
 801a6e0:	460f      	mov	r7, r1
 801a6e2:	f7e5 ff91 	bl	8000608 <__aeabi_dmul>
 801a6e6:	a33a      	add	r3, pc, #232	; (adr r3, 801a7d0 <__ieee754_asin+0x2f8>)
 801a6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6ec:	f7e5 fdd6 	bl	800029c <__adddf3>
 801a6f0:	4632      	mov	r2, r6
 801a6f2:	463b      	mov	r3, r7
 801a6f4:	f7e5 ff88 	bl	8000608 <__aeabi_dmul>
 801a6f8:	a337      	add	r3, pc, #220	; (adr r3, 801a7d8 <__ieee754_asin+0x300>)
 801a6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6fe:	f7e5 fdcb 	bl	8000298 <__aeabi_dsub>
 801a702:	4632      	mov	r2, r6
 801a704:	463b      	mov	r3, r7
 801a706:	f7e5 ff7f 	bl	8000608 <__aeabi_dmul>
 801a70a:	a335      	add	r3, pc, #212	; (adr r3, 801a7e0 <__ieee754_asin+0x308>)
 801a70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a710:	f7e5 fdc4 	bl	800029c <__adddf3>
 801a714:	4632      	mov	r2, r6
 801a716:	463b      	mov	r3, r7
 801a718:	f7e5 ff76 	bl	8000608 <__aeabi_dmul>
 801a71c:	a332      	add	r3, pc, #200	; (adr r3, 801a7e8 <__ieee754_asin+0x310>)
 801a71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a722:	f7e5 fdb9 	bl	8000298 <__aeabi_dsub>
 801a726:	4632      	mov	r2, r6
 801a728:	463b      	mov	r3, r7
 801a72a:	f7e5 ff6d 	bl	8000608 <__aeabi_dmul>
 801a72e:	a330      	add	r3, pc, #192	; (adr r3, 801a7f0 <__ieee754_asin+0x318>)
 801a730:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a734:	f7e5 fdb2 	bl	800029c <__adddf3>
 801a738:	4632      	mov	r2, r6
 801a73a:	463b      	mov	r3, r7
 801a73c:	f7e5 ff64 	bl	8000608 <__aeabi_dmul>
 801a740:	a32d      	add	r3, pc, #180	; (adr r3, 801a7f8 <__ieee754_asin+0x320>)
 801a742:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a746:	4680      	mov	r8, r0
 801a748:	4689      	mov	r9, r1
 801a74a:	4630      	mov	r0, r6
 801a74c:	4639      	mov	r1, r7
 801a74e:	f7e5 ff5b 	bl	8000608 <__aeabi_dmul>
 801a752:	a32b      	add	r3, pc, #172	; (adr r3, 801a800 <__ieee754_asin+0x328>)
 801a754:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a758:	f7e5 fd9e 	bl	8000298 <__aeabi_dsub>
 801a75c:	4632      	mov	r2, r6
 801a75e:	463b      	mov	r3, r7
 801a760:	f7e5 ff52 	bl	8000608 <__aeabi_dmul>
 801a764:	a328      	add	r3, pc, #160	; (adr r3, 801a808 <__ieee754_asin+0x330>)
 801a766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a76a:	f7e5 fd97 	bl	800029c <__adddf3>
 801a76e:	4632      	mov	r2, r6
 801a770:	463b      	mov	r3, r7
 801a772:	f7e5 ff49 	bl	8000608 <__aeabi_dmul>
 801a776:	a326      	add	r3, pc, #152	; (adr r3, 801a810 <__ieee754_asin+0x338>)
 801a778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a77c:	f7e5 fd8c 	bl	8000298 <__aeabi_dsub>
 801a780:	4632      	mov	r2, r6
 801a782:	463b      	mov	r3, r7
 801a784:	f7e5 ff40 	bl	8000608 <__aeabi_dmul>
 801a788:	4b25      	ldr	r3, [pc, #148]	; (801a820 <__ieee754_asin+0x348>)
 801a78a:	2200      	movs	r2, #0
 801a78c:	f7e5 fd86 	bl	800029c <__adddf3>
 801a790:	4602      	mov	r2, r0
 801a792:	460b      	mov	r3, r1
 801a794:	4640      	mov	r0, r8
 801a796:	4649      	mov	r1, r9
 801a798:	f7e6 f860 	bl	800085c <__aeabi_ddiv>
 801a79c:	4622      	mov	r2, r4
 801a79e:	462b      	mov	r3, r5
 801a7a0:	f7e5 ff32 	bl	8000608 <__aeabi_dmul>
 801a7a4:	4602      	mov	r2, r0
 801a7a6:	460b      	mov	r3, r1
 801a7a8:	4620      	mov	r0, r4
 801a7aa:	4629      	mov	r1, r5
 801a7ac:	e6bf      	b.n	801a52e <__ieee754_asin+0x56>
 801a7ae:	bf00      	nop
 801a7b0:	54442d18 	.word	0x54442d18
 801a7b4:	3ff921fb 	.word	0x3ff921fb
 801a7b8:	33145c07 	.word	0x33145c07
 801a7bc:	3c91a626 	.word	0x3c91a626
 801a7c0:	8800759c 	.word	0x8800759c
 801a7c4:	7e37e43c 	.word	0x7e37e43c
 801a7c8:	0dfdf709 	.word	0x0dfdf709
 801a7cc:	3f023de1 	.word	0x3f023de1
 801a7d0:	7501b288 	.word	0x7501b288
 801a7d4:	3f49efe0 	.word	0x3f49efe0
 801a7d8:	b5688f3b 	.word	0xb5688f3b
 801a7dc:	3fa48228 	.word	0x3fa48228
 801a7e0:	0e884455 	.word	0x0e884455
 801a7e4:	3fc9c155 	.word	0x3fc9c155
 801a7e8:	03eb6f7d 	.word	0x03eb6f7d
 801a7ec:	3fd4d612 	.word	0x3fd4d612
 801a7f0:	55555555 	.word	0x55555555
 801a7f4:	3fc55555 	.word	0x3fc55555
 801a7f8:	b12e9282 	.word	0xb12e9282
 801a7fc:	3fb3b8c5 	.word	0x3fb3b8c5
 801a800:	1b8d0159 	.word	0x1b8d0159
 801a804:	3fe6066c 	.word	0x3fe6066c
 801a808:	9c598ac8 	.word	0x9c598ac8
 801a80c:	40002ae5 	.word	0x40002ae5
 801a810:	1c8a2d4b 	.word	0x1c8a2d4b
 801a814:	40033a27 	.word	0x40033a27
 801a818:	3fefffff 	.word	0x3fefffff
 801a81c:	3fdfffff 	.word	0x3fdfffff
 801a820:	3ff00000 	.word	0x3ff00000
 801a824:	3fe00000 	.word	0x3fe00000
 801a828:	3fef3332 	.word	0x3fef3332
 801a82c:	ee10 2a10 	vmov	r2, s0
 801a830:	ee10 0a10 	vmov	r0, s0
 801a834:	465b      	mov	r3, fp
 801a836:	4659      	mov	r1, fp
 801a838:	f7e5 fd30 	bl	800029c <__adddf3>
 801a83c:	4632      	mov	r2, r6
 801a83e:	463b      	mov	r3, r7
 801a840:	ec41 0b19 	vmov	d9, r0, r1
 801a844:	ec51 0b18 	vmov	r0, r1, d8
 801a848:	f7e6 f808 	bl	800085c <__aeabi_ddiv>
 801a84c:	4602      	mov	r2, r0
 801a84e:	460b      	mov	r3, r1
 801a850:	ec51 0b19 	vmov	r0, r1, d9
 801a854:	f7e5 fed8 	bl	8000608 <__aeabi_dmul>
 801a858:	f04f 0800 	mov.w	r8, #0
 801a85c:	4606      	mov	r6, r0
 801a85e:	460f      	mov	r7, r1
 801a860:	4642      	mov	r2, r8
 801a862:	465b      	mov	r3, fp
 801a864:	4640      	mov	r0, r8
 801a866:	4659      	mov	r1, fp
 801a868:	f7e5 fece 	bl	8000608 <__aeabi_dmul>
 801a86c:	4602      	mov	r2, r0
 801a86e:	460b      	mov	r3, r1
 801a870:	4620      	mov	r0, r4
 801a872:	4629      	mov	r1, r5
 801a874:	f7e5 fd10 	bl	8000298 <__aeabi_dsub>
 801a878:	4642      	mov	r2, r8
 801a87a:	4604      	mov	r4, r0
 801a87c:	460d      	mov	r5, r1
 801a87e:	465b      	mov	r3, fp
 801a880:	4650      	mov	r0, sl
 801a882:	4659      	mov	r1, fp
 801a884:	f7e5 fd0a 	bl	800029c <__adddf3>
 801a888:	4602      	mov	r2, r0
 801a88a:	460b      	mov	r3, r1
 801a88c:	4620      	mov	r0, r4
 801a88e:	4629      	mov	r1, r5
 801a890:	f7e5 ffe4 	bl	800085c <__aeabi_ddiv>
 801a894:	4602      	mov	r2, r0
 801a896:	460b      	mov	r3, r1
 801a898:	f7e5 fd00 	bl	800029c <__adddf3>
 801a89c:	4602      	mov	r2, r0
 801a89e:	460b      	mov	r3, r1
 801a8a0:	a113      	add	r1, pc, #76	; (adr r1, 801a8f0 <__ieee754_asin+0x418>)
 801a8a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a8a6:	f7e5 fcf7 	bl	8000298 <__aeabi_dsub>
 801a8aa:	4602      	mov	r2, r0
 801a8ac:	460b      	mov	r3, r1
 801a8ae:	4630      	mov	r0, r6
 801a8b0:	4639      	mov	r1, r7
 801a8b2:	f7e5 fcf1 	bl	8000298 <__aeabi_dsub>
 801a8b6:	4642      	mov	r2, r8
 801a8b8:	4604      	mov	r4, r0
 801a8ba:	460d      	mov	r5, r1
 801a8bc:	465b      	mov	r3, fp
 801a8be:	4640      	mov	r0, r8
 801a8c0:	4659      	mov	r1, fp
 801a8c2:	f7e5 fceb 	bl	800029c <__adddf3>
 801a8c6:	4602      	mov	r2, r0
 801a8c8:	460b      	mov	r3, r1
 801a8ca:	a10b      	add	r1, pc, #44	; (adr r1, 801a8f8 <__ieee754_asin+0x420>)
 801a8cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a8d0:	f7e5 fce2 	bl	8000298 <__aeabi_dsub>
 801a8d4:	4602      	mov	r2, r0
 801a8d6:	460b      	mov	r3, r1
 801a8d8:	4620      	mov	r0, r4
 801a8da:	4629      	mov	r1, r5
 801a8dc:	f7e5 fcdc 	bl	8000298 <__aeabi_dsub>
 801a8e0:	4602      	mov	r2, r0
 801a8e2:	460b      	mov	r3, r1
 801a8e4:	a104      	add	r1, pc, #16	; (adr r1, 801a8f8 <__ieee754_asin+0x420>)
 801a8e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a8ea:	e6df      	b.n	801a6ac <__ieee754_asin+0x1d4>
 801a8ec:	f3af 8000 	nop.w
 801a8f0:	33145c07 	.word	0x33145c07
 801a8f4:	3c91a626 	.word	0x3c91a626
 801a8f8:	54442d18 	.word	0x54442d18
 801a8fc:	3fe921fb 	.word	0x3fe921fb

0801a900 <__ieee754_atan2>:
 801a900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a904:	ec57 6b11 	vmov	r6, r7, d1
 801a908:	4273      	negs	r3, r6
 801a90a:	f8df e184 	ldr.w	lr, [pc, #388]	; 801aa90 <__ieee754_atan2+0x190>
 801a90e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801a912:	4333      	orrs	r3, r6
 801a914:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801a918:	4573      	cmp	r3, lr
 801a91a:	ec51 0b10 	vmov	r0, r1, d0
 801a91e:	ee11 8a10 	vmov	r8, s2
 801a922:	d80a      	bhi.n	801a93a <__ieee754_atan2+0x3a>
 801a924:	4244      	negs	r4, r0
 801a926:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a92a:	4304      	orrs	r4, r0
 801a92c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801a930:	4574      	cmp	r4, lr
 801a932:	ee10 9a10 	vmov	r9, s0
 801a936:	468c      	mov	ip, r1
 801a938:	d907      	bls.n	801a94a <__ieee754_atan2+0x4a>
 801a93a:	4632      	mov	r2, r6
 801a93c:	463b      	mov	r3, r7
 801a93e:	f7e5 fcad 	bl	800029c <__adddf3>
 801a942:	ec41 0b10 	vmov	d0, r0, r1
 801a946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a94a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801a94e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a952:	4334      	orrs	r4, r6
 801a954:	d103      	bne.n	801a95e <__ieee754_atan2+0x5e>
 801a956:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a95a:	f001 bbe1 	b.w	801c120 <atan>
 801a95e:	17bc      	asrs	r4, r7, #30
 801a960:	f004 0402 	and.w	r4, r4, #2
 801a964:	ea53 0909 	orrs.w	r9, r3, r9
 801a968:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801a96c:	d107      	bne.n	801a97e <__ieee754_atan2+0x7e>
 801a96e:	2c02      	cmp	r4, #2
 801a970:	d060      	beq.n	801aa34 <__ieee754_atan2+0x134>
 801a972:	2c03      	cmp	r4, #3
 801a974:	d1e5      	bne.n	801a942 <__ieee754_atan2+0x42>
 801a976:	a142      	add	r1, pc, #264	; (adr r1, 801aa80 <__ieee754_atan2+0x180>)
 801a978:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a97c:	e7e1      	b.n	801a942 <__ieee754_atan2+0x42>
 801a97e:	ea52 0808 	orrs.w	r8, r2, r8
 801a982:	d106      	bne.n	801a992 <__ieee754_atan2+0x92>
 801a984:	f1bc 0f00 	cmp.w	ip, #0
 801a988:	da5f      	bge.n	801aa4a <__ieee754_atan2+0x14a>
 801a98a:	a13f      	add	r1, pc, #252	; (adr r1, 801aa88 <__ieee754_atan2+0x188>)
 801a98c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a990:	e7d7      	b.n	801a942 <__ieee754_atan2+0x42>
 801a992:	4572      	cmp	r2, lr
 801a994:	d10f      	bne.n	801a9b6 <__ieee754_atan2+0xb6>
 801a996:	4293      	cmp	r3, r2
 801a998:	f104 34ff 	add.w	r4, r4, #4294967295
 801a99c:	d107      	bne.n	801a9ae <__ieee754_atan2+0xae>
 801a99e:	2c02      	cmp	r4, #2
 801a9a0:	d84c      	bhi.n	801aa3c <__ieee754_atan2+0x13c>
 801a9a2:	4b35      	ldr	r3, [pc, #212]	; (801aa78 <__ieee754_atan2+0x178>)
 801a9a4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801a9a8:	e9d4 0100 	ldrd	r0, r1, [r4]
 801a9ac:	e7c9      	b.n	801a942 <__ieee754_atan2+0x42>
 801a9ae:	2c02      	cmp	r4, #2
 801a9b0:	d848      	bhi.n	801aa44 <__ieee754_atan2+0x144>
 801a9b2:	4b32      	ldr	r3, [pc, #200]	; (801aa7c <__ieee754_atan2+0x17c>)
 801a9b4:	e7f6      	b.n	801a9a4 <__ieee754_atan2+0xa4>
 801a9b6:	4573      	cmp	r3, lr
 801a9b8:	d0e4      	beq.n	801a984 <__ieee754_atan2+0x84>
 801a9ba:	1a9b      	subs	r3, r3, r2
 801a9bc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801a9c0:	ea4f 5223 	mov.w	r2, r3, asr #20
 801a9c4:	da1e      	bge.n	801aa04 <__ieee754_atan2+0x104>
 801a9c6:	2f00      	cmp	r7, #0
 801a9c8:	da01      	bge.n	801a9ce <__ieee754_atan2+0xce>
 801a9ca:	323c      	adds	r2, #60	; 0x3c
 801a9cc:	db1e      	blt.n	801aa0c <__ieee754_atan2+0x10c>
 801a9ce:	4632      	mov	r2, r6
 801a9d0:	463b      	mov	r3, r7
 801a9d2:	f7e5 ff43 	bl	800085c <__aeabi_ddiv>
 801a9d6:	ec41 0b10 	vmov	d0, r0, r1
 801a9da:	f001 fd41 	bl	801c460 <fabs>
 801a9de:	f001 fb9f 	bl	801c120 <atan>
 801a9e2:	ec51 0b10 	vmov	r0, r1, d0
 801a9e6:	2c01      	cmp	r4, #1
 801a9e8:	d013      	beq.n	801aa12 <__ieee754_atan2+0x112>
 801a9ea:	2c02      	cmp	r4, #2
 801a9ec:	d015      	beq.n	801aa1a <__ieee754_atan2+0x11a>
 801a9ee:	2c00      	cmp	r4, #0
 801a9f0:	d0a7      	beq.n	801a942 <__ieee754_atan2+0x42>
 801a9f2:	a319      	add	r3, pc, #100	; (adr r3, 801aa58 <__ieee754_atan2+0x158>)
 801a9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9f8:	f7e5 fc4e 	bl	8000298 <__aeabi_dsub>
 801a9fc:	a318      	add	r3, pc, #96	; (adr r3, 801aa60 <__ieee754_atan2+0x160>)
 801a9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa02:	e014      	b.n	801aa2e <__ieee754_atan2+0x12e>
 801aa04:	a118      	add	r1, pc, #96	; (adr r1, 801aa68 <__ieee754_atan2+0x168>)
 801aa06:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aa0a:	e7ec      	b.n	801a9e6 <__ieee754_atan2+0xe6>
 801aa0c:	2000      	movs	r0, #0
 801aa0e:	2100      	movs	r1, #0
 801aa10:	e7e9      	b.n	801a9e6 <__ieee754_atan2+0xe6>
 801aa12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801aa16:	4619      	mov	r1, r3
 801aa18:	e793      	b.n	801a942 <__ieee754_atan2+0x42>
 801aa1a:	a30f      	add	r3, pc, #60	; (adr r3, 801aa58 <__ieee754_atan2+0x158>)
 801aa1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa20:	f7e5 fc3a 	bl	8000298 <__aeabi_dsub>
 801aa24:	4602      	mov	r2, r0
 801aa26:	460b      	mov	r3, r1
 801aa28:	a10d      	add	r1, pc, #52	; (adr r1, 801aa60 <__ieee754_atan2+0x160>)
 801aa2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aa2e:	f7e5 fc33 	bl	8000298 <__aeabi_dsub>
 801aa32:	e786      	b.n	801a942 <__ieee754_atan2+0x42>
 801aa34:	a10a      	add	r1, pc, #40	; (adr r1, 801aa60 <__ieee754_atan2+0x160>)
 801aa36:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aa3a:	e782      	b.n	801a942 <__ieee754_atan2+0x42>
 801aa3c:	a10c      	add	r1, pc, #48	; (adr r1, 801aa70 <__ieee754_atan2+0x170>)
 801aa3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aa42:	e77e      	b.n	801a942 <__ieee754_atan2+0x42>
 801aa44:	2000      	movs	r0, #0
 801aa46:	2100      	movs	r1, #0
 801aa48:	e77b      	b.n	801a942 <__ieee754_atan2+0x42>
 801aa4a:	a107      	add	r1, pc, #28	; (adr r1, 801aa68 <__ieee754_atan2+0x168>)
 801aa4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aa50:	e777      	b.n	801a942 <__ieee754_atan2+0x42>
 801aa52:	bf00      	nop
 801aa54:	f3af 8000 	nop.w
 801aa58:	33145c07 	.word	0x33145c07
 801aa5c:	3ca1a626 	.word	0x3ca1a626
 801aa60:	54442d18 	.word	0x54442d18
 801aa64:	400921fb 	.word	0x400921fb
 801aa68:	54442d18 	.word	0x54442d18
 801aa6c:	3ff921fb 	.word	0x3ff921fb
 801aa70:	54442d18 	.word	0x54442d18
 801aa74:	3fe921fb 	.word	0x3fe921fb
 801aa78:	0801d478 	.word	0x0801d478
 801aa7c:	0801d490 	.word	0x0801d490
 801aa80:	54442d18 	.word	0x54442d18
 801aa84:	c00921fb 	.word	0xc00921fb
 801aa88:	54442d18 	.word	0x54442d18
 801aa8c:	bff921fb 	.word	0xbff921fb
 801aa90:	7ff00000 	.word	0x7ff00000
 801aa94:	00000000 	.word	0x00000000

0801aa98 <__ieee754_pow>:
 801aa98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa9c:	ed2d 8b06 	vpush	{d8-d10}
 801aaa0:	b08d      	sub	sp, #52	; 0x34
 801aaa2:	ed8d 1b02 	vstr	d1, [sp, #8]
 801aaa6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 801aaaa:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801aaae:	ea56 0100 	orrs.w	r1, r6, r0
 801aab2:	ec53 2b10 	vmov	r2, r3, d0
 801aab6:	f000 84d1 	beq.w	801b45c <__ieee754_pow+0x9c4>
 801aaba:	497f      	ldr	r1, [pc, #508]	; (801acb8 <__ieee754_pow+0x220>)
 801aabc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 801aac0:	428c      	cmp	r4, r1
 801aac2:	ee10 8a10 	vmov	r8, s0
 801aac6:	4699      	mov	r9, r3
 801aac8:	dc09      	bgt.n	801aade <__ieee754_pow+0x46>
 801aaca:	d103      	bne.n	801aad4 <__ieee754_pow+0x3c>
 801aacc:	b97a      	cbnz	r2, 801aaee <__ieee754_pow+0x56>
 801aace:	42a6      	cmp	r6, r4
 801aad0:	dd02      	ble.n	801aad8 <__ieee754_pow+0x40>
 801aad2:	e00c      	b.n	801aaee <__ieee754_pow+0x56>
 801aad4:	428e      	cmp	r6, r1
 801aad6:	dc02      	bgt.n	801aade <__ieee754_pow+0x46>
 801aad8:	428e      	cmp	r6, r1
 801aada:	d110      	bne.n	801aafe <__ieee754_pow+0x66>
 801aadc:	b178      	cbz	r0, 801aafe <__ieee754_pow+0x66>
 801aade:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801aae2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801aae6:	ea54 0308 	orrs.w	r3, r4, r8
 801aaea:	f000 84b7 	beq.w	801b45c <__ieee754_pow+0x9c4>
 801aaee:	4873      	ldr	r0, [pc, #460]	; (801acbc <__ieee754_pow+0x224>)
 801aaf0:	b00d      	add	sp, #52	; 0x34
 801aaf2:	ecbd 8b06 	vpop	{d8-d10}
 801aaf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aafa:	f001 bcc5 	b.w	801c488 <nan>
 801aafe:	f1b9 0f00 	cmp.w	r9, #0
 801ab02:	da36      	bge.n	801ab72 <__ieee754_pow+0xda>
 801ab04:	496e      	ldr	r1, [pc, #440]	; (801acc0 <__ieee754_pow+0x228>)
 801ab06:	428e      	cmp	r6, r1
 801ab08:	dc51      	bgt.n	801abae <__ieee754_pow+0x116>
 801ab0a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 801ab0e:	428e      	cmp	r6, r1
 801ab10:	f340 84af 	ble.w	801b472 <__ieee754_pow+0x9da>
 801ab14:	1531      	asrs	r1, r6, #20
 801ab16:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801ab1a:	2914      	cmp	r1, #20
 801ab1c:	dd0f      	ble.n	801ab3e <__ieee754_pow+0xa6>
 801ab1e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 801ab22:	fa20 fc01 	lsr.w	ip, r0, r1
 801ab26:	fa0c f101 	lsl.w	r1, ip, r1
 801ab2a:	4281      	cmp	r1, r0
 801ab2c:	f040 84a1 	bne.w	801b472 <__ieee754_pow+0x9da>
 801ab30:	f00c 0c01 	and.w	ip, ip, #1
 801ab34:	f1cc 0102 	rsb	r1, ip, #2
 801ab38:	9100      	str	r1, [sp, #0]
 801ab3a:	b180      	cbz	r0, 801ab5e <__ieee754_pow+0xc6>
 801ab3c:	e059      	b.n	801abf2 <__ieee754_pow+0x15a>
 801ab3e:	2800      	cmp	r0, #0
 801ab40:	d155      	bne.n	801abee <__ieee754_pow+0x156>
 801ab42:	f1c1 0114 	rsb	r1, r1, #20
 801ab46:	fa46 fc01 	asr.w	ip, r6, r1
 801ab4a:	fa0c f101 	lsl.w	r1, ip, r1
 801ab4e:	42b1      	cmp	r1, r6
 801ab50:	f040 848c 	bne.w	801b46c <__ieee754_pow+0x9d4>
 801ab54:	f00c 0c01 	and.w	ip, ip, #1
 801ab58:	f1cc 0102 	rsb	r1, ip, #2
 801ab5c:	9100      	str	r1, [sp, #0]
 801ab5e:	4959      	ldr	r1, [pc, #356]	; (801acc4 <__ieee754_pow+0x22c>)
 801ab60:	428e      	cmp	r6, r1
 801ab62:	d12d      	bne.n	801abc0 <__ieee754_pow+0x128>
 801ab64:	2f00      	cmp	r7, #0
 801ab66:	da79      	bge.n	801ac5c <__ieee754_pow+0x1c4>
 801ab68:	4956      	ldr	r1, [pc, #344]	; (801acc4 <__ieee754_pow+0x22c>)
 801ab6a:	2000      	movs	r0, #0
 801ab6c:	f7e5 fe76 	bl	800085c <__aeabi_ddiv>
 801ab70:	e016      	b.n	801aba0 <__ieee754_pow+0x108>
 801ab72:	2100      	movs	r1, #0
 801ab74:	9100      	str	r1, [sp, #0]
 801ab76:	2800      	cmp	r0, #0
 801ab78:	d13b      	bne.n	801abf2 <__ieee754_pow+0x15a>
 801ab7a:	494f      	ldr	r1, [pc, #316]	; (801acb8 <__ieee754_pow+0x220>)
 801ab7c:	428e      	cmp	r6, r1
 801ab7e:	d1ee      	bne.n	801ab5e <__ieee754_pow+0xc6>
 801ab80:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801ab84:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801ab88:	ea53 0308 	orrs.w	r3, r3, r8
 801ab8c:	f000 8466 	beq.w	801b45c <__ieee754_pow+0x9c4>
 801ab90:	4b4d      	ldr	r3, [pc, #308]	; (801acc8 <__ieee754_pow+0x230>)
 801ab92:	429c      	cmp	r4, r3
 801ab94:	dd0d      	ble.n	801abb2 <__ieee754_pow+0x11a>
 801ab96:	2f00      	cmp	r7, #0
 801ab98:	f280 8464 	bge.w	801b464 <__ieee754_pow+0x9cc>
 801ab9c:	2000      	movs	r0, #0
 801ab9e:	2100      	movs	r1, #0
 801aba0:	ec41 0b10 	vmov	d0, r0, r1
 801aba4:	b00d      	add	sp, #52	; 0x34
 801aba6:	ecbd 8b06 	vpop	{d8-d10}
 801abaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abae:	2102      	movs	r1, #2
 801abb0:	e7e0      	b.n	801ab74 <__ieee754_pow+0xdc>
 801abb2:	2f00      	cmp	r7, #0
 801abb4:	daf2      	bge.n	801ab9c <__ieee754_pow+0x104>
 801abb6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 801abba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801abbe:	e7ef      	b.n	801aba0 <__ieee754_pow+0x108>
 801abc0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 801abc4:	d104      	bne.n	801abd0 <__ieee754_pow+0x138>
 801abc6:	4610      	mov	r0, r2
 801abc8:	4619      	mov	r1, r3
 801abca:	f7e5 fd1d 	bl	8000608 <__aeabi_dmul>
 801abce:	e7e7      	b.n	801aba0 <__ieee754_pow+0x108>
 801abd0:	493e      	ldr	r1, [pc, #248]	; (801accc <__ieee754_pow+0x234>)
 801abd2:	428f      	cmp	r7, r1
 801abd4:	d10d      	bne.n	801abf2 <__ieee754_pow+0x15a>
 801abd6:	f1b9 0f00 	cmp.w	r9, #0
 801abda:	db0a      	blt.n	801abf2 <__ieee754_pow+0x15a>
 801abdc:	ec43 2b10 	vmov	d0, r2, r3
 801abe0:	b00d      	add	sp, #52	; 0x34
 801abe2:	ecbd 8b06 	vpop	{d8-d10}
 801abe6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abea:	f000 bc77 	b.w	801b4dc <__ieee754_sqrt>
 801abee:	2100      	movs	r1, #0
 801abf0:	9100      	str	r1, [sp, #0]
 801abf2:	ec43 2b10 	vmov	d0, r2, r3
 801abf6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801abfa:	f001 fc31 	bl	801c460 <fabs>
 801abfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ac02:	ec51 0b10 	vmov	r0, r1, d0
 801ac06:	f1b8 0f00 	cmp.w	r8, #0
 801ac0a:	d12a      	bne.n	801ac62 <__ieee754_pow+0x1ca>
 801ac0c:	b12c      	cbz	r4, 801ac1a <__ieee754_pow+0x182>
 801ac0e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 801acc4 <__ieee754_pow+0x22c>
 801ac12:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 801ac16:	45e6      	cmp	lr, ip
 801ac18:	d123      	bne.n	801ac62 <__ieee754_pow+0x1ca>
 801ac1a:	2f00      	cmp	r7, #0
 801ac1c:	da05      	bge.n	801ac2a <__ieee754_pow+0x192>
 801ac1e:	4602      	mov	r2, r0
 801ac20:	460b      	mov	r3, r1
 801ac22:	2000      	movs	r0, #0
 801ac24:	4927      	ldr	r1, [pc, #156]	; (801acc4 <__ieee754_pow+0x22c>)
 801ac26:	f7e5 fe19 	bl	800085c <__aeabi_ddiv>
 801ac2a:	f1b9 0f00 	cmp.w	r9, #0
 801ac2e:	dab7      	bge.n	801aba0 <__ieee754_pow+0x108>
 801ac30:	9b00      	ldr	r3, [sp, #0]
 801ac32:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801ac36:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801ac3a:	4323      	orrs	r3, r4
 801ac3c:	d108      	bne.n	801ac50 <__ieee754_pow+0x1b8>
 801ac3e:	4602      	mov	r2, r0
 801ac40:	460b      	mov	r3, r1
 801ac42:	4610      	mov	r0, r2
 801ac44:	4619      	mov	r1, r3
 801ac46:	f7e5 fb27 	bl	8000298 <__aeabi_dsub>
 801ac4a:	4602      	mov	r2, r0
 801ac4c:	460b      	mov	r3, r1
 801ac4e:	e78d      	b.n	801ab6c <__ieee754_pow+0xd4>
 801ac50:	9b00      	ldr	r3, [sp, #0]
 801ac52:	2b01      	cmp	r3, #1
 801ac54:	d1a4      	bne.n	801aba0 <__ieee754_pow+0x108>
 801ac56:	4602      	mov	r2, r0
 801ac58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ac5c:	4610      	mov	r0, r2
 801ac5e:	4619      	mov	r1, r3
 801ac60:	e79e      	b.n	801aba0 <__ieee754_pow+0x108>
 801ac62:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 801ac66:	f10c 35ff 	add.w	r5, ip, #4294967295
 801ac6a:	950a      	str	r5, [sp, #40]	; 0x28
 801ac6c:	9d00      	ldr	r5, [sp, #0]
 801ac6e:	46ac      	mov	ip, r5
 801ac70:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801ac72:	ea5c 0505 	orrs.w	r5, ip, r5
 801ac76:	d0e4      	beq.n	801ac42 <__ieee754_pow+0x1aa>
 801ac78:	4b15      	ldr	r3, [pc, #84]	; (801acd0 <__ieee754_pow+0x238>)
 801ac7a:	429e      	cmp	r6, r3
 801ac7c:	f340 80fc 	ble.w	801ae78 <__ieee754_pow+0x3e0>
 801ac80:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801ac84:	429e      	cmp	r6, r3
 801ac86:	4b10      	ldr	r3, [pc, #64]	; (801acc8 <__ieee754_pow+0x230>)
 801ac88:	dd07      	ble.n	801ac9a <__ieee754_pow+0x202>
 801ac8a:	429c      	cmp	r4, r3
 801ac8c:	dc0a      	bgt.n	801aca4 <__ieee754_pow+0x20c>
 801ac8e:	2f00      	cmp	r7, #0
 801ac90:	da84      	bge.n	801ab9c <__ieee754_pow+0x104>
 801ac92:	a307      	add	r3, pc, #28	; (adr r3, 801acb0 <__ieee754_pow+0x218>)
 801ac94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac98:	e795      	b.n	801abc6 <__ieee754_pow+0x12e>
 801ac9a:	429c      	cmp	r4, r3
 801ac9c:	dbf7      	blt.n	801ac8e <__ieee754_pow+0x1f6>
 801ac9e:	4b09      	ldr	r3, [pc, #36]	; (801acc4 <__ieee754_pow+0x22c>)
 801aca0:	429c      	cmp	r4, r3
 801aca2:	dd17      	ble.n	801acd4 <__ieee754_pow+0x23c>
 801aca4:	2f00      	cmp	r7, #0
 801aca6:	dcf4      	bgt.n	801ac92 <__ieee754_pow+0x1fa>
 801aca8:	e778      	b.n	801ab9c <__ieee754_pow+0x104>
 801acaa:	bf00      	nop
 801acac:	f3af 8000 	nop.w
 801acb0:	8800759c 	.word	0x8800759c
 801acb4:	7e37e43c 	.word	0x7e37e43c
 801acb8:	7ff00000 	.word	0x7ff00000
 801acbc:	0801d368 	.word	0x0801d368
 801acc0:	433fffff 	.word	0x433fffff
 801acc4:	3ff00000 	.word	0x3ff00000
 801acc8:	3fefffff 	.word	0x3fefffff
 801accc:	3fe00000 	.word	0x3fe00000
 801acd0:	41e00000 	.word	0x41e00000
 801acd4:	4b64      	ldr	r3, [pc, #400]	; (801ae68 <__ieee754_pow+0x3d0>)
 801acd6:	2200      	movs	r2, #0
 801acd8:	f7e5 fade 	bl	8000298 <__aeabi_dsub>
 801acdc:	a356      	add	r3, pc, #344	; (adr r3, 801ae38 <__ieee754_pow+0x3a0>)
 801acde:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ace2:	4604      	mov	r4, r0
 801ace4:	460d      	mov	r5, r1
 801ace6:	f7e5 fc8f 	bl	8000608 <__aeabi_dmul>
 801acea:	a355      	add	r3, pc, #340	; (adr r3, 801ae40 <__ieee754_pow+0x3a8>)
 801acec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acf0:	4606      	mov	r6, r0
 801acf2:	460f      	mov	r7, r1
 801acf4:	4620      	mov	r0, r4
 801acf6:	4629      	mov	r1, r5
 801acf8:	f7e5 fc86 	bl	8000608 <__aeabi_dmul>
 801acfc:	4b5b      	ldr	r3, [pc, #364]	; (801ae6c <__ieee754_pow+0x3d4>)
 801acfe:	4682      	mov	sl, r0
 801ad00:	468b      	mov	fp, r1
 801ad02:	2200      	movs	r2, #0
 801ad04:	4620      	mov	r0, r4
 801ad06:	4629      	mov	r1, r5
 801ad08:	f7e5 fc7e 	bl	8000608 <__aeabi_dmul>
 801ad0c:	4602      	mov	r2, r0
 801ad0e:	460b      	mov	r3, r1
 801ad10:	a14d      	add	r1, pc, #308	; (adr r1, 801ae48 <__ieee754_pow+0x3b0>)
 801ad12:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ad16:	f7e5 fabf 	bl	8000298 <__aeabi_dsub>
 801ad1a:	4622      	mov	r2, r4
 801ad1c:	462b      	mov	r3, r5
 801ad1e:	f7e5 fc73 	bl	8000608 <__aeabi_dmul>
 801ad22:	4602      	mov	r2, r0
 801ad24:	460b      	mov	r3, r1
 801ad26:	2000      	movs	r0, #0
 801ad28:	4951      	ldr	r1, [pc, #324]	; (801ae70 <__ieee754_pow+0x3d8>)
 801ad2a:	f7e5 fab5 	bl	8000298 <__aeabi_dsub>
 801ad2e:	4622      	mov	r2, r4
 801ad30:	4680      	mov	r8, r0
 801ad32:	4689      	mov	r9, r1
 801ad34:	462b      	mov	r3, r5
 801ad36:	4620      	mov	r0, r4
 801ad38:	4629      	mov	r1, r5
 801ad3a:	f7e5 fc65 	bl	8000608 <__aeabi_dmul>
 801ad3e:	4602      	mov	r2, r0
 801ad40:	460b      	mov	r3, r1
 801ad42:	4640      	mov	r0, r8
 801ad44:	4649      	mov	r1, r9
 801ad46:	f7e5 fc5f 	bl	8000608 <__aeabi_dmul>
 801ad4a:	a341      	add	r3, pc, #260	; (adr r3, 801ae50 <__ieee754_pow+0x3b8>)
 801ad4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad50:	f7e5 fc5a 	bl	8000608 <__aeabi_dmul>
 801ad54:	4602      	mov	r2, r0
 801ad56:	460b      	mov	r3, r1
 801ad58:	4650      	mov	r0, sl
 801ad5a:	4659      	mov	r1, fp
 801ad5c:	f7e5 fa9c 	bl	8000298 <__aeabi_dsub>
 801ad60:	4602      	mov	r2, r0
 801ad62:	460b      	mov	r3, r1
 801ad64:	4680      	mov	r8, r0
 801ad66:	4689      	mov	r9, r1
 801ad68:	4630      	mov	r0, r6
 801ad6a:	4639      	mov	r1, r7
 801ad6c:	f7e5 fa96 	bl	800029c <__adddf3>
 801ad70:	2400      	movs	r4, #0
 801ad72:	4632      	mov	r2, r6
 801ad74:	463b      	mov	r3, r7
 801ad76:	4620      	mov	r0, r4
 801ad78:	460d      	mov	r5, r1
 801ad7a:	f7e5 fa8d 	bl	8000298 <__aeabi_dsub>
 801ad7e:	4602      	mov	r2, r0
 801ad80:	460b      	mov	r3, r1
 801ad82:	4640      	mov	r0, r8
 801ad84:	4649      	mov	r1, r9
 801ad86:	f7e5 fa87 	bl	8000298 <__aeabi_dsub>
 801ad8a:	9b00      	ldr	r3, [sp, #0]
 801ad8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ad8e:	3b01      	subs	r3, #1
 801ad90:	4313      	orrs	r3, r2
 801ad92:	4682      	mov	sl, r0
 801ad94:	468b      	mov	fp, r1
 801ad96:	f040 81f1 	bne.w	801b17c <__ieee754_pow+0x6e4>
 801ad9a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 801ae58 <__ieee754_pow+0x3c0>
 801ad9e:	eeb0 8a47 	vmov.f32	s16, s14
 801ada2:	eef0 8a67 	vmov.f32	s17, s15
 801ada6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801adaa:	2600      	movs	r6, #0
 801adac:	4632      	mov	r2, r6
 801adae:	463b      	mov	r3, r7
 801adb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801adb4:	f7e5 fa70 	bl	8000298 <__aeabi_dsub>
 801adb8:	4622      	mov	r2, r4
 801adba:	462b      	mov	r3, r5
 801adbc:	f7e5 fc24 	bl	8000608 <__aeabi_dmul>
 801adc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801adc4:	4680      	mov	r8, r0
 801adc6:	4689      	mov	r9, r1
 801adc8:	4650      	mov	r0, sl
 801adca:	4659      	mov	r1, fp
 801adcc:	f7e5 fc1c 	bl	8000608 <__aeabi_dmul>
 801add0:	4602      	mov	r2, r0
 801add2:	460b      	mov	r3, r1
 801add4:	4640      	mov	r0, r8
 801add6:	4649      	mov	r1, r9
 801add8:	f7e5 fa60 	bl	800029c <__adddf3>
 801addc:	4632      	mov	r2, r6
 801adde:	463b      	mov	r3, r7
 801ade0:	4680      	mov	r8, r0
 801ade2:	4689      	mov	r9, r1
 801ade4:	4620      	mov	r0, r4
 801ade6:	4629      	mov	r1, r5
 801ade8:	f7e5 fc0e 	bl	8000608 <__aeabi_dmul>
 801adec:	460b      	mov	r3, r1
 801adee:	4604      	mov	r4, r0
 801adf0:	460d      	mov	r5, r1
 801adf2:	4602      	mov	r2, r0
 801adf4:	4649      	mov	r1, r9
 801adf6:	4640      	mov	r0, r8
 801adf8:	f7e5 fa50 	bl	800029c <__adddf3>
 801adfc:	4b1d      	ldr	r3, [pc, #116]	; (801ae74 <__ieee754_pow+0x3dc>)
 801adfe:	4299      	cmp	r1, r3
 801ae00:	ec45 4b19 	vmov	d9, r4, r5
 801ae04:	4606      	mov	r6, r0
 801ae06:	460f      	mov	r7, r1
 801ae08:	468b      	mov	fp, r1
 801ae0a:	f340 82fe 	ble.w	801b40a <__ieee754_pow+0x972>
 801ae0e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801ae12:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801ae16:	4303      	orrs	r3, r0
 801ae18:	f000 81f0 	beq.w	801b1fc <__ieee754_pow+0x764>
 801ae1c:	a310      	add	r3, pc, #64	; (adr r3, 801ae60 <__ieee754_pow+0x3c8>)
 801ae1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae22:	ec51 0b18 	vmov	r0, r1, d8
 801ae26:	f7e5 fbef 	bl	8000608 <__aeabi_dmul>
 801ae2a:	a30d      	add	r3, pc, #52	; (adr r3, 801ae60 <__ieee754_pow+0x3c8>)
 801ae2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae30:	e6cb      	b.n	801abca <__ieee754_pow+0x132>
 801ae32:	bf00      	nop
 801ae34:	f3af 8000 	nop.w
 801ae38:	60000000 	.word	0x60000000
 801ae3c:	3ff71547 	.word	0x3ff71547
 801ae40:	f85ddf44 	.word	0xf85ddf44
 801ae44:	3e54ae0b 	.word	0x3e54ae0b
 801ae48:	55555555 	.word	0x55555555
 801ae4c:	3fd55555 	.word	0x3fd55555
 801ae50:	652b82fe 	.word	0x652b82fe
 801ae54:	3ff71547 	.word	0x3ff71547
 801ae58:	00000000 	.word	0x00000000
 801ae5c:	bff00000 	.word	0xbff00000
 801ae60:	8800759c 	.word	0x8800759c
 801ae64:	7e37e43c 	.word	0x7e37e43c
 801ae68:	3ff00000 	.word	0x3ff00000
 801ae6c:	3fd00000 	.word	0x3fd00000
 801ae70:	3fe00000 	.word	0x3fe00000
 801ae74:	408fffff 	.word	0x408fffff
 801ae78:	4bd7      	ldr	r3, [pc, #860]	; (801b1d8 <__ieee754_pow+0x740>)
 801ae7a:	ea03 0309 	and.w	r3, r3, r9
 801ae7e:	2200      	movs	r2, #0
 801ae80:	b92b      	cbnz	r3, 801ae8e <__ieee754_pow+0x3f6>
 801ae82:	4bd6      	ldr	r3, [pc, #856]	; (801b1dc <__ieee754_pow+0x744>)
 801ae84:	f7e5 fbc0 	bl	8000608 <__aeabi_dmul>
 801ae88:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801ae8c:	460c      	mov	r4, r1
 801ae8e:	1523      	asrs	r3, r4, #20
 801ae90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801ae94:	4413      	add	r3, r2
 801ae96:	9309      	str	r3, [sp, #36]	; 0x24
 801ae98:	4bd1      	ldr	r3, [pc, #836]	; (801b1e0 <__ieee754_pow+0x748>)
 801ae9a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801ae9e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801aea2:	429c      	cmp	r4, r3
 801aea4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801aea8:	dd08      	ble.n	801aebc <__ieee754_pow+0x424>
 801aeaa:	4bce      	ldr	r3, [pc, #824]	; (801b1e4 <__ieee754_pow+0x74c>)
 801aeac:	429c      	cmp	r4, r3
 801aeae:	f340 8163 	ble.w	801b178 <__ieee754_pow+0x6e0>
 801aeb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aeb4:	3301      	adds	r3, #1
 801aeb6:	9309      	str	r3, [sp, #36]	; 0x24
 801aeb8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801aebc:	2400      	movs	r4, #0
 801aebe:	00e3      	lsls	r3, r4, #3
 801aec0:	930b      	str	r3, [sp, #44]	; 0x2c
 801aec2:	4bc9      	ldr	r3, [pc, #804]	; (801b1e8 <__ieee754_pow+0x750>)
 801aec4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801aec8:	ed93 7b00 	vldr	d7, [r3]
 801aecc:	4629      	mov	r1, r5
 801aece:	ec53 2b17 	vmov	r2, r3, d7
 801aed2:	eeb0 8a47 	vmov.f32	s16, s14
 801aed6:	eef0 8a67 	vmov.f32	s17, s15
 801aeda:	4682      	mov	sl, r0
 801aedc:	f7e5 f9dc 	bl	8000298 <__aeabi_dsub>
 801aee0:	4652      	mov	r2, sl
 801aee2:	4606      	mov	r6, r0
 801aee4:	460f      	mov	r7, r1
 801aee6:	462b      	mov	r3, r5
 801aee8:	ec51 0b18 	vmov	r0, r1, d8
 801aeec:	f7e5 f9d6 	bl	800029c <__adddf3>
 801aef0:	4602      	mov	r2, r0
 801aef2:	460b      	mov	r3, r1
 801aef4:	2000      	movs	r0, #0
 801aef6:	49bd      	ldr	r1, [pc, #756]	; (801b1ec <__ieee754_pow+0x754>)
 801aef8:	f7e5 fcb0 	bl	800085c <__aeabi_ddiv>
 801aefc:	ec41 0b19 	vmov	d9, r0, r1
 801af00:	4602      	mov	r2, r0
 801af02:	460b      	mov	r3, r1
 801af04:	4630      	mov	r0, r6
 801af06:	4639      	mov	r1, r7
 801af08:	f7e5 fb7e 	bl	8000608 <__aeabi_dmul>
 801af0c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801af10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801af14:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801af18:	2300      	movs	r3, #0
 801af1a:	9304      	str	r3, [sp, #16]
 801af1c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801af20:	46ab      	mov	fp, r5
 801af22:	106d      	asrs	r5, r5, #1
 801af24:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801af28:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801af2c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801af30:	2200      	movs	r2, #0
 801af32:	4640      	mov	r0, r8
 801af34:	4649      	mov	r1, r9
 801af36:	4614      	mov	r4, r2
 801af38:	461d      	mov	r5, r3
 801af3a:	f7e5 fb65 	bl	8000608 <__aeabi_dmul>
 801af3e:	4602      	mov	r2, r0
 801af40:	460b      	mov	r3, r1
 801af42:	4630      	mov	r0, r6
 801af44:	4639      	mov	r1, r7
 801af46:	f7e5 f9a7 	bl	8000298 <__aeabi_dsub>
 801af4a:	ec53 2b18 	vmov	r2, r3, d8
 801af4e:	4606      	mov	r6, r0
 801af50:	460f      	mov	r7, r1
 801af52:	4620      	mov	r0, r4
 801af54:	4629      	mov	r1, r5
 801af56:	f7e5 f99f 	bl	8000298 <__aeabi_dsub>
 801af5a:	4602      	mov	r2, r0
 801af5c:	460b      	mov	r3, r1
 801af5e:	4650      	mov	r0, sl
 801af60:	4659      	mov	r1, fp
 801af62:	f7e5 f999 	bl	8000298 <__aeabi_dsub>
 801af66:	4642      	mov	r2, r8
 801af68:	464b      	mov	r3, r9
 801af6a:	f7e5 fb4d 	bl	8000608 <__aeabi_dmul>
 801af6e:	4602      	mov	r2, r0
 801af70:	460b      	mov	r3, r1
 801af72:	4630      	mov	r0, r6
 801af74:	4639      	mov	r1, r7
 801af76:	f7e5 f98f 	bl	8000298 <__aeabi_dsub>
 801af7a:	ec53 2b19 	vmov	r2, r3, d9
 801af7e:	f7e5 fb43 	bl	8000608 <__aeabi_dmul>
 801af82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801af86:	ec41 0b18 	vmov	d8, r0, r1
 801af8a:	4610      	mov	r0, r2
 801af8c:	4619      	mov	r1, r3
 801af8e:	f7e5 fb3b 	bl	8000608 <__aeabi_dmul>
 801af92:	a37d      	add	r3, pc, #500	; (adr r3, 801b188 <__ieee754_pow+0x6f0>)
 801af94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af98:	4604      	mov	r4, r0
 801af9a:	460d      	mov	r5, r1
 801af9c:	f7e5 fb34 	bl	8000608 <__aeabi_dmul>
 801afa0:	a37b      	add	r3, pc, #492	; (adr r3, 801b190 <__ieee754_pow+0x6f8>)
 801afa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afa6:	f7e5 f979 	bl	800029c <__adddf3>
 801afaa:	4622      	mov	r2, r4
 801afac:	462b      	mov	r3, r5
 801afae:	f7e5 fb2b 	bl	8000608 <__aeabi_dmul>
 801afb2:	a379      	add	r3, pc, #484	; (adr r3, 801b198 <__ieee754_pow+0x700>)
 801afb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afb8:	f7e5 f970 	bl	800029c <__adddf3>
 801afbc:	4622      	mov	r2, r4
 801afbe:	462b      	mov	r3, r5
 801afc0:	f7e5 fb22 	bl	8000608 <__aeabi_dmul>
 801afc4:	a376      	add	r3, pc, #472	; (adr r3, 801b1a0 <__ieee754_pow+0x708>)
 801afc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afca:	f7e5 f967 	bl	800029c <__adddf3>
 801afce:	4622      	mov	r2, r4
 801afd0:	462b      	mov	r3, r5
 801afd2:	f7e5 fb19 	bl	8000608 <__aeabi_dmul>
 801afd6:	a374      	add	r3, pc, #464	; (adr r3, 801b1a8 <__ieee754_pow+0x710>)
 801afd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afdc:	f7e5 f95e 	bl	800029c <__adddf3>
 801afe0:	4622      	mov	r2, r4
 801afe2:	462b      	mov	r3, r5
 801afe4:	f7e5 fb10 	bl	8000608 <__aeabi_dmul>
 801afe8:	a371      	add	r3, pc, #452	; (adr r3, 801b1b0 <__ieee754_pow+0x718>)
 801afea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afee:	f7e5 f955 	bl	800029c <__adddf3>
 801aff2:	4622      	mov	r2, r4
 801aff4:	4606      	mov	r6, r0
 801aff6:	460f      	mov	r7, r1
 801aff8:	462b      	mov	r3, r5
 801affa:	4620      	mov	r0, r4
 801affc:	4629      	mov	r1, r5
 801affe:	f7e5 fb03 	bl	8000608 <__aeabi_dmul>
 801b002:	4602      	mov	r2, r0
 801b004:	460b      	mov	r3, r1
 801b006:	4630      	mov	r0, r6
 801b008:	4639      	mov	r1, r7
 801b00a:	f7e5 fafd 	bl	8000608 <__aeabi_dmul>
 801b00e:	4642      	mov	r2, r8
 801b010:	4604      	mov	r4, r0
 801b012:	460d      	mov	r5, r1
 801b014:	464b      	mov	r3, r9
 801b016:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b01a:	f7e5 f93f 	bl	800029c <__adddf3>
 801b01e:	ec53 2b18 	vmov	r2, r3, d8
 801b022:	f7e5 faf1 	bl	8000608 <__aeabi_dmul>
 801b026:	4622      	mov	r2, r4
 801b028:	462b      	mov	r3, r5
 801b02a:	f7e5 f937 	bl	800029c <__adddf3>
 801b02e:	4642      	mov	r2, r8
 801b030:	4682      	mov	sl, r0
 801b032:	468b      	mov	fp, r1
 801b034:	464b      	mov	r3, r9
 801b036:	4640      	mov	r0, r8
 801b038:	4649      	mov	r1, r9
 801b03a:	f7e5 fae5 	bl	8000608 <__aeabi_dmul>
 801b03e:	4b6c      	ldr	r3, [pc, #432]	; (801b1f0 <__ieee754_pow+0x758>)
 801b040:	2200      	movs	r2, #0
 801b042:	4606      	mov	r6, r0
 801b044:	460f      	mov	r7, r1
 801b046:	f7e5 f929 	bl	800029c <__adddf3>
 801b04a:	4652      	mov	r2, sl
 801b04c:	465b      	mov	r3, fp
 801b04e:	f7e5 f925 	bl	800029c <__adddf3>
 801b052:	9c04      	ldr	r4, [sp, #16]
 801b054:	460d      	mov	r5, r1
 801b056:	4622      	mov	r2, r4
 801b058:	460b      	mov	r3, r1
 801b05a:	4640      	mov	r0, r8
 801b05c:	4649      	mov	r1, r9
 801b05e:	f7e5 fad3 	bl	8000608 <__aeabi_dmul>
 801b062:	4b63      	ldr	r3, [pc, #396]	; (801b1f0 <__ieee754_pow+0x758>)
 801b064:	4680      	mov	r8, r0
 801b066:	4689      	mov	r9, r1
 801b068:	2200      	movs	r2, #0
 801b06a:	4620      	mov	r0, r4
 801b06c:	4629      	mov	r1, r5
 801b06e:	f7e5 f913 	bl	8000298 <__aeabi_dsub>
 801b072:	4632      	mov	r2, r6
 801b074:	463b      	mov	r3, r7
 801b076:	f7e5 f90f 	bl	8000298 <__aeabi_dsub>
 801b07a:	4602      	mov	r2, r0
 801b07c:	460b      	mov	r3, r1
 801b07e:	4650      	mov	r0, sl
 801b080:	4659      	mov	r1, fp
 801b082:	f7e5 f909 	bl	8000298 <__aeabi_dsub>
 801b086:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b08a:	f7e5 fabd 	bl	8000608 <__aeabi_dmul>
 801b08e:	4622      	mov	r2, r4
 801b090:	4606      	mov	r6, r0
 801b092:	460f      	mov	r7, r1
 801b094:	462b      	mov	r3, r5
 801b096:	ec51 0b18 	vmov	r0, r1, d8
 801b09a:	f7e5 fab5 	bl	8000608 <__aeabi_dmul>
 801b09e:	4602      	mov	r2, r0
 801b0a0:	460b      	mov	r3, r1
 801b0a2:	4630      	mov	r0, r6
 801b0a4:	4639      	mov	r1, r7
 801b0a6:	f7e5 f8f9 	bl	800029c <__adddf3>
 801b0aa:	4606      	mov	r6, r0
 801b0ac:	460f      	mov	r7, r1
 801b0ae:	4602      	mov	r2, r0
 801b0b0:	460b      	mov	r3, r1
 801b0b2:	4640      	mov	r0, r8
 801b0b4:	4649      	mov	r1, r9
 801b0b6:	f7e5 f8f1 	bl	800029c <__adddf3>
 801b0ba:	9c04      	ldr	r4, [sp, #16]
 801b0bc:	a33e      	add	r3, pc, #248	; (adr r3, 801b1b8 <__ieee754_pow+0x720>)
 801b0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0c2:	4620      	mov	r0, r4
 801b0c4:	460d      	mov	r5, r1
 801b0c6:	f7e5 fa9f 	bl	8000608 <__aeabi_dmul>
 801b0ca:	4642      	mov	r2, r8
 801b0cc:	ec41 0b18 	vmov	d8, r0, r1
 801b0d0:	464b      	mov	r3, r9
 801b0d2:	4620      	mov	r0, r4
 801b0d4:	4629      	mov	r1, r5
 801b0d6:	f7e5 f8df 	bl	8000298 <__aeabi_dsub>
 801b0da:	4602      	mov	r2, r0
 801b0dc:	460b      	mov	r3, r1
 801b0de:	4630      	mov	r0, r6
 801b0e0:	4639      	mov	r1, r7
 801b0e2:	f7e5 f8d9 	bl	8000298 <__aeabi_dsub>
 801b0e6:	a336      	add	r3, pc, #216	; (adr r3, 801b1c0 <__ieee754_pow+0x728>)
 801b0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0ec:	f7e5 fa8c 	bl	8000608 <__aeabi_dmul>
 801b0f0:	a335      	add	r3, pc, #212	; (adr r3, 801b1c8 <__ieee754_pow+0x730>)
 801b0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0f6:	4606      	mov	r6, r0
 801b0f8:	460f      	mov	r7, r1
 801b0fa:	4620      	mov	r0, r4
 801b0fc:	4629      	mov	r1, r5
 801b0fe:	f7e5 fa83 	bl	8000608 <__aeabi_dmul>
 801b102:	4602      	mov	r2, r0
 801b104:	460b      	mov	r3, r1
 801b106:	4630      	mov	r0, r6
 801b108:	4639      	mov	r1, r7
 801b10a:	f7e5 f8c7 	bl	800029c <__adddf3>
 801b10e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b110:	4b38      	ldr	r3, [pc, #224]	; (801b1f4 <__ieee754_pow+0x75c>)
 801b112:	4413      	add	r3, r2
 801b114:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b118:	f7e5 f8c0 	bl	800029c <__adddf3>
 801b11c:	4682      	mov	sl, r0
 801b11e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b120:	468b      	mov	fp, r1
 801b122:	f7e5 fa07 	bl	8000534 <__aeabi_i2d>
 801b126:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b128:	4b33      	ldr	r3, [pc, #204]	; (801b1f8 <__ieee754_pow+0x760>)
 801b12a:	4413      	add	r3, r2
 801b12c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b130:	4606      	mov	r6, r0
 801b132:	460f      	mov	r7, r1
 801b134:	4652      	mov	r2, sl
 801b136:	465b      	mov	r3, fp
 801b138:	ec51 0b18 	vmov	r0, r1, d8
 801b13c:	f7e5 f8ae 	bl	800029c <__adddf3>
 801b140:	4642      	mov	r2, r8
 801b142:	464b      	mov	r3, r9
 801b144:	f7e5 f8aa 	bl	800029c <__adddf3>
 801b148:	4632      	mov	r2, r6
 801b14a:	463b      	mov	r3, r7
 801b14c:	f7e5 f8a6 	bl	800029c <__adddf3>
 801b150:	9c04      	ldr	r4, [sp, #16]
 801b152:	4632      	mov	r2, r6
 801b154:	463b      	mov	r3, r7
 801b156:	4620      	mov	r0, r4
 801b158:	460d      	mov	r5, r1
 801b15a:	f7e5 f89d 	bl	8000298 <__aeabi_dsub>
 801b15e:	4642      	mov	r2, r8
 801b160:	464b      	mov	r3, r9
 801b162:	f7e5 f899 	bl	8000298 <__aeabi_dsub>
 801b166:	ec53 2b18 	vmov	r2, r3, d8
 801b16a:	f7e5 f895 	bl	8000298 <__aeabi_dsub>
 801b16e:	4602      	mov	r2, r0
 801b170:	460b      	mov	r3, r1
 801b172:	4650      	mov	r0, sl
 801b174:	4659      	mov	r1, fp
 801b176:	e606      	b.n	801ad86 <__ieee754_pow+0x2ee>
 801b178:	2401      	movs	r4, #1
 801b17a:	e6a0      	b.n	801aebe <__ieee754_pow+0x426>
 801b17c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801b1d0 <__ieee754_pow+0x738>
 801b180:	e60d      	b.n	801ad9e <__ieee754_pow+0x306>
 801b182:	bf00      	nop
 801b184:	f3af 8000 	nop.w
 801b188:	4a454eef 	.word	0x4a454eef
 801b18c:	3fca7e28 	.word	0x3fca7e28
 801b190:	93c9db65 	.word	0x93c9db65
 801b194:	3fcd864a 	.word	0x3fcd864a
 801b198:	a91d4101 	.word	0xa91d4101
 801b19c:	3fd17460 	.word	0x3fd17460
 801b1a0:	518f264d 	.word	0x518f264d
 801b1a4:	3fd55555 	.word	0x3fd55555
 801b1a8:	db6fabff 	.word	0xdb6fabff
 801b1ac:	3fdb6db6 	.word	0x3fdb6db6
 801b1b0:	33333303 	.word	0x33333303
 801b1b4:	3fe33333 	.word	0x3fe33333
 801b1b8:	e0000000 	.word	0xe0000000
 801b1bc:	3feec709 	.word	0x3feec709
 801b1c0:	dc3a03fd 	.word	0xdc3a03fd
 801b1c4:	3feec709 	.word	0x3feec709
 801b1c8:	145b01f5 	.word	0x145b01f5
 801b1cc:	be3e2fe0 	.word	0xbe3e2fe0
 801b1d0:	00000000 	.word	0x00000000
 801b1d4:	3ff00000 	.word	0x3ff00000
 801b1d8:	7ff00000 	.word	0x7ff00000
 801b1dc:	43400000 	.word	0x43400000
 801b1e0:	0003988e 	.word	0x0003988e
 801b1e4:	000bb679 	.word	0x000bb679
 801b1e8:	0801d4a8 	.word	0x0801d4a8
 801b1ec:	3ff00000 	.word	0x3ff00000
 801b1f0:	40080000 	.word	0x40080000
 801b1f4:	0801d4c8 	.word	0x0801d4c8
 801b1f8:	0801d4b8 	.word	0x0801d4b8
 801b1fc:	a3b5      	add	r3, pc, #724	; (adr r3, 801b4d4 <__ieee754_pow+0xa3c>)
 801b1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b202:	4640      	mov	r0, r8
 801b204:	4649      	mov	r1, r9
 801b206:	f7e5 f849 	bl	800029c <__adddf3>
 801b20a:	4622      	mov	r2, r4
 801b20c:	ec41 0b1a 	vmov	d10, r0, r1
 801b210:	462b      	mov	r3, r5
 801b212:	4630      	mov	r0, r6
 801b214:	4639      	mov	r1, r7
 801b216:	f7e5 f83f 	bl	8000298 <__aeabi_dsub>
 801b21a:	4602      	mov	r2, r0
 801b21c:	460b      	mov	r3, r1
 801b21e:	ec51 0b1a 	vmov	r0, r1, d10
 801b222:	f7e5 fc81 	bl	8000b28 <__aeabi_dcmpgt>
 801b226:	2800      	cmp	r0, #0
 801b228:	f47f adf8 	bne.w	801ae1c <__ieee754_pow+0x384>
 801b22c:	4aa4      	ldr	r2, [pc, #656]	; (801b4c0 <__ieee754_pow+0xa28>)
 801b22e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b232:	4293      	cmp	r3, r2
 801b234:	f340 810b 	ble.w	801b44e <__ieee754_pow+0x9b6>
 801b238:	151b      	asrs	r3, r3, #20
 801b23a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801b23e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801b242:	fa4a f303 	asr.w	r3, sl, r3
 801b246:	445b      	add	r3, fp
 801b248:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801b24c:	4e9d      	ldr	r6, [pc, #628]	; (801b4c4 <__ieee754_pow+0xa2c>)
 801b24e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801b252:	4116      	asrs	r6, r2
 801b254:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801b258:	2000      	movs	r0, #0
 801b25a:	ea23 0106 	bic.w	r1, r3, r6
 801b25e:	f1c2 0214 	rsb	r2, r2, #20
 801b262:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801b266:	fa4a fa02 	asr.w	sl, sl, r2
 801b26a:	f1bb 0f00 	cmp.w	fp, #0
 801b26e:	4602      	mov	r2, r0
 801b270:	460b      	mov	r3, r1
 801b272:	4620      	mov	r0, r4
 801b274:	4629      	mov	r1, r5
 801b276:	bfb8      	it	lt
 801b278:	f1ca 0a00 	rsblt	sl, sl, #0
 801b27c:	f7e5 f80c 	bl	8000298 <__aeabi_dsub>
 801b280:	ec41 0b19 	vmov	d9, r0, r1
 801b284:	4642      	mov	r2, r8
 801b286:	464b      	mov	r3, r9
 801b288:	ec51 0b19 	vmov	r0, r1, d9
 801b28c:	f7e5 f806 	bl	800029c <__adddf3>
 801b290:	2400      	movs	r4, #0
 801b292:	a379      	add	r3, pc, #484	; (adr r3, 801b478 <__ieee754_pow+0x9e0>)
 801b294:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b298:	4620      	mov	r0, r4
 801b29a:	460d      	mov	r5, r1
 801b29c:	f7e5 f9b4 	bl	8000608 <__aeabi_dmul>
 801b2a0:	ec53 2b19 	vmov	r2, r3, d9
 801b2a4:	4606      	mov	r6, r0
 801b2a6:	460f      	mov	r7, r1
 801b2a8:	4620      	mov	r0, r4
 801b2aa:	4629      	mov	r1, r5
 801b2ac:	f7e4 fff4 	bl	8000298 <__aeabi_dsub>
 801b2b0:	4602      	mov	r2, r0
 801b2b2:	460b      	mov	r3, r1
 801b2b4:	4640      	mov	r0, r8
 801b2b6:	4649      	mov	r1, r9
 801b2b8:	f7e4 ffee 	bl	8000298 <__aeabi_dsub>
 801b2bc:	a370      	add	r3, pc, #448	; (adr r3, 801b480 <__ieee754_pow+0x9e8>)
 801b2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2c2:	f7e5 f9a1 	bl	8000608 <__aeabi_dmul>
 801b2c6:	a370      	add	r3, pc, #448	; (adr r3, 801b488 <__ieee754_pow+0x9f0>)
 801b2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2cc:	4680      	mov	r8, r0
 801b2ce:	4689      	mov	r9, r1
 801b2d0:	4620      	mov	r0, r4
 801b2d2:	4629      	mov	r1, r5
 801b2d4:	f7e5 f998 	bl	8000608 <__aeabi_dmul>
 801b2d8:	4602      	mov	r2, r0
 801b2da:	460b      	mov	r3, r1
 801b2dc:	4640      	mov	r0, r8
 801b2de:	4649      	mov	r1, r9
 801b2e0:	f7e4 ffdc 	bl	800029c <__adddf3>
 801b2e4:	4604      	mov	r4, r0
 801b2e6:	460d      	mov	r5, r1
 801b2e8:	4602      	mov	r2, r0
 801b2ea:	460b      	mov	r3, r1
 801b2ec:	4630      	mov	r0, r6
 801b2ee:	4639      	mov	r1, r7
 801b2f0:	f7e4 ffd4 	bl	800029c <__adddf3>
 801b2f4:	4632      	mov	r2, r6
 801b2f6:	463b      	mov	r3, r7
 801b2f8:	4680      	mov	r8, r0
 801b2fa:	4689      	mov	r9, r1
 801b2fc:	f7e4 ffcc 	bl	8000298 <__aeabi_dsub>
 801b300:	4602      	mov	r2, r0
 801b302:	460b      	mov	r3, r1
 801b304:	4620      	mov	r0, r4
 801b306:	4629      	mov	r1, r5
 801b308:	f7e4 ffc6 	bl	8000298 <__aeabi_dsub>
 801b30c:	4642      	mov	r2, r8
 801b30e:	4606      	mov	r6, r0
 801b310:	460f      	mov	r7, r1
 801b312:	464b      	mov	r3, r9
 801b314:	4640      	mov	r0, r8
 801b316:	4649      	mov	r1, r9
 801b318:	f7e5 f976 	bl	8000608 <__aeabi_dmul>
 801b31c:	a35c      	add	r3, pc, #368	; (adr r3, 801b490 <__ieee754_pow+0x9f8>)
 801b31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b322:	4604      	mov	r4, r0
 801b324:	460d      	mov	r5, r1
 801b326:	f7e5 f96f 	bl	8000608 <__aeabi_dmul>
 801b32a:	a35b      	add	r3, pc, #364	; (adr r3, 801b498 <__ieee754_pow+0xa00>)
 801b32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b330:	f7e4 ffb2 	bl	8000298 <__aeabi_dsub>
 801b334:	4622      	mov	r2, r4
 801b336:	462b      	mov	r3, r5
 801b338:	f7e5 f966 	bl	8000608 <__aeabi_dmul>
 801b33c:	a358      	add	r3, pc, #352	; (adr r3, 801b4a0 <__ieee754_pow+0xa08>)
 801b33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b342:	f7e4 ffab 	bl	800029c <__adddf3>
 801b346:	4622      	mov	r2, r4
 801b348:	462b      	mov	r3, r5
 801b34a:	f7e5 f95d 	bl	8000608 <__aeabi_dmul>
 801b34e:	a356      	add	r3, pc, #344	; (adr r3, 801b4a8 <__ieee754_pow+0xa10>)
 801b350:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b354:	f7e4 ffa0 	bl	8000298 <__aeabi_dsub>
 801b358:	4622      	mov	r2, r4
 801b35a:	462b      	mov	r3, r5
 801b35c:	f7e5 f954 	bl	8000608 <__aeabi_dmul>
 801b360:	a353      	add	r3, pc, #332	; (adr r3, 801b4b0 <__ieee754_pow+0xa18>)
 801b362:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b366:	f7e4 ff99 	bl	800029c <__adddf3>
 801b36a:	4622      	mov	r2, r4
 801b36c:	462b      	mov	r3, r5
 801b36e:	f7e5 f94b 	bl	8000608 <__aeabi_dmul>
 801b372:	4602      	mov	r2, r0
 801b374:	460b      	mov	r3, r1
 801b376:	4640      	mov	r0, r8
 801b378:	4649      	mov	r1, r9
 801b37a:	f7e4 ff8d 	bl	8000298 <__aeabi_dsub>
 801b37e:	4604      	mov	r4, r0
 801b380:	460d      	mov	r5, r1
 801b382:	4602      	mov	r2, r0
 801b384:	460b      	mov	r3, r1
 801b386:	4640      	mov	r0, r8
 801b388:	4649      	mov	r1, r9
 801b38a:	f7e5 f93d 	bl	8000608 <__aeabi_dmul>
 801b38e:	2200      	movs	r2, #0
 801b390:	ec41 0b19 	vmov	d9, r0, r1
 801b394:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b398:	4620      	mov	r0, r4
 801b39a:	4629      	mov	r1, r5
 801b39c:	f7e4 ff7c 	bl	8000298 <__aeabi_dsub>
 801b3a0:	4602      	mov	r2, r0
 801b3a2:	460b      	mov	r3, r1
 801b3a4:	ec51 0b19 	vmov	r0, r1, d9
 801b3a8:	f7e5 fa58 	bl	800085c <__aeabi_ddiv>
 801b3ac:	4632      	mov	r2, r6
 801b3ae:	4604      	mov	r4, r0
 801b3b0:	460d      	mov	r5, r1
 801b3b2:	463b      	mov	r3, r7
 801b3b4:	4640      	mov	r0, r8
 801b3b6:	4649      	mov	r1, r9
 801b3b8:	f7e5 f926 	bl	8000608 <__aeabi_dmul>
 801b3bc:	4632      	mov	r2, r6
 801b3be:	463b      	mov	r3, r7
 801b3c0:	f7e4 ff6c 	bl	800029c <__adddf3>
 801b3c4:	4602      	mov	r2, r0
 801b3c6:	460b      	mov	r3, r1
 801b3c8:	4620      	mov	r0, r4
 801b3ca:	4629      	mov	r1, r5
 801b3cc:	f7e4 ff64 	bl	8000298 <__aeabi_dsub>
 801b3d0:	4642      	mov	r2, r8
 801b3d2:	464b      	mov	r3, r9
 801b3d4:	f7e4 ff60 	bl	8000298 <__aeabi_dsub>
 801b3d8:	460b      	mov	r3, r1
 801b3da:	4602      	mov	r2, r0
 801b3dc:	493a      	ldr	r1, [pc, #232]	; (801b4c8 <__ieee754_pow+0xa30>)
 801b3de:	2000      	movs	r0, #0
 801b3e0:	f7e4 ff5a 	bl	8000298 <__aeabi_dsub>
 801b3e4:	e9cd 0100 	strd	r0, r1, [sp]
 801b3e8:	9b01      	ldr	r3, [sp, #4]
 801b3ea:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801b3ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b3f2:	da2f      	bge.n	801b454 <__ieee754_pow+0x9bc>
 801b3f4:	4650      	mov	r0, sl
 801b3f6:	ed9d 0b00 	vldr	d0, [sp]
 801b3fa:	f001 f8d9 	bl	801c5b0 <scalbn>
 801b3fe:	ec51 0b10 	vmov	r0, r1, d0
 801b402:	ec53 2b18 	vmov	r2, r3, d8
 801b406:	f7ff bbe0 	b.w	801abca <__ieee754_pow+0x132>
 801b40a:	4b30      	ldr	r3, [pc, #192]	; (801b4cc <__ieee754_pow+0xa34>)
 801b40c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801b410:	429e      	cmp	r6, r3
 801b412:	f77f af0b 	ble.w	801b22c <__ieee754_pow+0x794>
 801b416:	4b2e      	ldr	r3, [pc, #184]	; (801b4d0 <__ieee754_pow+0xa38>)
 801b418:	440b      	add	r3, r1
 801b41a:	4303      	orrs	r3, r0
 801b41c:	d00b      	beq.n	801b436 <__ieee754_pow+0x99e>
 801b41e:	a326      	add	r3, pc, #152	; (adr r3, 801b4b8 <__ieee754_pow+0xa20>)
 801b420:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b424:	ec51 0b18 	vmov	r0, r1, d8
 801b428:	f7e5 f8ee 	bl	8000608 <__aeabi_dmul>
 801b42c:	a322      	add	r3, pc, #136	; (adr r3, 801b4b8 <__ieee754_pow+0xa20>)
 801b42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b432:	f7ff bbca 	b.w	801abca <__ieee754_pow+0x132>
 801b436:	4622      	mov	r2, r4
 801b438:	462b      	mov	r3, r5
 801b43a:	f7e4 ff2d 	bl	8000298 <__aeabi_dsub>
 801b43e:	4642      	mov	r2, r8
 801b440:	464b      	mov	r3, r9
 801b442:	f7e5 fb67 	bl	8000b14 <__aeabi_dcmpge>
 801b446:	2800      	cmp	r0, #0
 801b448:	f43f aef0 	beq.w	801b22c <__ieee754_pow+0x794>
 801b44c:	e7e7      	b.n	801b41e <__ieee754_pow+0x986>
 801b44e:	f04f 0a00 	mov.w	sl, #0
 801b452:	e717      	b.n	801b284 <__ieee754_pow+0x7ec>
 801b454:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b458:	4619      	mov	r1, r3
 801b45a:	e7d2      	b.n	801b402 <__ieee754_pow+0x96a>
 801b45c:	491a      	ldr	r1, [pc, #104]	; (801b4c8 <__ieee754_pow+0xa30>)
 801b45e:	2000      	movs	r0, #0
 801b460:	f7ff bb9e 	b.w	801aba0 <__ieee754_pow+0x108>
 801b464:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b468:	f7ff bb9a 	b.w	801aba0 <__ieee754_pow+0x108>
 801b46c:	9000      	str	r0, [sp, #0]
 801b46e:	f7ff bb76 	b.w	801ab5e <__ieee754_pow+0xc6>
 801b472:	2100      	movs	r1, #0
 801b474:	f7ff bb60 	b.w	801ab38 <__ieee754_pow+0xa0>
 801b478:	00000000 	.word	0x00000000
 801b47c:	3fe62e43 	.word	0x3fe62e43
 801b480:	fefa39ef 	.word	0xfefa39ef
 801b484:	3fe62e42 	.word	0x3fe62e42
 801b488:	0ca86c39 	.word	0x0ca86c39
 801b48c:	be205c61 	.word	0xbe205c61
 801b490:	72bea4d0 	.word	0x72bea4d0
 801b494:	3e663769 	.word	0x3e663769
 801b498:	c5d26bf1 	.word	0xc5d26bf1
 801b49c:	3ebbbd41 	.word	0x3ebbbd41
 801b4a0:	af25de2c 	.word	0xaf25de2c
 801b4a4:	3f11566a 	.word	0x3f11566a
 801b4a8:	16bebd93 	.word	0x16bebd93
 801b4ac:	3f66c16c 	.word	0x3f66c16c
 801b4b0:	5555553e 	.word	0x5555553e
 801b4b4:	3fc55555 	.word	0x3fc55555
 801b4b8:	c2f8f359 	.word	0xc2f8f359
 801b4bc:	01a56e1f 	.word	0x01a56e1f
 801b4c0:	3fe00000 	.word	0x3fe00000
 801b4c4:	000fffff 	.word	0x000fffff
 801b4c8:	3ff00000 	.word	0x3ff00000
 801b4cc:	4090cbff 	.word	0x4090cbff
 801b4d0:	3f6f3400 	.word	0x3f6f3400
 801b4d4:	652b82fe 	.word	0x652b82fe
 801b4d8:	3c971547 	.word	0x3c971547

0801b4dc <__ieee754_sqrt>:
 801b4dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b4e0:	ec55 4b10 	vmov	r4, r5, d0
 801b4e4:	4e56      	ldr	r6, [pc, #344]	; (801b640 <__ieee754_sqrt+0x164>)
 801b4e6:	43ae      	bics	r6, r5
 801b4e8:	ee10 0a10 	vmov	r0, s0
 801b4ec:	ee10 3a10 	vmov	r3, s0
 801b4f0:	4629      	mov	r1, r5
 801b4f2:	462a      	mov	r2, r5
 801b4f4:	d110      	bne.n	801b518 <__ieee754_sqrt+0x3c>
 801b4f6:	ee10 2a10 	vmov	r2, s0
 801b4fa:	462b      	mov	r3, r5
 801b4fc:	f7e5 f884 	bl	8000608 <__aeabi_dmul>
 801b500:	4602      	mov	r2, r0
 801b502:	460b      	mov	r3, r1
 801b504:	4620      	mov	r0, r4
 801b506:	4629      	mov	r1, r5
 801b508:	f7e4 fec8 	bl	800029c <__adddf3>
 801b50c:	4604      	mov	r4, r0
 801b50e:	460d      	mov	r5, r1
 801b510:	ec45 4b10 	vmov	d0, r4, r5
 801b514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b518:	2d00      	cmp	r5, #0
 801b51a:	dc10      	bgt.n	801b53e <__ieee754_sqrt+0x62>
 801b51c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801b520:	4330      	orrs	r0, r6
 801b522:	d0f5      	beq.n	801b510 <__ieee754_sqrt+0x34>
 801b524:	b15d      	cbz	r5, 801b53e <__ieee754_sqrt+0x62>
 801b526:	ee10 2a10 	vmov	r2, s0
 801b52a:	462b      	mov	r3, r5
 801b52c:	ee10 0a10 	vmov	r0, s0
 801b530:	f7e4 feb2 	bl	8000298 <__aeabi_dsub>
 801b534:	4602      	mov	r2, r0
 801b536:	460b      	mov	r3, r1
 801b538:	f7e5 f990 	bl	800085c <__aeabi_ddiv>
 801b53c:	e7e6      	b.n	801b50c <__ieee754_sqrt+0x30>
 801b53e:	1509      	asrs	r1, r1, #20
 801b540:	d076      	beq.n	801b630 <__ieee754_sqrt+0x154>
 801b542:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801b546:	07ce      	lsls	r6, r1, #31
 801b548:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801b54c:	bf5e      	ittt	pl
 801b54e:	0fda      	lsrpl	r2, r3, #31
 801b550:	005b      	lslpl	r3, r3, #1
 801b552:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801b556:	0fda      	lsrs	r2, r3, #31
 801b558:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801b55c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801b560:	2000      	movs	r0, #0
 801b562:	106d      	asrs	r5, r5, #1
 801b564:	005b      	lsls	r3, r3, #1
 801b566:	f04f 0e16 	mov.w	lr, #22
 801b56a:	4684      	mov	ip, r0
 801b56c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801b570:	eb0c 0401 	add.w	r4, ip, r1
 801b574:	4294      	cmp	r4, r2
 801b576:	bfde      	ittt	le
 801b578:	1b12      	suble	r2, r2, r4
 801b57a:	eb04 0c01 	addle.w	ip, r4, r1
 801b57e:	1840      	addle	r0, r0, r1
 801b580:	0052      	lsls	r2, r2, #1
 801b582:	f1be 0e01 	subs.w	lr, lr, #1
 801b586:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801b58a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801b58e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b592:	d1ed      	bne.n	801b570 <__ieee754_sqrt+0x94>
 801b594:	4671      	mov	r1, lr
 801b596:	2720      	movs	r7, #32
 801b598:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801b59c:	4562      	cmp	r2, ip
 801b59e:	eb04 060e 	add.w	r6, r4, lr
 801b5a2:	dc02      	bgt.n	801b5aa <__ieee754_sqrt+0xce>
 801b5a4:	d113      	bne.n	801b5ce <__ieee754_sqrt+0xf2>
 801b5a6:	429e      	cmp	r6, r3
 801b5a8:	d811      	bhi.n	801b5ce <__ieee754_sqrt+0xf2>
 801b5aa:	2e00      	cmp	r6, #0
 801b5ac:	eb06 0e04 	add.w	lr, r6, r4
 801b5b0:	da43      	bge.n	801b63a <__ieee754_sqrt+0x15e>
 801b5b2:	f1be 0f00 	cmp.w	lr, #0
 801b5b6:	db40      	blt.n	801b63a <__ieee754_sqrt+0x15e>
 801b5b8:	f10c 0801 	add.w	r8, ip, #1
 801b5bc:	eba2 020c 	sub.w	r2, r2, ip
 801b5c0:	429e      	cmp	r6, r3
 801b5c2:	bf88      	it	hi
 801b5c4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801b5c8:	1b9b      	subs	r3, r3, r6
 801b5ca:	4421      	add	r1, r4
 801b5cc:	46c4      	mov	ip, r8
 801b5ce:	0052      	lsls	r2, r2, #1
 801b5d0:	3f01      	subs	r7, #1
 801b5d2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801b5d6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801b5da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b5de:	d1dd      	bne.n	801b59c <__ieee754_sqrt+0xc0>
 801b5e0:	4313      	orrs	r3, r2
 801b5e2:	d006      	beq.n	801b5f2 <__ieee754_sqrt+0x116>
 801b5e4:	1c4c      	adds	r4, r1, #1
 801b5e6:	bf13      	iteet	ne
 801b5e8:	3101      	addne	r1, #1
 801b5ea:	3001      	addeq	r0, #1
 801b5ec:	4639      	moveq	r1, r7
 801b5ee:	f021 0101 	bicne.w	r1, r1, #1
 801b5f2:	1043      	asrs	r3, r0, #1
 801b5f4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801b5f8:	0849      	lsrs	r1, r1, #1
 801b5fa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801b5fe:	07c2      	lsls	r2, r0, #31
 801b600:	bf48      	it	mi
 801b602:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801b606:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801b60a:	460c      	mov	r4, r1
 801b60c:	463d      	mov	r5, r7
 801b60e:	e77f      	b.n	801b510 <__ieee754_sqrt+0x34>
 801b610:	0ada      	lsrs	r2, r3, #11
 801b612:	3815      	subs	r0, #21
 801b614:	055b      	lsls	r3, r3, #21
 801b616:	2a00      	cmp	r2, #0
 801b618:	d0fa      	beq.n	801b610 <__ieee754_sqrt+0x134>
 801b61a:	02d7      	lsls	r7, r2, #11
 801b61c:	d50a      	bpl.n	801b634 <__ieee754_sqrt+0x158>
 801b61e:	f1c1 0420 	rsb	r4, r1, #32
 801b622:	fa23 f404 	lsr.w	r4, r3, r4
 801b626:	1e4d      	subs	r5, r1, #1
 801b628:	408b      	lsls	r3, r1
 801b62a:	4322      	orrs	r2, r4
 801b62c:	1b41      	subs	r1, r0, r5
 801b62e:	e788      	b.n	801b542 <__ieee754_sqrt+0x66>
 801b630:	4608      	mov	r0, r1
 801b632:	e7f0      	b.n	801b616 <__ieee754_sqrt+0x13a>
 801b634:	0052      	lsls	r2, r2, #1
 801b636:	3101      	adds	r1, #1
 801b638:	e7ef      	b.n	801b61a <__ieee754_sqrt+0x13e>
 801b63a:	46e0      	mov	r8, ip
 801b63c:	e7be      	b.n	801b5bc <__ieee754_sqrt+0xe0>
 801b63e:	bf00      	nop
 801b640:	7ff00000 	.word	0x7ff00000

0801b644 <__ieee754_acosf>:
 801b644:	b508      	push	{r3, lr}
 801b646:	ee10 3a10 	vmov	r3, s0
 801b64a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801b64e:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801b652:	ed2d 8b0c 	vpush	{d8-d13}
 801b656:	d10a      	bne.n	801b66e <__ieee754_acosf+0x2a>
 801b658:	ed9f 0a66 	vldr	s0, [pc, #408]	; 801b7f4 <__ieee754_acosf+0x1b0>
 801b65c:	ed9f 8a66 	vldr	s16, [pc, #408]	; 801b7f8 <__ieee754_acosf+0x1b4>
 801b660:	2b00      	cmp	r3, #0
 801b662:	bfd8      	it	le
 801b664:	eeb0 0a48 	vmovle.f32	s0, s16
 801b668:	ecbd 8b0c 	vpop	{d8-d13}
 801b66c:	bd08      	pop	{r3, pc}
 801b66e:	dd04      	ble.n	801b67a <__ieee754_acosf+0x36>
 801b670:	ee30 8a40 	vsub.f32	s16, s0, s0
 801b674:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801b678:	e7f6      	b.n	801b668 <__ieee754_acosf+0x24>
 801b67a:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 801b67e:	da3e      	bge.n	801b6fe <__ieee754_acosf+0xba>
 801b680:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 801b684:	f340 80b3 	ble.w	801b7ee <__ieee754_acosf+0x1aa>
 801b688:	ee60 7a00 	vmul.f32	s15, s0, s0
 801b68c:	eddf 6a5b 	vldr	s13, [pc, #364]	; 801b7fc <__ieee754_acosf+0x1b8>
 801b690:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 801b800 <__ieee754_acosf+0x1bc>
 801b694:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 801b804 <__ieee754_acosf+0x1c0>
 801b698:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 801b808 <__ieee754_acosf+0x1c4>
 801b69c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801b6a0:	eddf 6a5a 	vldr	s13, [pc, #360]	; 801b80c <__ieee754_acosf+0x1c8>
 801b6a4:	eee7 6a27 	vfma.f32	s13, s14, s15
 801b6a8:	ed9f 7a59 	vldr	s14, [pc, #356]	; 801b810 <__ieee754_acosf+0x1cc>
 801b6ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801b6b0:	eddf 6a58 	vldr	s13, [pc, #352]	; 801b814 <__ieee754_acosf+0x1d0>
 801b6b4:	eee7 6a27 	vfma.f32	s13, s14, s15
 801b6b8:	ed9f 7a57 	vldr	s14, [pc, #348]	; 801b818 <__ieee754_acosf+0x1d4>
 801b6bc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801b6c0:	eddf 6a56 	vldr	s13, [pc, #344]	; 801b81c <__ieee754_acosf+0x1d8>
 801b6c4:	eea7 6aa6 	vfma.f32	s12, s15, s13
 801b6c8:	eddf 6a55 	vldr	s13, [pc, #340]	; 801b820 <__ieee754_acosf+0x1dc>
 801b6cc:	eee6 6a27 	vfma.f32	s13, s12, s15
 801b6d0:	ed9f 6a54 	vldr	s12, [pc, #336]	; 801b824 <__ieee754_acosf+0x1e0>
 801b6d4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801b6d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b6dc:	eee6 6a27 	vfma.f32	s13, s12, s15
 801b6e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 801b6e4:	eef0 7a66 	vmov.f32	s15, s13
 801b6e8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b6ec:	eddf 7a4e 	vldr	s15, [pc, #312]	; 801b828 <__ieee754_acosf+0x1e4>
 801b6f0:	eea0 8a66 	vfms.f32	s16, s0, s13
 801b6f4:	ee30 0a48 	vsub.f32	s0, s0, s16
 801b6f8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801b6fc:	e7b4      	b.n	801b668 <__ieee754_acosf+0x24>
 801b6fe:	2b00      	cmp	r3, #0
 801b700:	eddf da3e 	vldr	s27, [pc, #248]	; 801b7fc <__ieee754_acosf+0x1b8>
 801b704:	eddf ca3e 	vldr	s25, [pc, #248]	; 801b800 <__ieee754_acosf+0x1bc>
 801b708:	ed9f ca40 	vldr	s24, [pc, #256]	; 801b80c <__ieee754_acosf+0x1c8>
 801b70c:	eddf ba40 	vldr	s23, [pc, #256]	; 801b810 <__ieee754_acosf+0x1cc>
 801b710:	ed9f ba40 	vldr	s22, [pc, #256]	; 801b814 <__ieee754_acosf+0x1d0>
 801b714:	eddf 8a40 	vldr	s17, [pc, #256]	; 801b818 <__ieee754_acosf+0x1d4>
 801b718:	ed9f da40 	vldr	s26, [pc, #256]	; 801b81c <__ieee754_acosf+0x1d8>
 801b71c:	eddf aa39 	vldr	s21, [pc, #228]	; 801b804 <__ieee754_acosf+0x1c0>
 801b720:	ed9f aa3f 	vldr	s20, [pc, #252]	; 801b820 <__ieee754_acosf+0x1dc>
 801b724:	eddf 9a3f 	vldr	s19, [pc, #252]	; 801b824 <__ieee754_acosf+0x1e0>
 801b728:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801b72c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801b730:	da28      	bge.n	801b784 <__ieee754_acosf+0x140>
 801b732:	ee30 0a09 	vadd.f32	s0, s0, s18
 801b736:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b73a:	eee0 ca2d 	vfma.f32	s25, s0, s27
 801b73e:	eee0 aa0d 	vfma.f32	s21, s0, s26
 801b742:	eeac ca80 	vfma.f32	s24, s25, s0
 801b746:	eeaa aa80 	vfma.f32	s20, s21, s0
 801b74a:	eeec ba00 	vfma.f32	s23, s24, s0
 801b74e:	eeea 9a00 	vfma.f32	s19, s20, s0
 801b752:	eeab ba80 	vfma.f32	s22, s23, s0
 801b756:	eea9 9a80 	vfma.f32	s18, s19, s0
 801b75a:	eeeb 8a00 	vfma.f32	s17, s22, s0
 801b75e:	ee68 8a80 	vmul.f32	s17, s17, s0
 801b762:	f000 f9a5 	bl	801bab0 <__ieee754_sqrtf>
 801b766:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801b76a:	eddf 7a30 	vldr	s15, [pc, #192]	; 801b82c <__ieee754_acosf+0x1e8>
 801b76e:	eee0 7a07 	vfma.f32	s15, s0, s14
 801b772:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801b776:	ee77 7a80 	vadd.f32	s15, s15, s0
 801b77a:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 801b830 <__ieee754_acosf+0x1ec>
 801b77e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801b782:	e771      	b.n	801b668 <__ieee754_acosf+0x24>
 801b784:	ee39 8a40 	vsub.f32	s16, s18, s0
 801b788:	ee28 8a27 	vmul.f32	s16, s16, s15
 801b78c:	eeb0 0a48 	vmov.f32	s0, s16
 801b790:	f000 f98e 	bl	801bab0 <__ieee754_sqrtf>
 801b794:	eee8 ca2d 	vfma.f32	s25, s16, s27
 801b798:	eee8 aa0d 	vfma.f32	s21, s16, s26
 801b79c:	eeac ca88 	vfma.f32	s24, s25, s16
 801b7a0:	eeaa aa88 	vfma.f32	s20, s21, s16
 801b7a4:	eeec ba08 	vfma.f32	s23, s24, s16
 801b7a8:	ee10 3a10 	vmov	r3, s0
 801b7ac:	eeab ba88 	vfma.f32	s22, s23, s16
 801b7b0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801b7b4:	f023 030f 	bic.w	r3, r3, #15
 801b7b8:	eeea 9a08 	vfma.f32	s19, s20, s16
 801b7bc:	ee07 3a90 	vmov	s15, r3
 801b7c0:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801b7c4:	eeb0 6a48 	vmov.f32	s12, s16
 801b7c8:	eea7 6ae7 	vfms.f32	s12, s15, s15
 801b7cc:	eea9 9a88 	vfma.f32	s18, s19, s16
 801b7d0:	ee70 6a27 	vadd.f32	s13, s0, s15
 801b7d4:	ee68 8a88 	vmul.f32	s17, s17, s16
 801b7d8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801b7dc:	eec8 6a89 	vdiv.f32	s13, s17, s18
 801b7e0:	eea0 7a26 	vfma.f32	s14, s0, s13
 801b7e4:	ee37 0a87 	vadd.f32	s0, s15, s14
 801b7e8:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b7ec:	e73c      	b.n	801b668 <__ieee754_acosf+0x24>
 801b7ee:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801b834 <__ieee754_acosf+0x1f0>
 801b7f2:	e739      	b.n	801b668 <__ieee754_acosf+0x24>
 801b7f4:	00000000 	.word	0x00000000
 801b7f8:	40490fdb 	.word	0x40490fdb
 801b7fc:	3811ef08 	.word	0x3811ef08
 801b800:	3a4f7f04 	.word	0x3a4f7f04
 801b804:	bf303361 	.word	0xbf303361
 801b808:	33a22168 	.word	0x33a22168
 801b80c:	bd241146 	.word	0xbd241146
 801b810:	3e4e0aa8 	.word	0x3e4e0aa8
 801b814:	bea6b090 	.word	0xbea6b090
 801b818:	3e2aaaab 	.word	0x3e2aaaab
 801b81c:	3d9dc62e 	.word	0x3d9dc62e
 801b820:	4001572d 	.word	0x4001572d
 801b824:	c019d139 	.word	0xc019d139
 801b828:	3fc90fda 	.word	0x3fc90fda
 801b82c:	b3a22168 	.word	0xb3a22168
 801b830:	40490fda 	.word	0x40490fda
 801b834:	3fc90fdb 	.word	0x3fc90fdb

0801b838 <__ieee754_rem_pio2f>:
 801b838:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b83a:	ee10 6a10 	vmov	r6, s0
 801b83e:	4b8e      	ldr	r3, [pc, #568]	; (801ba78 <__ieee754_rem_pio2f+0x240>)
 801b840:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801b844:	429d      	cmp	r5, r3
 801b846:	b087      	sub	sp, #28
 801b848:	eef0 7a40 	vmov.f32	s15, s0
 801b84c:	4604      	mov	r4, r0
 801b84e:	dc05      	bgt.n	801b85c <__ieee754_rem_pio2f+0x24>
 801b850:	2300      	movs	r3, #0
 801b852:	ed80 0a00 	vstr	s0, [r0]
 801b856:	6043      	str	r3, [r0, #4]
 801b858:	2000      	movs	r0, #0
 801b85a:	e01a      	b.n	801b892 <__ieee754_rem_pio2f+0x5a>
 801b85c:	4b87      	ldr	r3, [pc, #540]	; (801ba7c <__ieee754_rem_pio2f+0x244>)
 801b85e:	429d      	cmp	r5, r3
 801b860:	dc46      	bgt.n	801b8f0 <__ieee754_rem_pio2f+0xb8>
 801b862:	2e00      	cmp	r6, #0
 801b864:	ed9f 0a86 	vldr	s0, [pc, #536]	; 801ba80 <__ieee754_rem_pio2f+0x248>
 801b868:	4b86      	ldr	r3, [pc, #536]	; (801ba84 <__ieee754_rem_pio2f+0x24c>)
 801b86a:	f025 050f 	bic.w	r5, r5, #15
 801b86e:	dd1f      	ble.n	801b8b0 <__ieee754_rem_pio2f+0x78>
 801b870:	429d      	cmp	r5, r3
 801b872:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801b876:	d00e      	beq.n	801b896 <__ieee754_rem_pio2f+0x5e>
 801b878:	ed9f 7a83 	vldr	s14, [pc, #524]	; 801ba88 <__ieee754_rem_pio2f+0x250>
 801b87c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801b880:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801b884:	ed80 0a00 	vstr	s0, [r0]
 801b888:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b88c:	2001      	movs	r0, #1
 801b88e:	edc4 7a01 	vstr	s15, [r4, #4]
 801b892:	b007      	add	sp, #28
 801b894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b896:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801ba8c <__ieee754_rem_pio2f+0x254>
 801b89a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801ba90 <__ieee754_rem_pio2f+0x258>
 801b89e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801b8a2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801b8a6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801b8aa:	edc0 6a00 	vstr	s13, [r0]
 801b8ae:	e7eb      	b.n	801b888 <__ieee754_rem_pio2f+0x50>
 801b8b0:	429d      	cmp	r5, r3
 801b8b2:	ee77 7a80 	vadd.f32	s15, s15, s0
 801b8b6:	d00e      	beq.n	801b8d6 <__ieee754_rem_pio2f+0x9e>
 801b8b8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801ba88 <__ieee754_rem_pio2f+0x250>
 801b8bc:	ee37 0a87 	vadd.f32	s0, s15, s14
 801b8c0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801b8c4:	ed80 0a00 	vstr	s0, [r0]
 801b8c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b8cc:	f04f 30ff 	mov.w	r0, #4294967295
 801b8d0:	edc4 7a01 	vstr	s15, [r4, #4]
 801b8d4:	e7dd      	b.n	801b892 <__ieee754_rem_pio2f+0x5a>
 801b8d6:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801ba8c <__ieee754_rem_pio2f+0x254>
 801b8da:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 801ba90 <__ieee754_rem_pio2f+0x258>
 801b8de:	ee77 7a80 	vadd.f32	s15, s15, s0
 801b8e2:	ee77 6a87 	vadd.f32	s13, s15, s14
 801b8e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801b8ea:	edc0 6a00 	vstr	s13, [r0]
 801b8ee:	e7eb      	b.n	801b8c8 <__ieee754_rem_pio2f+0x90>
 801b8f0:	4b68      	ldr	r3, [pc, #416]	; (801ba94 <__ieee754_rem_pio2f+0x25c>)
 801b8f2:	429d      	cmp	r5, r3
 801b8f4:	dc72      	bgt.n	801b9dc <__ieee754_rem_pio2f+0x1a4>
 801b8f6:	f000 fee1 	bl	801c6bc <fabsf>
 801b8fa:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801ba98 <__ieee754_rem_pio2f+0x260>
 801b8fe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801b902:	eee0 7a07 	vfma.f32	s15, s0, s14
 801b906:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b90a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b90e:	ee17 0a90 	vmov	r0, s15
 801b912:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801ba80 <__ieee754_rem_pio2f+0x248>
 801b916:	eea7 0a67 	vfms.f32	s0, s14, s15
 801b91a:	281f      	cmp	r0, #31
 801b91c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801ba88 <__ieee754_rem_pio2f+0x250>
 801b920:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b924:	eeb1 6a47 	vneg.f32	s12, s14
 801b928:	ee70 6a67 	vsub.f32	s13, s0, s15
 801b92c:	ee16 2a90 	vmov	r2, s13
 801b930:	dc1c      	bgt.n	801b96c <__ieee754_rem_pio2f+0x134>
 801b932:	495a      	ldr	r1, [pc, #360]	; (801ba9c <__ieee754_rem_pio2f+0x264>)
 801b934:	1e47      	subs	r7, r0, #1
 801b936:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801b93a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801b93e:	428b      	cmp	r3, r1
 801b940:	d014      	beq.n	801b96c <__ieee754_rem_pio2f+0x134>
 801b942:	6022      	str	r2, [r4, #0]
 801b944:	ed94 7a00 	vldr	s14, [r4]
 801b948:	ee30 0a47 	vsub.f32	s0, s0, s14
 801b94c:	2e00      	cmp	r6, #0
 801b94e:	ee30 0a67 	vsub.f32	s0, s0, s15
 801b952:	ed84 0a01 	vstr	s0, [r4, #4]
 801b956:	da9c      	bge.n	801b892 <__ieee754_rem_pio2f+0x5a>
 801b958:	eeb1 7a47 	vneg.f32	s14, s14
 801b95c:	eeb1 0a40 	vneg.f32	s0, s0
 801b960:	ed84 7a00 	vstr	s14, [r4]
 801b964:	ed84 0a01 	vstr	s0, [r4, #4]
 801b968:	4240      	negs	r0, r0
 801b96a:	e792      	b.n	801b892 <__ieee754_rem_pio2f+0x5a>
 801b96c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801b970:	15eb      	asrs	r3, r5, #23
 801b972:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801b976:	2d08      	cmp	r5, #8
 801b978:	dde3      	ble.n	801b942 <__ieee754_rem_pio2f+0x10a>
 801b97a:	eddf 7a44 	vldr	s15, [pc, #272]	; 801ba8c <__ieee754_rem_pio2f+0x254>
 801b97e:	eef0 6a40 	vmov.f32	s13, s0
 801b982:	eee6 6a27 	vfma.f32	s13, s12, s15
 801b986:	ee30 0a66 	vsub.f32	s0, s0, s13
 801b98a:	eea6 0a27 	vfma.f32	s0, s12, s15
 801b98e:	eddf 7a40 	vldr	s15, [pc, #256]	; 801ba90 <__ieee754_rem_pio2f+0x258>
 801b992:	ee97 0a27 	vfnms.f32	s0, s14, s15
 801b996:	ee76 5ac0 	vsub.f32	s11, s13, s0
 801b99a:	eef0 7a40 	vmov.f32	s15, s0
 801b99e:	ee15 2a90 	vmov	r2, s11
 801b9a2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801b9a6:	1a5b      	subs	r3, r3, r1
 801b9a8:	2b19      	cmp	r3, #25
 801b9aa:	dc04      	bgt.n	801b9b6 <__ieee754_rem_pio2f+0x17e>
 801b9ac:	edc4 5a00 	vstr	s11, [r4]
 801b9b0:	eeb0 0a66 	vmov.f32	s0, s13
 801b9b4:	e7c6      	b.n	801b944 <__ieee754_rem_pio2f+0x10c>
 801b9b6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801baa0 <__ieee754_rem_pio2f+0x268>
 801b9ba:	eeb0 0a66 	vmov.f32	s0, s13
 801b9be:	eea6 0a25 	vfma.f32	s0, s12, s11
 801b9c2:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801b9c6:	eddf 6a37 	vldr	s13, [pc, #220]	; 801baa4 <__ieee754_rem_pio2f+0x26c>
 801b9ca:	eee6 7a25 	vfma.f32	s15, s12, s11
 801b9ce:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801b9d2:	ee30 7a67 	vsub.f32	s14, s0, s15
 801b9d6:	ed84 7a00 	vstr	s14, [r4]
 801b9da:	e7b3      	b.n	801b944 <__ieee754_rem_pio2f+0x10c>
 801b9dc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801b9e0:	db06      	blt.n	801b9f0 <__ieee754_rem_pio2f+0x1b8>
 801b9e2:	ee70 7a40 	vsub.f32	s15, s0, s0
 801b9e6:	edc0 7a01 	vstr	s15, [r0, #4]
 801b9ea:	edc0 7a00 	vstr	s15, [r0]
 801b9ee:	e733      	b.n	801b858 <__ieee754_rem_pio2f+0x20>
 801b9f0:	15ea      	asrs	r2, r5, #23
 801b9f2:	3a86      	subs	r2, #134	; 0x86
 801b9f4:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801b9f8:	ee07 3a90 	vmov	s15, r3
 801b9fc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801ba00:	eddf 6a29 	vldr	s13, [pc, #164]	; 801baa8 <__ieee754_rem_pio2f+0x270>
 801ba04:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ba08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ba0c:	ed8d 7a03 	vstr	s14, [sp, #12]
 801ba10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ba14:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801ba18:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ba1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ba20:	ed8d 7a04 	vstr	s14, [sp, #16]
 801ba24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ba28:	eef5 7a40 	vcmp.f32	s15, #0.0
 801ba2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba30:	edcd 7a05 	vstr	s15, [sp, #20]
 801ba34:	d11e      	bne.n	801ba74 <__ieee754_rem_pio2f+0x23c>
 801ba36:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801ba3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba3e:	bf14      	ite	ne
 801ba40:	2302      	movne	r3, #2
 801ba42:	2301      	moveq	r3, #1
 801ba44:	4919      	ldr	r1, [pc, #100]	; (801baac <__ieee754_rem_pio2f+0x274>)
 801ba46:	9101      	str	r1, [sp, #4]
 801ba48:	2102      	movs	r1, #2
 801ba4a:	9100      	str	r1, [sp, #0]
 801ba4c:	a803      	add	r0, sp, #12
 801ba4e:	4621      	mov	r1, r4
 801ba50:	f000 f892 	bl	801bb78 <__kernel_rem_pio2f>
 801ba54:	2e00      	cmp	r6, #0
 801ba56:	f6bf af1c 	bge.w	801b892 <__ieee754_rem_pio2f+0x5a>
 801ba5a:	edd4 7a00 	vldr	s15, [r4]
 801ba5e:	eef1 7a67 	vneg.f32	s15, s15
 801ba62:	edc4 7a00 	vstr	s15, [r4]
 801ba66:	edd4 7a01 	vldr	s15, [r4, #4]
 801ba6a:	eef1 7a67 	vneg.f32	s15, s15
 801ba6e:	edc4 7a01 	vstr	s15, [r4, #4]
 801ba72:	e779      	b.n	801b968 <__ieee754_rem_pio2f+0x130>
 801ba74:	2303      	movs	r3, #3
 801ba76:	e7e5      	b.n	801ba44 <__ieee754_rem_pio2f+0x20c>
 801ba78:	3f490fd8 	.word	0x3f490fd8
 801ba7c:	4016cbe3 	.word	0x4016cbe3
 801ba80:	3fc90f80 	.word	0x3fc90f80
 801ba84:	3fc90fd0 	.word	0x3fc90fd0
 801ba88:	37354443 	.word	0x37354443
 801ba8c:	37354400 	.word	0x37354400
 801ba90:	2e85a308 	.word	0x2e85a308
 801ba94:	43490f80 	.word	0x43490f80
 801ba98:	3f22f984 	.word	0x3f22f984
 801ba9c:	0801d4d8 	.word	0x0801d4d8
 801baa0:	2e85a300 	.word	0x2e85a300
 801baa4:	248d3132 	.word	0x248d3132
 801baa8:	43800000 	.word	0x43800000
 801baac:	0801d558 	.word	0x0801d558

0801bab0 <__ieee754_sqrtf>:
 801bab0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801bab4:	4770      	bx	lr
	...

0801bab8 <__kernel_cosf>:
 801bab8:	ee10 3a10 	vmov	r3, s0
 801babc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801bac0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801bac4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801bac8:	da05      	bge.n	801bad6 <__kernel_cosf+0x1e>
 801baca:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801bace:	ee17 2a90 	vmov	r2, s15
 801bad2:	2a00      	cmp	r2, #0
 801bad4:	d03d      	beq.n	801bb52 <__kernel_cosf+0x9a>
 801bad6:	ee60 5a00 	vmul.f32	s11, s0, s0
 801bada:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801bb58 <__kernel_cosf+0xa0>
 801bade:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801bb5c <__kernel_cosf+0xa4>
 801bae2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 801bb60 <__kernel_cosf+0xa8>
 801bae6:	4a1f      	ldr	r2, [pc, #124]	; (801bb64 <__kernel_cosf+0xac>)
 801bae8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801baec:	4293      	cmp	r3, r2
 801baee:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801bb68 <__kernel_cosf+0xb0>
 801baf2:	eee7 7a25 	vfma.f32	s15, s14, s11
 801baf6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 801bb6c <__kernel_cosf+0xb4>
 801bafa:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801bafe:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801bb70 <__kernel_cosf+0xb8>
 801bb02:	eee7 7a25 	vfma.f32	s15, s14, s11
 801bb06:	eeb0 7a66 	vmov.f32	s14, s13
 801bb0a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801bb0e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801bb12:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801bb16:	ee67 6a25 	vmul.f32	s13, s14, s11
 801bb1a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 801bb1e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801bb22:	dc04      	bgt.n	801bb2e <__kernel_cosf+0x76>
 801bb24:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801bb28:	ee36 0a47 	vsub.f32	s0, s12, s14
 801bb2c:	4770      	bx	lr
 801bb2e:	4a11      	ldr	r2, [pc, #68]	; (801bb74 <__kernel_cosf+0xbc>)
 801bb30:	4293      	cmp	r3, r2
 801bb32:	bfda      	itte	le
 801bb34:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801bb38:	ee06 3a90 	vmovle	s13, r3
 801bb3c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 801bb40:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801bb44:	ee36 0a66 	vsub.f32	s0, s12, s13
 801bb48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bb4c:	ee30 0a67 	vsub.f32	s0, s0, s15
 801bb50:	4770      	bx	lr
 801bb52:	eeb0 0a46 	vmov.f32	s0, s12
 801bb56:	4770      	bx	lr
 801bb58:	ad47d74e 	.word	0xad47d74e
 801bb5c:	310f74f6 	.word	0x310f74f6
 801bb60:	3d2aaaab 	.word	0x3d2aaaab
 801bb64:	3e999999 	.word	0x3e999999
 801bb68:	b493f27c 	.word	0xb493f27c
 801bb6c:	37d00d01 	.word	0x37d00d01
 801bb70:	bab60b61 	.word	0xbab60b61
 801bb74:	3f480000 	.word	0x3f480000

0801bb78 <__kernel_rem_pio2f>:
 801bb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb7c:	ed2d 8b04 	vpush	{d8-d9}
 801bb80:	b0d7      	sub	sp, #348	; 0x15c
 801bb82:	4616      	mov	r6, r2
 801bb84:	4698      	mov	r8, r3
 801bb86:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801bb88:	4bbb      	ldr	r3, [pc, #748]	; (801be78 <__kernel_rem_pio2f+0x300>)
 801bb8a:	9001      	str	r0, [sp, #4]
 801bb8c:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801bb90:	1d33      	adds	r3, r6, #4
 801bb92:	460d      	mov	r5, r1
 801bb94:	f108 39ff 	add.w	r9, r8, #4294967295
 801bb98:	db29      	blt.n	801bbee <__kernel_rem_pio2f+0x76>
 801bb9a:	1ef1      	subs	r1, r6, #3
 801bb9c:	bf48      	it	mi
 801bb9e:	1d31      	addmi	r1, r6, #4
 801bba0:	10c9      	asrs	r1, r1, #3
 801bba2:	1c4c      	adds	r4, r1, #1
 801bba4:	00e3      	lsls	r3, r4, #3
 801bba6:	9302      	str	r3, [sp, #8]
 801bba8:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801bbaa:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 801be88 <__kernel_rem_pio2f+0x310>
 801bbae:	eba1 0009 	sub.w	r0, r1, r9
 801bbb2:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 801bbb6:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 801bbba:	eb07 0c09 	add.w	ip, r7, r9
 801bbbe:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 801bbc2:	2300      	movs	r3, #0
 801bbc4:	4563      	cmp	r3, ip
 801bbc6:	dd14      	ble.n	801bbf2 <__kernel_rem_pio2f+0x7a>
 801bbc8:	ab1a      	add	r3, sp, #104	; 0x68
 801bbca:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 801bbce:	46cc      	mov	ip, r9
 801bbd0:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 801bbd4:	f1c8 0b01 	rsb	fp, r8, #1
 801bbd8:	eb0b 020c 	add.w	r2, fp, ip
 801bbdc:	4297      	cmp	r7, r2
 801bbde:	db27      	blt.n	801bc30 <__kernel_rem_pio2f+0xb8>
 801bbe0:	f8dd e004 	ldr.w	lr, [sp, #4]
 801bbe4:	eddf 7aa8 	vldr	s15, [pc, #672]	; 801be88 <__kernel_rem_pio2f+0x310>
 801bbe8:	4618      	mov	r0, r3
 801bbea:	2200      	movs	r2, #0
 801bbec:	e016      	b.n	801bc1c <__kernel_rem_pio2f+0xa4>
 801bbee:	2100      	movs	r1, #0
 801bbf0:	e7d7      	b.n	801bba2 <__kernel_rem_pio2f+0x2a>
 801bbf2:	42d8      	cmn	r0, r3
 801bbf4:	bf5d      	ittte	pl
 801bbf6:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 801bbfa:	ee07 2a90 	vmovpl	s15, r2
 801bbfe:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801bc02:	eef0 7a47 	vmovmi.f32	s15, s14
 801bc06:	ecea 7a01 	vstmia	sl!, {s15}
 801bc0a:	3301      	adds	r3, #1
 801bc0c:	e7da      	b.n	801bbc4 <__kernel_rem_pio2f+0x4c>
 801bc0e:	ecfe 6a01 	vldmia	lr!, {s13}
 801bc12:	ed90 7a00 	vldr	s14, [r0]
 801bc16:	eee6 7a87 	vfma.f32	s15, s13, s14
 801bc1a:	3201      	adds	r2, #1
 801bc1c:	454a      	cmp	r2, r9
 801bc1e:	f1a0 0004 	sub.w	r0, r0, #4
 801bc22:	ddf4      	ble.n	801bc0e <__kernel_rem_pio2f+0x96>
 801bc24:	ecea 7a01 	vstmia	sl!, {s15}
 801bc28:	3304      	adds	r3, #4
 801bc2a:	f10c 0c01 	add.w	ip, ip, #1
 801bc2e:	e7d3      	b.n	801bbd8 <__kernel_rem_pio2f+0x60>
 801bc30:	ab06      	add	r3, sp, #24
 801bc32:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 801bc36:	9304      	str	r3, [sp, #16]
 801bc38:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801bc3a:	eddf 8a92 	vldr	s17, [pc, #584]	; 801be84 <__kernel_rem_pio2f+0x30c>
 801bc3e:	ed9f 9a90 	vldr	s18, [pc, #576]	; 801be80 <__kernel_rem_pio2f+0x308>
 801bc42:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801bc46:	9303      	str	r3, [sp, #12]
 801bc48:	46ba      	mov	sl, r7
 801bc4a:	ab56      	add	r3, sp, #344	; 0x158
 801bc4c:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801bc50:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 801bc54:	ab06      	add	r3, sp, #24
 801bc56:	4618      	mov	r0, r3
 801bc58:	4652      	mov	r2, sl
 801bc5a:	2a00      	cmp	r2, #0
 801bc5c:	dc51      	bgt.n	801bd02 <__kernel_rem_pio2f+0x18a>
 801bc5e:	4620      	mov	r0, r4
 801bc60:	9305      	str	r3, [sp, #20]
 801bc62:	f000 fd7b 	bl	801c75c <scalbnf>
 801bc66:	eeb0 8a40 	vmov.f32	s16, s0
 801bc6a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801bc6e:	ee28 0a00 	vmul.f32	s0, s16, s0
 801bc72:	f000 fd2b 	bl	801c6cc <floorf>
 801bc76:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801bc7a:	eea0 8a67 	vfms.f32	s16, s0, s15
 801bc7e:	2c00      	cmp	r4, #0
 801bc80:	9b05      	ldr	r3, [sp, #20]
 801bc82:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801bc86:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801bc8a:	edcd 7a00 	vstr	s15, [sp]
 801bc8e:	ee38 8a40 	vsub.f32	s16, s16, s0
 801bc92:	dd4b      	ble.n	801bd2c <__kernel_rem_pio2f+0x1b4>
 801bc94:	f10a 3cff 	add.w	ip, sl, #4294967295
 801bc98:	aa06      	add	r2, sp, #24
 801bc9a:	f1c4 0e08 	rsb	lr, r4, #8
 801bc9e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801bca2:	ee17 1a90 	vmov	r1, s15
 801bca6:	fa42 f00e 	asr.w	r0, r2, lr
 801bcaa:	4401      	add	r1, r0
 801bcac:	9100      	str	r1, [sp, #0]
 801bcae:	fa00 f00e 	lsl.w	r0, r0, lr
 801bcb2:	a906      	add	r1, sp, #24
 801bcb4:	1a12      	subs	r2, r2, r0
 801bcb6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801bcba:	f1c4 0007 	rsb	r0, r4, #7
 801bcbe:	fa42 fb00 	asr.w	fp, r2, r0
 801bcc2:	f1bb 0f00 	cmp.w	fp, #0
 801bcc6:	dd43      	ble.n	801bd50 <__kernel_rem_pio2f+0x1d8>
 801bcc8:	9a00      	ldr	r2, [sp, #0]
 801bcca:	f04f 0e00 	mov.w	lr, #0
 801bcce:	3201      	adds	r2, #1
 801bcd0:	9200      	str	r2, [sp, #0]
 801bcd2:	4670      	mov	r0, lr
 801bcd4:	45f2      	cmp	sl, lr
 801bcd6:	dc6c      	bgt.n	801bdb2 <__kernel_rem_pio2f+0x23a>
 801bcd8:	2c00      	cmp	r4, #0
 801bcda:	dd04      	ble.n	801bce6 <__kernel_rem_pio2f+0x16e>
 801bcdc:	2c01      	cmp	r4, #1
 801bcde:	d079      	beq.n	801bdd4 <__kernel_rem_pio2f+0x25c>
 801bce0:	2c02      	cmp	r4, #2
 801bce2:	f000 8082 	beq.w	801bdea <__kernel_rem_pio2f+0x272>
 801bce6:	f1bb 0f02 	cmp.w	fp, #2
 801bcea:	d131      	bne.n	801bd50 <__kernel_rem_pio2f+0x1d8>
 801bcec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801bcf0:	ee30 8a48 	vsub.f32	s16, s0, s16
 801bcf4:	b360      	cbz	r0, 801bd50 <__kernel_rem_pio2f+0x1d8>
 801bcf6:	4620      	mov	r0, r4
 801bcf8:	f000 fd30 	bl	801c75c <scalbnf>
 801bcfc:	ee38 8a40 	vsub.f32	s16, s16, s0
 801bd00:	e026      	b.n	801bd50 <__kernel_rem_pio2f+0x1d8>
 801bd02:	ee60 7a28 	vmul.f32	s15, s0, s17
 801bd06:	3a01      	subs	r2, #1
 801bd08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bd0c:	a942      	add	r1, sp, #264	; 0x108
 801bd0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bd12:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801bd16:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801bd1a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801bd1e:	eca0 0a01 	vstmia	r0!, {s0}
 801bd22:	ed9c 0a00 	vldr	s0, [ip]
 801bd26:	ee37 0a80 	vadd.f32	s0, s15, s0
 801bd2a:	e796      	b.n	801bc5a <__kernel_rem_pio2f+0xe2>
 801bd2c:	d107      	bne.n	801bd3e <__kernel_rem_pio2f+0x1c6>
 801bd2e:	f10a 32ff 	add.w	r2, sl, #4294967295
 801bd32:	a906      	add	r1, sp, #24
 801bd34:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801bd38:	ea4f 2b22 	mov.w	fp, r2, asr #8
 801bd3c:	e7c1      	b.n	801bcc2 <__kernel_rem_pio2f+0x14a>
 801bd3e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801bd42:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801bd46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd4a:	da2f      	bge.n	801bdac <__kernel_rem_pio2f+0x234>
 801bd4c:	f04f 0b00 	mov.w	fp, #0
 801bd50:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801bd54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd58:	f040 8098 	bne.w	801be8c <__kernel_rem_pio2f+0x314>
 801bd5c:	f10a 33ff 	add.w	r3, sl, #4294967295
 801bd60:	469c      	mov	ip, r3
 801bd62:	2200      	movs	r2, #0
 801bd64:	45bc      	cmp	ip, r7
 801bd66:	da48      	bge.n	801bdfa <__kernel_rem_pio2f+0x282>
 801bd68:	2a00      	cmp	r2, #0
 801bd6a:	d05f      	beq.n	801be2c <__kernel_rem_pio2f+0x2b4>
 801bd6c:	aa06      	add	r2, sp, #24
 801bd6e:	3c08      	subs	r4, #8
 801bd70:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801bd74:	2900      	cmp	r1, #0
 801bd76:	d07d      	beq.n	801be74 <__kernel_rem_pio2f+0x2fc>
 801bd78:	4620      	mov	r0, r4
 801bd7a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801bd7e:	9301      	str	r3, [sp, #4]
 801bd80:	f000 fcec 	bl	801c75c <scalbnf>
 801bd84:	9b01      	ldr	r3, [sp, #4]
 801bd86:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 801be84 <__kernel_rem_pio2f+0x30c>
 801bd8a:	4619      	mov	r1, r3
 801bd8c:	2900      	cmp	r1, #0
 801bd8e:	f280 80af 	bge.w	801bef0 <__kernel_rem_pio2f+0x378>
 801bd92:	4618      	mov	r0, r3
 801bd94:	2400      	movs	r4, #0
 801bd96:	2800      	cmp	r0, #0
 801bd98:	f2c0 80d0 	blt.w	801bf3c <__kernel_rem_pio2f+0x3c4>
 801bd9c:	a942      	add	r1, sp, #264	; 0x108
 801bd9e:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 801bda2:	4a36      	ldr	r2, [pc, #216]	; (801be7c <__kernel_rem_pio2f+0x304>)
 801bda4:	eddf 7a38 	vldr	s15, [pc, #224]	; 801be88 <__kernel_rem_pio2f+0x310>
 801bda8:	2100      	movs	r1, #0
 801bdaa:	e0bb      	b.n	801bf24 <__kernel_rem_pio2f+0x3ac>
 801bdac:	f04f 0b02 	mov.w	fp, #2
 801bdb0:	e78a      	b.n	801bcc8 <__kernel_rem_pio2f+0x150>
 801bdb2:	681a      	ldr	r2, [r3, #0]
 801bdb4:	b948      	cbnz	r0, 801bdca <__kernel_rem_pio2f+0x252>
 801bdb6:	b11a      	cbz	r2, 801bdc0 <__kernel_rem_pio2f+0x248>
 801bdb8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801bdbc:	601a      	str	r2, [r3, #0]
 801bdbe:	2201      	movs	r2, #1
 801bdc0:	f10e 0e01 	add.w	lr, lr, #1
 801bdc4:	3304      	adds	r3, #4
 801bdc6:	4610      	mov	r0, r2
 801bdc8:	e784      	b.n	801bcd4 <__kernel_rem_pio2f+0x15c>
 801bdca:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801bdce:	601a      	str	r2, [r3, #0]
 801bdd0:	4602      	mov	r2, r0
 801bdd2:	e7f5      	b.n	801bdc0 <__kernel_rem_pio2f+0x248>
 801bdd4:	f10a 3cff 	add.w	ip, sl, #4294967295
 801bdd8:	ab06      	add	r3, sp, #24
 801bdda:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801bdde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801bde2:	aa06      	add	r2, sp, #24
 801bde4:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 801bde8:	e77d      	b.n	801bce6 <__kernel_rem_pio2f+0x16e>
 801bdea:	f10a 3cff 	add.w	ip, sl, #4294967295
 801bdee:	ab06      	add	r3, sp, #24
 801bdf0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801bdf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801bdf8:	e7f3      	b.n	801bde2 <__kernel_rem_pio2f+0x26a>
 801bdfa:	a906      	add	r1, sp, #24
 801bdfc:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 801be00:	f10c 3cff 	add.w	ip, ip, #4294967295
 801be04:	4302      	orrs	r2, r0
 801be06:	e7ad      	b.n	801bd64 <__kernel_rem_pio2f+0x1ec>
 801be08:	3001      	adds	r0, #1
 801be0a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801be0e:	2a00      	cmp	r2, #0
 801be10:	d0fa      	beq.n	801be08 <__kernel_rem_pio2f+0x290>
 801be12:	a91a      	add	r1, sp, #104	; 0x68
 801be14:	eb0a 0208 	add.w	r2, sl, r8
 801be18:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801be1c:	f10a 0301 	add.w	r3, sl, #1
 801be20:	eb0a 0100 	add.w	r1, sl, r0
 801be24:	4299      	cmp	r1, r3
 801be26:	da04      	bge.n	801be32 <__kernel_rem_pio2f+0x2ba>
 801be28:	468a      	mov	sl, r1
 801be2a:	e70e      	b.n	801bc4a <__kernel_rem_pio2f+0xd2>
 801be2c:	9b04      	ldr	r3, [sp, #16]
 801be2e:	2001      	movs	r0, #1
 801be30:	e7eb      	b.n	801be0a <__kernel_rem_pio2f+0x292>
 801be32:	9803      	ldr	r0, [sp, #12]
 801be34:	f8dd c004 	ldr.w	ip, [sp, #4]
 801be38:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801be3c:	9000      	str	r0, [sp, #0]
 801be3e:	ee07 0a90 	vmov	s15, r0
 801be42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801be46:	2000      	movs	r0, #0
 801be48:	ece2 7a01 	vstmia	r2!, {s15}
 801be4c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801be88 <__kernel_rem_pio2f+0x310>
 801be50:	4696      	mov	lr, r2
 801be52:	4548      	cmp	r0, r9
 801be54:	dd06      	ble.n	801be64 <__kernel_rem_pio2f+0x2ec>
 801be56:	a842      	add	r0, sp, #264	; 0x108
 801be58:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801be5c:	edc0 7a00 	vstr	s15, [r0]
 801be60:	3301      	adds	r3, #1
 801be62:	e7df      	b.n	801be24 <__kernel_rem_pio2f+0x2ac>
 801be64:	ecfc 6a01 	vldmia	ip!, {s13}
 801be68:	ed3e 7a01 	vldmdb	lr!, {s14}
 801be6c:	3001      	adds	r0, #1
 801be6e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801be72:	e7ee      	b.n	801be52 <__kernel_rem_pio2f+0x2da>
 801be74:	3b01      	subs	r3, #1
 801be76:	e779      	b.n	801bd6c <__kernel_rem_pio2f+0x1f4>
 801be78:	0801d89c 	.word	0x0801d89c
 801be7c:	0801d870 	.word	0x0801d870
 801be80:	43800000 	.word	0x43800000
 801be84:	3b800000 	.word	0x3b800000
 801be88:	00000000 	.word	0x00000000
 801be8c:	9b02      	ldr	r3, [sp, #8]
 801be8e:	eeb0 0a48 	vmov.f32	s0, s16
 801be92:	1b98      	subs	r0, r3, r6
 801be94:	f000 fc62 	bl	801c75c <scalbnf>
 801be98:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801be80 <__kernel_rem_pio2f+0x308>
 801be9c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801bea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bea4:	db1b      	blt.n	801bede <__kernel_rem_pio2f+0x366>
 801bea6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801be84 <__kernel_rem_pio2f+0x30c>
 801beaa:	ee60 7a27 	vmul.f32	s15, s0, s15
 801beae:	aa06      	add	r2, sp, #24
 801beb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801beb4:	a906      	add	r1, sp, #24
 801beb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801beba:	3408      	adds	r4, #8
 801bebc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801bec0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bec4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801bec8:	ee10 3a10 	vmov	r3, s0
 801becc:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801bed0:	ee17 2a90 	vmov	r2, s15
 801bed4:	f10a 0301 	add.w	r3, sl, #1
 801bed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801bedc:	e74c      	b.n	801bd78 <__kernel_rem_pio2f+0x200>
 801bede:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801bee2:	aa06      	add	r2, sp, #24
 801bee4:	ee10 3a10 	vmov	r3, s0
 801bee8:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801beec:	4653      	mov	r3, sl
 801beee:	e743      	b.n	801bd78 <__kernel_rem_pio2f+0x200>
 801bef0:	aa42      	add	r2, sp, #264	; 0x108
 801bef2:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801bef6:	aa06      	add	r2, sp, #24
 801bef8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801befc:	9201      	str	r2, [sp, #4]
 801befe:	ee07 2a90 	vmov	s15, r2
 801bf02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bf06:	3901      	subs	r1, #1
 801bf08:	ee67 7a80 	vmul.f32	s15, s15, s0
 801bf0c:	ee20 0a07 	vmul.f32	s0, s0, s14
 801bf10:	edc0 7a00 	vstr	s15, [r0]
 801bf14:	e73a      	b.n	801bd8c <__kernel_rem_pio2f+0x214>
 801bf16:	ecf2 6a01 	vldmia	r2!, {s13}
 801bf1a:	ecb6 7a01 	vldmia	r6!, {s14}
 801bf1e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801bf22:	3101      	adds	r1, #1
 801bf24:	42b9      	cmp	r1, r7
 801bf26:	dc01      	bgt.n	801bf2c <__kernel_rem_pio2f+0x3b4>
 801bf28:	428c      	cmp	r4, r1
 801bf2a:	daf4      	bge.n	801bf16 <__kernel_rem_pio2f+0x39e>
 801bf2c:	aa56      	add	r2, sp, #344	; 0x158
 801bf2e:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 801bf32:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801bf36:	3801      	subs	r0, #1
 801bf38:	3401      	adds	r4, #1
 801bf3a:	e72c      	b.n	801bd96 <__kernel_rem_pio2f+0x21e>
 801bf3c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801bf3e:	2a02      	cmp	r2, #2
 801bf40:	dc0a      	bgt.n	801bf58 <__kernel_rem_pio2f+0x3e0>
 801bf42:	2a00      	cmp	r2, #0
 801bf44:	dc61      	bgt.n	801c00a <__kernel_rem_pio2f+0x492>
 801bf46:	d03c      	beq.n	801bfc2 <__kernel_rem_pio2f+0x44a>
 801bf48:	9b00      	ldr	r3, [sp, #0]
 801bf4a:	f003 0007 	and.w	r0, r3, #7
 801bf4e:	b057      	add	sp, #348	; 0x15c
 801bf50:	ecbd 8b04 	vpop	{d8-d9}
 801bf54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf58:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801bf5a:	2a03      	cmp	r2, #3
 801bf5c:	d1f4      	bne.n	801bf48 <__kernel_rem_pio2f+0x3d0>
 801bf5e:	aa2e      	add	r2, sp, #184	; 0xb8
 801bf60:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801bf64:	4608      	mov	r0, r1
 801bf66:	461c      	mov	r4, r3
 801bf68:	2c00      	cmp	r4, #0
 801bf6a:	f1a0 0004 	sub.w	r0, r0, #4
 801bf6e:	dc59      	bgt.n	801c024 <__kernel_rem_pio2f+0x4ac>
 801bf70:	4618      	mov	r0, r3
 801bf72:	2801      	cmp	r0, #1
 801bf74:	f1a1 0104 	sub.w	r1, r1, #4
 801bf78:	dc64      	bgt.n	801c044 <__kernel_rem_pio2f+0x4cc>
 801bf7a:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 801be88 <__kernel_rem_pio2f+0x310>
 801bf7e:	2b01      	cmp	r3, #1
 801bf80:	dc70      	bgt.n	801c064 <__kernel_rem_pio2f+0x4ec>
 801bf82:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 801bf86:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801bf8a:	f1bb 0f00 	cmp.w	fp, #0
 801bf8e:	d172      	bne.n	801c076 <__kernel_rem_pio2f+0x4fe>
 801bf90:	edc5 6a00 	vstr	s13, [r5]
 801bf94:	ed85 7a01 	vstr	s14, [r5, #4]
 801bf98:	edc5 7a02 	vstr	s15, [r5, #8]
 801bf9c:	e7d4      	b.n	801bf48 <__kernel_rem_pio2f+0x3d0>
 801bf9e:	aa2e      	add	r2, sp, #184	; 0xb8
 801bfa0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801bfa4:	ed91 7a00 	vldr	s14, [r1]
 801bfa8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801bfac:	3b01      	subs	r3, #1
 801bfae:	2b00      	cmp	r3, #0
 801bfb0:	daf5      	bge.n	801bf9e <__kernel_rem_pio2f+0x426>
 801bfb2:	f1bb 0f00 	cmp.w	fp, #0
 801bfb6:	d001      	beq.n	801bfbc <__kernel_rem_pio2f+0x444>
 801bfb8:	eef1 7a67 	vneg.f32	s15, s15
 801bfbc:	edc5 7a00 	vstr	s15, [r5]
 801bfc0:	e7c2      	b.n	801bf48 <__kernel_rem_pio2f+0x3d0>
 801bfc2:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 801be88 <__kernel_rem_pio2f+0x310>
 801bfc6:	e7f2      	b.n	801bfae <__kernel_rem_pio2f+0x436>
 801bfc8:	aa2e      	add	r2, sp, #184	; 0xb8
 801bfca:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801bfce:	edd0 7a00 	vldr	s15, [r0]
 801bfd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 801bfd6:	3901      	subs	r1, #1
 801bfd8:	2900      	cmp	r1, #0
 801bfda:	daf5      	bge.n	801bfc8 <__kernel_rem_pio2f+0x450>
 801bfdc:	f1bb 0f00 	cmp.w	fp, #0
 801bfe0:	d017      	beq.n	801c012 <__kernel_rem_pio2f+0x49a>
 801bfe2:	eef1 7a47 	vneg.f32	s15, s14
 801bfe6:	edc5 7a00 	vstr	s15, [r5]
 801bfea:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 801bfee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bff2:	a82f      	add	r0, sp, #188	; 0xbc
 801bff4:	2101      	movs	r1, #1
 801bff6:	428b      	cmp	r3, r1
 801bff8:	da0e      	bge.n	801c018 <__kernel_rem_pio2f+0x4a0>
 801bffa:	f1bb 0f00 	cmp.w	fp, #0
 801bffe:	d001      	beq.n	801c004 <__kernel_rem_pio2f+0x48c>
 801c000:	eef1 7a67 	vneg.f32	s15, s15
 801c004:	edc5 7a01 	vstr	s15, [r5, #4]
 801c008:	e79e      	b.n	801bf48 <__kernel_rem_pio2f+0x3d0>
 801c00a:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 801be88 <__kernel_rem_pio2f+0x310>
 801c00e:	4619      	mov	r1, r3
 801c010:	e7e2      	b.n	801bfd8 <__kernel_rem_pio2f+0x460>
 801c012:	eef0 7a47 	vmov.f32	s15, s14
 801c016:	e7e6      	b.n	801bfe6 <__kernel_rem_pio2f+0x46e>
 801c018:	ecb0 7a01 	vldmia	r0!, {s14}
 801c01c:	3101      	adds	r1, #1
 801c01e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c022:	e7e8      	b.n	801bff6 <__kernel_rem_pio2f+0x47e>
 801c024:	edd0 7a00 	vldr	s15, [r0]
 801c028:	edd0 6a01 	vldr	s13, [r0, #4]
 801c02c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801c030:	3c01      	subs	r4, #1
 801c032:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c036:	ed80 7a00 	vstr	s14, [r0]
 801c03a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c03e:	edc0 7a01 	vstr	s15, [r0, #4]
 801c042:	e791      	b.n	801bf68 <__kernel_rem_pio2f+0x3f0>
 801c044:	edd1 7a00 	vldr	s15, [r1]
 801c048:	edd1 6a01 	vldr	s13, [r1, #4]
 801c04c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801c050:	3801      	subs	r0, #1
 801c052:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c056:	ed81 7a00 	vstr	s14, [r1]
 801c05a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c05e:	edc1 7a01 	vstr	s15, [r1, #4]
 801c062:	e786      	b.n	801bf72 <__kernel_rem_pio2f+0x3fa>
 801c064:	aa2e      	add	r2, sp, #184	; 0xb8
 801c066:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801c06a:	ed91 7a00 	vldr	s14, [r1]
 801c06e:	3b01      	subs	r3, #1
 801c070:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c074:	e783      	b.n	801bf7e <__kernel_rem_pio2f+0x406>
 801c076:	eef1 6a66 	vneg.f32	s13, s13
 801c07a:	eeb1 7a47 	vneg.f32	s14, s14
 801c07e:	edc5 6a00 	vstr	s13, [r5]
 801c082:	ed85 7a01 	vstr	s14, [r5, #4]
 801c086:	eef1 7a67 	vneg.f32	s15, s15
 801c08a:	e785      	b.n	801bf98 <__kernel_rem_pio2f+0x420>

0801c08c <__kernel_sinf>:
 801c08c:	ee10 3a10 	vmov	r3, s0
 801c090:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c094:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801c098:	da04      	bge.n	801c0a4 <__kernel_sinf+0x18>
 801c09a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801c09e:	ee17 3a90 	vmov	r3, s15
 801c0a2:	b35b      	cbz	r3, 801c0fc <__kernel_sinf+0x70>
 801c0a4:	ee20 7a00 	vmul.f32	s14, s0, s0
 801c0a8:	eddf 7a15 	vldr	s15, [pc, #84]	; 801c100 <__kernel_sinf+0x74>
 801c0ac:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801c104 <__kernel_sinf+0x78>
 801c0b0:	eea7 6a27 	vfma.f32	s12, s14, s15
 801c0b4:	eddf 7a14 	vldr	s15, [pc, #80]	; 801c108 <__kernel_sinf+0x7c>
 801c0b8:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c0bc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801c10c <__kernel_sinf+0x80>
 801c0c0:	eea7 6a87 	vfma.f32	s12, s15, s14
 801c0c4:	eddf 7a12 	vldr	s15, [pc, #72]	; 801c110 <__kernel_sinf+0x84>
 801c0c8:	ee60 6a07 	vmul.f32	s13, s0, s14
 801c0cc:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c0d0:	b930      	cbnz	r0, 801c0e0 <__kernel_sinf+0x54>
 801c0d2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801c114 <__kernel_sinf+0x88>
 801c0d6:	eea7 6a27 	vfma.f32	s12, s14, s15
 801c0da:	eea6 0a26 	vfma.f32	s0, s12, s13
 801c0de:	4770      	bx	lr
 801c0e0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801c0e4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801c0e8:	eee0 7a86 	vfma.f32	s15, s1, s12
 801c0ec:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801c0f0:	eddf 7a09 	vldr	s15, [pc, #36]	; 801c118 <__kernel_sinf+0x8c>
 801c0f4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801c0f8:	ee30 0a60 	vsub.f32	s0, s0, s1
 801c0fc:	4770      	bx	lr
 801c0fe:	bf00      	nop
 801c100:	2f2ec9d3 	.word	0x2f2ec9d3
 801c104:	b2d72f34 	.word	0xb2d72f34
 801c108:	3638ef1b 	.word	0x3638ef1b
 801c10c:	b9500d01 	.word	0xb9500d01
 801c110:	3c088889 	.word	0x3c088889
 801c114:	be2aaaab 	.word	0xbe2aaaab
 801c118:	3e2aaaab 	.word	0x3e2aaaab
 801c11c:	00000000 	.word	0x00000000

0801c120 <atan>:
 801c120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c124:	ec55 4b10 	vmov	r4, r5, d0
 801c128:	4bc3      	ldr	r3, [pc, #780]	; (801c438 <atan+0x318>)
 801c12a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801c12e:	429e      	cmp	r6, r3
 801c130:	46ab      	mov	fp, r5
 801c132:	dd18      	ble.n	801c166 <atan+0x46>
 801c134:	4bc1      	ldr	r3, [pc, #772]	; (801c43c <atan+0x31c>)
 801c136:	429e      	cmp	r6, r3
 801c138:	dc01      	bgt.n	801c13e <atan+0x1e>
 801c13a:	d109      	bne.n	801c150 <atan+0x30>
 801c13c:	b144      	cbz	r4, 801c150 <atan+0x30>
 801c13e:	4622      	mov	r2, r4
 801c140:	462b      	mov	r3, r5
 801c142:	4620      	mov	r0, r4
 801c144:	4629      	mov	r1, r5
 801c146:	f7e4 f8a9 	bl	800029c <__adddf3>
 801c14a:	4604      	mov	r4, r0
 801c14c:	460d      	mov	r5, r1
 801c14e:	e006      	b.n	801c15e <atan+0x3e>
 801c150:	f1bb 0f00 	cmp.w	fp, #0
 801c154:	f300 8131 	bgt.w	801c3ba <atan+0x29a>
 801c158:	a59b      	add	r5, pc, #620	; (adr r5, 801c3c8 <atan+0x2a8>)
 801c15a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c15e:	ec45 4b10 	vmov	d0, r4, r5
 801c162:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c166:	4bb6      	ldr	r3, [pc, #728]	; (801c440 <atan+0x320>)
 801c168:	429e      	cmp	r6, r3
 801c16a:	dc14      	bgt.n	801c196 <atan+0x76>
 801c16c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801c170:	429e      	cmp	r6, r3
 801c172:	dc0d      	bgt.n	801c190 <atan+0x70>
 801c174:	a396      	add	r3, pc, #600	; (adr r3, 801c3d0 <atan+0x2b0>)
 801c176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c17a:	ee10 0a10 	vmov	r0, s0
 801c17e:	4629      	mov	r1, r5
 801c180:	f7e4 f88c 	bl	800029c <__adddf3>
 801c184:	4baf      	ldr	r3, [pc, #700]	; (801c444 <atan+0x324>)
 801c186:	2200      	movs	r2, #0
 801c188:	f7e4 fcce 	bl	8000b28 <__aeabi_dcmpgt>
 801c18c:	2800      	cmp	r0, #0
 801c18e:	d1e6      	bne.n	801c15e <atan+0x3e>
 801c190:	f04f 3aff 	mov.w	sl, #4294967295
 801c194:	e02b      	b.n	801c1ee <atan+0xce>
 801c196:	f000 f963 	bl	801c460 <fabs>
 801c19a:	4bab      	ldr	r3, [pc, #684]	; (801c448 <atan+0x328>)
 801c19c:	429e      	cmp	r6, r3
 801c19e:	ec55 4b10 	vmov	r4, r5, d0
 801c1a2:	f300 80bf 	bgt.w	801c324 <atan+0x204>
 801c1a6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801c1aa:	429e      	cmp	r6, r3
 801c1ac:	f300 80a0 	bgt.w	801c2f0 <atan+0x1d0>
 801c1b0:	ee10 2a10 	vmov	r2, s0
 801c1b4:	ee10 0a10 	vmov	r0, s0
 801c1b8:	462b      	mov	r3, r5
 801c1ba:	4629      	mov	r1, r5
 801c1bc:	f7e4 f86e 	bl	800029c <__adddf3>
 801c1c0:	4ba0      	ldr	r3, [pc, #640]	; (801c444 <atan+0x324>)
 801c1c2:	2200      	movs	r2, #0
 801c1c4:	f7e4 f868 	bl	8000298 <__aeabi_dsub>
 801c1c8:	2200      	movs	r2, #0
 801c1ca:	4606      	mov	r6, r0
 801c1cc:	460f      	mov	r7, r1
 801c1ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c1d2:	4620      	mov	r0, r4
 801c1d4:	4629      	mov	r1, r5
 801c1d6:	f7e4 f861 	bl	800029c <__adddf3>
 801c1da:	4602      	mov	r2, r0
 801c1dc:	460b      	mov	r3, r1
 801c1de:	4630      	mov	r0, r6
 801c1e0:	4639      	mov	r1, r7
 801c1e2:	f7e4 fb3b 	bl	800085c <__aeabi_ddiv>
 801c1e6:	f04f 0a00 	mov.w	sl, #0
 801c1ea:	4604      	mov	r4, r0
 801c1ec:	460d      	mov	r5, r1
 801c1ee:	4622      	mov	r2, r4
 801c1f0:	462b      	mov	r3, r5
 801c1f2:	4620      	mov	r0, r4
 801c1f4:	4629      	mov	r1, r5
 801c1f6:	f7e4 fa07 	bl	8000608 <__aeabi_dmul>
 801c1fa:	4602      	mov	r2, r0
 801c1fc:	460b      	mov	r3, r1
 801c1fe:	4680      	mov	r8, r0
 801c200:	4689      	mov	r9, r1
 801c202:	f7e4 fa01 	bl	8000608 <__aeabi_dmul>
 801c206:	a374      	add	r3, pc, #464	; (adr r3, 801c3d8 <atan+0x2b8>)
 801c208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c20c:	4606      	mov	r6, r0
 801c20e:	460f      	mov	r7, r1
 801c210:	f7e4 f9fa 	bl	8000608 <__aeabi_dmul>
 801c214:	a372      	add	r3, pc, #456	; (adr r3, 801c3e0 <atan+0x2c0>)
 801c216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c21a:	f7e4 f83f 	bl	800029c <__adddf3>
 801c21e:	4632      	mov	r2, r6
 801c220:	463b      	mov	r3, r7
 801c222:	f7e4 f9f1 	bl	8000608 <__aeabi_dmul>
 801c226:	a370      	add	r3, pc, #448	; (adr r3, 801c3e8 <atan+0x2c8>)
 801c228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c22c:	f7e4 f836 	bl	800029c <__adddf3>
 801c230:	4632      	mov	r2, r6
 801c232:	463b      	mov	r3, r7
 801c234:	f7e4 f9e8 	bl	8000608 <__aeabi_dmul>
 801c238:	a36d      	add	r3, pc, #436	; (adr r3, 801c3f0 <atan+0x2d0>)
 801c23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c23e:	f7e4 f82d 	bl	800029c <__adddf3>
 801c242:	4632      	mov	r2, r6
 801c244:	463b      	mov	r3, r7
 801c246:	f7e4 f9df 	bl	8000608 <__aeabi_dmul>
 801c24a:	a36b      	add	r3, pc, #428	; (adr r3, 801c3f8 <atan+0x2d8>)
 801c24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c250:	f7e4 f824 	bl	800029c <__adddf3>
 801c254:	4632      	mov	r2, r6
 801c256:	463b      	mov	r3, r7
 801c258:	f7e4 f9d6 	bl	8000608 <__aeabi_dmul>
 801c25c:	a368      	add	r3, pc, #416	; (adr r3, 801c400 <atan+0x2e0>)
 801c25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c262:	f7e4 f81b 	bl	800029c <__adddf3>
 801c266:	4642      	mov	r2, r8
 801c268:	464b      	mov	r3, r9
 801c26a:	f7e4 f9cd 	bl	8000608 <__aeabi_dmul>
 801c26e:	a366      	add	r3, pc, #408	; (adr r3, 801c408 <atan+0x2e8>)
 801c270:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c274:	4680      	mov	r8, r0
 801c276:	4689      	mov	r9, r1
 801c278:	4630      	mov	r0, r6
 801c27a:	4639      	mov	r1, r7
 801c27c:	f7e4 f9c4 	bl	8000608 <__aeabi_dmul>
 801c280:	a363      	add	r3, pc, #396	; (adr r3, 801c410 <atan+0x2f0>)
 801c282:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c286:	f7e4 f807 	bl	8000298 <__aeabi_dsub>
 801c28a:	4632      	mov	r2, r6
 801c28c:	463b      	mov	r3, r7
 801c28e:	f7e4 f9bb 	bl	8000608 <__aeabi_dmul>
 801c292:	a361      	add	r3, pc, #388	; (adr r3, 801c418 <atan+0x2f8>)
 801c294:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c298:	f7e3 fffe 	bl	8000298 <__aeabi_dsub>
 801c29c:	4632      	mov	r2, r6
 801c29e:	463b      	mov	r3, r7
 801c2a0:	f7e4 f9b2 	bl	8000608 <__aeabi_dmul>
 801c2a4:	a35e      	add	r3, pc, #376	; (adr r3, 801c420 <atan+0x300>)
 801c2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2aa:	f7e3 fff5 	bl	8000298 <__aeabi_dsub>
 801c2ae:	4632      	mov	r2, r6
 801c2b0:	463b      	mov	r3, r7
 801c2b2:	f7e4 f9a9 	bl	8000608 <__aeabi_dmul>
 801c2b6:	a35c      	add	r3, pc, #368	; (adr r3, 801c428 <atan+0x308>)
 801c2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2bc:	f7e3 ffec 	bl	8000298 <__aeabi_dsub>
 801c2c0:	4632      	mov	r2, r6
 801c2c2:	463b      	mov	r3, r7
 801c2c4:	f7e4 f9a0 	bl	8000608 <__aeabi_dmul>
 801c2c8:	4602      	mov	r2, r0
 801c2ca:	460b      	mov	r3, r1
 801c2cc:	4640      	mov	r0, r8
 801c2ce:	4649      	mov	r1, r9
 801c2d0:	f7e3 ffe4 	bl	800029c <__adddf3>
 801c2d4:	4622      	mov	r2, r4
 801c2d6:	462b      	mov	r3, r5
 801c2d8:	f7e4 f996 	bl	8000608 <__aeabi_dmul>
 801c2dc:	f1ba 3fff 	cmp.w	sl, #4294967295
 801c2e0:	4602      	mov	r2, r0
 801c2e2:	460b      	mov	r3, r1
 801c2e4:	d14b      	bne.n	801c37e <atan+0x25e>
 801c2e6:	4620      	mov	r0, r4
 801c2e8:	4629      	mov	r1, r5
 801c2ea:	f7e3 ffd5 	bl	8000298 <__aeabi_dsub>
 801c2ee:	e72c      	b.n	801c14a <atan+0x2a>
 801c2f0:	ee10 0a10 	vmov	r0, s0
 801c2f4:	4b53      	ldr	r3, [pc, #332]	; (801c444 <atan+0x324>)
 801c2f6:	2200      	movs	r2, #0
 801c2f8:	4629      	mov	r1, r5
 801c2fa:	f7e3 ffcd 	bl	8000298 <__aeabi_dsub>
 801c2fe:	4b51      	ldr	r3, [pc, #324]	; (801c444 <atan+0x324>)
 801c300:	4606      	mov	r6, r0
 801c302:	460f      	mov	r7, r1
 801c304:	2200      	movs	r2, #0
 801c306:	4620      	mov	r0, r4
 801c308:	4629      	mov	r1, r5
 801c30a:	f7e3 ffc7 	bl	800029c <__adddf3>
 801c30e:	4602      	mov	r2, r0
 801c310:	460b      	mov	r3, r1
 801c312:	4630      	mov	r0, r6
 801c314:	4639      	mov	r1, r7
 801c316:	f7e4 faa1 	bl	800085c <__aeabi_ddiv>
 801c31a:	f04f 0a01 	mov.w	sl, #1
 801c31e:	4604      	mov	r4, r0
 801c320:	460d      	mov	r5, r1
 801c322:	e764      	b.n	801c1ee <atan+0xce>
 801c324:	4b49      	ldr	r3, [pc, #292]	; (801c44c <atan+0x32c>)
 801c326:	429e      	cmp	r6, r3
 801c328:	da1d      	bge.n	801c366 <atan+0x246>
 801c32a:	ee10 0a10 	vmov	r0, s0
 801c32e:	4b48      	ldr	r3, [pc, #288]	; (801c450 <atan+0x330>)
 801c330:	2200      	movs	r2, #0
 801c332:	4629      	mov	r1, r5
 801c334:	f7e3 ffb0 	bl	8000298 <__aeabi_dsub>
 801c338:	4b45      	ldr	r3, [pc, #276]	; (801c450 <atan+0x330>)
 801c33a:	4606      	mov	r6, r0
 801c33c:	460f      	mov	r7, r1
 801c33e:	2200      	movs	r2, #0
 801c340:	4620      	mov	r0, r4
 801c342:	4629      	mov	r1, r5
 801c344:	f7e4 f960 	bl	8000608 <__aeabi_dmul>
 801c348:	4b3e      	ldr	r3, [pc, #248]	; (801c444 <atan+0x324>)
 801c34a:	2200      	movs	r2, #0
 801c34c:	f7e3 ffa6 	bl	800029c <__adddf3>
 801c350:	4602      	mov	r2, r0
 801c352:	460b      	mov	r3, r1
 801c354:	4630      	mov	r0, r6
 801c356:	4639      	mov	r1, r7
 801c358:	f7e4 fa80 	bl	800085c <__aeabi_ddiv>
 801c35c:	f04f 0a02 	mov.w	sl, #2
 801c360:	4604      	mov	r4, r0
 801c362:	460d      	mov	r5, r1
 801c364:	e743      	b.n	801c1ee <atan+0xce>
 801c366:	462b      	mov	r3, r5
 801c368:	ee10 2a10 	vmov	r2, s0
 801c36c:	4939      	ldr	r1, [pc, #228]	; (801c454 <atan+0x334>)
 801c36e:	2000      	movs	r0, #0
 801c370:	f7e4 fa74 	bl	800085c <__aeabi_ddiv>
 801c374:	f04f 0a03 	mov.w	sl, #3
 801c378:	4604      	mov	r4, r0
 801c37a:	460d      	mov	r5, r1
 801c37c:	e737      	b.n	801c1ee <atan+0xce>
 801c37e:	4b36      	ldr	r3, [pc, #216]	; (801c458 <atan+0x338>)
 801c380:	4e36      	ldr	r6, [pc, #216]	; (801c45c <atan+0x33c>)
 801c382:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801c386:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801c38a:	e9da 2300 	ldrd	r2, r3, [sl]
 801c38e:	f7e3 ff83 	bl	8000298 <__aeabi_dsub>
 801c392:	4622      	mov	r2, r4
 801c394:	462b      	mov	r3, r5
 801c396:	f7e3 ff7f 	bl	8000298 <__aeabi_dsub>
 801c39a:	4602      	mov	r2, r0
 801c39c:	460b      	mov	r3, r1
 801c39e:	e9d6 0100 	ldrd	r0, r1, [r6]
 801c3a2:	f7e3 ff79 	bl	8000298 <__aeabi_dsub>
 801c3a6:	f1bb 0f00 	cmp.w	fp, #0
 801c3aa:	4604      	mov	r4, r0
 801c3ac:	460d      	mov	r5, r1
 801c3ae:	f6bf aed6 	bge.w	801c15e <atan+0x3e>
 801c3b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c3b6:	461d      	mov	r5, r3
 801c3b8:	e6d1      	b.n	801c15e <atan+0x3e>
 801c3ba:	a51d      	add	r5, pc, #116	; (adr r5, 801c430 <atan+0x310>)
 801c3bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c3c0:	e6cd      	b.n	801c15e <atan+0x3e>
 801c3c2:	bf00      	nop
 801c3c4:	f3af 8000 	nop.w
 801c3c8:	54442d18 	.word	0x54442d18
 801c3cc:	bff921fb 	.word	0xbff921fb
 801c3d0:	8800759c 	.word	0x8800759c
 801c3d4:	7e37e43c 	.word	0x7e37e43c
 801c3d8:	e322da11 	.word	0xe322da11
 801c3dc:	3f90ad3a 	.word	0x3f90ad3a
 801c3e0:	24760deb 	.word	0x24760deb
 801c3e4:	3fa97b4b 	.word	0x3fa97b4b
 801c3e8:	a0d03d51 	.word	0xa0d03d51
 801c3ec:	3fb10d66 	.word	0x3fb10d66
 801c3f0:	c54c206e 	.word	0xc54c206e
 801c3f4:	3fb745cd 	.word	0x3fb745cd
 801c3f8:	920083ff 	.word	0x920083ff
 801c3fc:	3fc24924 	.word	0x3fc24924
 801c400:	5555550d 	.word	0x5555550d
 801c404:	3fd55555 	.word	0x3fd55555
 801c408:	2c6a6c2f 	.word	0x2c6a6c2f
 801c40c:	bfa2b444 	.word	0xbfa2b444
 801c410:	52defd9a 	.word	0x52defd9a
 801c414:	3fadde2d 	.word	0x3fadde2d
 801c418:	af749a6d 	.word	0xaf749a6d
 801c41c:	3fb3b0f2 	.word	0x3fb3b0f2
 801c420:	fe231671 	.word	0xfe231671
 801c424:	3fbc71c6 	.word	0x3fbc71c6
 801c428:	9998ebc4 	.word	0x9998ebc4
 801c42c:	3fc99999 	.word	0x3fc99999
 801c430:	54442d18 	.word	0x54442d18
 801c434:	3ff921fb 	.word	0x3ff921fb
 801c438:	440fffff 	.word	0x440fffff
 801c43c:	7ff00000 	.word	0x7ff00000
 801c440:	3fdbffff 	.word	0x3fdbffff
 801c444:	3ff00000 	.word	0x3ff00000
 801c448:	3ff2ffff 	.word	0x3ff2ffff
 801c44c:	40038000 	.word	0x40038000
 801c450:	3ff80000 	.word	0x3ff80000
 801c454:	bff00000 	.word	0xbff00000
 801c458:	0801d8c8 	.word	0x0801d8c8
 801c45c:	0801d8a8 	.word	0x0801d8a8

0801c460 <fabs>:
 801c460:	ec51 0b10 	vmov	r0, r1, d0
 801c464:	ee10 2a10 	vmov	r2, s0
 801c468:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c46c:	ec43 2b10 	vmov	d0, r2, r3
 801c470:	4770      	bx	lr

0801c472 <finite>:
 801c472:	b082      	sub	sp, #8
 801c474:	ed8d 0b00 	vstr	d0, [sp]
 801c478:	9801      	ldr	r0, [sp, #4]
 801c47a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801c47e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801c482:	0fc0      	lsrs	r0, r0, #31
 801c484:	b002      	add	sp, #8
 801c486:	4770      	bx	lr

0801c488 <nan>:
 801c488:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801c490 <nan+0x8>
 801c48c:	4770      	bx	lr
 801c48e:	bf00      	nop
 801c490:	00000000 	.word	0x00000000
 801c494:	7ff80000 	.word	0x7ff80000

0801c498 <rint>:
 801c498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c49a:	ec51 0b10 	vmov	r0, r1, d0
 801c49e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c4a2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801c4a6:	2e13      	cmp	r6, #19
 801c4a8:	ee10 4a10 	vmov	r4, s0
 801c4ac:	460b      	mov	r3, r1
 801c4ae:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801c4b2:	dc58      	bgt.n	801c566 <rint+0xce>
 801c4b4:	2e00      	cmp	r6, #0
 801c4b6:	da2b      	bge.n	801c510 <rint+0x78>
 801c4b8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801c4bc:	4302      	orrs	r2, r0
 801c4be:	d023      	beq.n	801c508 <rint+0x70>
 801c4c0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801c4c4:	4302      	orrs	r2, r0
 801c4c6:	4254      	negs	r4, r2
 801c4c8:	4314      	orrs	r4, r2
 801c4ca:	0c4b      	lsrs	r3, r1, #17
 801c4cc:	0b24      	lsrs	r4, r4, #12
 801c4ce:	045b      	lsls	r3, r3, #17
 801c4d0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801c4d4:	ea44 0103 	orr.w	r1, r4, r3
 801c4d8:	4b32      	ldr	r3, [pc, #200]	; (801c5a4 <rint+0x10c>)
 801c4da:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801c4de:	e9d3 6700 	ldrd	r6, r7, [r3]
 801c4e2:	4602      	mov	r2, r0
 801c4e4:	460b      	mov	r3, r1
 801c4e6:	4630      	mov	r0, r6
 801c4e8:	4639      	mov	r1, r7
 801c4ea:	f7e3 fed7 	bl	800029c <__adddf3>
 801c4ee:	e9cd 0100 	strd	r0, r1, [sp]
 801c4f2:	463b      	mov	r3, r7
 801c4f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c4f8:	4632      	mov	r2, r6
 801c4fa:	f7e3 fecd 	bl	8000298 <__aeabi_dsub>
 801c4fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c502:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801c506:	4639      	mov	r1, r7
 801c508:	ec41 0b10 	vmov	d0, r0, r1
 801c50c:	b003      	add	sp, #12
 801c50e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c510:	4a25      	ldr	r2, [pc, #148]	; (801c5a8 <rint+0x110>)
 801c512:	4132      	asrs	r2, r6
 801c514:	ea01 0702 	and.w	r7, r1, r2
 801c518:	4307      	orrs	r7, r0
 801c51a:	d0f5      	beq.n	801c508 <rint+0x70>
 801c51c:	0851      	lsrs	r1, r2, #1
 801c51e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801c522:	4314      	orrs	r4, r2
 801c524:	d00c      	beq.n	801c540 <rint+0xa8>
 801c526:	ea23 0201 	bic.w	r2, r3, r1
 801c52a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801c52e:	2e13      	cmp	r6, #19
 801c530:	fa43 f606 	asr.w	r6, r3, r6
 801c534:	bf0c      	ite	eq
 801c536:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801c53a:	2400      	movne	r4, #0
 801c53c:	ea42 0306 	orr.w	r3, r2, r6
 801c540:	4918      	ldr	r1, [pc, #96]	; (801c5a4 <rint+0x10c>)
 801c542:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801c546:	4622      	mov	r2, r4
 801c548:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c54c:	4620      	mov	r0, r4
 801c54e:	4629      	mov	r1, r5
 801c550:	f7e3 fea4 	bl	800029c <__adddf3>
 801c554:	e9cd 0100 	strd	r0, r1, [sp]
 801c558:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c55c:	4622      	mov	r2, r4
 801c55e:	462b      	mov	r3, r5
 801c560:	f7e3 fe9a 	bl	8000298 <__aeabi_dsub>
 801c564:	e7d0      	b.n	801c508 <rint+0x70>
 801c566:	2e33      	cmp	r6, #51	; 0x33
 801c568:	dd07      	ble.n	801c57a <rint+0xe2>
 801c56a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801c56e:	d1cb      	bne.n	801c508 <rint+0x70>
 801c570:	ee10 2a10 	vmov	r2, s0
 801c574:	f7e3 fe92 	bl	800029c <__adddf3>
 801c578:	e7c6      	b.n	801c508 <rint+0x70>
 801c57a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801c57e:	f04f 36ff 	mov.w	r6, #4294967295
 801c582:	40d6      	lsrs	r6, r2
 801c584:	4230      	tst	r0, r6
 801c586:	d0bf      	beq.n	801c508 <rint+0x70>
 801c588:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 801c58c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801c590:	bf1f      	itttt	ne
 801c592:	ea24 0101 	bicne.w	r1, r4, r1
 801c596:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801c59a:	fa44 f202 	asrne.w	r2, r4, r2
 801c59e:	ea41 0402 	orrne.w	r4, r1, r2
 801c5a2:	e7cd      	b.n	801c540 <rint+0xa8>
 801c5a4:	0801d8e8 	.word	0x0801d8e8
 801c5a8:	000fffff 	.word	0x000fffff
 801c5ac:	00000000 	.word	0x00000000

0801c5b0 <scalbn>:
 801c5b0:	b570      	push	{r4, r5, r6, lr}
 801c5b2:	ec55 4b10 	vmov	r4, r5, d0
 801c5b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801c5ba:	4606      	mov	r6, r0
 801c5bc:	462b      	mov	r3, r5
 801c5be:	b99a      	cbnz	r2, 801c5e8 <scalbn+0x38>
 801c5c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801c5c4:	4323      	orrs	r3, r4
 801c5c6:	d036      	beq.n	801c636 <scalbn+0x86>
 801c5c8:	4b39      	ldr	r3, [pc, #228]	; (801c6b0 <scalbn+0x100>)
 801c5ca:	4629      	mov	r1, r5
 801c5cc:	ee10 0a10 	vmov	r0, s0
 801c5d0:	2200      	movs	r2, #0
 801c5d2:	f7e4 f819 	bl	8000608 <__aeabi_dmul>
 801c5d6:	4b37      	ldr	r3, [pc, #220]	; (801c6b4 <scalbn+0x104>)
 801c5d8:	429e      	cmp	r6, r3
 801c5da:	4604      	mov	r4, r0
 801c5dc:	460d      	mov	r5, r1
 801c5de:	da10      	bge.n	801c602 <scalbn+0x52>
 801c5e0:	a32b      	add	r3, pc, #172	; (adr r3, 801c690 <scalbn+0xe0>)
 801c5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5e6:	e03a      	b.n	801c65e <scalbn+0xae>
 801c5e8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801c5ec:	428a      	cmp	r2, r1
 801c5ee:	d10c      	bne.n	801c60a <scalbn+0x5a>
 801c5f0:	ee10 2a10 	vmov	r2, s0
 801c5f4:	4620      	mov	r0, r4
 801c5f6:	4629      	mov	r1, r5
 801c5f8:	f7e3 fe50 	bl	800029c <__adddf3>
 801c5fc:	4604      	mov	r4, r0
 801c5fe:	460d      	mov	r5, r1
 801c600:	e019      	b.n	801c636 <scalbn+0x86>
 801c602:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c606:	460b      	mov	r3, r1
 801c608:	3a36      	subs	r2, #54	; 0x36
 801c60a:	4432      	add	r2, r6
 801c60c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801c610:	428a      	cmp	r2, r1
 801c612:	dd08      	ble.n	801c626 <scalbn+0x76>
 801c614:	2d00      	cmp	r5, #0
 801c616:	a120      	add	r1, pc, #128	; (adr r1, 801c698 <scalbn+0xe8>)
 801c618:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c61c:	da1c      	bge.n	801c658 <scalbn+0xa8>
 801c61e:	a120      	add	r1, pc, #128	; (adr r1, 801c6a0 <scalbn+0xf0>)
 801c620:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c624:	e018      	b.n	801c658 <scalbn+0xa8>
 801c626:	2a00      	cmp	r2, #0
 801c628:	dd08      	ble.n	801c63c <scalbn+0x8c>
 801c62a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c62e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c632:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c636:	ec45 4b10 	vmov	d0, r4, r5
 801c63a:	bd70      	pop	{r4, r5, r6, pc}
 801c63c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801c640:	da19      	bge.n	801c676 <scalbn+0xc6>
 801c642:	f24c 3350 	movw	r3, #50000	; 0xc350
 801c646:	429e      	cmp	r6, r3
 801c648:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801c64c:	dd0a      	ble.n	801c664 <scalbn+0xb4>
 801c64e:	a112      	add	r1, pc, #72	; (adr r1, 801c698 <scalbn+0xe8>)
 801c650:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c654:	2b00      	cmp	r3, #0
 801c656:	d1e2      	bne.n	801c61e <scalbn+0x6e>
 801c658:	a30f      	add	r3, pc, #60	; (adr r3, 801c698 <scalbn+0xe8>)
 801c65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c65e:	f7e3 ffd3 	bl	8000608 <__aeabi_dmul>
 801c662:	e7cb      	b.n	801c5fc <scalbn+0x4c>
 801c664:	a10a      	add	r1, pc, #40	; (adr r1, 801c690 <scalbn+0xe0>)
 801c666:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c66a:	2b00      	cmp	r3, #0
 801c66c:	d0b8      	beq.n	801c5e0 <scalbn+0x30>
 801c66e:	a10e      	add	r1, pc, #56	; (adr r1, 801c6a8 <scalbn+0xf8>)
 801c670:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c674:	e7b4      	b.n	801c5e0 <scalbn+0x30>
 801c676:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c67a:	3236      	adds	r2, #54	; 0x36
 801c67c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c680:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801c684:	4620      	mov	r0, r4
 801c686:	4b0c      	ldr	r3, [pc, #48]	; (801c6b8 <scalbn+0x108>)
 801c688:	2200      	movs	r2, #0
 801c68a:	e7e8      	b.n	801c65e <scalbn+0xae>
 801c68c:	f3af 8000 	nop.w
 801c690:	c2f8f359 	.word	0xc2f8f359
 801c694:	01a56e1f 	.word	0x01a56e1f
 801c698:	8800759c 	.word	0x8800759c
 801c69c:	7e37e43c 	.word	0x7e37e43c
 801c6a0:	8800759c 	.word	0x8800759c
 801c6a4:	fe37e43c 	.word	0xfe37e43c
 801c6a8:	c2f8f359 	.word	0xc2f8f359
 801c6ac:	81a56e1f 	.word	0x81a56e1f
 801c6b0:	43500000 	.word	0x43500000
 801c6b4:	ffff3cb0 	.word	0xffff3cb0
 801c6b8:	3c900000 	.word	0x3c900000

0801c6bc <fabsf>:
 801c6bc:	ee10 3a10 	vmov	r3, s0
 801c6c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c6c4:	ee00 3a10 	vmov	s0, r3
 801c6c8:	4770      	bx	lr
	...

0801c6cc <floorf>:
 801c6cc:	ee10 3a10 	vmov	r3, s0
 801c6d0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801c6d4:	3a7f      	subs	r2, #127	; 0x7f
 801c6d6:	2a16      	cmp	r2, #22
 801c6d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801c6dc:	dc2a      	bgt.n	801c734 <floorf+0x68>
 801c6de:	2a00      	cmp	r2, #0
 801c6e0:	da11      	bge.n	801c706 <floorf+0x3a>
 801c6e2:	eddf 7a18 	vldr	s15, [pc, #96]	; 801c744 <floorf+0x78>
 801c6e6:	ee30 0a27 	vadd.f32	s0, s0, s15
 801c6ea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801c6ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c6f2:	dd05      	ble.n	801c700 <floorf+0x34>
 801c6f4:	2b00      	cmp	r3, #0
 801c6f6:	da23      	bge.n	801c740 <floorf+0x74>
 801c6f8:	4a13      	ldr	r2, [pc, #76]	; (801c748 <floorf+0x7c>)
 801c6fa:	2900      	cmp	r1, #0
 801c6fc:	bf18      	it	ne
 801c6fe:	4613      	movne	r3, r2
 801c700:	ee00 3a10 	vmov	s0, r3
 801c704:	4770      	bx	lr
 801c706:	4911      	ldr	r1, [pc, #68]	; (801c74c <floorf+0x80>)
 801c708:	4111      	asrs	r1, r2
 801c70a:	420b      	tst	r3, r1
 801c70c:	d0fa      	beq.n	801c704 <floorf+0x38>
 801c70e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801c744 <floorf+0x78>
 801c712:	ee30 0a27 	vadd.f32	s0, s0, s15
 801c716:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801c71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c71e:	ddef      	ble.n	801c700 <floorf+0x34>
 801c720:	2b00      	cmp	r3, #0
 801c722:	bfbe      	ittt	lt
 801c724:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801c728:	fa40 f202 	asrlt.w	r2, r0, r2
 801c72c:	189b      	addlt	r3, r3, r2
 801c72e:	ea23 0301 	bic.w	r3, r3, r1
 801c732:	e7e5      	b.n	801c700 <floorf+0x34>
 801c734:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801c738:	d3e4      	bcc.n	801c704 <floorf+0x38>
 801c73a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c73e:	4770      	bx	lr
 801c740:	2300      	movs	r3, #0
 801c742:	e7dd      	b.n	801c700 <floorf+0x34>
 801c744:	7149f2ca 	.word	0x7149f2ca
 801c748:	bf800000 	.word	0xbf800000
 801c74c:	007fffff 	.word	0x007fffff

0801c750 <nanf>:
 801c750:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801c758 <nanf+0x8>
 801c754:	4770      	bx	lr
 801c756:	bf00      	nop
 801c758:	7fc00000 	.word	0x7fc00000

0801c75c <scalbnf>:
 801c75c:	ee10 3a10 	vmov	r3, s0
 801c760:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801c764:	d025      	beq.n	801c7b2 <scalbnf+0x56>
 801c766:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801c76a:	d302      	bcc.n	801c772 <scalbnf+0x16>
 801c76c:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c770:	4770      	bx	lr
 801c772:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801c776:	d122      	bne.n	801c7be <scalbnf+0x62>
 801c778:	4b2a      	ldr	r3, [pc, #168]	; (801c824 <scalbnf+0xc8>)
 801c77a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801c828 <scalbnf+0xcc>
 801c77e:	4298      	cmp	r0, r3
 801c780:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c784:	db16      	blt.n	801c7b4 <scalbnf+0x58>
 801c786:	ee10 3a10 	vmov	r3, s0
 801c78a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801c78e:	3a19      	subs	r2, #25
 801c790:	4402      	add	r2, r0
 801c792:	2afe      	cmp	r2, #254	; 0xfe
 801c794:	dd15      	ble.n	801c7c2 <scalbnf+0x66>
 801c796:	ee10 3a10 	vmov	r3, s0
 801c79a:	eddf 7a24 	vldr	s15, [pc, #144]	; 801c82c <scalbnf+0xd0>
 801c79e:	eddf 6a24 	vldr	s13, [pc, #144]	; 801c830 <scalbnf+0xd4>
 801c7a2:	2b00      	cmp	r3, #0
 801c7a4:	eeb0 7a67 	vmov.f32	s14, s15
 801c7a8:	bfb8      	it	lt
 801c7aa:	eef0 7a66 	vmovlt.f32	s15, s13
 801c7ae:	ee27 0a27 	vmul.f32	s0, s14, s15
 801c7b2:	4770      	bx	lr
 801c7b4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801c834 <scalbnf+0xd8>
 801c7b8:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c7bc:	4770      	bx	lr
 801c7be:	0dd2      	lsrs	r2, r2, #23
 801c7c0:	e7e6      	b.n	801c790 <scalbnf+0x34>
 801c7c2:	2a00      	cmp	r2, #0
 801c7c4:	dd06      	ble.n	801c7d4 <scalbnf+0x78>
 801c7c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c7ca:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801c7ce:	ee00 3a10 	vmov	s0, r3
 801c7d2:	4770      	bx	lr
 801c7d4:	f112 0f16 	cmn.w	r2, #22
 801c7d8:	da1a      	bge.n	801c810 <scalbnf+0xb4>
 801c7da:	f24c 3350 	movw	r3, #50000	; 0xc350
 801c7de:	4298      	cmp	r0, r3
 801c7e0:	ee10 3a10 	vmov	r3, s0
 801c7e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801c7e8:	dd0a      	ble.n	801c800 <scalbnf+0xa4>
 801c7ea:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801c82c <scalbnf+0xd0>
 801c7ee:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801c830 <scalbnf+0xd4>
 801c7f2:	eef0 7a40 	vmov.f32	s15, s0
 801c7f6:	2b00      	cmp	r3, #0
 801c7f8:	bf18      	it	ne
 801c7fa:	eeb0 0a47 	vmovne.f32	s0, s14
 801c7fe:	e7db      	b.n	801c7b8 <scalbnf+0x5c>
 801c800:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801c834 <scalbnf+0xd8>
 801c804:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801c838 <scalbnf+0xdc>
 801c808:	eef0 7a40 	vmov.f32	s15, s0
 801c80c:	2b00      	cmp	r3, #0
 801c80e:	e7f3      	b.n	801c7f8 <scalbnf+0x9c>
 801c810:	3219      	adds	r2, #25
 801c812:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c816:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801c81a:	eddf 7a08 	vldr	s15, [pc, #32]	; 801c83c <scalbnf+0xe0>
 801c81e:	ee07 3a10 	vmov	s14, r3
 801c822:	e7c4      	b.n	801c7ae <scalbnf+0x52>
 801c824:	ffff3cb0 	.word	0xffff3cb0
 801c828:	4c000000 	.word	0x4c000000
 801c82c:	7149f2ca 	.word	0x7149f2ca
 801c830:	f149f2ca 	.word	0xf149f2ca
 801c834:	0da24260 	.word	0x0da24260
 801c838:	8da24260 	.word	0x8da24260
 801c83c:	33000000 	.word	0x33000000

0801c840 <_init>:
 801c840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c842:	bf00      	nop
 801c844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c846:	bc08      	pop	{r3}
 801c848:	469e      	mov	lr, r3
 801c84a:	4770      	bx	lr

0801c84c <_fini>:
 801c84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c84e:	bf00      	nop
 801c850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c852:	bc08      	pop	{r3}
 801c854:	469e      	mov	lr, r3
 801c856:	4770      	bx	lr
